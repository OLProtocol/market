"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cmdcode";
exports.ids = ["vendor-chunks/@cmdcode"];
exports.modules = {

/***/ "(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/buff-utils/dist/module.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Buff: () => (/* binding */ Buff),\n/* harmony export */   Encoder: () => (/* binding */ Encoder),\n/* harmony export */   Hex: () => (/* binding */ Hex),\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   Txt: () => (/* binding */ Txt),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   buffer: () => (/* binding */ buffer),\n/* harmony export */   util: () => (/* binding */ utils)\n/* harmony export */ });\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            const rounded = Math.floor(digitBase / to);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nconst base64 = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nconst base64url = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\n// base58 code\n// -----------\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nconst base58 = /* @__PURE__ */ genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nconst base58check = /* @__PURE__ */ (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nconst bech32 = /* @__PURE__ */ genBech32('bech32');\nconst bech32m = /* @__PURE__ */ genBech32('bech32m');\n\nconst Encoder = {\n    b58chk: {\n        encode: (data) => base58check(sha256).encode(data),\n        decode: (data) => base58check(sha256).decode(data)\n    },\n    base64: {\n        encode: (data) => base64.encode(data),\n        decode: (data) => base64.decode(data)\n    },\n    b64url: {\n        encode: (data) => base64url.encode(data),\n        decode: (data) => base64url.decode(data)\n    },\n    bech32: {\n        to_words: bech32.toWords,\n        to_bytes: bech32.fromWords,\n        encode: (prefix, words, limit = false) => {\n            return bech32.encode(prefix, words, limit);\n        },\n        decode: (data, limit = false) => {\n            const { prefix, words } = bech32.decode(data, limit);\n            return { prefix, words };\n        }\n    },\n    bech32m: {\n        to_words: bech32m.toWords,\n        to_bytes: bech32m.fromWords,\n        encode: (prefix, words, limit = false) => {\n            return bech32m.encode(prefix, words, limit);\n        },\n        decode: (data, limit = false) => {\n            const { prefix, words } = bech32m.decode(data, limit);\n            return { prefix, words };\n        }\n    }\n};\n\nfunction within_size(data, size) {\n    if (data.length > size) {\n        throw new TypeError(`Data is larger than array size: ${data.length} > ${size}`);\n    }\n}\nfunction is_hex$1(hex) {\n    if (hex.match(/[^a-fA-f0-9]/) !== null) {\n        throw new TypeError('Invalid characters in hex string: ' + hex);\n    }\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Length of hex string is invalid: ${hex.length}`);\n    }\n}\nfunction is_json(str) {\n    try {\n        JSON.parse(str);\n    }\n    catch {\n        throw new TypeError('JSON string is invalid!');\n    }\n}\nfunction is_safe_num(num) {\n    if (num > Number.MAX_SAFE_INTEGER) {\n        throw new TypeError('Number exceeds safe bounds!');\n    }\n}\nfunction is_prefix(actual, target) {\n    if (actual !== target) {\n        throw new TypeError(`Bech32 prefix does not match: ${actual} !== ${target}`);\n    }\n}\n\nvar assert = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    is_hex: is_hex$1,\n    is_json: is_json,\n    is_prefix: is_prefix,\n    is_safe_num: is_safe_num,\n    within_size: within_size\n});\n\nconst _0n = BigInt(0);\nconst _255n = BigInt(255);\nconst _256n = BigInt(256);\nfunction big_size(big) {\n    if (big <= 0xffn)\n        return 1;\n    if (big <= 0xffffn)\n        return 2;\n    if (big <= 0xffffffffn)\n        return 4;\n    if (big <= 0xffffffffffffffffn)\n        return 8;\n    if (big <= 0xffffffffffffffffffffffffffffffffn)\n        return 16;\n    if (big <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn) {\n        return 32;\n    }\n    throw new TypeError('Must specify a fixed buffer size for bigints greater than 32 bytes.');\n}\nfunction bigToBytes(big, size, endian = 'be') {\n    if (size === undefined)\n        size = big_size(big);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (big > _0n) {\n        const byte = big & _255n;\n        const num = Number(byte);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        big = (big - byte) / _256n;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToBig(bytes) {\n    let num = BigInt(0);\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * _256n) + BigInt(bytes[i]);\n    }\n    return BigInt(num);\n}\n\nfunction binToBytes(binary) {\n    const bins = binary.split('').map(Number);\n    if (bins.length % 8 !== 0) {\n        throw new Error(`Binary array is invalid length: ${binary.length}`);\n    }\n    const bytes = new Uint8Array(bins.length / 8);\n    for (let i = 0, ct = 0; i < bins.length; i += 8, ct++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j++) {\n            byte |= (bins[i + j] << (7 - j));\n        }\n        bytes[ct] = byte;\n    }\n    return bytes;\n}\nfunction bytesToBin(bytes) {\n    const bin = new Array(bytes.length * 8);\n    let count = 0;\n    for (const num of bytes) {\n        if (num > 255) {\n            throw new Error(`Invalid byte value: ${num}. Byte values must be between 0 and 255.`);\n        }\n        for (let i = 7; i >= 0; i--, count++) {\n            bin[count] = (num >> i) & 1;\n        }\n    }\n    return bin.join('');\n}\n\nfunction num_size(num) {\n    if (num <= 0xFF)\n        return 1;\n    if (num <= 0xFFFF)\n        return 2;\n    if (num <= 0xFFFFFFFF)\n        return 4;\n    throw new TypeError('Numbers larger than 4 bytes must specify a fixed size!');\n}\nfunction numToBytes(num, size, endian = 'be') {\n    if (size === undefined)\n        size = num_size(num);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (num > 0) {\n        const byte = num & 255;\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        num = (num - byte) / 256;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToNum(bytes) {\n    let num = 0;\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * 256) + bytes[i];\n        is_safe_num(num);\n    }\n    return num;\n}\n\nconst ec = new TextEncoder();\nconst dc = new TextDecoder();\nfunction strToBytes(str) {\n    return ec.encode(str);\n}\nfunction bytesToStr(bytes) {\n    return dc.decode(bytes);\n}\nfunction hex_size(hexstr, size) {\n    is_hex$1(hexstr);\n    const len = hexstr.length / 2;\n    if (size === undefined)\n        size = len;\n    if (len > size) {\n        throw new TypeError(`Hex string is larger than array size: ${len} > ${size}`);\n    }\n    return size;\n}\nfunction hexToBytes(hexstr, size, endian = 'le') {\n    size = hex_size(hexstr, size);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    for (let i = 0; i < hexstr.length; i += 2) {\n        const char = hexstr.substring(i, i + 2);\n        const num = parseInt(char, 16);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToHex(bytes) {\n    let chars = '';\n    for (let i = 0; i < bytes.length; i++) {\n        chars += bytes[i].toString(16).padStart(2, '0');\n    }\n    return chars;\n}\nconst Hex = {\n    encode: bytesToHex,\n    decode: hexToBytes\n};\nconst Txt = {\n    encode: strToBytes,\n    decode: bytesToStr\n};\n\nconst { getRandomValues } = crypto ?? globalThis.crypto ?? window.crypto;\nfunction random(size = 32) {\n    if (typeof getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(size));\n    }\n    throw new Error('Crypto module missing getRandomValues!');\n}\nfunction is_hex(input) {\n    if (input.match(/[^a-fA-f0-9]/) === null &&\n        input.length % 2 === 0) {\n        return true;\n    }\n    return false;\n}\nfunction is_bytes(input) {\n    if (typeof input === 'string' &&\n        is_hex(input)) {\n        return true;\n    }\n    else if (typeof input === 'number' ||\n        typeof input === 'bigint' ||\n        input instanceof Uint8Array) {\n        return true;\n    }\n    else if (Array.isArray(input) &&\n        input.every(e => typeof e === 'number')) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction set_buffer(data, size, endian = 'be') {\n    if (size === undefined)\n        size = data.length;\n    within_size(data, size);\n    const buffer = new Uint8Array(size).fill(0);\n    const offset = (endian === 'be') ? 0 : size - data.length;\n    buffer.set(data, offset);\n    return buffer;\n}\nfunction join_array(arr) {\n    let i, offset = 0;\n    const size = arr.reduce((len, arr) => len + arr.length, 0);\n    const buff = new Uint8Array(size);\n    for (i = 0; i < arr.length; i++) {\n        const a = arr[i];\n        buff.set(a, offset);\n        offset += a.length;\n    }\n    return buff;\n}\nfunction bigint_replacer(_, v) {\n    return typeof v === 'bigint'\n        ? `${v}n`\n        : v;\n}\nfunction bigint_reviver(_, v) {\n    return typeof v === 'string' && /n$/.test(v)\n        ? BigInt(v.slice(0, -1))\n        : v;\n}\nfunction parse_data$1(data_blob, chunk_size, total_size) {\n    const len = data_blob.length, count = total_size / chunk_size;\n    if (total_size % chunk_size !== 0) {\n        throw new TypeError(`Invalid parameters: ${total_size} % ${chunk_size} !== 0`);\n    }\n    if (len !== total_size) {\n        throw new TypeError(`Invalid data stream: ${len} !== ${total_size}`);\n    }\n    if (len % chunk_size !== 0) {\n        throw new TypeError(`Invalid data stream: ${len} % ${chunk_size} !== 0`);\n    }\n    const chunks = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const idx = i * chunk_size;\n        chunks[i] = data_blob.subarray(idx, idx + chunk_size);\n    }\n    return chunks;\n}\n\nvar utils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    bigint_replacer: bigint_replacer,\n    bigint_reviver: bigint_reviver,\n    is_bytes: is_bytes,\n    is_hex: is_hex,\n    join_array: join_array,\n    parse_data: parse_data$1,\n    random: random,\n    set_buffer: set_buffer\n});\n\nfunction buffer_data(data, size, endian) {\n    if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else if (data instanceof Uint8Array) {\n        return set_buffer(data, size, endian);\n    }\n    else if (Array.isArray(data)) {\n        const bytes = data.map(e => buffer_data(e, size, endian));\n        return join_array(bytes);\n    }\n    else if (typeof data === 'string') {\n        return hexToBytes(data, size, endian);\n    }\n    else if (typeof data === 'bigint') {\n        return bigToBytes(data, size, endian);\n    }\n    else if (typeof data === 'number') {\n        return numToBytes(data, size, endian);\n    }\n    else if (typeof data === 'boolean') {\n        return Uint8Array.of(data ? 1 : 0);\n    }\n    throw new TypeError('Unsupported format:' + String(typeof data));\n}\n\nclass Buff extends Uint8Array {\n    static { this.num = numToBuff; }\n    static { this.big = bigToBuff; }\n    static { this.bin = binToBuff; }\n    static { this.raw = rawToBuff; }\n    static { this.str = strToBuff; }\n    static { this.hex = hexToBuff; }\n    static { this.bytes = buffer; }\n    static { this.json = jsonToBuff; }\n    static { this.base64 = base64ToBuff; }\n    static { this.b64url = b64urlToBuff; }\n    static { this.bech32 = bech32ToBuff; }\n    static { this.bech32m = bech32mToBuff; }\n    static { this.b58chk = b58chkToBuff; }\n    static { this.encode = strToBytes; }\n    static { this.decode = bytesToStr; }\n    static { this.parse = parse_data; }\n    static { this.is_bytes = is_bytes; }\n    static { this.is_hex = is_hex; }\n    static random(size = 32) {\n        const rand = random(size);\n        return new Buff(rand, size);\n    }\n    static now(size = 4) {\n        const stamp = Math.floor(Date.now() / 1000);\n        return new Buff(stamp, size);\n    }\n    constructor(data, size, endian) {\n        if (data instanceof Buff &&\n            size === undefined) {\n            return data;\n        }\n        const buffer = buffer_data(data, size, endian);\n        super(buffer);\n    }\n    get arr() {\n        return [...this];\n    }\n    get num() {\n        return this.to_num();\n    }\n    get big() {\n        return this.to_big();\n    }\n    get str() {\n        return this.to_str();\n    }\n    get hex() {\n        return this.to_hex();\n    }\n    get raw() {\n        return new Uint8Array(this);\n    }\n    get bin() {\n        return this.to_bin();\n    }\n    get b58chk() {\n        return this.to_b58chk();\n    }\n    get base64() {\n        return this.to_base64();\n    }\n    get b64url() {\n        return this.to_b64url();\n    }\n    get digest() {\n        return this.to_hash();\n    }\n    get id() {\n        return this.to_hash().hex;\n    }\n    get stream() {\n        return new Stream(this);\n    }\n    to_num(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return bytesToNum(bytes);\n    }\n    to_big(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return bytesToBig(bytes);\n    }\n    to_bin() {\n        return bytesToBin(this);\n    }\n    to_hash() {\n        const digest = sha256(this);\n        return new Buff(digest);\n    }\n    to_json(reviver) {\n        if (reviver === undefined) {\n            reviver = bigint_reviver;\n        }\n        const str = bytesToStr(this);\n        return JSON.parse(str, reviver);\n    }\n    to_bech32(prefix, limit) {\n        const { encode, to_words } = Encoder.bech32;\n        const words = to_words(this);\n        return encode(prefix, words, limit);\n    }\n    to_bech32m(prefix, limit) {\n        const { encode, to_words } = Encoder.bech32m;\n        const words = to_words(this);\n        return encode(prefix, words, limit);\n    }\n    to_str() { return bytesToStr(this); }\n    to_hex() { return bytesToHex(this); }\n    to_bytes() { return new Uint8Array(this); }\n    to_b58chk() { return Encoder.b58chk.encode(this); }\n    to_base64() { return Encoder.base64.encode(this); }\n    to_b64url() { return Encoder.b64url.encode(this); }\n    append(data) {\n        return Buff.join([this, Buff.bytes(data)]);\n    }\n    prepend(data) {\n        return Buff.join([Buff.bytes(data), this]);\n    }\n    reverse() {\n        const arr = new Uint8Array(this).reverse();\n        return new Buff(arr);\n    }\n    slice(start, end) {\n        const arr = new Uint8Array(this).slice(start, end);\n        return new Buff(arr);\n    }\n    set(array, offset) {\n        this.set(array, offset);\n    }\n    subarray(begin, end) {\n        const arr = new Uint8Array(this).subarray(begin, end);\n        return new Buff(arr);\n    }\n    write(bytes, offset) {\n        const b = Buff.bytes(bytes);\n        this.set(b, offset);\n    }\n    add_varint(endian) {\n        const size = Buff.calc_varint(this.length, endian);\n        return Buff.join([size, this]);\n    }\n    static from(data) {\n        return new Buff(Uint8Array.from(data));\n    }\n    static of(...args) {\n        return new Buff(Uint8Array.of(...args));\n    }\n    static join(arr) {\n        const bytes = arr.map(e => Buff.bytes(e));\n        const joined = join_array(bytes);\n        return new Buff(joined);\n    }\n    static sort(arr, size) {\n        const hex = arr.map(e => buffer(e, size).hex);\n        hex.sort();\n        return hex.map(e => Buff.hex(e, size));\n    }\n    static calc_varint(num, endian) {\n        if (num < 0xFD) {\n            return Buff.num(num, 1);\n        }\n        else if (num < 0x10000) {\n            return Buff.of(0xFD, ...Buff.num(num, 2, endian));\n        }\n        else if (num < 0x100000000) {\n            return Buff.of(0xFE, ...Buff.num(num, 4, endian));\n        }\n        else if (BigInt(num) < 0x10000000000000000n) {\n            return Buff.of(0xFF, ...Buff.num(num, 8, endian));\n        }\n        else {\n            throw new Error(`Value is too large: ${num}`);\n        }\n    }\n}\nfunction numToBuff(number, size, endian) {\n    return new Buff(number, size, endian);\n}\nfunction binToBuff(data, size, endian) {\n    return new Buff(binToBytes(data), size, endian);\n}\nfunction bigToBuff(bigint, size, endian) {\n    return new Buff(bigint, size, endian);\n}\nfunction rawToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction strToBuff(data, size, endian) {\n    return new Buff(strToBytes(data), size, endian);\n}\nfunction hexToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction jsonToBuff(data, replacer) {\n    if (replacer === undefined) {\n        replacer = bigint_replacer;\n    }\n    const str = JSON.stringify(data, replacer);\n    return new Buff(strToBytes(str));\n}\nfunction base64ToBuff(data) {\n    return new Buff(Encoder.base64.decode(data));\n}\nfunction b64urlToBuff(data) {\n    return new Buff(Encoder.b64url.decode(data));\n}\nfunction bech32ToBuff(data, limit, chk_prefix) {\n    const { decode, to_bytes } = Encoder.bech32;\n    const { prefix, words } = decode(data, limit);\n    const bytes = to_bytes(words);\n    if (typeof chk_prefix === 'string') {\n        is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction bech32mToBuff(data, limit, chk_prefix) {\n    const { decode, to_bytes } = Encoder.bech32m;\n    const { prefix, words } = decode(data, limit);\n    const bytes = to_bytes(words);\n    if (typeof chk_prefix === 'string') {\n        is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction b58chkToBuff(data) {\n    return new Buff(Encoder.b58chk.decode(data));\n}\nfunction parse_data(data_blob, chunk_size, total_size) {\n    const bytes = buffer_data(data_blob);\n    const chunks = parse_data$1(bytes, chunk_size, total_size);\n    return chunks.map(e => Buff.bytes(e));\n}\nclass Stream {\n    constructor(data) {\n        this.data = Buff.bytes(data);\n        this.size = this.data.length;\n    }\n    peek(size) {\n        if (size > this.size) {\n            throw new Error(`Size greater than stream: ${size} > ${this.size}`);\n        }\n        return new Buff(this.data.slice(0, size));\n    }\n    read(size) {\n        const chunk = this.peek(size);\n        this.data = this.data.slice(size);\n        this.size = this.data.length;\n        return chunk;\n    }\n    read_varint(endian) {\n        const num = this.read(1).num;\n        switch (true) {\n            case (num >= 0 && num < 0xFD):\n                return num;\n            case (num === 0xFD):\n                return this.read(2).to_num(endian);\n            case (num === 0xFE):\n                return this.read(4).to_num(endian);\n            case (num === 0xFF):\n                return this.read(8).to_num(endian);\n            default:\n                throw new Error(`Varint is out of range: ${num}`);\n        }\n    }\n}\nfunction buffer(bytes, size, end) {\n    return new Buff(bytes, size, end);\n}\n\n\n//# sourceMappingURL=module.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi11dGlscy9kaXN0L21vZHVsZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLGtCQUFrQixTQUFTO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsSUFBSTtBQUNyRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELFdBQVc7QUFDdkUsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELFlBQVk7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQXFEO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0EseUJBQXlCLFFBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHlCQUF5QjtBQUN2Qyx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsR0FBRyxhQUFhLGdCQUFnQjtBQUNyRztBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxPQUFPO0FBQ2xGO0FBQ0E7QUFDQSx3REFBd0QsT0FBTyxjQUFjLFNBQVM7QUFDdEY7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsRUFBRTtBQUN2RTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsRUFBRTtBQUMxRTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxFQUFFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtQ0FBbUM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELEtBQUs7QUFDekQ7QUFDQSxrREFBa0QsR0FBRztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsRUFBRTtBQUNoRCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG1CQUFtQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNDQUFzQztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxLQUFLO0FBQzFEO0FBQ0EsbURBQW1ELEdBQUc7QUFDdEQ7QUFDQSw4REFBOEQsTUFBTSxLQUFLLElBQUksWUFBWSxzQkFBc0I7QUFDL0c7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxHQUFHLE9BQU8sS0FBSztBQUMvRTtBQUNBO0FBQ0EsaUVBQWlFLEtBQUssT0FBTyxLQUFLO0FBQ2xGO0FBQ0EsZUFBZSxXQUFXO0FBQzFCO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsTUFBTTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUztBQUNyQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwrQkFBK0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQSwrQ0FBK0MsT0FBTztBQUN0RDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsY0FBYztBQUN4RjtBQUNBLG1GQUFtRixhQUFhO0FBQ2hHO0FBQ0E7QUFDQSwwQ0FBMEMsY0FBYyxnQkFBZ0IsTUFBTTtBQUM5RTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVEsR0FBRyw0QkFBNEIsRUFBRSxJQUFJO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxXQUFXO0FBQ3BGO0FBQ0Esd0RBQXdELFlBQVksR0FBRyxJQUFJLGtCQUFrQixNQUFNO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxJQUFJLGNBQWMsSUFBSTtBQUN6RSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQyxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEMscUJBQXFCO0FBQ3JCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtEQUErRCxhQUFhLElBQUksS0FBSztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxXQUFXO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsUUFBUSxNQUFNLE9BQU87QUFDbEY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxRQUFRO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxjQUFjO0FBQ3pFO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxJQUFJO0FBQ3ZEO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsUUFBUTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsS0FBSyxJQUFJLEtBQUs7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsa0JBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxZQUFZLElBQUksWUFBWTtBQUMvRTtBQUNBO0FBQ0Esb0RBQW9ELEtBQUssTUFBTSxXQUFXO0FBQzFFO0FBQ0E7QUFDQSxvREFBb0QsS0FBSyxJQUFJLFlBQVk7QUFDekU7QUFDQTtBQUNBLG9CQUFvQixXQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiLGFBQWE7QUFDYixhQUFhO0FBQ2IsYUFBYTtBQUNiLGFBQWE7QUFDYixhQUFhO0FBQ2IsYUFBYTtBQUNiLGFBQWE7QUFDYixhQUFhO0FBQ2IsYUFBYTtBQUNiLGFBQWE7QUFDYixhQUFhO0FBQ2IsYUFBYTtBQUNiLGFBQWE7QUFDYixhQUFhO0FBQ2IsYUFBYTtBQUNiLGFBQWE7QUFDYixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmLGlCQUFpQjtBQUNqQixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELElBQUk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CLFlBQVksZ0JBQWdCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtQkFBbUI7QUFDL0IsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELE1BQU0sSUFBSSxVQUFVO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxJQUFJO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMEU7QUFDMUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9idWZmLXV0aWxzL2Rpc3QvbW9kdWxlLm1qcz9kZTkzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJ5dGVzKGIsIC4uLmxlbmd0aHMpIHtcbiAgICBpZiAoIShiIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgVWludDhBcnJheScpO1xuICAgIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYi5sZW5ndGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFVpbnQ4QXJyYXkgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiLmxlbmd0aH1gKTtcbn1cbmZ1bmN0aW9uIGV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgICBpZiAoaW5zdGFuY2UuZGVzdHJveWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XG4gICAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpO1xufVxuZnVuY3Rpb24gb3V0cHV0KG91dCwgaW5zdGFuY2UpIHtcbiAgICBieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICAgIH1cbn1cblxuLyohIG5vYmxlLWhhc2hlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuLy8gV2UgdXNlIFdlYkNyeXB0byBha2EgZ2xvYmFsVGhpcy5jcnlwdG8sIHdoaWNoIGV4aXN0cyBpbiBicm93c2VycyBhbmQgbm9kZS5qcyAxNisuXG4vLyBub2RlLmpzIHZlcnNpb25zIGVhcmxpZXIgdGhhbiB2MTkgZG9uJ3QgZGVjbGFyZSBpdCBpbiBnbG9iYWwgc2NvcGUuXG4vLyBGb3Igbm9kZS5qcywgcGFja2FnZS5qc29uI2V4cG9ydHMgZmllbGQgbWFwcGluZyByZXdyaXRlcyBpbXBvcnRcbi8vIGZyb20gYGNyeXB0b2AgdG8gYGNyeXB0b05vZGVgLCB3aGljaCBpbXBvcnRzIG5hdGl2ZSBtb2R1bGUuXG4vLyBNYWtlcyB0aGUgdXRpbHMgdW4taW1wb3J0YWJsZSBpbiBicm93c2VycyB3aXRob3V0IGEgYnVuZGxlci5cbi8vIE9uY2Ugbm9kZS5qcyAxOCBpcyBkZXByZWNhdGVkLCB3ZSBjYW4ganVzdCBkcm9wIHRoZSBpbXBvcnQuXG5jb25zdCB1OGEgPSAoYSkgPT4gYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk7XG4vLyBDYXN0IGFycmF5IHRvIHZpZXdcbmNvbnN0IGNyZWF0ZVZpZXcgPSAoYXJyKSA9PiBuZXcgRGF0YVZpZXcoYXJyLmJ1ZmZlciwgYXJyLmJ5dGVPZmZzZXQsIGFyci5ieXRlTGVuZ3RoKTtcbi8vIFRoZSByb3RhdGUgcmlnaHQgKGNpcmN1bGFyIHJpZ2h0IHNoaWZ0KSBvcGVyYXRpb24gZm9yIHVpbnQzMlxuY29uc3Qgcm90ciA9ICh3b3JkLCBzaGlmdCkgPT4gKHdvcmQgPDwgKDMyIC0gc2hpZnQpKSB8ICh3b3JkID4+PiBzaGlmdCk7XG4vLyBiaWctZW5kaWFuIGhhcmR3YXJlIGlzIHJhcmUuIEp1c3QgaW4gY2FzZSBzb21lb25lIHN0aWxsIGRlY2lkZXMgdG8gcnVuIGhhc2hlczpcbi8vIGVhcmx5LXRocm93IGFuIGVycm9yIGJlY2F1c2Ugd2UgZG9uJ3Qgc3VwcG9ydCBCRSB5ZXQuXG5jb25zdCBpc0xFID0gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQzMkFycmF5KFsweDExMjIzMzQ0XSkuYnVmZmVyKVswXSA9PT0gMHg0NDtcbmlmICghaXNMRSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbiBsaXR0bGUtZW5kaWFuIGhhcmR3YXJlIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbi8qKlxuICogQGV4YW1wbGUgdXRmOFRvQnl0ZXMoJ2FiYycpIC8vIG5ldyBVaW50OEFycmF5KFs5NywgOTgsIDk5XSlcbiAqL1xuZnVuY3Rpb24gdXRmOFRvQnl0ZXMoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHV0ZjhUb0J5dGVzIGV4cGVjdGVkIHN0cmluZywgZ290ICR7dHlwZW9mIHN0cn1gKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cikpOyAvLyBodHRwczovL2J1Z3ppbC5sYS8xNjgxODA5XG59XG4vKipcbiAqIE5vcm1hbGl6ZXMgKG5vbi1oZXgpIHN0cmluZyBvciBVaW50OEFycmF5IHRvIFVpbnQ4QXJyYXkuXG4gKiBXYXJuaW5nOiB3aGVuIFVpbnQ4QXJyYXkgaXMgcGFzc2VkLCBpdCB3b3VsZCBOT1QgZ2V0IGNvcGllZC5cbiAqIEtlZXAgaW4gbWluZCBmb3IgZnV0dXJlIG11dGFibGUgb3BlcmF0aW9ucy5cbiAqL1xuZnVuY3Rpb24gdG9CeXRlcyhkYXRhKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJylcbiAgICAgICAgZGF0YSA9IHV0ZjhUb0J5dGVzKGRhdGEpO1xuICAgIGlmICghdThhKGRhdGEpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkIFVpbnQ4QXJyYXksIGdvdCAke3R5cGVvZiBkYXRhfWApO1xuICAgIHJldHVybiBkYXRhO1xufVxuLy8gRm9yIHJ1bnRpbWUgY2hlY2sgaWYgY2xhc3MgaW1wbGVtZW50cyBpbnRlcmZhY2VcbmNsYXNzIEhhc2gge1xuICAgIC8vIFNhZmUgdmVyc2lvbiB0aGF0IGNsb25lcyBpbnRlcm5hbCBzdGF0ZVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvbmVJbnRvKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gd3JhcENvbnN0cnVjdG9yKGhhc2hDb25zKSB7XG4gICAgY29uc3QgaGFzaEMgPSAobXNnKSA9PiBoYXNoQ29ucygpLnVwZGF0ZSh0b0J5dGVzKG1zZykpLmRpZ2VzdCgpO1xuICAgIGNvbnN0IHRtcCA9IGhhc2hDb25zKCk7XG4gICAgaGFzaEMub3V0cHV0TGVuID0gdG1wLm91dHB1dExlbjtcbiAgICBoYXNoQy5ibG9ja0xlbiA9IHRtcC5ibG9ja0xlbjtcbiAgICBoYXNoQy5jcmVhdGUgPSAoKSA9PiBoYXNoQ29ucygpO1xuICAgIHJldHVybiBoYXNoQztcbn1cblxuLy8gUG9seWZpbGwgZm9yIFNhZmFyaSAxNFxuZnVuY3Rpb24gc2V0QmlnVWludDY0KHZpZXcsIGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKSB7XG4gICAgaWYgKHR5cGVvZiB2aWV3LnNldEJpZ1VpbnQ2NCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHZpZXcuc2V0QmlnVWludDY0KGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKTtcbiAgICBjb25zdCBfMzJuID0gQmlnSW50KDMyKTtcbiAgICBjb25zdCBfdTMyX21heCA9IEJpZ0ludCgweGZmZmZmZmZmKTtcbiAgICBjb25zdCB3aCA9IE51bWJlcigodmFsdWUgPj4gXzMybikgJiBfdTMyX21heCk7XG4gICAgY29uc3Qgd2wgPSBOdW1iZXIodmFsdWUgJiBfdTMyX21heCk7XG4gICAgY29uc3QgaCA9IGlzTEUgPyA0IDogMDtcbiAgICBjb25zdCBsID0gaXNMRSA/IDAgOiA0O1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBoLCB3aCwgaXNMRSk7XG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGwsIHdsLCBpc0xFKTtcbn1cbi8vIEJhc2UgU0hBMiBjbGFzcyAoUkZDIDYyMzQpXG5jbGFzcyBTSEEyIGV4dGVuZHMgSGFzaCB7XG4gICAgY29uc3RydWN0b3IoYmxvY2tMZW4sIG91dHB1dExlbiwgcGFkT2Zmc2V0LCBpc0xFKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSBibG9ja0xlbjtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRoaXMucGFkT2Zmc2V0ID0gcGFkT2Zmc2V0O1xuICAgICAgICB0aGlzLmlzTEUgPSBpc0xFO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgdGhpcy52aWV3ID0gY3JlYXRlVmlldyh0aGlzLmJ1ZmZlcik7XG4gICAgfVxuICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIGV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyB2aWV3LCBidWZmZXIsIGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgICAgLy8gRmFzdCBwYXRoOiB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBibG9jayBpbiBpbnB1dCwgY2FzdCBpdCB0byB2aWV3IGFuZCBwcm9jZXNzXG4gICAgICAgICAgICBpZiAodGFrZSA9PT0gYmxvY2tMZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhVmlldyA9IGNyZWF0ZVZpZXcoZGF0YSk7XG4gICAgICAgICAgICAgICAgZm9yICg7IGJsb2NrTGVuIDw9IGxlbiAtIHBvczsgcG9zICs9IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoZGF0YVZpZXcsIHBvcyk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIuc2V0KGRhdGEuc3ViYXJyYXkocG9zLCBwb3MgKyB0YWtlKSwgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHRoaXMucm91bmRDbGVhbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMpO1xuICAgICAgICBvdXRwdXQob3V0LCB0aGlzKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIC8vIFBhZGRpbmdcbiAgICAgICAgLy8gV2UgY2FuIGF2b2lkIGFsbG9jYXRpb24gb2YgYnVmZmVyIGZvciBwYWRkaW5nIGNvbXBsZXRlbHkgaWYgaXRcbiAgICAgICAgLy8gd2FzIHByZXZpb3VzbHkgbm90IGFsbG9jYXRlZCBoZXJlLiBCdXQgaXQgd29uJ3QgY2hhbmdlIHBlcmZvcm1hbmNlLlxuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgdmlldywgYmxvY2tMZW4sIGlzTEUgfSA9IHRoaXM7XG4gICAgICAgIGxldCB7IHBvcyB9ID0gdGhpcztcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBiaXQgJzEnIHRvIHRoZSBtZXNzYWdlXG4gICAgICAgIGJ1ZmZlcltwb3MrK10gPSAwYjEwMDAwMDAwO1xuICAgICAgICB0aGlzLmJ1ZmZlci5zdWJhcnJheShwb3MpLmZpbGwoMCk7XG4gICAgICAgIC8vIHdlIGhhdmUgbGVzcyB0aGFuIHBhZE9mZnNldCBsZWZ0IGluIGJ1ZmZlciwgc28gd2UgY2Fubm90IHB1dCBsZW5ndGggaW4gY3VycmVudCBibG9jaywgbmVlZCBwcm9jZXNzIGl0IGFuZCBwYWQgYWdhaW5cbiAgICAgICAgaWYgKHRoaXMucGFkT2Zmc2V0ID4gYmxvY2tMZW4gLSBwb3MpIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgIHBvcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFkIHVudGlsIGZ1bGwgYmxvY2sgYnl0ZSB3aXRoIHplcm9zXG4gICAgICAgIGZvciAobGV0IGkgPSBwb3M7IGkgPCBibG9ja0xlbjsgaSsrKVxuICAgICAgICAgICAgYnVmZmVyW2ldID0gMDtcbiAgICAgICAgLy8gTm90ZTogc2hhNTEyIHJlcXVpcmVzIGxlbmd0aCB0byBiZSAxMjhiaXQgaW50ZWdlciwgYnV0IGxlbmd0aCBpbiBKUyB3aWxsIG92ZXJmbG93IGJlZm9yZSB0aGF0XG4gICAgICAgIC8vIFlvdSBuZWVkIHRvIHdyaXRlIGFyb3VuZCAyIGV4YWJ5dGVzICh1NjRfbWF4IC8gOCAvICgxMDI0Kio2KSkgZm9yIHRoaXMgdG8gaGFwcGVuLlxuICAgICAgICAvLyBTbyB3ZSBqdXN0IHdyaXRlIGxvd2VzdCA2NCBiaXRzIG9mIHRoYXQgdmFsdWUuXG4gICAgICAgIHNldEJpZ1VpbnQ2NCh2aWV3LCBibG9ja0xlbiAtIDgsIEJpZ0ludCh0aGlzLmxlbmd0aCAqIDgpLCBpc0xFKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICBjb25zdCBvdmlldyA9IGNyZWF0ZVZpZXcob3V0KTtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5vdXRwdXRMZW47XG4gICAgICAgIC8vIE5PVEU6IHdlIGRvIGRpdmlzaW9uIGJ5IDQgbGF0ZXIsIHdoaWNoIHNob3VsZCBiZSBmdXNlZCBpbiBzaW5nbGUgb3Agd2l0aCBtb2R1bG8gYnkgSklUXG4gICAgICAgIGlmIChsZW4gJSA0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIHNob3VsZCBiZSBhbGlnbmVkIHRvIDMyYml0Jyk7XG4gICAgICAgIGNvbnN0IG91dExlbiA9IGxlbiAvIDQ7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXQoKTtcbiAgICAgICAgaWYgKG91dExlbiA+IHN0YXRlLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignX3NoYTI6IG91dHB1dExlbiBiaWdnZXIgdGhhbiBzdGF0ZScpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dExlbjsgaSsrKVxuICAgICAgICAgICAgb3ZpZXcuc2V0VWludDMyKDQgKiBpLCBzdGF0ZVtpXSwgaXNMRSk7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgY29uc3QgeyBidWZmZXIsIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKGJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJ1ZmZlci5zbGljZSgwLCBvdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICB0byB8fCAodG8gPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpKTtcbiAgICAgICAgdG8uc2V0KC4uLnRoaXMuZ2V0KCkpO1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBidWZmZXIsIGxlbmd0aCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgcG9zIH0gPSB0aGlzO1xuICAgICAgICB0by5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRvLnBvcyA9IHBvcztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICBpZiAobGVuZ3RoICUgYmxvY2tMZW4pXG4gICAgICAgICAgICB0by5idWZmZXIuc2V0KGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG59XG5cbi8vIFNIQTItMjU2IG5lZWQgdG8gdHJ5IDJeMTI4IGhhc2hlcyB0byBleGVjdXRlIGJpcnRoZGF5IGF0dGFjay5cbi8vIEJUQyBuZXR3b3JrIGlzIGRvaW5nIDJeNjcgaGFzaGVzL3NlYyBhcyBwZXIgZWFybHkgMjAyMy5cbi8vIENob2ljZTogYSA/IGIgOiBjXG5jb25zdCBDaGkgPSAoYSwgYiwgYykgPT4gKGEgJiBiKSBeICh+YSAmIGMpO1xuLy8gTWFqb3JpdHkgZnVuY3Rpb24sIHRydWUgaWYgYW55IHR3byBpbnB1c3QgaXMgdHJ1ZVxuY29uc3QgTWFqID0gKGEsIGIsIGMpID0+IChhICYgYikgXiAoYSAmIGMpIF4gKGIgJiBjKTtcbi8vIFJvdW5kIGNvbnN0YW50czpcbi8vIGZpcnN0IDMyIGJpdHMgb2YgdGhlIGZyYWN0aW9uYWwgcGFydHMgb2YgdGhlIGN1YmUgcm9vdHMgb2YgdGhlIGZpcnN0IDY0IHByaW1lcyAyLi4zMTEpXG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IFNIQTI1Nl9LID0gLyogQF9fUFVSRV9fICovIG5ldyBVaW50MzJBcnJheShbXG4gICAgMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSwgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSxcbiAgICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLCAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuICAgIDB4ZTQ5YjY5YzEsIDB4ZWZiZTQ3ODYsIDB4MGZjMTlkYzYsIDB4MjQwY2ExY2MsIDB4MmRlOTJjNmYsIDB4NGE3NDg0YWEsIDB4NWNiMGE5ZGMsIDB4NzZmOTg4ZGEsXG4gICAgMHg5ODNlNTE1MiwgMHhhODMxYzY2ZCwgMHhiMDAzMjdjOCwgMHhiZjU5N2ZjNywgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NyxcbiAgICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLCAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAgIDB4YTJiZmU4YTEsIDB4YTgxYTY2NGIsIDB4YzI0YjhiNzAsIDB4Yzc2YzUxYTMsIDB4ZDE5MmU4MTksIDB4ZDY5OTA2MjQsIDB4ZjQwZTM1ODUsIDB4MTA2YWEwNzAsXG4gICAgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCwgMHgyNzQ4Nzc0YywgMHgzNGIwYmNiNSwgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMyxcbiAgICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LCAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dKTtcbi8vIEluaXRpYWwgc3RhdGUgKGZpcnN0IDMyIGJpdHMgb2YgdGhlIGZyYWN0aW9uYWwgcGFydHMgb2YgdGhlIHNxdWFyZSByb290cyBvZiB0aGUgZmlyc3QgOCBwcmltZXMgMi4uMTkpOlxuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBJViA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4NmEwOWU2NjcsIDB4YmI2N2FlODUsIDB4M2M2ZWYzNzIsIDB4YTU0ZmY1M2EsIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTlcbl0pO1xuLy8gVGVtcG9yYXJ5IGJ1ZmZlciwgbm90IHVzZWQgdG8gc3RvcmUgYW55dGhpbmcgYmV0d2VlbiBydW5zXG4vLyBOYW1lZCB0aGlzIHdheSBiZWNhdXNlIGl0IG1hdGNoZXMgc3BlY2lmaWNhdGlvbi5cbmNvbnN0IFNIQTI1Nl9XID0gLyogQF9fUFVSRV9fICovIG5ldyBVaW50MzJBcnJheSg2NCk7XG5jbGFzcyBTSEEyNTYgZXh0ZW5kcyBTSEEyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoNjQsIDMyLCA4LCBmYWxzZSk7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB1c2UgYXJyYXkgaGVyZSBzaW5jZSBhcnJheSBhbGxvd3MgaW5kZXhpbmcgYnkgdmFyaWFibGVcbiAgICAgICAgLy8gd2hpY2ggbWVhbnMgb3B0aW1pemVyL2NvbXBpbGVyIGNhbm5vdCB1c2UgcmVnaXN0ZXJzLlxuICAgICAgICB0aGlzLkEgPSBJVlswXSB8IDA7XG4gICAgICAgIHRoaXMuQiA9IElWWzFdIHwgMDtcbiAgICAgICAgdGhpcy5DID0gSVZbMl0gfCAwO1xuICAgICAgICB0aGlzLkQgPSBJVlszXSB8IDA7XG4gICAgICAgIHRoaXMuRSA9IElWWzRdIHwgMDtcbiAgICAgICAgdGhpcy5GID0gSVZbNV0gfCAwO1xuICAgICAgICB0aGlzLkcgPSBJVls2XSB8IDA7XG4gICAgICAgIHRoaXMuSCA9IElWWzddIHwgMDtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICBjb25zdCB7IEEsIEIsIEMsIEQsIEUsIEYsIEcsIEggfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbQSwgQiwgQywgRCwgRSwgRiwgRywgSF07XG4gICAgfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHNldChBLCBCLCBDLCBELCBFLCBGLCBHLCBIKSB7XG4gICAgICAgIHRoaXMuQSA9IEEgfCAwO1xuICAgICAgICB0aGlzLkIgPSBCIHwgMDtcbiAgICAgICAgdGhpcy5DID0gQyB8IDA7XG4gICAgICAgIHRoaXMuRCA9IEQgfCAwO1xuICAgICAgICB0aGlzLkUgPSBFIHwgMDtcbiAgICAgICAgdGhpcy5GID0gRiB8IDA7XG4gICAgICAgIHRoaXMuRyA9IEcgfCAwO1xuICAgICAgICB0aGlzLkggPSBIIHwgMDtcbiAgICB9XG4gICAgcHJvY2Vzcyh2aWV3LCBvZmZzZXQpIHtcbiAgICAgICAgLy8gRXh0ZW5kIHRoZSBmaXJzdCAxNiB3b3JkcyBpbnRvIHRoZSByZW1haW5pbmcgNDggd29yZHMgd1sxNi4uNjNdIG9mIHRoZSBtZXNzYWdlIHNjaGVkdWxlIGFycmF5XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKywgb2Zmc2V0ICs9IDQpXG4gICAgICAgICAgICBTSEEyNTZfV1tpXSA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCwgZmFsc2UpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTY7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBXMTUgPSBTSEEyNTZfV1tpIC0gMTVdO1xuICAgICAgICAgICAgY29uc3QgVzIgPSBTSEEyNTZfV1tpIC0gMl07XG4gICAgICAgICAgICBjb25zdCBzMCA9IHJvdHIoVzE1LCA3KSBeIHJvdHIoVzE1LCAxOCkgXiAoVzE1ID4+PiAzKTtcbiAgICAgICAgICAgIGNvbnN0IHMxID0gcm90cihXMiwgMTcpIF4gcm90cihXMiwgMTkpIF4gKFcyID4+PiAxMCk7XG4gICAgICAgICAgICBTSEEyNTZfV1tpXSA9IChzMSArIFNIQTI1Nl9XW2kgLSA3XSArIHMwICsgU0hBMjU2X1dbaSAtIDE2XSkgfCAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbXByZXNzaW9uIGZ1bmN0aW9uIG1haW4gbG9vcCwgNjQgcm91bmRzXG4gICAgICAgIGxldCB7IEEsIEIsIEMsIEQsIEUsIEYsIEcsIEggfSA9IHRoaXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2lnbWExID0gcm90cihFLCA2KSBeIHJvdHIoRSwgMTEpIF4gcm90cihFLCAyNSk7XG4gICAgICAgICAgICBjb25zdCBUMSA9IChIICsgc2lnbWExICsgQ2hpKEUsIEYsIEcpICsgU0hBMjU2X0tbaV0gKyBTSEEyNTZfV1tpXSkgfCAwO1xuICAgICAgICAgICAgY29uc3Qgc2lnbWEwID0gcm90cihBLCAyKSBeIHJvdHIoQSwgMTMpIF4gcm90cihBLCAyMik7XG4gICAgICAgICAgICBjb25zdCBUMiA9IChzaWdtYTAgKyBNYWooQSwgQiwgQykpIHwgMDtcbiAgICAgICAgICAgIEggPSBHO1xuICAgICAgICAgICAgRyA9IEY7XG4gICAgICAgICAgICBGID0gRTtcbiAgICAgICAgICAgIEUgPSAoRCArIFQxKSB8IDA7XG4gICAgICAgICAgICBEID0gQztcbiAgICAgICAgICAgIEMgPSBCO1xuICAgICAgICAgICAgQiA9IEE7XG4gICAgICAgICAgICBBID0gKFQxICsgVDIpIHwgMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgdGhlIGNvbXByZXNzZWQgY2h1bmsgdG8gdGhlIGN1cnJlbnQgaGFzaCB2YWx1ZVxuICAgICAgICBBID0gKEEgKyB0aGlzLkEpIHwgMDtcbiAgICAgICAgQiA9IChCICsgdGhpcy5CKSB8IDA7XG4gICAgICAgIEMgPSAoQyArIHRoaXMuQykgfCAwO1xuICAgICAgICBEID0gKEQgKyB0aGlzLkQpIHwgMDtcbiAgICAgICAgRSA9IChFICsgdGhpcy5FKSB8IDA7XG4gICAgICAgIEYgPSAoRiArIHRoaXMuRikgfCAwO1xuICAgICAgICBHID0gKEcgKyB0aGlzLkcpIHwgMDtcbiAgICAgICAgSCA9IChIICsgdGhpcy5IKSB8IDA7XG4gICAgICAgIHRoaXMuc2V0KEEsIEIsIEMsIEQsIEUsIEYsIEcsIEgpO1xuICAgIH1cbiAgICByb3VuZENsZWFuKCkge1xuICAgICAgICBTSEEyNTZfVy5maWxsKDApO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnNldCgwLCAwLCAwLCAwLCAwLCAwLCAwLCAwKTtcbiAgICAgICAgdGhpcy5idWZmZXIuZmlsbCgwKTtcbiAgICB9XG59XG4vKipcbiAqIFNIQTItMjU2IGhhc2ggZnVuY3Rpb25cbiAqIEBwYXJhbSBtZXNzYWdlIC0gZGF0YSB0aGF0IHdvdWxkIGJlIGhhc2hlZFxuICovXG5jb25zdCBzaGEyNTYgPSAvKiBAX19QVVJFX18gKi8gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBTSEEyNTYoKSk7XG5cbi8qISBzY3VyZS1iYXNlIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG4vLyBVdGlsaXRpZXNcblxuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBjaGFpbiguLi5hcmdzKSB7XG4gICAgLy8gV3JhcCBjYWxsIGluIGNsb3N1cmUgc28gSklUIGNhbiBpbmxpbmUgY2FsbHNcbiAgICBjb25zdCB3cmFwID0gKGEsIGIpID0+IChjKSA9PiBhKGIoYykpO1xuICAgIC8vIENvbnN0cnVjdCBjaGFpbiBvZiBhcmdzWy0xXS5lbmNvZGUoYXJnc1stMl0uZW5jb2RlKFsuLi5dKSlcbiAgICBjb25zdCBlbmNvZGUgPSBBcnJheS5mcm9tKGFyZ3MpXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgLnJlZHVjZSgoYWNjLCBpKSA9PiAoYWNjID8gd3JhcChhY2MsIGkuZW5jb2RlKSA6IGkuZW5jb2RlKSwgdW5kZWZpbmVkKTtcbiAgICAvLyBDb25zdHJ1Y3QgY2hhaW4gb2YgYXJnc1swXS5kZWNvZGUoYXJnc1sxXS5kZWNvZGUoLi4uKSlcbiAgICBjb25zdCBkZWNvZGUgPSBhcmdzLnJlZHVjZSgoYWNjLCBpKSA9PiAoYWNjID8gd3JhcChhY2MsIGkuZGVjb2RlKSA6IGkuZGVjb2RlKSwgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4geyBlbmNvZGUsIGRlY29kZSB9O1xufVxuLyoqXG4gKiBFbmNvZGVzIGludGVnZXIgcmFkaXggcmVwcmVzZW50YXRpb24gdG8gYXJyYXkgb2Ygc3RyaW5ncyB1c2luZyBhbHBoYWJldCBhbmQgYmFja1xuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gYWxwaGFiZXQoYWxwaGFiZXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGU6IChkaWdpdHMpID0+IHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaWdpdHMpIHx8IChkaWdpdHMubGVuZ3RoICYmIHR5cGVvZiBkaWdpdHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscGhhYmV0LmVuY29kZSBpbnB1dCBzaG91bGQgYmUgYW4gYXJyYXkgb2YgbnVtYmVycycpO1xuICAgICAgICAgICAgcmV0dXJuIGRpZ2l0cy5tYXAoKGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDAgfHwgaSA+PSBhbHBoYWJldC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGlnaXQgaW5kZXggb3V0c2lkZSBhbHBoYWJldDogJHtpfSAoYWxwaGFiZXQ6ICR7YWxwaGFiZXQubGVuZ3RofSlgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxwaGFiZXRbaV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlOiAoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkgfHwgKGlucHV0Lmxlbmd0aCAmJiB0eXBlb2YgaW5wdXRbMF0gIT09ICdzdHJpbmcnKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FscGhhYmV0LmRlY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0Lm1hcCgobGV0dGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsZXR0ZXIgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGFscGhhYmV0LmRlY29kZTogbm90IHN0cmluZyBlbGVtZW50PSR7bGV0dGVyfWApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWxwaGFiZXQuaW5kZXhPZihsZXR0ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBsZXR0ZXI6IFwiJHtsZXR0ZXJ9XCIuIEFsbG93ZWQ6ICR7YWxwaGFiZXR9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gam9pbihzZXBhcmF0b3IgPSAnJykge1xuICAgIGlmICh0eXBlb2Ygc2VwYXJhdG9yICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdqb2luIHNlcGFyYXRvciBzaG91bGQgYmUgc3RyaW5nJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5jb2RlOiAoZnJvbSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZyb20pIHx8IChmcm9tLmxlbmd0aCAmJiB0eXBlb2YgZnJvbVswXSAhPT0gJ3N0cmluZycpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignam9pbi5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIGFycmF5IG9mIHN0cmluZ3MnKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgb2YgZnJvbSlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGpvaW4uZW5jb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgICAgICAgIHJldHVybiBmcm9tLmpvaW4oc2VwYXJhdG9yKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlOiAodG8pID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG8gIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignam9pbi5kZWNvZGUgaW5wdXQgc2hvdWxkIGJlIHN0cmluZycpO1xuICAgICAgICAgICAgcmV0dXJuIHRvLnNwbGl0KHNlcGFyYXRvcik7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogUGFkIHN0cmluZ3MgYXJyYXkgc28gaXQgaGFzIGludGVnZXIgbnVtYmVyIG9mIGJpdHNcbiAqIEBfX05PX1NJREVfRUZGRUNUU19fXG4gKi9cbmZ1bmN0aW9uIHBhZGRpbmcoYml0cywgY2hyID0gJz0nKSB7XG4gICAgaWYgKHR5cGVvZiBjaHIgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhZGRpbmcgY2hyIHNob3VsZCBiZSBzdHJpbmcnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGUoZGF0YSkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpIHx8IChkYXRhLmxlbmd0aCAmJiB0eXBlb2YgZGF0YVswXSAhPT0gJ3N0cmluZycpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncGFkZGluZy5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIGFycmF5IG9mIHN0cmluZ3MnKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgb2YgZGF0YSlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZW5jb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgICAgICAgIHdoaWxlICgoZGF0YS5sZW5ndGggKiBiaXRzKSAlIDgpXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKGNocik7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlKGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpIHx8IChpbnB1dC5sZW5ndGggJiYgdHlwZW9mIGlucHV0WzBdICE9PSAnc3RyaW5nJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYWRkaW5nLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSBvZiBpbnB1dClcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZGVjb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgICAgICAgIGxldCBlbmQgPSBpbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoKGVuZCAqIGJpdHMpICUgOClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFkZGluZzogc3RyaW5nIHNob3VsZCBoYXZlIHdob2xlIG51bWJlciBvZiBieXRlcycpO1xuICAgICAgICAgICAgZm9yICg7IGVuZCA+IDAgJiYgaW5wdXRbZW5kIC0gMV0gPT09IGNocjsgZW5kLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoISgoKGVuZCAtIDEpICogYml0cykgJSA4KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHBhZGRpbmc6IHN0cmluZyBoYXMgdG9vIG11Y2ggcGFkZGluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKDAsIGVuZCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogU2xvdzogTyhuXjIpIHRpbWUgY29tcGxleGl0eVxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gY29udmVydFJhZGl4KGRhdGEsIGZyb20sIHRvKSB7XG4gICAgLy8gYmFzZSAxIGlzIGltcG9zc2libGVcbiAgICBpZiAoZnJvbSA8IDIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4OiB3cm9uZyBmcm9tPSR7ZnJvbX0sIGJhc2UgY2Fubm90IGJlIGxlc3MgdGhhbiAyYCk7XG4gICAgaWYgKHRvIDwgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXg6IHdyb25nIHRvPSR7dG99LCBiYXNlIGNhbm5vdCBiZSBsZXNzIHRoYW4gMmApO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb252ZXJ0UmFkaXg6IGRhdGEgc2hvdWxkIGJlIGFycmF5Jyk7XG4gICAgaWYgKCFkYXRhLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIGxldCBwb3MgPSAwO1xuICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgIGNvbnN0IGRpZ2l0cyA9IEFycmF5LmZyb20oZGF0YSk7XG4gICAgZGlnaXRzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgaWYgKGQgPCAwIHx8IGQgPj0gZnJvbSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV3JvbmcgaW50ZWdlcjogJHtkfWApO1xuICAgIH0pO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGxldCBjYXJyeSA9IDA7XG4gICAgICAgIGxldCBkb25lID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGRpZ2l0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZGlnaXQgPSBkaWdpdHNbaV07XG4gICAgICAgICAgICBjb25zdCBkaWdpdEJhc2UgPSBmcm9tICogY2FycnkgKyBkaWdpdDtcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoZGlnaXRCYXNlKSB8fFxuICAgICAgICAgICAgICAgIChmcm9tICogY2FycnkpIC8gZnJvbSAhPT0gY2FycnkgfHxcbiAgICAgICAgICAgICAgICBkaWdpdEJhc2UgLSBkaWdpdCAhPT0gZnJvbSAqIGNhcnJ5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb252ZXJ0UmFkaXg6IGNhcnJ5IG92ZXJmbG93Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXJyeSA9IGRpZ2l0QmFzZSAlIHRvO1xuICAgICAgICAgICAgY29uc3Qgcm91bmRlZCA9IE1hdGguZmxvb3IoZGlnaXRCYXNlIC8gdG8pO1xuICAgICAgICAgICAgZGlnaXRzW2ldID0gcm91bmRlZDtcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIocm91bmRlZCkgfHwgcm91bmRlZCAqIHRvICsgY2FycnkgIT09IGRpZ2l0QmFzZSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDogY2Fycnkgb3ZlcmZsb3cnKTtcbiAgICAgICAgICAgIGlmICghZG9uZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKCFyb3VuZGVkKVxuICAgICAgICAgICAgICAgIHBvcyA9IGk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZG9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGNhcnJ5KTtcbiAgICAgICAgaWYgKGRvbmUpXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aCAtIDEgJiYgZGF0YVtpXSA9PT0gMDsgaSsrKVxuICAgICAgICByZXMucHVzaCgwKTtcbiAgICByZXR1cm4gcmVzLnJldmVyc2UoKTtcbn1cbmNvbnN0IGdjZCA9IC8qIEBfX05PX1NJREVfRUZGRUNUU19fICovIChhLCBiKSA9PiAoIWIgPyBhIDogZ2NkKGIsIGEgJSBiKSk7XG5jb25zdCByYWRpeDJjYXJyeSA9IC8qQF9fTk9fU0lERV9FRkZFQ1RTX18gKi8gKGZyb20sIHRvKSA9PiBmcm9tICsgKHRvIC0gZ2NkKGZyb20sIHRvKSk7XG4vKipcbiAqIEltcGxlbWVudGVkIHdpdGggbnVtYmVycywgYmVjYXVzZSBCaWdJbnQgaXMgNXggc2xvd2VyXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBjb252ZXJ0UmFkaXgyKGRhdGEsIGZyb20sIHRvLCBwYWRkaW5nKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnZlcnRSYWRpeDI6IGRhdGEgc2hvdWxkIGJlIGFycmF5Jyk7XG4gICAgaWYgKGZyb20gPD0gMCB8fCBmcm9tID4gMzIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4Mjogd3JvbmcgZnJvbT0ke2Zyb219YCk7XG4gICAgaWYgKHRvIDw9IDAgfHwgdG8gPiAzMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXgyOiB3cm9uZyB0bz0ke3RvfWApO1xuICAgIGlmIChyYWRpeDJjYXJyeShmcm9tLCB0bykgPiAzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IGNhcnJ5IG92ZXJmbG93IGZyb209JHtmcm9tfSB0bz0ke3RvfSBjYXJyeUJpdHM9JHtyYWRpeDJjYXJyeShmcm9tLCB0byl9YCk7XG4gICAgfVxuICAgIGxldCBjYXJyeSA9IDA7XG4gICAgbGV0IHBvcyA9IDA7IC8vIGJpdHdpc2UgcG9zaXRpb24gaW4gY3VycmVudCBlbGVtZW50XG4gICAgY29uc3QgbWFzayA9IDIgKiogdG8gLSAxO1xuICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgbiBvZiBkYXRhKSB7XG4gICAgICAgIGlmIChuID49IDIgKiogZnJvbSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4MjogaW52YWxpZCBkYXRhIHdvcmQ9JHtufSBmcm9tPSR7ZnJvbX1gKTtcbiAgICAgICAgY2FycnkgPSAoY2FycnkgPDwgZnJvbSkgfCBuO1xuICAgICAgICBpZiAocG9zICsgZnJvbSA+IDMyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXgyOiBjYXJyeSBvdmVyZmxvdyBwb3M9JHtwb3N9IGZyb209JHtmcm9tfWApO1xuICAgICAgICBwb3MgKz0gZnJvbTtcbiAgICAgICAgZm9yICg7IHBvcyA+PSB0bzsgcG9zIC09IHRvKVxuICAgICAgICAgICAgcmVzLnB1c2goKChjYXJyeSA+PiAocG9zIC0gdG8pKSAmIG1hc2spID4+PiAwKTtcbiAgICAgICAgY2FycnkgJj0gMiAqKiBwb3MgLSAxOyAvLyBjbGVhbiBjYXJyeSwgb3RoZXJ3aXNlIGl0IHdpbGwgY2F1c2Ugb3ZlcmZsb3dcbiAgICB9XG4gICAgY2FycnkgPSAoY2FycnkgPDwgKHRvIC0gcG9zKSkgJiBtYXNrO1xuICAgIGlmICghcGFkZGluZyAmJiBwb3MgPj0gZnJvbSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGNlc3MgcGFkZGluZycpO1xuICAgIGlmICghcGFkZGluZyAmJiBjYXJyeSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb24temVybyBwYWRkaW5nOiAke2NhcnJ5fWApO1xuICAgIGlmIChwYWRkaW5nICYmIHBvcyA+IDApXG4gICAgICAgIHJlcy5wdXNoKGNhcnJ5ID4+PiAwKTtcbiAgICByZXR1cm4gcmVzO1xufVxuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiByYWRpeChudW0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGU6IChieXRlcykgPT4ge1xuICAgICAgICAgICAgaWYgKCEoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JhZGl4LmVuY29kZSBpbnB1dCBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRSYWRpeChBcnJheS5mcm9tKGJ5dGVzKSwgMiAqKiA4LCBudW0pO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGU6IChkaWdpdHMpID0+IHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaWdpdHMpIHx8IChkaWdpdHMubGVuZ3RoICYmIHR5cGVvZiBkaWdpdHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JhZGl4LmRlY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5ncycpO1xuICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShjb252ZXJ0UmFkaXgoZGlnaXRzLCBudW0sIDIgKiogOCkpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIElmIGJvdGggYmFzZXMgYXJlIHBvd2VyIG9mIHNhbWUgbnVtYmVyIChsaWtlIGAyKio4IDwtPiAyKio2NGApLFxuICogdGhlcmUgaXMgYSBsaW5lYXIgYWxnb3JpdGhtLiBGb3Igbm93IHdlIGhhdmUgaW1wbGVtZW50YXRpb24gZm9yIHBvd2VyLW9mLXR3byBiYXNlcyBvbmx5LlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gcmFkaXgyKGJpdHMsIHJldlBhZGRpbmcgPSBmYWxzZSkge1xuICAgIGlmIChiaXRzIDw9IDAgfHwgYml0cyA+IDMyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JhZGl4MjogYml0cyBzaG91bGQgYmUgaW4gKDAuLjMyXScpO1xuICAgIGlmIChyYWRpeDJjYXJyeSg4LCBiaXRzKSA+IDMyIHx8IHJhZGl4MmNhcnJ5KGJpdHMsIDgpID4gMzIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmFkaXgyOiBjYXJyeSBvdmVyZmxvdycpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVuY29kZTogKGJ5dGVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIShieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmFkaXgyLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRSYWRpeDIoQXJyYXkuZnJvbShieXRlcyksIDgsIGJpdHMsICFyZXZQYWRkaW5nKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlOiAoZGlnaXRzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGlnaXRzKSB8fCAoZGlnaXRzLmxlbmd0aCAmJiB0eXBlb2YgZGlnaXRzWzBdICE9PSAnbnVtYmVyJykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyYWRpeDIuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGNvbnZlcnRSYWRpeDIoZGlnaXRzLCBiaXRzLCA4LCByZXZQYWRkaW5nKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gdW5zYWZlV3JhcHBlcihmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zYWZlV3JhcHBlciBmbiBzaG91bGQgYmUgZnVuY3Rpb24nKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfTtcbn1cbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gY2hlY2tzdW0obGVuLCBmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2hlY2tzdW0gZm4gc2hvdWxkIGJlIGZ1bmN0aW9uJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5jb2RlKGRhdGEpIHtcbiAgICAgICAgICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NoZWNrc3VtLmVuY29kZTogaW5wdXQgc2hvdWxkIGJlIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrc3VtID0gZm4oZGF0YSkuc2xpY2UoMCwgbGVuKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoICsgbGVuKTtcbiAgICAgICAgICAgIHJlcy5zZXQoZGF0YSk7XG4gICAgICAgICAgICByZXMuc2V0KGNoZWNrc3VtLCBkYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGUoZGF0YSkge1xuICAgICAgICAgICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2hlY2tzdW0uZGVjb2RlOiBpbnB1dCBzaG91bGQgYmUgVWludDhBcnJheScpO1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGRhdGEuc2xpY2UoMCwgLWxlbik7XG4gICAgICAgICAgICBjb25zdCBuZXdDaGVja3N1bSA9IGZuKHBheWxvYWQpLnNsaWNlKDAsIGxlbik7XG4gICAgICAgICAgICBjb25zdCBvbGRDaGVja3N1bSA9IGRhdGEuc2xpY2UoLWxlbik7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgICAgICAgICAgIGlmIChuZXdDaGVja3N1bVtpXSAhPT0gb2xkQ2hlY2tzdW1baV0pXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjaGVja3N1bScpO1xuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmNvbnN0IGJhc2U2NCA9IC8qIEBfX1BVUkVfXyAqLyBjaGFpbihyYWRpeDIoNiksIGFscGhhYmV0KCdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJyksIHBhZGRpbmcoNiksIGpvaW4oJycpKTtcbmNvbnN0IGJhc2U2NHVybCA9IC8qIEBfX1BVUkVfXyAqLyBjaGFpbihyYWRpeDIoNiksIGFscGhhYmV0KCdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS1fJyksIHBhZGRpbmcoNiksIGpvaW4oJycpKTtcbi8vIGJhc2U1OCBjb2RlXG4vLyAtLS0tLS0tLS0tLVxuY29uc3QgZ2VuQmFzZTU4ID0gKGFiYykgPT4gY2hhaW4ocmFkaXgoNTgpLCBhbHBoYWJldChhYmMpLCBqb2luKCcnKSk7XG5jb25zdCBiYXNlNTggPSAvKiBAX19QVVJFX18gKi8gZ2VuQmFzZTU4KCcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6Jyk7XG5jb25zdCBiYXNlNThjaGVjayA9IC8qIEBfX1BVUkVfXyAqLyAoc2hhMjU2KSA9PiBjaGFpbihjaGVja3N1bSg0LCAoZGF0YSkgPT4gc2hhMjU2KHNoYTI1NihkYXRhKSkpLCBiYXNlNTgpO1xuY29uc3QgQkVDSF9BTFBIQUJFVCA9IC8qIEBfX1BVUkVfXyAqLyBjaGFpbihhbHBoYWJldCgncXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2wnKSwgam9pbignJykpO1xuY29uc3QgUE9MWU1PRF9HRU5FUkFUT1JTID0gWzB4M2I2YTU3YjIsIDB4MjY1MDhlNmQsIDB4MWVhMTE5ZmEsIDB4M2Q0MjMzZGQsIDB4MmExNDYyYjNdO1xuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBiZWNoMzJQb2x5bW9kKHByZSkge1xuICAgIGNvbnN0IGIgPSBwcmUgPj4gMjU7XG4gICAgbGV0IGNoayA9IChwcmUgJiAweDFmZmZmZmYpIDw8IDU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBQT0xZTU9EX0dFTkVSQVRPUlMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCgoYiA+PiBpKSAmIDEpID09PSAxKVxuICAgICAgICAgICAgY2hrIF49IFBPTFlNT0RfR0VORVJBVE9SU1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaztcbn1cbi8qKlxuICogQF9fTk9fU0lERV9FRkZFQ1RTX19cbiAqL1xuZnVuY3Rpb24gYmVjaENoZWNrc3VtKHByZWZpeCwgd29yZHMsIGVuY29kaW5nQ29uc3QgPSAxKSB7XG4gICAgY29uc3QgbGVuID0gcHJlZml4Lmxlbmd0aDtcbiAgICBsZXQgY2hrID0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGMgPSBwcmVmaXguY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAzMyB8fCBjID4gMTI2KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHByZWZpeCAoJHtwcmVmaXh9KWApO1xuICAgICAgICBjaGsgPSBiZWNoMzJQb2x5bW9kKGNoaykgXiAoYyA+PiA1KTtcbiAgICB9XG4gICAgY2hrID0gYmVjaDMyUG9seW1vZChjaGspO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICAgIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKSBeIChwcmVmaXguY2hhckNvZGVBdChpKSAmIDB4MWYpO1xuICAgIGZvciAobGV0IHYgb2Ygd29yZHMpXG4gICAgICAgIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKSBeIHY7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspXG4gICAgICAgIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKTtcbiAgICBjaGsgXj0gZW5jb2RpbmdDb25zdDtcbiAgICByZXR1cm4gQkVDSF9BTFBIQUJFVC5lbmNvZGUoY29udmVydFJhZGl4MihbY2hrICUgMiAqKiAzMF0sIDMwLCA1LCBmYWxzZSkpO1xufVxuLyoqXG4gKiBAX19OT19TSURFX0VGRkVDVFNfX1xuICovXG5mdW5jdGlvbiBnZW5CZWNoMzIoZW5jb2RpbmcpIHtcbiAgICBjb25zdCBFTkNPRElOR19DT05TVCA9IGVuY29kaW5nID09PSAnYmVjaDMyJyA/IDEgOiAweDJiYzgzMGEzO1xuICAgIGNvbnN0IF93b3JkcyA9IHJhZGl4Mig1KTtcbiAgICBjb25zdCBmcm9tV29yZHMgPSBfd29yZHMuZGVjb2RlO1xuICAgIGNvbnN0IHRvV29yZHMgPSBfd29yZHMuZW5jb2RlO1xuICAgIGNvbnN0IGZyb21Xb3Jkc1Vuc2FmZSA9IHVuc2FmZVdyYXBwZXIoZnJvbVdvcmRzKTtcbiAgICBmdW5jdGlvbiBlbmNvZGUocHJlZml4LCB3b3JkcywgbGltaXQgPSA5MCkge1xuICAgICAgICBpZiAodHlwZW9mIHByZWZpeCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGJlY2gzMi5lbmNvZGUgcHJlZml4IHNob3VsZCBiZSBzdHJpbmcsIG5vdCAke3R5cGVvZiBwcmVmaXh9YCk7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh3b3JkcykgfHwgKHdvcmRzLmxlbmd0aCAmJiB0eXBlb2Ygd29yZHNbMF0gIT09ICdudW1iZXInKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYmVjaDMyLmVuY29kZSB3b3JkcyBzaG91bGQgYmUgYXJyYXkgb2YgbnVtYmVycywgbm90ICR7dHlwZW9mIHdvcmRzfWApO1xuICAgICAgICBjb25zdCBhY3R1YWxMZW5ndGggPSBwcmVmaXgubGVuZ3RoICsgNyArIHdvcmRzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxpbWl0ICE9PSBmYWxzZSAmJiBhY3R1YWxMZW5ndGggPiBsaW1pdClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYExlbmd0aCAke2FjdHVhbExlbmd0aH0gZXhjZWVkcyBsaW1pdCAke2xpbWl0fWApO1xuICAgICAgICBjb25zdCBsb3dlcmVkID0gcHJlZml4LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IHN1bSA9IGJlY2hDaGVja3N1bShsb3dlcmVkLCB3b3JkcywgRU5DT0RJTkdfQ09OU1QpO1xuICAgICAgICByZXR1cm4gYCR7bG93ZXJlZH0xJHtCRUNIX0FMUEhBQkVULmVuY29kZSh3b3Jkcyl9JHtzdW19YDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVjb2RlKHN0ciwgbGltaXQgPSA5MCkge1xuICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGJlY2gzMi5kZWNvZGUgaW5wdXQgc2hvdWxkIGJlIHN0cmluZywgbm90ICR7dHlwZW9mIHN0cn1gKTtcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPCA4IHx8IChsaW1pdCAhPT0gZmFsc2UgJiYgc3RyLmxlbmd0aCA+IGxpbWl0KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdyb25nIHN0cmluZyBsZW5ndGg6ICR7c3RyLmxlbmd0aH0gKCR7c3RyfSkuIEV4cGVjdGVkICg4Li4ke2xpbWl0fSlgKTtcbiAgICAgICAgLy8gZG9uJ3QgYWxsb3cgbWl4ZWQgY2FzZVxuICAgICAgICBjb25zdCBsb3dlcmVkID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChzdHIgIT09IGxvd2VyZWQgJiYgc3RyICE9PSBzdHIudG9VcHBlckNhc2UoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU3RyaW5nIG11c3QgYmUgbG93ZXJjYXNlIG9yIHVwcGVyY2FzZWApO1xuICAgICAgICBzdHIgPSBsb3dlcmVkO1xuICAgICAgICBjb25zdCBzZXBJbmRleCA9IHN0ci5sYXN0SW5kZXhPZignMScpO1xuICAgICAgICBpZiAoc2VwSW5kZXggPT09IDAgfHwgc2VwSW5kZXggPT09IC0xKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMZXR0ZXIgXCIxXCIgbXVzdCBiZSBwcmVzZW50IGJldHdlZW4gcHJlZml4IGFuZCBkYXRhIG9ubHlgKTtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gc3RyLnNsaWNlKDAsIHNlcEluZGV4KTtcbiAgICAgICAgY29uc3QgX3dvcmRzID0gc3RyLnNsaWNlKHNlcEluZGV4ICsgMSk7XG4gICAgICAgIGlmIChfd29yZHMubGVuZ3RoIDwgNilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YSBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVycyBsb25nJyk7XG4gICAgICAgIGNvbnN0IHdvcmRzID0gQkVDSF9BTFBIQUJFVC5kZWNvZGUoX3dvcmRzKS5zbGljZSgwLCAtNik7XG4gICAgICAgIGNvbnN0IHN1bSA9IGJlY2hDaGVja3N1bShwcmVmaXgsIHdvcmRzLCBFTkNPRElOR19DT05TVCk7XG4gICAgICAgIGlmICghX3dvcmRzLmVuZHNXaXRoKHN1bSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY2hlY2tzdW0gaW4gJHtzdHJ9OiBleHBlY3RlZCBcIiR7c3VtfVwiYCk7XG4gICAgICAgIHJldHVybiB7IHByZWZpeCwgd29yZHMgfTtcbiAgICB9XG4gICAgY29uc3QgZGVjb2RlVW5zYWZlID0gdW5zYWZlV3JhcHBlcihkZWNvZGUpO1xuICAgIGZ1bmN0aW9uIGRlY29kZVRvQnl0ZXMoc3RyKSB7XG4gICAgICAgIGNvbnN0IHsgcHJlZml4LCB3b3JkcyB9ID0gZGVjb2RlKHN0ciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzLCBieXRlczogZnJvbVdvcmRzKHdvcmRzKSB9O1xuICAgIH1cbiAgICByZXR1cm4geyBlbmNvZGUsIGRlY29kZSwgZGVjb2RlVG9CeXRlcywgZGVjb2RlVW5zYWZlLCBmcm9tV29yZHMsIGZyb21Xb3Jkc1Vuc2FmZSwgdG9Xb3JkcyB9O1xufVxuY29uc3QgYmVjaDMyID0gLyogQF9fUFVSRV9fICovIGdlbkJlY2gzMignYmVjaDMyJyk7XG5jb25zdCBiZWNoMzJtID0gLyogQF9fUFVSRV9fICovIGdlbkJlY2gzMignYmVjaDMybScpO1xuXG5jb25zdCBFbmNvZGVyID0ge1xuICAgIGI1OGNoazoge1xuICAgICAgICBlbmNvZGU6IChkYXRhKSA9PiBiYXNlNThjaGVjayhzaGEyNTYpLmVuY29kZShkYXRhKSxcbiAgICAgICAgZGVjb2RlOiAoZGF0YSkgPT4gYmFzZTU4Y2hlY2soc2hhMjU2KS5kZWNvZGUoZGF0YSlcbiAgICB9LFxuICAgIGJhc2U2NDoge1xuICAgICAgICBlbmNvZGU6IChkYXRhKSA9PiBiYXNlNjQuZW5jb2RlKGRhdGEpLFxuICAgICAgICBkZWNvZGU6IChkYXRhKSA9PiBiYXNlNjQuZGVjb2RlKGRhdGEpXG4gICAgfSxcbiAgICBiNjR1cmw6IHtcbiAgICAgICAgZW5jb2RlOiAoZGF0YSkgPT4gYmFzZTY0dXJsLmVuY29kZShkYXRhKSxcbiAgICAgICAgZGVjb2RlOiAoZGF0YSkgPT4gYmFzZTY0dXJsLmRlY29kZShkYXRhKVxuICAgIH0sXG4gICAgYmVjaDMyOiB7XG4gICAgICAgIHRvX3dvcmRzOiBiZWNoMzIudG9Xb3JkcyxcbiAgICAgICAgdG9fYnl0ZXM6IGJlY2gzMi5mcm9tV29yZHMsXG4gICAgICAgIGVuY29kZTogKHByZWZpeCwgd29yZHMsIGxpbWl0ID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBiZWNoMzIuZW5jb2RlKHByZWZpeCwgd29yZHMsIGxpbWl0KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlOiAoZGF0YSwgbGltaXQgPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBwcmVmaXgsIHdvcmRzIH0gPSBiZWNoMzIuZGVjb2RlKGRhdGEsIGxpbWl0KTtcbiAgICAgICAgICAgIHJldHVybiB7IHByZWZpeCwgd29yZHMgfTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVjaDMybToge1xuICAgICAgICB0b193b3JkczogYmVjaDMybS50b1dvcmRzLFxuICAgICAgICB0b19ieXRlczogYmVjaDMybS5mcm9tV29yZHMsXG4gICAgICAgIGVuY29kZTogKHByZWZpeCwgd29yZHMsIGxpbWl0ID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBiZWNoMzJtLmVuY29kZShwcmVmaXgsIHdvcmRzLCBsaW1pdCk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY29kZTogKGRhdGEsIGxpbWl0ID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcHJlZml4LCB3b3JkcyB9ID0gYmVjaDMybS5kZWNvZGUoZGF0YSwgbGltaXQpO1xuICAgICAgICAgICAgcmV0dXJuIHsgcHJlZml4LCB3b3JkcyB9O1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gd2l0aGluX3NpemUoZGF0YSwgc2l6ZSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA+IHNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRGF0YSBpcyBsYXJnZXIgdGhhbiBhcnJheSBzaXplOiAke2RhdGEubGVuZ3RofSA+ICR7c2l6ZX1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc19oZXgkMShoZXgpIHtcbiAgICBpZiAoaGV4Lm1hdGNoKC9bXmEtZkEtZjAtOV0vKSAhPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlcnMgaW4gaGV4IHN0cmluZzogJyArIGhleCk7XG4gICAgfVxuICAgIGlmIChoZXgubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExlbmd0aCBvZiBoZXggc3RyaW5nIGlzIGludmFsaWQ6ICR7aGV4Lmxlbmd0aH1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc19qc29uKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKU09OIHN0cmluZyBpcyBpbnZhbGlkIScpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzX3NhZmVfbnVtKG51bSkge1xuICAgIGlmIChudW0gPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOdW1iZXIgZXhjZWVkcyBzYWZlIGJvdW5kcyEnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc19wcmVmaXgoYWN0dWFsLCB0YXJnZXQpIHtcbiAgICBpZiAoYWN0dWFsICE9PSB0YXJnZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQmVjaDMyIHByZWZpeCBkb2VzIG5vdCBtYXRjaDogJHthY3R1YWx9ICE9PSAke3RhcmdldH1gKTtcbiAgICB9XG59XG5cbnZhciBhc3NlcnQgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIGlzX2hleDogaXNfaGV4JDEsXG4gICAgaXNfanNvbjogaXNfanNvbixcbiAgICBpc19wcmVmaXg6IGlzX3ByZWZpeCxcbiAgICBpc19zYWZlX251bTogaXNfc2FmZV9udW0sXG4gICAgd2l0aGluX3NpemU6IHdpdGhpbl9zaXplXG59KTtcblxuY29uc3QgXzBuID0gQmlnSW50KDApO1xuY29uc3QgXzI1NW4gPSBCaWdJbnQoMjU1KTtcbmNvbnN0IF8yNTZuID0gQmlnSW50KDI1Nik7XG5mdW5jdGlvbiBiaWdfc2l6ZShiaWcpIHtcbiAgICBpZiAoYmlnIDw9IDB4ZmZuKVxuICAgICAgICByZXR1cm4gMTtcbiAgICBpZiAoYmlnIDw9IDB4ZmZmZm4pXG4gICAgICAgIHJldHVybiAyO1xuICAgIGlmIChiaWcgPD0gMHhmZmZmZmZmZm4pXG4gICAgICAgIHJldHVybiA0O1xuICAgIGlmIChiaWcgPD0gMHhmZmZmZmZmZmZmZmZmZmZmbilcbiAgICAgICAgcmV0dXJuIDg7XG4gICAgaWYgKGJpZyA8PSAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmbilcbiAgICAgICAgcmV0dXJuIDE2O1xuICAgIGlmIChiaWcgPD0gMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmbikge1xuICAgICAgICByZXR1cm4gMzI7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ011c3Qgc3BlY2lmeSBhIGZpeGVkIGJ1ZmZlciBzaXplIGZvciBiaWdpbnRzIGdyZWF0ZXIgdGhhbiAzMiBieXRlcy4nKTtcbn1cbmZ1bmN0aW9uIGJpZ1RvQnl0ZXMoYmlnLCBzaXplLCBlbmRpYW4gPSAnYmUnKSB7XG4gICAgaWYgKHNpemUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgc2l6ZSA9IGJpZ19zaXplKGJpZyk7XG4gICAgY29uc3QgdXNlX2xlID0gKGVuZGlhbiA9PT0gJ2xlJyk7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHNpemUpO1xuICAgIGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgbGV0IG9mZnNldCA9ICh1c2VfbGUpID8gMCA6IHNpemUgLSAxO1xuICAgIHdoaWxlIChiaWcgPiBfMG4pIHtcbiAgICAgICAgY29uc3QgYnl0ZSA9IGJpZyAmIF8yNTVuO1xuICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIoYnl0ZSk7XG4gICAgICAgIGlmICh1c2VfbGUpIHtcbiAgICAgICAgICAgIGRhdGFWaWV3LnNldFVpbnQ4KG9mZnNldCsrLCBudW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YVZpZXcuc2V0VWludDgob2Zmc2V0LS0sIG51bSk7XG4gICAgICAgIH1cbiAgICAgICAgYmlnID0gKGJpZyAtIGJ5dGUpIC8gXzI1Nm47XG4gICAgfVxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIpO1xufVxuZnVuY3Rpb24gYnl0ZXNUb0JpZyhieXRlcykge1xuICAgIGxldCBudW0gPSBCaWdJbnQoMCk7XG4gICAgZm9yIChsZXQgaSA9IGJ5dGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIG51bSA9IChudW0gKiBfMjU2bikgKyBCaWdJbnQoYnl0ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gQmlnSW50KG51bSk7XG59XG5cbmZ1bmN0aW9uIGJpblRvQnl0ZXMoYmluYXJ5KSB7XG4gICAgY29uc3QgYmlucyA9IGJpbmFyeS5zcGxpdCgnJykubWFwKE51bWJlcik7XG4gICAgaWYgKGJpbnMubGVuZ3RoICUgOCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJpbmFyeSBhcnJheSBpcyBpbnZhbGlkIGxlbmd0aDogJHtiaW5hcnkubGVuZ3RofWApO1xuICAgIH1cbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJpbnMubGVuZ3RoIC8gOCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGN0ID0gMDsgaSA8IGJpbnMubGVuZ3RoOyBpICs9IDgsIGN0KyspIHtcbiAgICAgICAgbGV0IGJ5dGUgPSAwO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7IGorKykge1xuICAgICAgICAgICAgYnl0ZSB8PSAoYmluc1tpICsgal0gPDwgKDcgLSBqKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZXNbY3RdID0gYnl0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuZnVuY3Rpb24gYnl0ZXNUb0JpbihieXRlcykge1xuICAgIGNvbnN0IGJpbiA9IG5ldyBBcnJheShieXRlcy5sZW5ndGggKiA4KTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAoY29uc3QgbnVtIG9mIGJ5dGVzKSB7XG4gICAgICAgIGlmIChudW0gPiAyNTUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBieXRlIHZhbHVlOiAke251bX0uIEJ5dGUgdmFsdWVzIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyNTUuYCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDc7IGkgPj0gMDsgaS0tLCBjb3VudCsrKSB7XG4gICAgICAgICAgICBiaW5bY291bnRdID0gKG51bSA+PiBpKSAmIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJpbi5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gbnVtX3NpemUobnVtKSB7XG4gICAgaWYgKG51bSA8PSAweEZGKVxuICAgICAgICByZXR1cm4gMTtcbiAgICBpZiAobnVtIDw9IDB4RkZGRilcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgaWYgKG51bSA8PSAweEZGRkZGRkZGKVxuICAgICAgICByZXR1cm4gNDtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOdW1iZXJzIGxhcmdlciB0aGFuIDQgYnl0ZXMgbXVzdCBzcGVjaWZ5IGEgZml4ZWQgc2l6ZSEnKTtcbn1cbmZ1bmN0aW9uIG51bVRvQnl0ZXMobnVtLCBzaXplLCBlbmRpYW4gPSAnYmUnKSB7XG4gICAgaWYgKHNpemUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgc2l6ZSA9IG51bV9zaXplKG51bSk7XG4gICAgY29uc3QgdXNlX2xlID0gKGVuZGlhbiA9PT0gJ2xlJyk7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHNpemUpO1xuICAgIGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgbGV0IG9mZnNldCA9ICh1c2VfbGUpID8gMCA6IHNpemUgLSAxO1xuICAgIHdoaWxlIChudW0gPiAwKSB7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSBudW0gJiAyNTU7XG4gICAgICAgIGlmICh1c2VfbGUpIHtcbiAgICAgICAgICAgIGRhdGFWaWV3LnNldFVpbnQ4KG9mZnNldCsrLCBudW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YVZpZXcuc2V0VWludDgob2Zmc2V0LS0sIG51bSk7XG4gICAgICAgIH1cbiAgICAgICAgbnVtID0gKG51bSAtIGJ5dGUpIC8gMjU2O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzVG9OdW0oYnl0ZXMpIHtcbiAgICBsZXQgbnVtID0gMDtcbiAgICBmb3IgKGxldCBpID0gYnl0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgbnVtID0gKG51bSAqIDI1NikgKyBieXRlc1tpXTtcbiAgICAgICAgaXNfc2FmZV9udW0obnVtKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbn1cblxuY29uc3QgZWMgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmNvbnN0IGRjID0gbmV3IFRleHREZWNvZGVyKCk7XG5mdW5jdGlvbiBzdHJUb0J5dGVzKHN0cikge1xuICAgIHJldHVybiBlYy5lbmNvZGUoc3RyKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzVG9TdHIoYnl0ZXMpIHtcbiAgICByZXR1cm4gZGMuZGVjb2RlKGJ5dGVzKTtcbn1cbmZ1bmN0aW9uIGhleF9zaXplKGhleHN0ciwgc2l6ZSkge1xuICAgIGlzX2hleCQxKGhleHN0cik7XG4gICAgY29uc3QgbGVuID0gaGV4c3RyLmxlbmd0aCAvIDI7XG4gICAgaWYgKHNpemUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgc2l6ZSA9IGxlbjtcbiAgICBpZiAobGVuID4gc2l6ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBIZXggc3RyaW5nIGlzIGxhcmdlciB0aGFuIGFycmF5IHNpemU6ICR7bGVufSA+ICR7c2l6ZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemU7XG59XG5mdW5jdGlvbiBoZXhUb0J5dGVzKGhleHN0ciwgc2l6ZSwgZW5kaWFuID0gJ2xlJykge1xuICAgIHNpemUgPSBoZXhfc2l6ZShoZXhzdHIsIHNpemUpO1xuICAgIGNvbnN0IHVzZV9sZSA9IChlbmRpYW4gPT09ICdsZScpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihzaXplKTtcbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgIGxldCBvZmZzZXQgPSAodXNlX2xlKSA/IDAgOiBzaXplIC0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhleHN0ci5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBjb25zdCBjaGFyID0gaGV4c3RyLnN1YnN0cmluZyhpLCBpICsgMik7XG4gICAgICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KGNoYXIsIDE2KTtcbiAgICAgICAgaWYgKHVzZV9sZSkge1xuICAgICAgICAgICAgZGF0YVZpZXcuc2V0VWludDgob2Zmc2V0KyssIG51bSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhVmlldy5zZXRVaW50OChvZmZzZXQtLSwgbnVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzVG9IZXgoYnl0ZXMpIHtcbiAgICBsZXQgY2hhcnMgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoYXJzICs9IGJ5dGVzW2ldLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnM7XG59XG5jb25zdCBIZXggPSB7XG4gICAgZW5jb2RlOiBieXRlc1RvSGV4LFxuICAgIGRlY29kZTogaGV4VG9CeXRlc1xufTtcbmNvbnN0IFR4dCA9IHtcbiAgICBlbmNvZGU6IHN0clRvQnl0ZXMsXG4gICAgZGVjb2RlOiBieXRlc1RvU3RyXG59O1xuXG5jb25zdCB7IGdldFJhbmRvbVZhbHVlcyB9ID0gY3J5cHRvID8/IGdsb2JhbFRoaXMuY3J5cHRvID8/IHdpbmRvdy5jcnlwdG87XG5mdW5jdGlvbiByYW5kb20oc2l6ZSA9IDMyKSB7XG4gICAgaWYgKHR5cGVvZiBnZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NyeXB0byBtb2R1bGUgbWlzc2luZyBnZXRSYW5kb21WYWx1ZXMhJyk7XG59XG5mdW5jdGlvbiBpc19oZXgoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQubWF0Y2goL1teYS1mQS1mMC05XS8pID09PSBudWxsICYmXG4gICAgICAgIGlucHV0Lmxlbmd0aCAlIDIgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzX2J5dGVzKGlucHV0KSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgaXNfaGV4KGlucHV0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fFxuICAgICAgICB0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnIHx8XG4gICAgICAgIGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkgJiZcbiAgICAgICAgaW5wdXQuZXZlcnkoZSA9PiB0eXBlb2YgZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9idWZmZXIoZGF0YSwgc2l6ZSwgZW5kaWFuID0gJ2JlJykge1xuICAgIGlmIChzaXplID09PSB1bmRlZmluZWQpXG4gICAgICAgIHNpemUgPSBkYXRhLmxlbmd0aDtcbiAgICB3aXRoaW5fc2l6ZShkYXRhLCBzaXplKTtcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShzaXplKS5maWxsKDApO1xuICAgIGNvbnN0IG9mZnNldCA9IChlbmRpYW4gPT09ICdiZScpID8gMCA6IHNpemUgLSBkYXRhLmxlbmd0aDtcbiAgICBidWZmZXIuc2V0KGRhdGEsIG9mZnNldCk7XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIGpvaW5fYXJyYXkoYXJyKSB7XG4gICAgbGV0IGksIG9mZnNldCA9IDA7XG4gICAgY29uc3Qgc2l6ZSA9IGFyci5yZWR1Y2UoKGxlbiwgYXJyKSA9PiBsZW4gKyBhcnIubGVuZ3RoLCAwKTtcbiAgICBjb25zdCBidWZmID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhID0gYXJyW2ldO1xuICAgICAgICBidWZmLnNldChhLCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gYS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBidWZmO1xufVxuZnVuY3Rpb24gYmlnaW50X3JlcGxhY2VyKF8sIHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdiaWdpbnQnXG4gICAgICAgID8gYCR7dn1uYFxuICAgICAgICA6IHY7XG59XG5mdW5jdGlvbiBiaWdpbnRfcmV2aXZlcihfLCB2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJyAmJiAvbiQvLnRlc3QodilcbiAgICAgICAgPyBCaWdJbnQodi5zbGljZSgwLCAtMSkpXG4gICAgICAgIDogdjtcbn1cbmZ1bmN0aW9uIHBhcnNlX2RhdGEkMShkYXRhX2Jsb2IsIGNodW5rX3NpemUsIHRvdGFsX3NpemUpIHtcbiAgICBjb25zdCBsZW4gPSBkYXRhX2Jsb2IubGVuZ3RoLCBjb3VudCA9IHRvdGFsX3NpemUgLyBjaHVua19zaXplO1xuICAgIGlmICh0b3RhbF9zaXplICUgY2h1bmtfc2l6ZSAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHBhcmFtZXRlcnM6ICR7dG90YWxfc2l6ZX0gJSAke2NodW5rX3NpemV9ICE9PSAwYCk7XG4gICAgfVxuICAgIGlmIChsZW4gIT09IHRvdGFsX3NpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBkYXRhIHN0cmVhbTogJHtsZW59ICE9PSAke3RvdGFsX3NpemV9YCk7XG4gICAgfVxuICAgIGlmIChsZW4gJSBjaHVua19zaXplICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgZGF0YSBzdHJlYW06ICR7bGVufSAlICR7Y2h1bmtfc2l6ZX0gIT09IDBgKTtcbiAgICB9XG4gICAgY29uc3QgY2h1bmtzID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgaWR4ID0gaSAqIGNodW5rX3NpemU7XG4gICAgICAgIGNodW5rc1tpXSA9IGRhdGFfYmxvYi5zdWJhcnJheShpZHgsIGlkeCArIGNodW5rX3NpemUpO1xuICAgIH1cbiAgICByZXR1cm4gY2h1bmtzO1xufVxuXG52YXIgdXRpbHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIGJpZ2ludF9yZXBsYWNlcjogYmlnaW50X3JlcGxhY2VyLFxuICAgIGJpZ2ludF9yZXZpdmVyOiBiaWdpbnRfcmV2aXZlcixcbiAgICBpc19ieXRlczogaXNfYnl0ZXMsXG4gICAgaXNfaGV4OiBpc19oZXgsXG4gICAgam9pbl9hcnJheTogam9pbl9hcnJheSxcbiAgICBwYXJzZV9kYXRhOiBwYXJzZV9kYXRhJDEsXG4gICAgcmFuZG9tOiByYW5kb20sXG4gICAgc2V0X2J1ZmZlcjogc2V0X2J1ZmZlclxufSk7XG5cbmZ1bmN0aW9uIGJ1ZmZlcl9kYXRhKGRhdGEsIHNpemUsIGVuZGlhbikge1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gc2V0X2J1ZmZlcihkYXRhLCBzaXplLCBlbmRpYW4pO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gZGF0YS5tYXAoZSA9PiBidWZmZXJfZGF0YShlLCBzaXplLCBlbmRpYW4pKTtcbiAgICAgICAgcmV0dXJuIGpvaW5fYXJyYXkoYnl0ZXMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGhleFRvQnl0ZXMoZGF0YSwgc2l6ZSwgZW5kaWFuKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIHJldHVybiBiaWdUb0J5dGVzKGRhdGEsIHNpemUsIGVuZGlhbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gbnVtVG9CeXRlcyhkYXRhLCBzaXplLCBlbmRpYW4pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5Lm9mKGRhdGEgPyAxIDogMCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vuc3VwcG9ydGVkIGZvcm1hdDonICsgU3RyaW5nKHR5cGVvZiBkYXRhKSk7XG59XG5cbmNsYXNzIEJ1ZmYgZXh0ZW5kcyBVaW50OEFycmF5IHtcbiAgICBzdGF0aWMgeyB0aGlzLm51bSA9IG51bVRvQnVmZjsgfVxuICAgIHN0YXRpYyB7IHRoaXMuYmlnID0gYmlnVG9CdWZmOyB9XG4gICAgc3RhdGljIHsgdGhpcy5iaW4gPSBiaW5Ub0J1ZmY7IH1cbiAgICBzdGF0aWMgeyB0aGlzLnJhdyA9IHJhd1RvQnVmZjsgfVxuICAgIHN0YXRpYyB7IHRoaXMuc3RyID0gc3RyVG9CdWZmOyB9XG4gICAgc3RhdGljIHsgdGhpcy5oZXggPSBoZXhUb0J1ZmY7IH1cbiAgICBzdGF0aWMgeyB0aGlzLmJ5dGVzID0gYnVmZmVyOyB9XG4gICAgc3RhdGljIHsgdGhpcy5qc29uID0ganNvblRvQnVmZjsgfVxuICAgIHN0YXRpYyB7IHRoaXMuYmFzZTY0ID0gYmFzZTY0VG9CdWZmOyB9XG4gICAgc3RhdGljIHsgdGhpcy5iNjR1cmwgPSBiNjR1cmxUb0J1ZmY7IH1cbiAgICBzdGF0aWMgeyB0aGlzLmJlY2gzMiA9IGJlY2gzMlRvQnVmZjsgfVxuICAgIHN0YXRpYyB7IHRoaXMuYmVjaDMybSA9IGJlY2gzMm1Ub0J1ZmY7IH1cbiAgICBzdGF0aWMgeyB0aGlzLmI1OGNoayA9IGI1OGNoa1RvQnVmZjsgfVxuICAgIHN0YXRpYyB7IHRoaXMuZW5jb2RlID0gc3RyVG9CeXRlczsgfVxuICAgIHN0YXRpYyB7IHRoaXMuZGVjb2RlID0gYnl0ZXNUb1N0cjsgfVxuICAgIHN0YXRpYyB7IHRoaXMucGFyc2UgPSBwYXJzZV9kYXRhOyB9XG4gICAgc3RhdGljIHsgdGhpcy5pc19ieXRlcyA9IGlzX2J5dGVzOyB9XG4gICAgc3RhdGljIHsgdGhpcy5pc19oZXggPSBpc19oZXg7IH1cbiAgICBzdGF0aWMgcmFuZG9tKHNpemUgPSAzMikge1xuICAgICAgICBjb25zdCByYW5kID0gcmFuZG9tKHNpemUpO1xuICAgICAgICByZXR1cm4gbmV3IEJ1ZmYocmFuZCwgc2l6ZSk7XG4gICAgfVxuICAgIHN0YXRpYyBub3coc2l6ZSA9IDQpIHtcbiAgICAgICAgY29uc3Qgc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmKHN0YW1wLCBzaXplKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGF0YSwgc2l6ZSwgZW5kaWFuKSB7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQnVmZiAmJlxuICAgICAgICAgICAgc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWZmZXIgPSBidWZmZXJfZGF0YShkYXRhLCBzaXplLCBlbmRpYW4pO1xuICAgICAgICBzdXBlcihidWZmZXIpO1xuICAgIH1cbiAgICBnZXQgYXJyKCkge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXNdO1xuICAgIH1cbiAgICBnZXQgbnVtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b19udW0oKTtcbiAgICB9XG4gICAgZ2V0IGJpZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9fYmlnKCk7XG4gICAgfVxuICAgIGdldCBzdHIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvX3N0cigpO1xuICAgIH1cbiAgICBnZXQgaGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b19oZXgoKTtcbiAgICB9XG4gICAgZ2V0IHJhdygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMpO1xuICAgIH1cbiAgICBnZXQgYmluKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b19iaW4oKTtcbiAgICB9XG4gICAgZ2V0IGI1OGNoaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9fYjU4Y2hrKCk7XG4gICAgfVxuICAgIGdldCBiYXNlNjQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvX2Jhc2U2NCgpO1xuICAgIH1cbiAgICBnZXQgYjY0dXJsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b19iNjR1cmwoKTtcbiAgICB9XG4gICAgZ2V0IGRpZ2VzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9faGFzaCgpO1xuICAgIH1cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvX2hhc2goKS5oZXg7XG4gICAgfVxuICAgIGdldCBzdHJlYW0oKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKHRoaXMpO1xuICAgIH1cbiAgICB0b19udW0oZW5kaWFuID0gJ2JlJykge1xuICAgICAgICBjb25zdCBieXRlcyA9IChlbmRpYW4gPT09ICdiZScpXG4gICAgICAgICAgICA/IHRoaXMucmV2ZXJzZSgpXG4gICAgICAgICAgICA6IHRoaXM7XG4gICAgICAgIHJldHVybiBieXRlc1RvTnVtKGJ5dGVzKTtcbiAgICB9XG4gICAgdG9fYmlnKGVuZGlhbiA9ICdiZScpIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSAoZW5kaWFuID09PSAnYmUnKVxuICAgICAgICAgICAgPyB0aGlzLnJldmVyc2UoKVxuICAgICAgICAgICAgOiB0aGlzO1xuICAgICAgICByZXR1cm4gYnl0ZXNUb0JpZyhieXRlcyk7XG4gICAgfVxuICAgIHRvX2JpbigpIHtcbiAgICAgICAgcmV0dXJuIGJ5dGVzVG9CaW4odGhpcyk7XG4gICAgfVxuICAgIHRvX2hhc2goKSB7XG4gICAgICAgIGNvbnN0IGRpZ2VzdCA9IHNoYTI1Nih0aGlzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmKGRpZ2VzdCk7XG4gICAgfVxuICAgIHRvX2pzb24ocmV2aXZlcikge1xuICAgICAgICBpZiAocmV2aXZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXZpdmVyID0gYmlnaW50X3Jldml2ZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RyID0gYnl0ZXNUb1N0cih0aGlzKTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyLCByZXZpdmVyKTtcbiAgICB9XG4gICAgdG9fYmVjaDMyKHByZWZpeCwgbGltaXQpIHtcbiAgICAgICAgY29uc3QgeyBlbmNvZGUsIHRvX3dvcmRzIH0gPSBFbmNvZGVyLmJlY2gzMjtcbiAgICAgICAgY29uc3Qgd29yZHMgPSB0b193b3Jkcyh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGVuY29kZShwcmVmaXgsIHdvcmRzLCBsaW1pdCk7XG4gICAgfVxuICAgIHRvX2JlY2gzMm0ocHJlZml4LCBsaW1pdCkge1xuICAgICAgICBjb25zdCB7IGVuY29kZSwgdG9fd29yZHMgfSA9IEVuY29kZXIuYmVjaDMybTtcbiAgICAgICAgY29uc3Qgd29yZHMgPSB0b193b3Jkcyh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGVuY29kZShwcmVmaXgsIHdvcmRzLCBsaW1pdCk7XG4gICAgfVxuICAgIHRvX3N0cigpIHsgcmV0dXJuIGJ5dGVzVG9TdHIodGhpcyk7IH1cbiAgICB0b19oZXgoKSB7IHJldHVybiBieXRlc1RvSGV4KHRoaXMpOyB9XG4gICAgdG9fYnl0ZXMoKSB7IHJldHVybiBuZXcgVWludDhBcnJheSh0aGlzKTsgfVxuICAgIHRvX2I1OGNoaygpIHsgcmV0dXJuIEVuY29kZXIuYjU4Y2hrLmVuY29kZSh0aGlzKTsgfVxuICAgIHRvX2Jhc2U2NCgpIHsgcmV0dXJuIEVuY29kZXIuYmFzZTY0LmVuY29kZSh0aGlzKTsgfVxuICAgIHRvX2I2NHVybCgpIHsgcmV0dXJuIEVuY29kZXIuYjY0dXJsLmVuY29kZSh0aGlzKTsgfVxuICAgIGFwcGVuZChkYXRhKSB7XG4gICAgICAgIHJldHVybiBCdWZmLmpvaW4oW3RoaXMsIEJ1ZmYuYnl0ZXMoZGF0YSldKTtcbiAgICB9XG4gICAgcHJlcGVuZChkYXRhKSB7XG4gICAgICAgIHJldHVybiBCdWZmLmpvaW4oW0J1ZmYuYnl0ZXMoZGF0YSksIHRoaXNdKTtcbiAgICB9XG4gICAgcmV2ZXJzZSgpIHtcbiAgICAgICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkodGhpcykucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gbmV3IEJ1ZmYoYXJyKTtcbiAgICB9XG4gICAgc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSh0aGlzKS5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmKGFycik7XG4gICAgfVxuICAgIHNldChhcnJheSwgb2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuc2V0KGFycmF5LCBvZmZzZXQpO1xuICAgIH1cbiAgICBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KHRoaXMpLnN1YmFycmF5KGJlZ2luLCBlbmQpO1xuICAgICAgICByZXR1cm4gbmV3IEJ1ZmYoYXJyKTtcbiAgICB9XG4gICAgd3JpdGUoYnl0ZXMsIG9mZnNldCkge1xuICAgICAgICBjb25zdCBiID0gQnVmZi5ieXRlcyhieXRlcyk7XG4gICAgICAgIHRoaXMuc2V0KGIsIG9mZnNldCk7XG4gICAgfVxuICAgIGFkZF92YXJpbnQoZW5kaWFuKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBCdWZmLmNhbGNfdmFyaW50KHRoaXMubGVuZ3RoLCBlbmRpYW4pO1xuICAgICAgICByZXR1cm4gQnVmZi5qb2luKFtzaXplLCB0aGlzXSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmKFVpbnQ4QXJyYXkuZnJvbShkYXRhKSk7XG4gICAgfVxuICAgIHN0YXRpYyBvZiguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBuZXcgQnVmZihVaW50OEFycmF5Lm9mKC4uLmFyZ3MpKTtcbiAgICB9XG4gICAgc3RhdGljIGpvaW4oYXJyKSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gYXJyLm1hcChlID0+IEJ1ZmYuYnl0ZXMoZSkpO1xuICAgICAgICBjb25zdCBqb2luZWQgPSBqb2luX2FycmF5KGJ5dGVzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmKGpvaW5lZCk7XG4gICAgfVxuICAgIHN0YXRpYyBzb3J0KGFyciwgc2l6ZSkge1xuICAgICAgICBjb25zdCBoZXggPSBhcnIubWFwKGUgPT4gYnVmZmVyKGUsIHNpemUpLmhleCk7XG4gICAgICAgIGhleC5zb3J0KCk7XG4gICAgICAgIHJldHVybiBoZXgubWFwKGUgPT4gQnVmZi5oZXgoZSwgc2l6ZSkpO1xuICAgIH1cbiAgICBzdGF0aWMgY2FsY192YXJpbnQobnVtLCBlbmRpYW4pIHtcbiAgICAgICAgaWYgKG51bSA8IDB4RkQpIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmLm51bShudW0sIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG51bSA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmLm9mKDB4RkQsIC4uLkJ1ZmYubnVtKG51bSwgMiwgZW5kaWFuKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobnVtIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmLm9mKDB4RkUsIC4uLkJ1ZmYubnVtKG51bSwgNCwgZW5kaWFuKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQmlnSW50KG51bSkgPCAweDEwMDAwMDAwMDAwMDAwMDAwbikge1xuICAgICAgICAgICAgcmV0dXJuIEJ1ZmYub2YoMHhGRiwgLi4uQnVmZi5udW0obnVtLCA4LCBlbmRpYW4pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgaXMgdG9vIGxhcmdlOiAke251bX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIG51bVRvQnVmZihudW1iZXIsIHNpemUsIGVuZGlhbikge1xuICAgIHJldHVybiBuZXcgQnVmZihudW1iZXIsIHNpemUsIGVuZGlhbik7XG59XG5mdW5jdGlvbiBiaW5Ub0J1ZmYoZGF0YSwgc2l6ZSwgZW5kaWFuKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmKGJpblRvQnl0ZXMoZGF0YSksIHNpemUsIGVuZGlhbik7XG59XG5mdW5jdGlvbiBiaWdUb0J1ZmYoYmlnaW50LCBzaXplLCBlbmRpYW4pIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmYoYmlnaW50LCBzaXplLCBlbmRpYW4pO1xufVxuZnVuY3Rpb24gcmF3VG9CdWZmKGRhdGEsIHNpemUsIGVuZGlhbikge1xuICAgIHJldHVybiBuZXcgQnVmZihkYXRhLCBzaXplLCBlbmRpYW4pO1xufVxuZnVuY3Rpb24gc3RyVG9CdWZmKGRhdGEsIHNpemUsIGVuZGlhbikge1xuICAgIHJldHVybiBuZXcgQnVmZihzdHJUb0J5dGVzKGRhdGEpLCBzaXplLCBlbmRpYW4pO1xufVxuZnVuY3Rpb24gaGV4VG9CdWZmKGRhdGEsIHNpemUsIGVuZGlhbikge1xuICAgIHJldHVybiBuZXcgQnVmZihkYXRhLCBzaXplLCBlbmRpYW4pO1xufVxuZnVuY3Rpb24ganNvblRvQnVmZihkYXRhLCByZXBsYWNlcikge1xuICAgIGlmIChyZXBsYWNlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcGxhY2VyID0gYmlnaW50X3JlcGxhY2VyO1xuICAgIH1cbiAgICBjb25zdCBzdHIgPSBKU09OLnN0cmluZ2lmeShkYXRhLCByZXBsYWNlcik7XG4gICAgcmV0dXJuIG5ldyBCdWZmKHN0clRvQnl0ZXMoc3RyKSk7XG59XG5mdW5jdGlvbiBiYXNlNjRUb0J1ZmYoZGF0YSkge1xuICAgIHJldHVybiBuZXcgQnVmZihFbmNvZGVyLmJhc2U2NC5kZWNvZGUoZGF0YSkpO1xufVxuZnVuY3Rpb24gYjY0dXJsVG9CdWZmKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmYoRW5jb2Rlci5iNjR1cmwuZGVjb2RlKGRhdGEpKTtcbn1cbmZ1bmN0aW9uIGJlY2gzMlRvQnVmZihkYXRhLCBsaW1pdCwgY2hrX3ByZWZpeCkge1xuICAgIGNvbnN0IHsgZGVjb2RlLCB0b19ieXRlcyB9ID0gRW5jb2Rlci5iZWNoMzI7XG4gICAgY29uc3QgeyBwcmVmaXgsIHdvcmRzIH0gPSBkZWNvZGUoZGF0YSwgbGltaXQpO1xuICAgIGNvbnN0IGJ5dGVzID0gdG9fYnl0ZXMod29yZHMpO1xuICAgIGlmICh0eXBlb2YgY2hrX3ByZWZpeCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaXNfcHJlZml4KHByZWZpeCwgY2hrX3ByZWZpeCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQnVmZihieXRlcyk7XG59XG5mdW5jdGlvbiBiZWNoMzJtVG9CdWZmKGRhdGEsIGxpbWl0LCBjaGtfcHJlZml4KSB7XG4gICAgY29uc3QgeyBkZWNvZGUsIHRvX2J5dGVzIH0gPSBFbmNvZGVyLmJlY2gzMm07XG4gICAgY29uc3QgeyBwcmVmaXgsIHdvcmRzIH0gPSBkZWNvZGUoZGF0YSwgbGltaXQpO1xuICAgIGNvbnN0IGJ5dGVzID0gdG9fYnl0ZXMod29yZHMpO1xuICAgIGlmICh0eXBlb2YgY2hrX3ByZWZpeCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaXNfcHJlZml4KHByZWZpeCwgY2hrX3ByZWZpeCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQnVmZihieXRlcyk7XG59XG5mdW5jdGlvbiBiNThjaGtUb0J1ZmYoZGF0YSkge1xuICAgIHJldHVybiBuZXcgQnVmZihFbmNvZGVyLmI1OGNoay5kZWNvZGUoZGF0YSkpO1xufVxuZnVuY3Rpb24gcGFyc2VfZGF0YShkYXRhX2Jsb2IsIGNodW5rX3NpemUsIHRvdGFsX3NpemUpIHtcbiAgICBjb25zdCBieXRlcyA9IGJ1ZmZlcl9kYXRhKGRhdGFfYmxvYik7XG4gICAgY29uc3QgY2h1bmtzID0gcGFyc2VfZGF0YSQxKGJ5dGVzLCBjaHVua19zaXplLCB0b3RhbF9zaXplKTtcbiAgICByZXR1cm4gY2h1bmtzLm1hcChlID0+IEJ1ZmYuYnl0ZXMoZSkpO1xufVxuY2xhc3MgU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IEJ1ZmYuYnl0ZXMoZGF0YSk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuZGF0YS5sZW5ndGg7XG4gICAgfVxuICAgIHBlZWsoc2l6ZSkge1xuICAgICAgICBpZiAoc2l6ZSA+IHRoaXMuc2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTaXplIGdyZWF0ZXIgdGhhbiBzdHJlYW06ICR7c2l6ZX0gPiAke3RoaXMuc2l6ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEJ1ZmYodGhpcy5kYXRhLnNsaWNlKDAsIHNpemUpKTtcbiAgICB9XG4gICAgcmVhZChzaXplKSB7XG4gICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5wZWVrKHNpemUpO1xuICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmRhdGEuc2xpY2Uoc2l6ZSk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuZGF0YS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBjaHVuaztcbiAgICB9XG4gICAgcmVhZF92YXJpbnQoZW5kaWFuKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IHRoaXMucmVhZCgxKS5udW07XG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgY2FzZSAobnVtID49IDAgJiYgbnVtIDwgMHhGRCk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bTtcbiAgICAgICAgICAgIGNhc2UgKG51bSA9PT0gMHhGRCk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZCgyKS50b19udW0oZW5kaWFuKTtcbiAgICAgICAgICAgIGNhc2UgKG51bSA9PT0gMHhGRSk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZCg0KS50b19udW0oZW5kaWFuKTtcbiAgICAgICAgICAgIGNhc2UgKG51bSA9PT0gMHhGRik6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZCg4KS50b19udW0oZW5kaWFuKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBWYXJpbnQgaXMgb3V0IG9mIHJhbmdlOiAke251bX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGJ1ZmZlcihieXRlcywgc2l6ZSwgZW5kKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmKGJ5dGVzLCBzaXplLCBlbmQpO1xufVxuXG5leHBvcnQgeyBCdWZmLCBFbmNvZGVyLCBIZXgsIFN0cmVhbSwgVHh0LCBhc3NlcnQsIGJ1ZmZlciwgdXRpbHMgYXMgdXRpbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/assert.js":
/*!***************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/assert.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   is_hex: () => (/* binding */ is_hex),\n/* harmony export */   is_json: () => (/* binding */ is_json),\n/* harmony export */   is_prefix: () => (/* binding */ is_prefix),\n/* harmony export */   is_safe_num: () => (/* binding */ is_safe_num),\n/* harmony export */   within_size: () => (/* binding */ within_size)\n/* harmony export */ });\nfunction within_size(data, size) {\n    if (data.length > size) {\n        throw new TypeError(`Data is larger than array size: ${data.length} > ${size}`);\n    }\n}\nfunction is_hex(hex) {\n    if (hex.match(/[^a-fA-f0-9]/) !== null) {\n        throw new TypeError('Invalid characters in hex string: ' + hex);\n    }\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Length of hex string is invalid: ${hex.length}`);\n    }\n}\nfunction is_json(str) {\n    try {\n        JSON.parse(str);\n    }\n    catch {\n        throw new TypeError('JSON string is invalid!');\n    }\n}\nfunction is_safe_num(num) {\n    if (num > Number.MAX_SAFE_INTEGER) {\n        throw new TypeError('Number exceeds safe bounds!');\n    }\n}\nfunction is_prefix(actual, target) {\n    if (actual !== target) {\n        throw new TypeError(`Bech32 prefix does not match: ${actual} !== ${target}`);\n    }\n}\n//# sourceMappingURL=assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFPO0FBQ1A7QUFDQSwrREFBK0QsYUFBYSxJQUFJLEtBQUs7QUFDckY7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsV0FBVztBQUN2RTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsNkRBQTZELFFBQVEsTUFBTSxPQUFPO0FBQ2xGO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2J1ZmYvZGlzdC9hc3NlcnQuanM/ZTQzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gd2l0aGluX3NpemUoZGF0YSwgc2l6ZSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA+IHNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRGF0YSBpcyBsYXJnZXIgdGhhbiBhcnJheSBzaXplOiAke2RhdGEubGVuZ3RofSA+ICR7c2l6ZX1gKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNfaGV4KGhleCkge1xuICAgIGlmIChoZXgubWF0Y2goL1teYS1mQS1mMC05XS8pICE9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVycyBpbiBoZXggc3RyaW5nOiAnICsgaGV4KTtcbiAgICB9XG4gICAgaWYgKGhleC5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTGVuZ3RoIG9mIGhleCBzdHJpbmcgaXMgaW52YWxpZDogJHtoZXgubGVuZ3RofWApO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc19qc29uKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKU09OIHN0cmluZyBpcyBpbnZhbGlkIScpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc19zYWZlX251bShudW0pIHtcbiAgICBpZiAobnVtID4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTnVtYmVyIGV4Y2VlZHMgc2FmZSBib3VuZHMhJyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzX3ByZWZpeChhY3R1YWwsIHRhcmdldCkge1xuICAgIGlmIChhY3R1YWwgIT09IHRhcmdldCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBCZWNoMzIgcHJlZml4IGRvZXMgbm90IG1hdGNoOiAke2FjdHVhbH0gIT09ICR7dGFyZ2V0fWApO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/buff.js":
/*!*************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/buff.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Buff: () => (/* binding */ Buff),\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   buffer: () => (/* binding */ buffer)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/assert.js\");\n/* harmony import */ var _encode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encode.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/encode.js\");\n/* harmony import */ var _format_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format/index.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/utils.js\");\n\n\n\n\n\n\nclass Buff extends Uint8Array {\n    static { this.num = numToBuff; }\n    static { this.big = bigToBuff; }\n    static { this.bin = binToBuff; }\n    static { this.raw = rawToBuff; }\n    static { this.str = strToBuff; }\n    static { this.hex = hexToBuff; }\n    static { this.bytes = buffer; }\n    static { this.json = jsonToBuff; }\n    static { this.base64 = base64ToBuff; }\n    static { this.b64url = b64urlToBuff; }\n    static { this.bech32 = bech32ToBuff; }\n    static { this.bech32m = bech32mToBuff; }\n    static { this.b58chk = b58chkToBuff; }\n    static { this.encode = _format_index_js__WEBPACK_IMPORTED_MODULE_2__.strToBytes; }\n    static { this.decode = _format_index_js__WEBPACK_IMPORTED_MODULE_2__.bytesToStr; }\n    static { this.parse = parse_data; }\n    static { this.is_bytes = _utils_js__WEBPACK_IMPORTED_MODULE_3__.is_bytes; }\n    static { this.is_hex = _utils_js__WEBPACK_IMPORTED_MODULE_3__.is_hex; }\n    static { this.is_equal = is_equal; }\n    static random(size = 32) {\n        const rand = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(size);\n        return new Buff(rand, size);\n    }\n    static now(size = 4) {\n        const stamp = Math.floor(Date.now() / 1000);\n        return new Buff(stamp, size);\n    }\n    constructor(data, size, endian) {\n        if (data instanceof Buff &&\n            size === undefined) {\n            return data;\n        }\n        const buffer = _format_index_js__WEBPACK_IMPORTED_MODULE_2__.buffer_data(data, size, endian);\n        super(buffer);\n    }\n    get arr() {\n        return [...this];\n    }\n    get num() {\n        return this.to_num();\n    }\n    get big() {\n        return this.to_big();\n    }\n    get str() {\n        return this.to_str();\n    }\n    get hex() {\n        return this.to_hex();\n    }\n    get raw() {\n        return new Uint8Array(this);\n    }\n    get bin() {\n        return this.to_bin();\n    }\n    get b58chk() {\n        return this.to_b58chk();\n    }\n    get base64() {\n        return this.to_base64();\n    }\n    get b64url() {\n        return this.to_b64url();\n    }\n    get digest() {\n        return this.to_hash();\n    }\n    get id() {\n        return this.to_hash().hex;\n    }\n    get stream() {\n        return new Stream(this);\n    }\n    to_num(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return _format_index_js__WEBPACK_IMPORTED_MODULE_2__.bytesToNum(bytes);\n    }\n    to_big(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return _format_index_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBig(bytes);\n    }\n    to_bin() {\n        return _format_index_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBin(this);\n    }\n    to_hash() {\n        const digest = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__.sha256)(this);\n        return new Buff(digest);\n    }\n    to_json(reviver) {\n        if (reviver === undefined) {\n            reviver = _utils_js__WEBPACK_IMPORTED_MODULE_3__.bigint_reviver;\n        }\n        const str = _format_index_js__WEBPACK_IMPORTED_MODULE_2__.bytesToStr(this);\n        return JSON.parse(str, reviver);\n    }\n    to_bech32(prefix, limit) {\n        const { encode, to_words } = _encode_js__WEBPACK_IMPORTED_MODULE_1__.Bech32;\n        const words = to_words(this);\n        return encode(prefix, words, limit);\n    }\n    to_bech32m(prefix, limit) {\n        const { encode, to_words } = _encode_js__WEBPACK_IMPORTED_MODULE_1__.Bech32m;\n        const words = to_words(this);\n        return encode(prefix, words, limit);\n    }\n    to_str() { return _format_index_js__WEBPACK_IMPORTED_MODULE_2__.bytesToStr(this); }\n    to_hex() { return _format_index_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex(this); }\n    to_bytes() { return new Uint8Array(this); }\n    to_b58chk() { return _encode_js__WEBPACK_IMPORTED_MODULE_1__.B58chk.encode(this); }\n    to_base64() { return _encode_js__WEBPACK_IMPORTED_MODULE_1__.Base64.encode(this); }\n    to_b64url() { return _encode_js__WEBPACK_IMPORTED_MODULE_1__.B64url.encode(this); }\n    append(data) {\n        return Buff.join([this, Buff.bytes(data)]);\n    }\n    equals(data) {\n        return buffer(data).hex === this.hex;\n    }\n    prepend(data) {\n        return Buff.join([Buff.bytes(data), this]);\n    }\n    reverse() {\n        const arr = new Uint8Array(this).reverse();\n        return new Buff(arr);\n    }\n    slice(start, end) {\n        const arr = new Uint8Array(this).slice(start, end);\n        return new Buff(arr);\n    }\n    set(array, offset) {\n        this.set(array, offset);\n    }\n    subarray(begin, end) {\n        const arr = new Uint8Array(this).subarray(begin, end);\n        return new Buff(arr);\n    }\n    write(bytes, offset) {\n        const b = Buff.bytes(bytes);\n        this.set(b, offset);\n    }\n    add_varint(endian) {\n        const size = Buff.calc_varint(this.length, endian);\n        return Buff.join([size, this]);\n    }\n    toJSON() {\n        return this.hex;\n    }\n    toString() {\n        return this.hex;\n    }\n    static from(data) {\n        return new Buff(Uint8Array.from(data));\n    }\n    static of(...args) {\n        return new Buff(Uint8Array.of(...args));\n    }\n    static join(arr) {\n        const bytes = arr.map(e => Buff.bytes(e));\n        const joined = _utils_js__WEBPACK_IMPORTED_MODULE_3__.join_array(bytes);\n        return new Buff(joined);\n    }\n    static sort(arr, size) {\n        const hex = arr.map(e => buffer(e, size).hex);\n        hex.sort();\n        return hex.map(e => Buff.hex(e, size));\n    }\n    static calc_varint(num, endian) {\n        if (num < 0xFD) {\n            return Buff.num(num, 1);\n        }\n        else if (num < 0x10000) {\n            return Buff.of(0xFD, ...Buff.num(num, 2, endian));\n        }\n        else if (num < 0x100000000) {\n            return Buff.of(0xFE, ...Buff.num(num, 4, endian));\n        }\n        else if (BigInt(num) < 0x10000000000000000n) {\n            return Buff.of(0xFF, ...Buff.num(num, 8, endian));\n        }\n        else {\n            throw new Error(`Value is too large: ${num}`);\n        }\n    }\n}\nfunction numToBuff(number, size, endian) {\n    return new Buff(number, size, endian);\n}\nfunction binToBuff(data, size, endian) {\n    return new Buff(_format_index_js__WEBPACK_IMPORTED_MODULE_2__.binToBytes(data), size, endian);\n}\nfunction bigToBuff(bigint, size, endian) {\n    return new Buff(bigint, size, endian);\n}\nfunction rawToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction strToBuff(data, size, endian) {\n    return new Buff(_format_index_js__WEBPACK_IMPORTED_MODULE_2__.strToBytes(data), size, endian);\n}\nfunction hexToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction jsonToBuff(data, replacer) {\n    if (replacer === undefined) {\n        replacer = _utils_js__WEBPACK_IMPORTED_MODULE_3__.bigint_replacer;\n    }\n    const str = JSON.stringify(data, replacer);\n    return new Buff(_format_index_js__WEBPACK_IMPORTED_MODULE_2__.strToBytes(str));\n}\nfunction base64ToBuff(data) {\n    return new Buff(_encode_js__WEBPACK_IMPORTED_MODULE_1__.Base64.decode(data));\n}\nfunction b64urlToBuff(data) {\n    return new Buff(_encode_js__WEBPACK_IMPORTED_MODULE_1__.B64url.decode(data));\n}\nfunction bech32ToBuff(data, limit, chk_prefix) {\n    const { decode, to_bytes } = _encode_js__WEBPACK_IMPORTED_MODULE_1__.Bech32;\n    const { prefix, words } = decode(data, limit);\n    const bytes = to_bytes(words);\n    if (typeof chk_prefix === 'string') {\n        _assert_js__WEBPACK_IMPORTED_MODULE_0__.is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction bech32mToBuff(data, limit, chk_prefix) {\n    const { decode, to_bytes } = _encode_js__WEBPACK_IMPORTED_MODULE_1__.Bech32m;\n    const { prefix, words } = decode(data, limit);\n    const bytes = to_bytes(words);\n    if (typeof chk_prefix === 'string') {\n        _assert_js__WEBPACK_IMPORTED_MODULE_0__.is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction b58chkToBuff(data) {\n    return new Buff(_encode_js__WEBPACK_IMPORTED_MODULE_1__.B58chk.decode(data));\n}\nfunction parse_data(data_blob, chunk_size, total_size) {\n    const bytes = _format_index_js__WEBPACK_IMPORTED_MODULE_2__.buffer_data(data_blob);\n    const chunks = _utils_js__WEBPACK_IMPORTED_MODULE_3__.parse_data(bytes, chunk_size, total_size);\n    return chunks.map(e => Buff.bytes(e));\n}\nfunction is_equal(a, b) {\n    return new Buff(a).hex === new Buff(b).hex;\n}\nfunction buffer(bytes, size, end) {\n    return new Buff(bytes, size, end);\n}\nclass Stream {\n    constructor(data) {\n        this.data = Buff.bytes(data);\n        this.size = this.data.length;\n    }\n    peek(size) {\n        if (size > this.size) {\n            throw new Error(`Size greater than stream: ${size} > ${this.size}`);\n        }\n        return new Buff(this.data.slice(0, size));\n    }\n    read(size) {\n        const chunk = this.peek(size);\n        this.data = this.data.slice(size);\n        this.size = this.data.length;\n        return chunk;\n    }\n    read_varint(endian) {\n        const num = this.read(1).num;\n        switch (true) {\n            case (num >= 0 && num < 0xFD):\n                return num;\n            case (num === 0xFD):\n                return this.read(2).to_num(endian);\n            case (num === 0xFE):\n                return this.read(4).to_num(endian);\n            case (num === 0xFF):\n                return this.read(8).to_num(endian);\n            default:\n                throw new Error(`Varint is out of range: ${num}`);\n        }\n    }\n}\n//# sourceMappingURL=buff.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/buff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/encode.js":
/*!***************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/encode.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B58chk: () => (/* binding */ B58chk),\n/* harmony export */   B64url: () => (/* binding */ B64url),\n/* harmony export */   Base64: () => (/* binding */ Base64),\n/* harmony export */   Bech32: () => (/* binding */ Bech32),\n/* harmony export */   Bech32m: () => (/* binding */ Bech32m),\n/* harmony export */   Hex: () => (/* binding */ Hex),\n/* harmony export */   Txt: () => (/* binding */ Txt)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _format_str_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format/str.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/str.js\");\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@cmdcode/buff/node_modules/@scure/base/lib/esm/index.js\");\n\n\n\nconst Hex = {\n    encode: _format_str_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex,\n    decode: _format_str_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes\n};\nconst Txt = {\n    encode: _format_str_js__WEBPACK_IMPORTED_MODULE_0__.strToBytes,\n    decode: _format_str_js__WEBPACK_IMPORTED_MODULE_0__.bytesToStr\n};\nconst B58chk = {\n    encode: (data) => (0,_scure_base__WEBPACK_IMPORTED_MODULE_1__.base58check)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256).encode(data),\n    decode: (data) => (0,_scure_base__WEBPACK_IMPORTED_MODULE_1__.base58check)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256).decode(data)\n};\nconst Base64 = {\n    encode: (data) => _scure_base__WEBPACK_IMPORTED_MODULE_1__.base64.encode(data),\n    decode: (data) => _scure_base__WEBPACK_IMPORTED_MODULE_1__.base64.decode(data)\n};\nconst B64url = {\n    encode: (data) => _scure_base__WEBPACK_IMPORTED_MODULE_1__.base64urlnopad.encode(data),\n    decode: (data) => _scure_base__WEBPACK_IMPORTED_MODULE_1__.base64urlnopad.decode(data)\n};\nconst Bech32 = {\n    to_words: _scure_base__WEBPACK_IMPORTED_MODULE_1__.bech32.toWords,\n    to_bytes: _scure_base__WEBPACK_IMPORTED_MODULE_1__.bech32.fromWords,\n    encode: (prefix, words, limit = false) => {\n        return _scure_base__WEBPACK_IMPORTED_MODULE_1__.bech32.encode(prefix, words, limit);\n    },\n    decode: (data, limit = false) => {\n        const { prefix, words } = _scure_base__WEBPACK_IMPORTED_MODULE_1__.bech32.decode(data, limit);\n        return { prefix, words };\n    }\n};\nconst Bech32m = {\n    to_words: _scure_base__WEBPACK_IMPORTED_MODULE_1__.bech32m.toWords,\n    to_bytes: _scure_base__WEBPACK_IMPORTED_MODULE_1__.bech32m.fromWords,\n    encode: (prefix, words, limit = false) => {\n        return _scure_base__WEBPACK_IMPORTED_MODULE_1__.bech32m.encode(prefix, words, limit);\n    },\n    decode: (data, limit = false) => {\n        const { prefix, words } = _scure_base__WEBPACK_IMPORTED_MODULE_1__.bech32m.decode(data, limit);\n        return { prefix, words };\n    }\n};\n//# sourceMappingURL=encode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2VuY29kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQThDO0FBQ21DO0FBQ0U7QUFDNUU7QUFDUCxZQUFZLHNEQUFVO0FBQ3RCLFlBQVksc0RBQVU7QUFDdEI7QUFDTztBQUNQLFlBQVksc0RBQVU7QUFDdEIsWUFBWSxzREFBVTtBQUN0QjtBQUNPO0FBQ1Asc0JBQXNCLHdEQUFXLENBQUMsd0RBQU07QUFDeEMsc0JBQXNCLHdEQUFXLENBQUMsd0RBQU07QUFDeEM7QUFDTztBQUNQLHNCQUFzQiwrQ0FBTTtBQUM1QixzQkFBc0IsK0NBQU07QUFDNUI7QUFDTztBQUNQLHNCQUFzQix1REFBYztBQUNwQyxzQkFBc0IsdURBQWM7QUFDcEM7QUFDTztBQUNQLGNBQWMsK0NBQU07QUFDcEIsY0FBYywrQ0FBTTtBQUNwQjtBQUNBLGVBQWUsK0NBQU07QUFDckIsS0FBSztBQUNMO0FBQ0EsZ0JBQWdCLGdCQUFnQixFQUFFLCtDQUFNO0FBQ3hDLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ087QUFDUCxjQUFjLGdEQUFPO0FBQ3JCLGNBQWMsZ0RBQU87QUFDckI7QUFDQSxlQUFlLGdEQUFPO0FBQ3RCLEtBQUs7QUFDTDtBQUNBLGdCQUFnQixnQkFBZ0IsRUFBRSxnREFBTztBQUN6QyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2VuY29kZS5qcz8xOTRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYTI1NiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhMjU2JztcbmltcG9ydCB7IGJ5dGVzVG9TdHIsIGJ5dGVzVG9IZXgsIGhleFRvQnl0ZXMsIHN0clRvQnl0ZXMgfSBmcm9tICcuL2Zvcm1hdC9zdHIuanMnO1xuaW1wb3J0IHsgYmFzZTU4Y2hlY2ssIGJhc2U2NCwgYmFzZTY0dXJsbm9wYWQsIGJlY2gzMiwgYmVjaDMybSB9IGZyb20gJ0BzY3VyZS9iYXNlJztcbmV4cG9ydCBjb25zdCBIZXggPSB7XG4gICAgZW5jb2RlOiBieXRlc1RvSGV4LFxuICAgIGRlY29kZTogaGV4VG9CeXRlc1xufTtcbmV4cG9ydCBjb25zdCBUeHQgPSB7XG4gICAgZW5jb2RlOiBzdHJUb0J5dGVzLFxuICAgIGRlY29kZTogYnl0ZXNUb1N0clxufTtcbmV4cG9ydCBjb25zdCBCNThjaGsgPSB7XG4gICAgZW5jb2RlOiAoZGF0YSkgPT4gYmFzZTU4Y2hlY2soc2hhMjU2KS5lbmNvZGUoZGF0YSksXG4gICAgZGVjb2RlOiAoZGF0YSkgPT4gYmFzZTU4Y2hlY2soc2hhMjU2KS5kZWNvZGUoZGF0YSlcbn07XG5leHBvcnQgY29uc3QgQmFzZTY0ID0ge1xuICAgIGVuY29kZTogKGRhdGEpID0+IGJhc2U2NC5lbmNvZGUoZGF0YSksXG4gICAgZGVjb2RlOiAoZGF0YSkgPT4gYmFzZTY0LmRlY29kZShkYXRhKVxufTtcbmV4cG9ydCBjb25zdCBCNjR1cmwgPSB7XG4gICAgZW5jb2RlOiAoZGF0YSkgPT4gYmFzZTY0dXJsbm9wYWQuZW5jb2RlKGRhdGEpLFxuICAgIGRlY29kZTogKGRhdGEpID0+IGJhc2U2NHVybG5vcGFkLmRlY29kZShkYXRhKVxufTtcbmV4cG9ydCBjb25zdCBCZWNoMzIgPSB7XG4gICAgdG9fd29yZHM6IGJlY2gzMi50b1dvcmRzLFxuICAgIHRvX2J5dGVzOiBiZWNoMzIuZnJvbVdvcmRzLFxuICAgIGVuY29kZTogKHByZWZpeCwgd29yZHMsIGxpbWl0ID0gZmFsc2UpID0+IHtcbiAgICAgICAgcmV0dXJuIGJlY2gzMi5lbmNvZGUocHJlZml4LCB3b3JkcywgbGltaXQpO1xuICAgIH0sXG4gICAgZGVjb2RlOiAoZGF0YSwgbGltaXQgPSBmYWxzZSkgPT4ge1xuICAgICAgICBjb25zdCB7IHByZWZpeCwgd29yZHMgfSA9IGJlY2gzMi5kZWNvZGUoZGF0YSwgbGltaXQpO1xuICAgICAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzIH07XG4gICAgfVxufTtcbmV4cG9ydCBjb25zdCBCZWNoMzJtID0ge1xuICAgIHRvX3dvcmRzOiBiZWNoMzJtLnRvV29yZHMsXG4gICAgdG9fYnl0ZXM6IGJlY2gzMm0uZnJvbVdvcmRzLFxuICAgIGVuY29kZTogKHByZWZpeCwgd29yZHMsIGxpbWl0ID0gZmFsc2UpID0+IHtcbiAgICAgICAgcmV0dXJuIGJlY2gzMm0uZW5jb2RlKHByZWZpeCwgd29yZHMsIGxpbWl0KTtcbiAgICB9LFxuICAgIGRlY29kZTogKGRhdGEsIGxpbWl0ID0gZmFsc2UpID0+IHtcbiAgICAgICAgY29uc3QgeyBwcmVmaXgsIHdvcmRzIH0gPSBiZWNoMzJtLmRlY29kZShkYXRhLCBsaW1pdCk7XG4gICAgICAgIHJldHVybiB7IHByZWZpeCwgd29yZHMgfTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/encode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/format/big.js":
/*!*******************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/format/big.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bigToBytes: () => (/* binding */ bigToBytes),\n/* harmony export */   bytesToBig: () => (/* binding */ bytesToBig)\n/* harmony export */ });\nconst _0n = BigInt(0);\nconst _255n = BigInt(255);\nconst _256n = BigInt(256);\nfunction big_size(big) {\n    if (big <= 0xffn)\n        return 1;\n    if (big <= 0xffffn)\n        return 2;\n    if (big <= 0xffffffffn)\n        return 4;\n    if (big <= 0xffffffffffffffffn)\n        return 8;\n    if (big <= 0xffffffffffffffffffffffffffffffffn)\n        return 16;\n    if (big <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn) {\n        return 32;\n    }\n    throw new TypeError('Must specify a fixed buffer size for bigints greater than 32 bytes.');\n}\nfunction bigToBytes(big, size, endian = 'be') {\n    if (size === undefined)\n        size = big_size(big);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (big > _0n) {\n        const byte = big & _255n;\n        const num = Number(byte);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        big = (big - byte) / _256n;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToBig(bytes) {\n    let num = BigInt(0);\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * _256n) + BigInt(bytes[i]);\n    }\n    return BigInt(num);\n}\n//# sourceMappingURL=big.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2Zvcm1hdC9iaWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsbUNBQW1DLFFBQVE7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2J1ZmYvZGlzdC9mb3JtYXQvYmlnLmpzP2I0OTgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgXzBuID0gQmlnSW50KDApO1xuY29uc3QgXzI1NW4gPSBCaWdJbnQoMjU1KTtcbmNvbnN0IF8yNTZuID0gQmlnSW50KDI1Nik7XG5mdW5jdGlvbiBiaWdfc2l6ZShiaWcpIHtcbiAgICBpZiAoYmlnIDw9IDB4ZmZuKVxuICAgICAgICByZXR1cm4gMTtcbiAgICBpZiAoYmlnIDw9IDB4ZmZmZm4pXG4gICAgICAgIHJldHVybiAyO1xuICAgIGlmIChiaWcgPD0gMHhmZmZmZmZmZm4pXG4gICAgICAgIHJldHVybiA0O1xuICAgIGlmIChiaWcgPD0gMHhmZmZmZmZmZmZmZmZmZmZmbilcbiAgICAgICAgcmV0dXJuIDg7XG4gICAgaWYgKGJpZyA8PSAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmbilcbiAgICAgICAgcmV0dXJuIDE2O1xuICAgIGlmIChiaWcgPD0gMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmbikge1xuICAgICAgICByZXR1cm4gMzI7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ011c3Qgc3BlY2lmeSBhIGZpeGVkIGJ1ZmZlciBzaXplIGZvciBiaWdpbnRzIGdyZWF0ZXIgdGhhbiAzMiBieXRlcy4nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBiaWdUb0J5dGVzKGJpZywgc2l6ZSwgZW5kaWFuID0gJ2JlJykge1xuICAgIGlmIChzaXplID09PSB1bmRlZmluZWQpXG4gICAgICAgIHNpemUgPSBiaWdfc2l6ZShiaWcpO1xuICAgIGNvbnN0IHVzZV9sZSA9IChlbmRpYW4gPT09ICdsZScpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihzaXplKTtcbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgIGxldCBvZmZzZXQgPSAodXNlX2xlKSA/IDAgOiBzaXplIC0gMTtcbiAgICB3aGlsZSAoYmlnID4gXzBuKSB7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSBiaWcgJiBfMjU1bjtcbiAgICAgICAgY29uc3QgbnVtID0gTnVtYmVyKGJ5dGUpO1xuICAgICAgICBpZiAodXNlX2xlKSB7XG4gICAgICAgICAgICBkYXRhVmlldy5zZXRVaW50OChvZmZzZXQrKywgbnVtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFWaWV3LnNldFVpbnQ4KG9mZnNldC0tLCBudW0pO1xuICAgICAgICB9XG4gICAgICAgIGJpZyA9IChiaWcgLSBieXRlKSAvIF8yNTZuO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvQmlnKGJ5dGVzKSB7XG4gICAgbGV0IG51bSA9IEJpZ0ludCgwKTtcbiAgICBmb3IgKGxldCBpID0gYnl0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgbnVtID0gKG51bSAqIF8yNTZuKSArIEJpZ0ludChieXRlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBCaWdJbnQobnVtKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/format/big.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/format/bin.js":
/*!*******************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/format/bin.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   binToBytes: () => (/* binding */ binToBytes),\n/* harmony export */   bytesToBin: () => (/* binding */ bytesToBin)\n/* harmony export */ });\nfunction binToBytes(binary) {\n    const bins = binary.split('').map(Number);\n    if (bins.length % 8 !== 0) {\n        throw new Error(`Binary array is invalid length: ${binary.length}`);\n    }\n    const bytes = new Uint8Array(bins.length / 8);\n    for (let i = 0, ct = 0; i < bins.length; i += 8, ct++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j++) {\n            byte |= (bins[i + j] << (7 - j));\n        }\n        bytes[ct] = byte;\n    }\n    return bytes;\n}\nfunction bytesToBin(bytes) {\n    const bin = new Array(bytes.length * 8);\n    let count = 0;\n    for (const num of bytes) {\n        if (num > 255) {\n            throw new Error(`Invalid byte value: ${num}. Byte values must be between 0 and 255.`);\n        }\n        for (let i = 7; i >= 0; i--, count++) {\n            bin[count] = (num >> i) & 1;\n        }\n    }\n    return bin.join('');\n}\n//# sourceMappingURL=bin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2Zvcm1hdC9iaW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQSwyREFBMkQsY0FBYztBQUN6RTtBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsSUFBSTtBQUN2RDtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2J1ZmYvZGlzdC9mb3JtYXQvYmluLmpzP2YzZmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGJpblRvQnl0ZXMoYmluYXJ5KSB7XG4gICAgY29uc3QgYmlucyA9IGJpbmFyeS5zcGxpdCgnJykubWFwKE51bWJlcik7XG4gICAgaWYgKGJpbnMubGVuZ3RoICUgOCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJpbmFyeSBhcnJheSBpcyBpbnZhbGlkIGxlbmd0aDogJHtiaW5hcnkubGVuZ3RofWApO1xuICAgIH1cbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJpbnMubGVuZ3RoIC8gOCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGN0ID0gMDsgaSA8IGJpbnMubGVuZ3RoOyBpICs9IDgsIGN0KyspIHtcbiAgICAgICAgbGV0IGJ5dGUgPSAwO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7IGorKykge1xuICAgICAgICAgICAgYnl0ZSB8PSAoYmluc1tpICsgal0gPDwgKDcgLSBqKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZXNbY3RdID0gYnl0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9CaW4oYnl0ZXMpIHtcbiAgICBjb25zdCBiaW4gPSBuZXcgQXJyYXkoYnl0ZXMubGVuZ3RoICogOCk7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBmb3IgKGNvbnN0IG51bSBvZiBieXRlcykge1xuICAgICAgICBpZiAobnVtID4gMjU1KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYnl0ZSB2YWx1ZTogJHtudW19LiBCeXRlIHZhbHVlcyBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjU1LmApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSA3OyBpID49IDA7IGktLSwgY291bnQrKykge1xuICAgICAgICAgICAgYmluW2NvdW50XSA9IChudW0gPj4gaSkgJiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiaW4uam9pbignJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/format/bin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/format/buffer.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/format/buffer.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buffer_data: () => (/* binding */ buffer_data)\n/* harmony export */ });\n/* harmony import */ var _big_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./big.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/big.js\");\n/* harmony import */ var _num_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./num.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/num.js\");\n/* harmony import */ var _str_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./str.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/str.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/utils.js\");\n\n\n\n\nfunction buffer_data(data, size, endian) {\n    if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else if (data instanceof Uint8Array) {\n        return _utils_js__WEBPACK_IMPORTED_MODULE_3__.set_buffer(data, size, endian);\n    }\n    else if (Array.isArray(data)) {\n        const bytes = data.map(e => buffer_data(e, size, endian));\n        return _utils_js__WEBPACK_IMPORTED_MODULE_3__.join_array(bytes);\n    }\n    else if (typeof data === 'string') {\n        return (0,_str_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(data, size, endian);\n    }\n    else if (typeof data === 'bigint') {\n        return (0,_big_js__WEBPACK_IMPORTED_MODULE_0__.bigToBytes)(data, size, endian);\n    }\n    else if (typeof data === 'number') {\n        return (0,_num_js__WEBPACK_IMPORTED_MODULE_1__.numToBytes)(data, size, endian);\n    }\n    else if (typeof data === 'boolean') {\n        return Uint8Array.of(data ? 1 : 0);\n    }\n    throw new TypeError('Unsupported format:' + String(typeof data));\n}\n//# sourceMappingURL=buffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2Zvcm1hdC9idWZmZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0M7QUFDQTtBQUNBO0FBQ0Y7QUFDN0I7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaURBQWU7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpREFBZTtBQUM5QjtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6QjtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6QjtBQUNBO0FBQ0EsZUFBZSxtREFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2J1ZmYvZGlzdC9mb3JtYXQvYnVmZmVyLmpzPzllYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmlnVG9CeXRlcyB9IGZyb20gJy4vYmlnLmpzJztcbmltcG9ydCB7IG51bVRvQnl0ZXMgfSBmcm9tICcuL251bS5qcyc7XG5pbXBvcnQgeyBoZXhUb0J5dGVzIH0gZnJvbSAnLi9zdHIuanMnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlscy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyX2RhdGEoZGF0YSwgc2l6ZSwgZW5kaWFuKSB7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiB1dGlsLnNldF9idWZmZXIoZGF0YSwgc2l6ZSwgZW5kaWFuKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICBjb25zdCBieXRlcyA9IGRhdGEubWFwKGUgPT4gYnVmZmVyX2RhdGEoZSwgc2l6ZSwgZW5kaWFuKSk7XG4gICAgICAgIHJldHVybiB1dGlsLmpvaW5fYXJyYXkoYnl0ZXMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGhleFRvQnl0ZXMoZGF0YSwgc2l6ZSwgZW5kaWFuKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIHJldHVybiBiaWdUb0J5dGVzKGRhdGEsIHNpemUsIGVuZGlhbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gbnVtVG9CeXRlcyhkYXRhLCBzaXplLCBlbmRpYW4pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5Lm9mKGRhdGEgPyAxIDogMCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vuc3VwcG9ydGVkIGZvcm1hdDonICsgU3RyaW5nKHR5cGVvZiBkYXRhKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/format/buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/format/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/format/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bigToBytes: () => (/* reexport safe */ _big_js__WEBPACK_IMPORTED_MODULE_0__.bigToBytes),\n/* harmony export */   binToBytes: () => (/* reexport safe */ _bin_js__WEBPACK_IMPORTED_MODULE_1__.binToBytes),\n/* harmony export */   buffer_data: () => (/* reexport safe */ _buffer_js__WEBPACK_IMPORTED_MODULE_2__.buffer_data),\n/* harmony export */   bytesToBig: () => (/* reexport safe */ _big_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBig),\n/* harmony export */   bytesToBin: () => (/* reexport safe */ _bin_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBin),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _str_js__WEBPACK_IMPORTED_MODULE_4__.bytesToHex),\n/* harmony export */   bytesToNum: () => (/* reexport safe */ _num_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNum),\n/* harmony export */   bytesToStr: () => (/* reexport safe */ _str_js__WEBPACK_IMPORTED_MODULE_4__.bytesToStr),\n/* harmony export */   hexToBytes: () => (/* reexport safe */ _str_js__WEBPACK_IMPORTED_MODULE_4__.hexToBytes),\n/* harmony export */   numToBytes: () => (/* reexport safe */ _num_js__WEBPACK_IMPORTED_MODULE_3__.numToBytes),\n/* harmony export */   strToBytes: () => (/* reexport safe */ _str_js__WEBPACK_IMPORTED_MODULE_4__.strToBytes)\n/* harmony export */ });\n/* harmony import */ var _big_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./big.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/big.js\");\n/* harmony import */ var _bin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bin.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/bin.js\");\n/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./buffer.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/buffer.js\");\n/* harmony import */ var _num_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./num.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/num.js\");\n/* harmony import */ var _str_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./str.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/format/str.js\");\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2Zvcm1hdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXlCO0FBQ0E7QUFDRztBQUNIO0FBQ0E7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9idWZmL2Rpc3QvZm9ybWF0L2luZGV4LmpzPzU1ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9iaWcuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9iaW4uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9idWZmZXIuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9udW0uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zdHIuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/format/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/format/num.js":
/*!*******************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/format/num.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bytesToNum: () => (/* binding */ bytesToNum),\n/* harmony export */   numToBytes: () => (/* binding */ numToBytes)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assert.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/assert.js\");\n\nfunction num_size(num) {\n    if (num <= 0xFF)\n        return 1;\n    if (num <= 0xFFFF)\n        return 2;\n    if (num <= 0xFFFFFFFF)\n        return 4;\n    throw new TypeError('Numbers larger than 4 bytes must specify a fixed size!');\n}\nfunction numToBytes(num, size, endian = 'be') {\n    if (size === undefined)\n        size = num_size(num);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (num > 0) {\n        const byte = num & 255;\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        num = (num - byte) / 256;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToNum(bytes) {\n    let num = 0;\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * 256) + bytes[i];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.is_safe_num)(num);\n    }\n    return num;\n}\n//# sourceMappingURL=num.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2Zvcm1hdC9udW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1DQUFtQyxRQUFRO0FBQzNDO0FBQ0EsUUFBUSx1REFBVztBQUNuQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2J1ZmYvZGlzdC9mb3JtYXQvbnVtLmpzPzJhZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNfc2FmZV9udW0gfSBmcm9tICcuLi9hc3NlcnQuanMnO1xuZnVuY3Rpb24gbnVtX3NpemUobnVtKSB7XG4gICAgaWYgKG51bSA8PSAweEZGKVxuICAgICAgICByZXR1cm4gMTtcbiAgICBpZiAobnVtIDw9IDB4RkZGRilcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgaWYgKG51bSA8PSAweEZGRkZGRkZGKVxuICAgICAgICByZXR1cm4gNDtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOdW1iZXJzIGxhcmdlciB0aGFuIDQgYnl0ZXMgbXVzdCBzcGVjaWZ5IGEgZml4ZWQgc2l6ZSEnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBudW1Ub0J5dGVzKG51bSwgc2l6ZSwgZW5kaWFuID0gJ2JlJykge1xuICAgIGlmIChzaXplID09PSB1bmRlZmluZWQpXG4gICAgICAgIHNpemUgPSBudW1fc2l6ZShudW0pO1xuICAgIGNvbnN0IHVzZV9sZSA9IChlbmRpYW4gPT09ICdsZScpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihzaXplKTtcbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgIGxldCBvZmZzZXQgPSAodXNlX2xlKSA/IDAgOiBzaXplIC0gMTtcbiAgICB3aGlsZSAobnVtID4gMCkge1xuICAgICAgICBjb25zdCBieXRlID0gbnVtICYgMjU1O1xuICAgICAgICBpZiAodXNlX2xlKSB7XG4gICAgICAgICAgICBkYXRhVmlldy5zZXRVaW50OChvZmZzZXQrKywgbnVtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFWaWV3LnNldFVpbnQ4KG9mZnNldC0tLCBudW0pO1xuICAgICAgICB9XG4gICAgICAgIG51bSA9IChudW0gLSBieXRlKSAvIDI1NjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG59XG5leHBvcnQgZnVuY3Rpb24gYnl0ZXNUb051bShieXRlcykge1xuICAgIGxldCBudW0gPSAwO1xuICAgIGZvciAobGV0IGkgPSBieXRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBudW0gPSAobnVtICogMjU2KSArIGJ5dGVzW2ldO1xuICAgICAgICBpc19zYWZlX251bShudW0pO1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/format/num.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/format/str.js":
/*!*******************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/format/str.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToStr: () => (/* binding */ bytesToStr),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   strToBytes: () => (/* binding */ strToBytes)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assert.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/assert.js\");\n\nconst ec = new TextEncoder();\nconst dc = new TextDecoder();\nfunction strToBytes(str) {\n    return ec.encode(str);\n}\nfunction bytesToStr(bytes) {\n    return dc.decode(bytes);\n}\nfunction hex_size(hexstr, size) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.is_hex)(hexstr);\n    const len = hexstr.length / 2;\n    if (size === undefined)\n        size = len;\n    if (len > size) {\n        throw new TypeError(`Hex string is larger than array size: ${len} > ${size}`);\n    }\n    return size;\n}\nfunction hexToBytes(hexstr, size, endian = 'le') {\n    size = hex_size(hexstr, size);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    for (let i = 0; i < hexstr.length; i += 2) {\n        const char = hexstr.substring(i, i + 2);\n        const num = parseInt(char, 16);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToHex(bytes) {\n    let chars = '';\n    for (let i = 0; i < bytes.length; i++) {\n        chars += bytes[i].toString(16).padStart(2, '0');\n    }\n    return chars;\n}\n//# sourceMappingURL=str.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2Zvcm1hdC9zdHIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0M7QUFDdEM7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsSUFBSSxrREFBTTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLEtBQUssSUFBSSxLQUFLO0FBQ25GO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9idWZmL2Rpc3QvZm9ybWF0L3N0ci5qcz9jOWU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzX2hleCB9IGZyb20gJy4uL2Fzc2VydC5qcyc7XG5jb25zdCBlYyA9IG5ldyBUZXh0RW5jb2RlcigpO1xuY29uc3QgZGMgPSBuZXcgVGV4dERlY29kZXIoKTtcbmV4cG9ydCBmdW5jdGlvbiBzdHJUb0J5dGVzKHN0cikge1xuICAgIHJldHVybiBlYy5lbmNvZGUoc3RyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvU3RyKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGRjLmRlY29kZShieXRlcyk7XG59XG5mdW5jdGlvbiBoZXhfc2l6ZShoZXhzdHIsIHNpemUpIHtcbiAgICBpc19oZXgoaGV4c3RyKTtcbiAgICBjb25zdCBsZW4gPSBoZXhzdHIubGVuZ3RoIC8gMjtcbiAgICBpZiAoc2l6ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBzaXplID0gbGVuO1xuICAgIGlmIChsZW4gPiBzaXplKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEhleCBzdHJpbmcgaXMgbGFyZ2VyIHRoYW4gYXJyYXkgc2l6ZTogJHtsZW59ID4gJHtzaXplfWApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb0J5dGVzKGhleHN0ciwgc2l6ZSwgZW5kaWFuID0gJ2xlJykge1xuICAgIHNpemUgPSBoZXhfc2l6ZShoZXhzdHIsIHNpemUpO1xuICAgIGNvbnN0IHVzZV9sZSA9IChlbmRpYW4gPT09ICdsZScpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihzaXplKTtcbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgIGxldCBvZmZzZXQgPSAodXNlX2xlKSA/IDAgOiBzaXplIC0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhleHN0ci5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBjb25zdCBjaGFyID0gaGV4c3RyLnN1YnN0cmluZyhpLCBpICsgMik7XG4gICAgICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KGNoYXIsIDE2KTtcbiAgICAgICAgaWYgKHVzZV9sZSkge1xuICAgICAgICAgICAgZGF0YVZpZXcuc2V0VWludDgob2Zmc2V0KyssIG51bSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhVmlldy5zZXRVaW50OChvZmZzZXQtLSwgbnVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvSGV4KGJ5dGVzKSB7XG4gICAgbGV0IGNoYXJzID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGFycyArPSBieXRlc1tpXS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/format/str.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B58chk: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.B58chk),\n/* harmony export */   B64url: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.B64url),\n/* harmony export */   Base64: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.Base64),\n/* harmony export */   Bech32: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.Bech32),\n/* harmony export */   Bech32m: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.Bech32m),\n/* harmony export */   Buff: () => (/* reexport safe */ _buff_js__WEBPACK_IMPORTED_MODULE_0__.Buff),\n/* harmony export */   Hex: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.Hex),\n/* harmony export */   Stream: () => (/* reexport safe */ _buff_js__WEBPACK_IMPORTED_MODULE_0__.Stream),\n/* harmony export */   Txt: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.Txt),\n/* harmony export */   assert: () => (/* reexport module object */ _assert_js__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   buffer: () => (/* reexport safe */ _buff_js__WEBPACK_IMPORTED_MODULE_0__.buffer),\n/* harmony export */   util: () => (/* reexport module object */ _utils_js__WEBPACK_IMPORTED_MODULE_4__)\n/* harmony export */ });\n/* harmony import */ var _buff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buff.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/buff.js\");\n/* harmony import */ var _encode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encode.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/encode.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/types.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/utils.js\");\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBCO0FBQ0U7QUFDRDtBQUNXO0FBQ0g7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9idWZmL2Rpc3QvaW5kZXguanM/MDk5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2J1ZmYuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9lbmNvZGUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnLi9hc3NlcnQuanMnO1xuZXhwb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWxzLmpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/types.js":
/*!**************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/types.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7QUFBVTtBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L3R5cGVzLmpzP2U4YTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/dist/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/@cmdcode/buff/dist/utils.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bigint_replacer: () => (/* binding */ bigint_replacer),\n/* harmony export */   bigint_reviver: () => (/* binding */ bigint_reviver),\n/* harmony export */   is_bytes: () => (/* binding */ is_bytes),\n/* harmony export */   is_hex: () => (/* binding */ is_hex),\n/* harmony export */   join_array: () => (/* binding */ join_array),\n/* harmony export */   parse_data: () => (/* binding */ parse_data),\n/* harmony export */   set_buffer: () => (/* binding */ set_buffer)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/./node_modules/@cmdcode/buff/dist/assert.js\");\n\nfunction is_hex(input) {\n    if (input.match(/[^a-fA-F0-9]/) === null &&\n        input.length % 2 === 0) {\n        return true;\n    }\n    return false;\n}\nfunction is_bytes(input) {\n    if (typeof input === 'string' && is_hex(input)) {\n        return true;\n    }\n    else if (typeof input === 'number' ||\n        typeof input === 'bigint' ||\n        input instanceof Uint8Array) {\n        return true;\n    }\n    else if (Array.isArray(input) &&\n        input.every(e => typeof e === 'number')) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction set_buffer(data, size, endian = 'be') {\n    if (size === undefined)\n        size = data.length;\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.within_size)(data, size);\n    const buffer = new Uint8Array(size).fill(0);\n    const offset = (endian === 'be') ? 0 : size - data.length;\n    buffer.set(data, offset);\n    return buffer;\n}\nfunction join_array(arr) {\n    let i, offset = 0;\n    const size = arr.reduce((len, arr) => len + arr.length, 0);\n    const buff = new Uint8Array(size);\n    for (i = 0; i < arr.length; i++) {\n        const a = arr[i];\n        buff.set(a, offset);\n        offset += a.length;\n    }\n    return buff;\n}\nfunction bigint_replacer(_, v) {\n    return typeof v === 'bigint'\n        ? `${v}n`\n        : v;\n}\nfunction bigint_reviver(_, v) {\n    return typeof v === 'string' && /^[0-9]+n$/.test(v)\n        ? BigInt(v.slice(0, -1))\n        : v;\n}\nfunction parse_data(data_blob, chunk_size, total_size) {\n    const len = data_blob.length, count = total_size / chunk_size;\n    if (total_size % chunk_size !== 0) {\n        throw new TypeError(`Invalid parameters: ${total_size} % ${chunk_size} !== 0`);\n    }\n    if (len !== total_size) {\n        throw new TypeError(`Invalid data stream: ${len} !== ${total_size}`);\n    }\n    if (len % chunk_size !== 0) {\n        throw new TypeError(`Invalid data stream: ${len} % ${chunk_size} !== 0`);\n    }\n    const chunks = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const idx = i * chunk_size;\n        chunks[i] = data_blob.subarray(idx, idx + chunk_size);\n    }\n    return chunks;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvYnVmZi9kaXN0L3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTBDO0FBQ25DO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLElBQUksdURBQVc7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLG1EQUFtRCxZQUFZLElBQUksWUFBWTtBQUMvRTtBQUNBO0FBQ0Esb0RBQW9ELEtBQUssTUFBTSxXQUFXO0FBQzFFO0FBQ0E7QUFDQSxvREFBb0QsS0FBSyxJQUFJLFlBQVk7QUFDekU7QUFDQTtBQUNBLG9CQUFvQixXQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2J1ZmYvZGlzdC91dGlscy5qcz80NjljIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdpdGhpbl9zaXplIH0gZnJvbSAnLi9hc3NlcnQuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzX2hleChpbnB1dCkge1xuICAgIGlmIChpbnB1dC5tYXRjaCgvW15hLWZBLUYwLTldLykgPT09IG51bGwgJiZcbiAgICAgICAgaW5wdXQubGVuZ3RoICUgMiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzX2J5dGVzKGlucHV0KSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgaXNfaGV4KGlucHV0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fFxuICAgICAgICB0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnIHx8XG4gICAgICAgIGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkgJiZcbiAgICAgICAgaW5wdXQuZXZlcnkoZSA9PiB0eXBlb2YgZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRfYnVmZmVyKGRhdGEsIHNpemUsIGVuZGlhbiA9ICdiZScpIHtcbiAgICBpZiAoc2l6ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBzaXplID0gZGF0YS5sZW5ndGg7XG4gICAgd2l0aGluX3NpemUoZGF0YSwgc2l6ZSk7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSkuZmlsbCgwKTtcbiAgICBjb25zdCBvZmZzZXQgPSAoZW5kaWFuID09PSAnYmUnKSA/IDAgOiBzaXplIC0gZGF0YS5sZW5ndGg7XG4gICAgYnVmZmVyLnNldChkYXRhLCBvZmZzZXQpO1xuICAgIHJldHVybiBidWZmZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gam9pbl9hcnJheShhcnIpIHtcbiAgICBsZXQgaSwgb2Zmc2V0ID0gMDtcbiAgICBjb25zdCBzaXplID0gYXJyLnJlZHVjZSgobGVuLCBhcnIpID0+IGxlbiArIGFyci5sZW5ndGgsIDApO1xuICAgIGNvbnN0IGJ1ZmYgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGEgPSBhcnJbaV07XG4gICAgICAgIGJ1ZmYuc2V0KGEsIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSBhLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmY7XG59XG5leHBvcnQgZnVuY3Rpb24gYmlnaW50X3JlcGxhY2VyKF8sIHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdiaWdpbnQnXG4gICAgICAgID8gYCR7dn1uYFxuICAgICAgICA6IHY7XG59XG5leHBvcnQgZnVuY3Rpb24gYmlnaW50X3Jldml2ZXIoXywgdikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZycgJiYgL15bMC05XStuJC8udGVzdCh2KVxuICAgICAgICA/IEJpZ0ludCh2LnNsaWNlKDAsIC0xKSlcbiAgICAgICAgOiB2O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlX2RhdGEoZGF0YV9ibG9iLCBjaHVua19zaXplLCB0b3RhbF9zaXplKSB7XG4gICAgY29uc3QgbGVuID0gZGF0YV9ibG9iLmxlbmd0aCwgY291bnQgPSB0b3RhbF9zaXplIC8gY2h1bmtfc2l6ZTtcbiAgICBpZiAodG90YWxfc2l6ZSAlIGNodW5rX3NpemUgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBwYXJhbWV0ZXJzOiAke3RvdGFsX3NpemV9ICUgJHtjaHVua19zaXplfSAhPT0gMGApO1xuICAgIH1cbiAgICBpZiAobGVuICE9PSB0b3RhbF9zaXplKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgZGF0YSBzdHJlYW06ICR7bGVufSAhPT0gJHt0b3RhbF9zaXplfWApO1xuICAgIH1cbiAgICBpZiAobGVuICUgY2h1bmtfc2l6ZSAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGRhdGEgc3RyZWFtOiAke2xlbn0gJSAke2NodW5rX3NpemV9ICE9PSAwYCk7XG4gICAgfVxuICAgIGNvbnN0IGNodW5rcyA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGkgKiBjaHVua19zaXplO1xuICAgICAgICBjaHVua3NbaV0gPSBkYXRhX2Jsb2Iuc3ViYXJyYXkoaWR4LCBpZHggKyBjaHVua19zaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIGNodW5rcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/dist/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/buff/node_modules/@scure/base/lib/esm/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@cmdcode/buff/node_modules/@scure/base/lib/esm/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base16: () => (/* binding */ base16),\n/* harmony export */   base32: () => (/* binding */ base32),\n/* harmony export */   base32crockford: () => (/* binding */ base32crockford),\n/* harmony export */   base32hex: () => (/* binding */ base32hex),\n/* harmony export */   base32hexnopad: () => (/* binding */ base32hexnopad),\n/* harmony export */   base32nopad: () => (/* binding */ base32nopad),\n/* harmony export */   base58: () => (/* binding */ base58),\n/* harmony export */   base58check: () => (/* binding */ base58check),\n/* harmony export */   base58flickr: () => (/* binding */ base58flickr),\n/* harmony export */   base58xmr: () => (/* binding */ base58xmr),\n/* harmony export */   base58xrp: () => (/* binding */ base58xrp),\n/* harmony export */   base64: () => (/* binding */ base64),\n/* harmony export */   base64nopad: () => (/* binding */ base64nopad),\n/* harmony export */   base64url: () => (/* binding */ base64url),\n/* harmony export */   base64urlnopad: () => (/* binding */ base64urlnopad),\n/* harmony export */   bech32: () => (/* binding */ bech32),\n/* harmony export */   bech32m: () => (/* binding */ bech32m),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   bytesToString: () => (/* binding */ bytesToString),\n/* harmony export */   createBase58check: () => (/* binding */ createBase58check),\n/* harmony export */   hex: () => (/* binding */ hex),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   stringToBytes: () => (/* binding */ stringToBytes),\n/* harmony export */   utf8: () => (/* binding */ utf8),\n/* harmony export */   utils: () => (/* binding */ utils)\n/* harmony export */ });\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\nfunction isArrayOf(isString, arr) {\n    if (!Array.isArray(arr))\n        return false;\n    if (arr.length === 0)\n        return true;\n    if (isString) {\n        return arr.every((item) => typeof item === 'string');\n    }\n    else {\n        return arr.every((item) => Number.isSafeInteger(item));\n    }\n}\n// no abytes: seems to have 10% slowdown. Why?!\nfunction afn(input) {\n    if (typeof input !== 'function')\n        throw new Error('function expected');\n    return true;\n}\nfunction astr(label, input) {\n    if (typeof input !== 'string')\n        throw new Error(`${label}: string expected`);\n    return true;\n}\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`invalid integer: ${n}`);\n}\nfunction aArr(input) {\n    if (!Array.isArray(input))\n        throw new Error('array expected');\n}\nfunction astrArr(label, input) {\n    if (!isArrayOf(true, input))\n        throw new Error(`${label}: array of strings expected`);\n}\nfunction anumArr(label, input) {\n    if (!isArrayOf(false, input))\n        throw new Error(`${label}: array of numbers expected`);\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back.\n * Could also be array of strings.\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(letters) {\n    // mapping 1 to \"b\"\n    const lettersA = typeof letters === 'string' ? letters.split('') : letters;\n    const len = lettersA.length;\n    astrArr('alphabet', lettersA);\n    // mapping \"b\" to 1\n    const indexes = new Map(lettersA.map((l, i) => [l, i]));\n    return {\n        encode: (digits) => {\n            aArr(digits);\n            return digits.map((i) => {\n                if (!Number.isSafeInteger(i) || i < 0 || i >= len)\n                    throw new Error(`alphabet.encode: digit index outside alphabet \"${i}\". Allowed: ${letters}`);\n                return lettersA[i];\n            });\n        },\n        decode: (input) => {\n            aArr(input);\n            return input.map((letter) => {\n                astr('alphabet.decode', letter);\n                const i = indexes.get(letter);\n                if (i === undefined)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${letters}`);\n                return i;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    astr('join', separator);\n    return {\n        encode: (from) => {\n            astrArr('join.decode', from);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            astr('join.decode', to);\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    anumber(bits);\n    astr('padding', chr);\n    return {\n        encode(data) {\n            astrArr('padding.encode', data);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            astrArr('padding.decode', input);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('padding: invalid, string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                const last = end - 1;\n                const byte = last * bits;\n                if (byte % 8 === 0)\n                    throw new Error('padding: invalid, string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    afn(fn);\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);\n    aArr(data);\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data, (d) => {\n        anumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`invalid integer: ${d}`);\n        return d;\n    });\n    const dlen = digits.length;\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < dlen; i++) {\n            const digit = digits[i];\n            const fromCarry = from * carry;\n            const digitBase = fromCarry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                fromCarry / from !== carry ||\n                digitBase - digit !== fromCarry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            const div = digitBase / to;\n            carry = digitBase % to;\n            const rounded = Math.floor(div);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (b === 0 ? a : gcd(b, a % b));\nconst radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\nconst powers = /* @__PURE__ */ (() => {\n    let res = [];\n    for (let i = 0; i < 40; i++)\n        res.push(2 ** i);\n    return res;\n})();\n/**\n * Implemented with numbers, because BigInt is 5x slower\n */\nfunction convertRadix2(data, from, to, padding) {\n    aArr(data);\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const max = powers[from];\n    const mask = powers[to] - 1;\n    const res = [];\n    for (const n of data) {\n        anumber(n);\n        if (n >= max)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        const pow = powers[pos];\n        if (pow === undefined)\n            throw new Error('invalid carry');\n        carry &= pow - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry > 0)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    anumber(num);\n    const _256 = 2 ** 8;\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), _256, num);\n        },\n        decode: (digits) => {\n            anumArr('radix.decode', digits);\n            return Uint8Array.from(convertRadix(digits, num, _256));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    anumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            anumArr('radix2.decode', digits);\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    afn(fn);\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    anumber(len);\n    afn(fn);\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const sum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(sum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const oldChecksum = data.slice(-len);\n            const newChecksum = fn(payload).slice(0, len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nconst utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\n/**\n * base16 encoding from RFC 4648.\n * @example\n * ```js\n * base16.encode(Uint8Array.from([0x12, 0xab]));\n * // => '12AB'\n * ```\n */\nconst base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\n/**\n * base32 encoding from RFC 4648. Has padding.\n * Use `base32nopad` for unpadded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ===='\n * base32.decode('CKVQ====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nconst base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\n/**\n * base32 encoding from RFC 4648. No padding.\n * Use `base32` for padded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ'\n * base32nopad.decode('CKVQ');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nconst base32nopad = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), join(''));\n/**\n * base32 encoding from RFC 4648. Padded. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hexnopad` for unpadded version.\n * @example\n * ```js\n * base32hex.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG===='\n * base32hex.decode('2ALG====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nconst base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\n/**\n * base32 encoding from RFC 4648. No padding. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hex` for padded version.\n * @example\n * ```js\n * base32hexnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG'\n * base32hexnopad.decode('2ALG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nconst base32hexnopad = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), join(''));\n/**\n * base32 encoding from RFC 4648. Doug Crockford's version.\n * https://www.crockford.com/base32.html\n * @example\n * ```js\n * base32crockford.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ANG'\n * base32crockford.decode('2ANG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nconst base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\n// Built-in base64 conversion https://caniuse.com/mdn-javascript_builtins_uint8array_frombase64\n// prettier-ignore\nconst hasBase64Builtin = /* @__PURE__ */ (() => typeof Uint8Array.from([]).toBase64 === 'function' &&\n    typeof Uint8Array.fromBase64 === 'function')();\nconst decodeBase64Builtin = (s, isUrl) => {\n    astr('base64', s);\n    const re = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;\n    const alphabet = isUrl ? 'base64url' : 'base64';\n    if (s.length > 0 && !re.test(s))\n        throw new Error('invalid base64');\n    return Uint8Array.fromBase64(s, { alphabet, lastChunkHandling: 'strict' });\n};\n/**\n * base64 from RFC 4648. Padded.\n * Use `base64nopad` for unpadded version.\n * Also check out `base64url`, `base64urlnopad`.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nconst base64 = hasBase64Builtin ? {\n    encode(b) { abytes(b); return b.toBase64(); },\n    decode(s) { return decodeBase64Builtin(s, false); },\n} : chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\n/**\n * base64 from RFC 4648. No padding.\n * Use `base64` for padded version.\n * @example\n * ```js\n * base64nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64nopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nconst base64nopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));\n/**\n * base64 from RFC 4648, using URL-safe alphabet. Padded.\n * Use `base64urlnopad` for unpadded version.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64url.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64url.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nconst base64url = hasBase64Builtin ? {\n    encode(b) { abytes(b); return b.toBase64({ alphabet: 'base64url' }); },\n    decode(s) { return decodeBase64Builtin(s, true); },\n} : chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\n/**\n * base64 from RFC 4648, using URL-safe alphabet. No padding.\n * Use `base64url` for padded version.\n * @example\n * ```js\n * base64urlnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64urlnopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nconst base64urlnopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc) => chain(radix(58), alphabet(abc), join(''));\n/**\n * base58: base64 without ambigous characters +, /, 0, O, I, l.\n * Quadratic (O(n^2)) - so, can't be used on large inputs.\n * @example\n * ```js\n * base58.decode('01abcdef');\n * // => '3UhJW'\n * ```\n */\nconst base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\n/**\n * base58: flickr version. Check out `base58`.\n */\nconst base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\n/**\n * base58: XRP version. Check out `base58`.\n */\nconst base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n/**\n * base58: XMR version. Check out `base58`.\n * Done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n * Block encoding significantly reduces quadratic complexity of base58.\n */\nconst base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\n/**\n * Method, which creates base58check encoder.\n * Requires function, calculating sha256.\n */\nconst createBase58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\n/**\n * Use `createBase58check` instead.\n * @deprecated\n */\nconst base58check = createBase58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        astr('bech32.encode prefix', prefix);\n        if (isBytes(words))\n            words = Array.from(words);\n        anumArr('bech32.encode', words);\n        const plen = prefix.length;\n        if (plen === 0)\n            throw new TypeError(`Invalid prefix length ${plen}`);\n        const actualLength = plen + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        astr('bech32.decode input', str);\n        const slen = str.length;\n        if (slen < 8 || (limit !== false && slen > limit))\n            throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        const sepIndex = lowered.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = lowered.slice(0, sepIndex);\n        const data = lowered.slice(sepIndex + 1);\n        if (data.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(data).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!data.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    function encodeFromBytes(prefix, bytes) {\n        return encode(prefix, toWords(bytes));\n    }\n    return {\n        encode,\n        decode,\n        encodeFromBytes,\n        decodeToBytes,\n        decodeUnsafe,\n        fromWords,\n        fromWordsUnsafe,\n        toWords,\n    };\n}\n/**\n * bech32 from BIP 173. Operates on words.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nconst bech32 = genBech32('bech32');\n/**\n * bech32m from BIP 350. Operates on words.\n * It was to mitigate `bech32` weaknesses.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nconst bech32m = genBech32('bech32m');\n/**\n * UTF-8-to-byte decoder. Uses built-in TextDecoder / TextEncoder.\n * @example\n * ```js\n * const b = utf8.decode(\"hey\"); // => new Uint8Array([ 104, 101, 121 ])\n * const str = utf8.encode(b); // \"hey\"\n * ```\n */\nconst utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\n// prettier-ignore\nconst hasHexBuiltin = /* @__PURE__ */ (() => typeof Uint8Array.from([]).toHex === 'function' &&\n    typeof Uint8Array.fromHex === 'function')();\n// prettier-ignore\nconst hexBuiltin = {\n    encode(data) { abytes(data); return data.toHex(); },\n    decode(s) { astr('hex', s); return Uint8Array.fromHex(s); },\n};\n/**\n * hex string decoder. Uses built-in function, when available.\n * @example\n * ```js\n * const b = hex.decode(\"0102ff\"); // => new Uint8Array([ 1, 2, 255 ])\n * const str = hex.encode(b); // \"0102ff\"\n * ```\n */\nconst hex = hasHexBuiltin\n    ? hexBuiltin\n    : chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n        if (typeof s !== 'string' || s.length % 2 !== 0)\n            throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n        return s.toLowerCase();\n    }));\n// prettier-ignore\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\n/** @deprecated */\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\n/** @deprecated */\nconst str = bytesToString; // as in python, but for bytes only\n/** @deprecated */\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\n/** @deprecated */\nconst bytes = stringToBytes;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/buff/node_modules/@scure/base/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/assert.js":
/*!***********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/assert.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   fail: () => (/* binding */ fail),\n/* harmony export */   in_field: () => (/* binding */ in_field),\n/* harmony export */   ok: () => (/* binding */ ok),\n/* harmony export */   on_curve: () => (/* binding */ on_curve),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   valid_chain: () => (/* binding */ valid_chain),\n/* harmony export */   valid_derive_state: () => (/* binding */ valid_derive_state),\n/* harmony export */   valid_hash: () => (/* binding */ valid_hash),\n/* harmony export */   valid_index: () => (/* binding */ valid_index),\n/* harmony export */   valid_path: () => (/* binding */ valid_path),\n/* harmony export */   valid_pubkey: () => (/* binding */ valid_pubkey)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/const.js\");\n\n\nfunction ok(value, message) {\n    if (value === false)\n        throw new Error(message ?? 'Assertion failed!');\n}\nfunction fail(error, throws = false) {\n    if (!throws)\n        return false;\n    throw new Error(error);\n}\nfunction size(input, size, throws) {\n    const bytes = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(input);\n    if (bytes.length !== size) {\n        return fail(`Invalid byte size: ${bytes.hex} !== ${size}`, throws);\n    }\n    return true;\n}\nfunction exists(input) {\n    if (typeof input === 'undefined') {\n        throw new TypeError('Input is undefined!');\n    }\n    if (input === null) {\n        throw new TypeError('Input is null!');\n    }\n}\nfunction on_curve(x, throws) {\n    if (!(typeof x === 'bigint' && _const_js__WEBPACK_IMPORTED_MODULE_1__._0n < x && x < _const_js__WEBPACK_IMPORTED_MODULE_1__._P)) {\n        fail('x value is not on the curve!', throws);\n    }\n    return true;\n}\nfunction in_field(x, throws) {\n    if (!(typeof x === 'bigint' && _const_js__WEBPACK_IMPORTED_MODULE_1__._0n < x && x < _const_js__WEBPACK_IMPORTED_MODULE_1__._N)) {\n        fail('x value is not in the field!', throws);\n    }\n    return true;\n}\nfunction valid_chain(path, code) {\n    if (code === undefined) {\n        if (!path.startsWith('m')) {\n            throw new Error('You need to specify a chain-code for a non-root path.');\n        }\n    }\n    else {\n        if (_cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(code).length !== 32) {\n            throw new Error('Chain code must be 32 bytes!');\n        }\n    }\n}\nfunction valid_path(path) {\n    const regex = /^(m)?(\\/)?(\\w+'?\\/)*\\w+'?$/;\n    if (path !== '' && path.match(regex) === null) {\n        throw new Error('Provided path string is invalid: ' + path);\n    }\n}\nfunction valid_hash(hash) {\n    const regex = /^[0-9a-fA-F]{64}$/;\n    if (hash.match(regex) === null) {\n        throw new Error('Provided hash string is invalid: ' + hash);\n    }\n}\nfunction valid_index(index) {\n    if (index > 0x80000000) {\n        throw new TypeError('Index value must not exceed 31 bits.');\n    }\n}\nfunction valid_pubkey(pubkey) {\n    const key = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pubkey);\n    if (key.length !== 33) {\n        throw new TypeError('Index value must not exceed 31 bits.');\n    }\n}\nfunction valid_derive_state(hardened, is_private) {\n    if (hardened && !is_private) {\n        throw new Error('Cannot derive hardedened paths when is_private is false!');\n    }\n}\n//# sourceMappingURL=assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ0k7QUFDbEM7QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxrQkFBa0IsK0NBQUk7QUFDdEI7QUFDQSwwQ0FBMEMsV0FBVyxNQUFNLEtBQUs7QUFDaEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsbUNBQW1DLDBDQUFHLFlBQVkseUNBQUU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLG1DQUFtQywwQ0FBRyxZQUFZLHlDQUFFO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLCtDQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxnQ0FBZ0MsR0FBRztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGdCQUFnQiwrQ0FBSTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2NyeXB0by10b29scy9kaXN0L2Fzc2VydC5qcz8xNzI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmYgfSBmcm9tICdAY21kY29kZS9idWZmJztcbmltcG9ydCB7IF9OLCBfUCwgXzBuIH0gZnJvbSAnLi9jb25zdC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gb2sodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICBpZiAodmFsdWUgPT09IGZhbHNlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSA/PyAnQXNzZXJ0aW9uIGZhaWxlZCEnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmYWlsKGVycm9yLCB0aHJvd3MgPSBmYWxzZSkge1xuICAgIGlmICghdGhyb3dzKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzaXplKGlucHV0LCBzaXplLCB0aHJvd3MpIHtcbiAgICBjb25zdCBieXRlcyA9IEJ1ZmYuYnl0ZXMoaW5wdXQpO1xuICAgIGlmIChieXRlcy5sZW5ndGggIT09IHNpemUpIHtcbiAgICAgICAgcmV0dXJuIGZhaWwoYEludmFsaWQgYnl0ZSBzaXplOiAke2J5dGVzLmhleH0gIT09ICR7c2l6ZX1gLCB0aHJvd3MpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleGlzdHMoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnB1dCBpcyB1bmRlZmluZWQhJyk7XG4gICAgfVxuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnB1dCBpcyBudWxsIScpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBvbl9jdXJ2ZSh4LCB0aHJvd3MpIHtcbiAgICBpZiAoISh0eXBlb2YgeCA9PT0gJ2JpZ2ludCcgJiYgXzBuIDwgeCAmJiB4IDwgX1ApKSB7XG4gICAgICAgIGZhaWwoJ3ggdmFsdWUgaXMgbm90IG9uIHRoZSBjdXJ2ZSEnLCB0aHJvd3MpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbl9maWVsZCh4LCB0aHJvd3MpIHtcbiAgICBpZiAoISh0eXBlb2YgeCA9PT0gJ2JpZ2ludCcgJiYgXzBuIDwgeCAmJiB4IDwgX04pKSB7XG4gICAgICAgIGZhaWwoJ3ggdmFsdWUgaXMgbm90IGluIHRoZSBmaWVsZCEnLCB0aHJvd3MpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZF9jaGFpbihwYXRoLCBjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXBhdGguc3RhcnRzV2l0aCgnbScpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIHNwZWNpZnkgYSBjaGFpbi1jb2RlIGZvciBhIG5vbi1yb290IHBhdGguJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChCdWZmLmJ5dGVzKGNvZGUpLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2hhaW4gY29kZSBtdXN0IGJlIDMyIGJ5dGVzIScpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkX3BhdGgocGF0aCkge1xuICAgIGNvbnN0IHJlZ2V4ID0gL14obSk/KFxcLyk/KFxcdysnP1xcLykqXFx3Kyc/JC87XG4gICAgaWYgKHBhdGggIT09ICcnICYmIHBhdGgubWF0Y2gocmVnZXgpID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgcGF0aCBzdHJpbmcgaXMgaW52YWxpZDogJyArIHBhdGgpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZF9oYXNoKGhhc2gpIHtcbiAgICBjb25zdCByZWdleCA9IC9eWzAtOWEtZkEtRl17NjR9JC87XG4gICAgaWYgKGhhc2gubWF0Y2gocmVnZXgpID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgaGFzaCBzdHJpbmcgaXMgaW52YWxpZDogJyArIGhhc2gpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZF9pbmRleChpbmRleCkge1xuICAgIGlmIChpbmRleCA+IDB4ODAwMDAwMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW5kZXggdmFsdWUgbXVzdCBub3QgZXhjZWVkIDMxIGJpdHMuJyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkX3B1YmtleShwdWJrZXkpIHtcbiAgICBjb25zdCBrZXkgPSBCdWZmLmJ5dGVzKHB1YmtleSk7XG4gICAgaWYgKGtleS5sZW5ndGggIT09IDMzKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0luZGV4IHZhbHVlIG11c3Qgbm90IGV4Y2VlZCAzMSBiaXRzLicpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZF9kZXJpdmVfc3RhdGUoaGFyZGVuZWQsIGlzX3ByaXZhdGUpIHtcbiAgICBpZiAoaGFyZGVuZWQgJiYgIWlzX3ByaXZhdGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGVyaXZlIGhhcmRlZGVuZWQgcGF0aHMgd2hlbiBpc19wcml2YXRlIGlzIGZhbHNlIScpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/const.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/const.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _0n: () => (/* binding */ _0n),\n/* harmony export */   _1n: () => (/* binding */ _1n),\n/* harmony export */   _2n: () => (/* binding */ _2n),\n/* harmony export */   _3n: () => (/* binding */ _3n),\n/* harmony export */   _4n: () => (/* binding */ _4n),\n/* harmony export */   _G: () => (/* binding */ _G),\n/* harmony export */   _N: () => (/* binding */ _N),\n/* harmony export */   _P: () => (/* binding */ _P)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n\nconst curve = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE;\nconst _N = curve.n;\nconst _P = curve.p;\nconst _G = { x: curve.Gx, y: curve.Gy };\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _4n = BigInt(4);\n//# sourceMappingURL=const.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvY29uc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQW9EO0FBQ3BELGNBQWMsOERBQVM7QUFDaEI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdG9vbHMvZGlzdC9jb25zdC5qcz85NzhiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlY3AyNTZrMSB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxJztcbmNvbnN0IGN1cnZlID0gc2VjcDI1NmsxLkNVUlZFO1xuZXhwb3J0IGNvbnN0IF9OID0gY3VydmUubjtcbmV4cG9ydCBjb25zdCBfUCA9IGN1cnZlLnA7XG5leHBvcnQgY29uc3QgX0cgPSB7IHg6IGN1cnZlLkd4LCB5OiBjdXJ2ZS5HeSB9O1xuZXhwb3J0IGNvbnN0IF8wbiA9IEJpZ0ludCgwKTtcbmV4cG9ydCBjb25zdCBfMW4gPSBCaWdJbnQoMSk7XG5leHBvcnQgY29uc3QgXzJuID0gQmlnSW50KDIpO1xuZXhwb3J0IGNvbnN0IF8zbiA9IEJpZ0ludCgzKTtcbmV4cG9ydCBjb25zdCBfNG4gPSBCaWdJbnQoNCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/const.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONST: () => (/* reexport module object */ _const_js__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   Field: () => (/* reexport safe */ _lib_ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field),\n/* harmony export */   Point: () => (/* reexport safe */ _lib_ecc_js__WEBPACK_IMPORTED_MODULE_1__.Point),\n/* harmony export */   assert: () => (/* reexport module object */ _assert_js__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   cipher: () => (/* reexport module object */ _lib_cipher_js__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   hash: () => (/* reexport module object */ _lib_hash_js__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   hd: () => (/* reexport module object */ _lib_hd_js__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   keys: () => (/* reexport module object */ _lib_keys_js__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   math: () => (/* reexport module object */ _lib_math_js__WEBPACK_IMPORTED_MODULE_9__),\n/* harmony export */   merkle: () => (/* reexport module object */ _lib_merkle_js__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   noble: () => (/* binding */ noble),\n/* harmony export */   shamir: () => (/* reexport module object */ _lib_shamir_js__WEBPACK_IMPORTED_MODULE_12__),\n/* harmony export */   signer: () => (/* reexport module object */ _lib_sig_js__WEBPACK_IMPORTED_MODULE_11__),\n/* harmony export */   util: () => (/* reexport module object */ _util_js__WEBPACK_IMPORTED_MODULE_13__)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _lib_ecc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/ecc.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/types.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/assert.js\");\n/* harmony import */ var _lib_cipher_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/cipher.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/cipher.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/const.js\");\n/* harmony import */ var _lib_hash_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/hash.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/hash.js\");\n/* harmony import */ var _lib_hd_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/hd.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/hd.js\");\n/* harmony import */ var _lib_keys_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/keys.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/keys.js\");\n/* harmony import */ var _lib_math_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/math.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/math.js\");\n/* harmony import */ var _lib_merkle_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/merkle.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/merkle.js\");\n/* harmony import */ var _lib_sig_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/sig.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/sig.js\");\n/* harmony import */ var _lib_shamir_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lib/shamir.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/shamir.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/util.js\");\n\nconst noble = { secp: _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1, schnorr: _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.schnorr };\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxRTtBQUM5RCxnQkFBZ0IsSUFBSSx5RUFBUztBQUNQO0FBQ0Y7QUFDVztBQUNJO0FBQ047QUFDRTtBQUNKO0FBQ0k7QUFDQTtBQUNJO0FBQ0g7QUFDRztBQUNSO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvaW5kZXguanM/MzA1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZWNwMjU2azEgYXMgc2VjcCwgc2Nobm9yciB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxJztcbmV4cG9ydCBjb25zdCBub2JsZSA9IHsgc2VjcCwgc2Nobm9yciB9O1xuZXhwb3J0ICogZnJvbSAnLi9saWIvZWNjLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMuanMnO1xuZXhwb3J0ICogYXMgYXNzZXJ0IGZyb20gJy4vYXNzZXJ0LmpzJztcbmV4cG9ydCAqIGFzIGNpcGhlciBmcm9tICcuL2xpYi9jaXBoZXIuanMnO1xuZXhwb3J0ICogYXMgQ09OU1QgZnJvbSAnLi9jb25zdC5qcyc7XG5leHBvcnQgKiBhcyBoYXNoIGZyb20gJy4vbGliL2hhc2guanMnO1xuZXhwb3J0ICogYXMgaGQgZnJvbSAnLi9saWIvaGQuanMnO1xuZXhwb3J0ICogYXMga2V5cyBmcm9tICcuL2xpYi9rZXlzLmpzJztcbmV4cG9ydCAqIGFzIG1hdGggZnJvbSAnLi9saWIvbWF0aC5qcyc7XG5leHBvcnQgKiBhcyBtZXJrbGUgZnJvbSAnLi9saWIvbWVya2xlLmpzJztcbmV4cG9ydCAqIGFzIHNpZ25lciBmcm9tICcuL2xpYi9zaWcuanMnO1xuZXhwb3J0ICogYXMgc2hhbWlyIGZyb20gJy4vbGliL3NoYW1pci5qcyc7XG5leHBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbC5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/cipher.js":
/*!***************************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/cipher.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decrypt_cbc: () => (/* binding */ decrypt_cbc),\n/* harmony export */   decrypt_gcm: () => (/* binding */ decrypt_gcm),\n/* harmony export */   encrypt_cbc: () => (/* binding */ encrypt_cbc),\n/* harmony export */   encrypt_gcm: () => (/* binding */ encrypt_gcm)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/ciphers/aes */ \"(ssr)/./node_modules/@noble/ciphers/esm/aes.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/assert.js\");\n\n\n\nfunction decrypt_cbc(payload, secret, vector) {\n    const dat = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(payload);\n    const sec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(secret);\n    const vec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(vector);\n    _assert_js__WEBPACK_IMPORTED_MODULE_2__.size(vec, 16);\n    const dec = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_1__.cbc)(sec, vec).decrypt(dat);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(dec);\n}\nfunction encrypt_cbc(payload, secret, vector) {\n    const dat = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(payload);\n    const sec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(secret);\n    const vec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(vector);\n    _assert_js__WEBPACK_IMPORTED_MODULE_2__.size(vec, 16);\n    const enc = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_1__.cbc)(sec, vec).encrypt(dat);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(enc);\n}\nfunction decrypt_gcm(payload, secret, vector) {\n    const dat = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(payload);\n    const sec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(secret);\n    const vec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(vector);\n    _assert_js__WEBPACK_IMPORTED_MODULE_2__.size(vec, 12);\n    const dec = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_1__.gcm)(sec, vec).decrypt(dat);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(dec);\n}\nfunction encrypt_gcm(payload, secret, vector) {\n    const dat = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(payload);\n    const sec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(secret);\n    const vec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(vector);\n    _assert_js__WEBPACK_IMPORTED_MODULE_2__.size(vec, 12);\n    const enc = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_1__.gcm)(sec, vec).encrypt(dat);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(enc);\n}\n//# sourceMappingURL=cipher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL2NpcGhlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXFDO0FBQ1M7QUFDUDtBQUNoQztBQUNQLGdCQUFnQiwrQ0FBSTtBQUNwQixnQkFBZ0IsK0NBQUk7QUFDcEIsZ0JBQWdCLCtDQUFJO0FBQ3BCLElBQUksNENBQVc7QUFDZixnQkFBZ0IsdURBQUc7QUFDbkIsV0FBVywrQ0FBSTtBQUNmO0FBQ087QUFDUCxnQkFBZ0IsK0NBQUk7QUFDcEIsZ0JBQWdCLCtDQUFJO0FBQ3BCLGdCQUFnQiwrQ0FBSTtBQUNwQixJQUFJLDRDQUFXO0FBQ2YsZ0JBQWdCLHVEQUFHO0FBQ25CLFdBQVcsK0NBQUk7QUFDZjtBQUNPO0FBQ1AsZ0JBQWdCLCtDQUFJO0FBQ3BCLGdCQUFnQiwrQ0FBSTtBQUNwQixnQkFBZ0IsK0NBQUk7QUFDcEIsSUFBSSw0Q0FBVztBQUNmLGdCQUFnQix1REFBRztBQUNuQixXQUFXLCtDQUFJO0FBQ2Y7QUFDTztBQUNQLGdCQUFnQiwrQ0FBSTtBQUNwQixnQkFBZ0IsK0NBQUk7QUFDcEIsZ0JBQWdCLCtDQUFJO0FBQ3BCLElBQUksNENBQVc7QUFDZixnQkFBZ0IsdURBQUc7QUFDbkIsV0FBVywrQ0FBSTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdG9vbHMvZGlzdC9saWIvY2lwaGVyLmpzPzBkOGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZiB9IGZyb20gJ0BjbWRjb2RlL2J1ZmYnO1xuaW1wb3J0IHsgY2JjLCBnY20gfSBmcm9tICdAbm9ibGUvY2lwaGVycy9hZXMnO1xuaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJy4uL2Fzc2VydC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdF9jYmMocGF5bG9hZCwgc2VjcmV0LCB2ZWN0b3IpIHtcbiAgICBjb25zdCBkYXQgPSBCdWZmLmJ5dGVzKHBheWxvYWQpO1xuICAgIGNvbnN0IHNlYyA9IEJ1ZmYuYnl0ZXMoc2VjcmV0KTtcbiAgICBjb25zdCB2ZWMgPSBCdWZmLmJ5dGVzKHZlY3Rvcik7XG4gICAgYXNzZXJ0LnNpemUodmVjLCAxNik7XG4gICAgY29uc3QgZGVjID0gY2JjKHNlYywgdmVjKS5kZWNyeXB0KGRhdCk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KGRlYyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZW5jcnlwdF9jYmMocGF5bG9hZCwgc2VjcmV0LCB2ZWN0b3IpIHtcbiAgICBjb25zdCBkYXQgPSBCdWZmLmJ5dGVzKHBheWxvYWQpO1xuICAgIGNvbnN0IHNlYyA9IEJ1ZmYuYnl0ZXMoc2VjcmV0KTtcbiAgICBjb25zdCB2ZWMgPSBCdWZmLmJ5dGVzKHZlY3Rvcik7XG4gICAgYXNzZXJ0LnNpemUodmVjLCAxNik7XG4gICAgY29uc3QgZW5jID0gY2JjKHNlYywgdmVjKS5lbmNyeXB0KGRhdCk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KGVuYyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdF9nY20ocGF5bG9hZCwgc2VjcmV0LCB2ZWN0b3IpIHtcbiAgICBjb25zdCBkYXQgPSBCdWZmLmJ5dGVzKHBheWxvYWQpO1xuICAgIGNvbnN0IHNlYyA9IEJ1ZmYuYnl0ZXMoc2VjcmV0KTtcbiAgICBjb25zdCB2ZWMgPSBCdWZmLmJ5dGVzKHZlY3Rvcik7XG4gICAgYXNzZXJ0LnNpemUodmVjLCAxMik7XG4gICAgY29uc3QgZGVjID0gZ2NtKHNlYywgdmVjKS5kZWNyeXB0KGRhdCk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KGRlYyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZW5jcnlwdF9nY20ocGF5bG9hZCwgc2VjcmV0LCB2ZWN0b3IpIHtcbiAgICBjb25zdCBkYXQgPSBCdWZmLmJ5dGVzKHBheWxvYWQpO1xuICAgIGNvbnN0IHNlYyA9IEJ1ZmYuYnl0ZXMoc2VjcmV0KTtcbiAgICBjb25zdCB2ZWMgPSBCdWZmLmJ5dGVzKHZlY3Rvcik7XG4gICAgYXNzZXJ0LnNpemUodmVjLCAxMik7XG4gICAgY29uc3QgZW5jID0gZ2NtKHNlYywgdmVjKS5lbmNyeXB0KGRhdCk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KGVuYyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaXBoZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/cipher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/ecc.js":
/*!************************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/ecc.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   Point: () => (/* binding */ Point)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/const.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/math.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/assert.js\");\n\n\n\n\n\nconst NoblePoint = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_4__.secp256k1.ProjectivePoint;\nclass Field extends Uint8Array {\n    static { this.N = _const_js__WEBPACK_IMPORTED_MODULE_1__._N; }\n    static add(x) {\n        return x.map(e => Field.mod(e)).reduce((p, n) => p.add(n));\n    }\n    static mod(x) {\n        return new Field(x);\n    }\n    static mul(x) {\n        return x.map(e => Field.mod(e)).reduce((p, n) => p.mul(n));\n    }\n    static is_valid(value, throws) {\n        const big = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(value, 32).big;\n        return _assert_js__WEBPACK_IMPORTED_MODULE_3__.in_field(big, throws);\n    }\n    static random() {\n        return Field.mod(_cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.random(32));\n    }\n    constructor(x) {\n        const b = _math_js__WEBPACK_IMPORTED_MODULE_2__.mod_n(normalizeField(x));\n        Field.is_valid(b, true);\n        super(_cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.big(b, 32), 32);\n    }\n    get buff() {\n        return new _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff(this);\n    }\n    get raw() {\n        return this.buff.raw;\n    }\n    get big() {\n        return this.buff.big;\n    }\n    get hex() {\n        return this.buff.hex;\n    }\n    get point() {\n        return this.generate();\n    }\n    get hasOddY() {\n        return this.point.hasOddY;\n    }\n    get negated() {\n        return (this.hasOddY)\n            ? this.negate()\n            : this;\n    }\n    gt(value) {\n        const x = new Field(value);\n        return x.big > this.big;\n    }\n    lt(value) {\n        const x = new Field(value);\n        return x.big < this.big;\n    }\n    eq(value) {\n        const x = new Field(value);\n        return x.big === this.big;\n    }\n    ne(value) {\n        const x = new Field(value);\n        return x.big !== this.big;\n    }\n    add(value) {\n        const x = Field.mod(value);\n        const a = _math_js__WEBPACK_IMPORTED_MODULE_2__.fd.add(this.big, x.big);\n        return new Field(a);\n    }\n    sub(value) {\n        const x = Field.mod(value);\n        const a = _math_js__WEBPACK_IMPORTED_MODULE_2__.fd.sub(this.big, x.big);\n        return new Field(a);\n    }\n    mul(value) {\n        const x = Field.mod(value);\n        const a = _math_js__WEBPACK_IMPORTED_MODULE_2__.fd.mul(this.big, x.big);\n        return new Field(a);\n    }\n    pow(value) {\n        const x = Field.mod(value);\n        const a = _math_js__WEBPACK_IMPORTED_MODULE_2__.fd.pow(this.big, x.big);\n        return new Field(a);\n    }\n    div(value) {\n        const x = Field.mod(value);\n        const a = _math_js__WEBPACK_IMPORTED_MODULE_2__.fd.div(this.big, x.big);\n        return new Field(a);\n    }\n    negate() {\n        return new Field(Field.N - this.big);\n    }\n    generate() {\n        const base = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_4__.secp256k1.ProjectivePoint.BASE;\n        const point = base.multiply(this.big);\n        return Point.import(point);\n    }\n}\nclass Point {\n    static { this.P = _const_js__WEBPACK_IMPORTED_MODULE_1__._P; }\n    static { this.G = new Point(_const_js__WEBPACK_IMPORTED_MODULE_1__._G.x, _const_js__WEBPACK_IMPORTED_MODULE_1__._G.y); }\n    static { this.curve = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_4__.secp256k1.CURVE; }\n    static { this.base = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_4__.secp256k1.ProjectivePoint.BASE; }\n    static from_x(bytes, even_y = false) {\n        let cp = normalizePoint(bytes);\n        if (cp.length === 32) {\n            cp = cp.prepend(0x02);\n        }\n        else if (even_y) {\n            cp[0] = 0x02;\n        }\n        _assert_js__WEBPACK_IMPORTED_MODULE_3__.size(cp, 33);\n        const point = NoblePoint.fromHex(cp.hex);\n        point.assertValidity();\n        return new Point(point.x, point.y);\n    }\n    static generate(value) {\n        const field = Field.mod(value);\n        const point = Point.base.multiply(field.big);\n        return Point.import(point);\n    }\n    static { this.mul = Point.generate; }\n    static import(point) {\n        const p = (point instanceof Point)\n            ? { x: point.x.big, y: point.y.big }\n            : { x: point.x, y: point.y };\n        return new Point(p.x, p.y);\n    }\n    constructor(x, y) {\n        this._p = new NoblePoint(x, y, 1n);\n        this.p.assertValidity();\n    }\n    get p() {\n        return this._p;\n    }\n    get x() {\n        return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.big(this.p.x, 32);\n    }\n    get y() {\n        return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.big(this.p.y, 32);\n    }\n    get buff() {\n        return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(this.p.toRawBytes(true));\n    }\n    get raw() {\n        return this.buff.raw;\n    }\n    get hex() {\n        return this.buff.hex;\n    }\n    get hasEvenY() {\n        return this.p.hasEvenY();\n    }\n    get hasOddY() {\n        return !this.p.hasEvenY();\n    }\n    get negated() {\n        return (this.hasOddY)\n            ? this.negate()\n            : this;\n    }\n    eq(value) {\n        const p = (value instanceof Point) ? value : Point.from_x(value);\n        return this.x.big === p.x.big && this.y.big === p.y.big;\n    }\n    add(x) {\n        return (x instanceof Point)\n            ? Point.import(this.p.add(x.p))\n            : Point.import(this.p.add(Point.generate(x).p));\n    }\n    sub(x) {\n        return (x instanceof Point)\n            ? Point.import(this.p.subtract(x.p))\n            : Point.import(this.p.subtract(Point.generate(x).p));\n    }\n    mul(value) {\n        return (value instanceof Point)\n            ? Point.import(this.p.multiply(value.x.big))\n            : Point.import(this.p.multiply(Field.mod(value).big));\n    }\n    negate() {\n        return Point.import(this.p.negate());\n    }\n}\nfunction normalizeField(value) {\n    if (value instanceof Field) {\n        return value.big;\n    }\n    if (value instanceof Point) {\n        return value.x.big;\n    }\n    if (value instanceof Uint8Array) {\n        return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(value).big;\n    }\n    if (typeof value === 'string') {\n        return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.hex(value).big;\n    }\n    if (typeof value === 'number') {\n        return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.num(value).big;\n    }\n    if (typeof value === 'bigint') {\n        return BigInt(value);\n    }\n    throw TypeError('Invalid input type:' + typeof value);\n}\nfunction normalizePoint(value) {\n    if (value instanceof Field) {\n        return value.point.buff;\n    }\n    if (value instanceof Point) {\n        return value.buff;\n    }\n    if (value instanceof Uint8Array ||\n        typeof value === 'string') {\n        return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(value);\n    }\n    if (typeof value === 'number' ||\n        typeof value === 'bigint') {\n        return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(value, 32);\n    }\n    throw new TypeError(`Unknown type: ${typeof value}`);\n}\n//# sourceMappingURL=ecc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/ecc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/hash.js":
/*!*************************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/hash.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hash160: () => (/* binding */ hash160),\n/* harmony export */   hash256: () => (/* binding */ hash256),\n/* harmony export */   hash340: () => (/* binding */ hash340),\n/* harmony export */   hmac256: () => (/* binding */ hmac256),\n/* harmony export */   hmac512: () => (/* binding */ hmac512),\n/* harmony export */   pkdf256: () => (/* binding */ pkdf256),\n/* harmony export */   pkdf512: () => (/* binding */ pkdf512),\n/* harmony export */   ripe160: () => (/* binding */ ripe160),\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   sha512: () => (/* binding */ sha512),\n/* harmony export */   taghash: () => (/* binding */ taghash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/pbkdf2 */ \"(ssr)/./node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha512.js\");\n/* harmony import */ var _noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/ripemd160 */ \"(ssr)/./node_modules/@noble/hashes/esm/ripemd160.js\");\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n\n\n\n\n\n\nfunction sha256(...data) {\n    const b = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join(data);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(b));\n}\nfunction sha512(...data) {\n    const b = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join(data);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_2__.sha512)(b));\n}\nfunction ripe160(...data) {\n    const b = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join(data);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_3__.ripemd160)(b));\n}\nfunction hash256(...data) {\n    const b = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join(data);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(b)));\n}\nfunction hash160(...data) {\n    const b = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join(data);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_3__.ripemd160)((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(b)));\n}\nfunction hmac256(key, ...data) {\n    const k = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(key);\n    const b = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join(data);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_4__.hmac)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, k, b));\n}\nfunction hmac512(key, ...data) {\n    const k = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(key);\n    const b = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join(data);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_4__.hmac)(_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_2__.sha512, k, b));\n}\nfunction taghash(tag) {\n    const hash = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.str(tag).digest;\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([hash, hash]);\n}\nfunction hash340(tag, ...data) {\n    const hash = taghash(tag);\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([hash, ...data]).digest;\n}\nfunction pkdf256(secret, salt, count = 2048) {\n    const sec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(secret);\n    const slt = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(salt);\n    const key = (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_5__.pbkdf2)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, sec, slt, { c: count, dkLen: 32 });\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(key);\n}\nfunction pkdf512(secret, salt, count = 2048) {\n    const sec = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(secret);\n    const slt = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(salt);\n    const key = (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_5__.pbkdf2)(_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_2__.sha512, sec, slt, { c: count, dkLen: 64 });\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(key);\n}\n//# sourceMappingURL=hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL2hhc2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEM7QUFDUTtBQUNBO0FBQ007QUFDVjtBQUNiO0FBQzlCO0FBQ1AsY0FBYywrQ0FBSTtBQUNsQixXQUFXLCtDQUFJLEtBQUssNERBQUk7QUFDeEI7QUFDTztBQUNQLGNBQWMsK0NBQUk7QUFDbEIsV0FBVywrQ0FBSSxLQUFLLDREQUFJO0FBQ3hCO0FBQ087QUFDUCxjQUFjLCtDQUFJO0FBQ2xCLFdBQVcsK0NBQUksS0FBSyxrRUFBSTtBQUN4QjtBQUNPO0FBQ1AsY0FBYywrQ0FBSTtBQUNsQixXQUFXLCtDQUFJLEtBQUssNERBQUksQ0FBQyw0REFBSTtBQUM3QjtBQUNPO0FBQ1AsY0FBYywrQ0FBSTtBQUNsQixXQUFXLCtDQUFJLEtBQUssa0VBQUksQ0FBQyw0REFBSTtBQUM3QjtBQUNPO0FBQ1AsY0FBYywrQ0FBSTtBQUNsQixjQUFjLCtDQUFJO0FBQ2xCLFdBQVcsK0NBQUksS0FBSyx3REFBSSxDQUFDLHdEQUFJO0FBQzdCO0FBQ087QUFDUCxjQUFjLCtDQUFJO0FBQ2xCLGNBQWMsK0NBQUk7QUFDbEIsV0FBVywrQ0FBSSxLQUFLLHdEQUFJLENBQUMsd0RBQUk7QUFDN0I7QUFDTztBQUNQLGlCQUFpQiwrQ0FBSTtBQUNyQixXQUFXLCtDQUFJO0FBQ2Y7QUFDTztBQUNQO0FBQ0EsV0FBVywrQ0FBSTtBQUNmO0FBQ087QUFDUCxnQkFBZ0IsK0NBQUk7QUFDcEIsZ0JBQWdCLCtDQUFJO0FBQ3BCLGdCQUFnQiw0REFBTSxDQUFDLHdEQUFJLGNBQWMscUJBQXFCO0FBQzlELFdBQVcsK0NBQUk7QUFDZjtBQUNPO0FBQ1AsZ0JBQWdCLCtDQUFJO0FBQ3BCLGdCQUFnQiwrQ0FBSTtBQUNwQixnQkFBZ0IsNERBQU0sQ0FBQyx3REFBSSxjQUFjLHFCQUFxQjtBQUM5RCxXQUFXLCtDQUFJO0FBQ2Y7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2NyeXB0by10b29scy9kaXN0L2xpYi9oYXNoLmpzP2I4MWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGJrZGYyIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9wYmtkZjInO1xuaW1wb3J0IHsgc2hhMjU2IGFzIHMyNTYgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NoYTI1Nic7XG5pbXBvcnQgeyBzaGE1MTIgYXMgczUxMiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhNTEyJztcbmltcG9ydCB7IHJpcGVtZDE2MCBhcyByMTYwIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9yaXBlbWQxNjAnO1xuaW1wb3J0IHsgaG1hYyBhcyBITUFDIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9obWFjJztcbmltcG9ydCB7IEJ1ZmYgfSBmcm9tICdAY21kY29kZS9idWZmJztcbmV4cG9ydCBmdW5jdGlvbiBzaGEyNTYoLi4uZGF0YSkge1xuICAgIGNvbnN0IGIgPSBCdWZmLmpvaW4oZGF0YSk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KHMyNTYoYikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNoYTUxMiguLi5kYXRhKSB7XG4gICAgY29uc3QgYiA9IEJ1ZmYuam9pbihkYXRhKTtcbiAgICByZXR1cm4gQnVmZi5yYXcoczUxMihiKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmlwZTE2MCguLi5kYXRhKSB7XG4gICAgY29uc3QgYiA9IEJ1ZmYuam9pbihkYXRhKTtcbiAgICByZXR1cm4gQnVmZi5yYXcocjE2MChiKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzaDI1NiguLi5kYXRhKSB7XG4gICAgY29uc3QgYiA9IEJ1ZmYuam9pbihkYXRhKTtcbiAgICByZXR1cm4gQnVmZi5yYXcoczI1NihzMjU2KGIpKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzaDE2MCguLi5kYXRhKSB7XG4gICAgY29uc3QgYiA9IEJ1ZmYuam9pbihkYXRhKTtcbiAgICByZXR1cm4gQnVmZi5yYXcocjE2MChzMjU2KGIpKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaG1hYzI1NihrZXksIC4uLmRhdGEpIHtcbiAgICBjb25zdCBrID0gQnVmZi5ieXRlcyhrZXkpO1xuICAgIGNvbnN0IGIgPSBCdWZmLmpvaW4oZGF0YSk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KEhNQUMoczI1NiwgaywgYikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhtYWM1MTIoa2V5LCAuLi5kYXRhKSB7XG4gICAgY29uc3QgayA9IEJ1ZmYuYnl0ZXMoa2V5KTtcbiAgICBjb25zdCBiID0gQnVmZi5qb2luKGRhdGEpO1xuICAgIHJldHVybiBCdWZmLnJhdyhITUFDKHM1MTIsIGssIGIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0YWdoYXNoKHRhZykge1xuICAgIGNvbnN0IGhhc2ggPSBCdWZmLnN0cih0YWcpLmRpZ2VzdDtcbiAgICByZXR1cm4gQnVmZi5qb2luKFtoYXNoLCBoYXNoXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzaDM0MCh0YWcsIC4uLmRhdGEpIHtcbiAgICBjb25zdCBoYXNoID0gdGFnaGFzaCh0YWcpO1xuICAgIHJldHVybiBCdWZmLmpvaW4oW2hhc2gsIC4uLmRhdGFdKS5kaWdlc3Q7XG59XG5leHBvcnQgZnVuY3Rpb24gcGtkZjI1NihzZWNyZXQsIHNhbHQsIGNvdW50ID0gMjA0OCkge1xuICAgIGNvbnN0IHNlYyA9IEJ1ZmYuYnl0ZXMoc2VjcmV0KTtcbiAgICBjb25zdCBzbHQgPSBCdWZmLmJ5dGVzKHNhbHQpO1xuICAgIGNvbnN0IGtleSA9IHBia2RmMihzMjU2LCBzZWMsIHNsdCwgeyBjOiBjb3VudCwgZGtMZW46IDMyIH0pO1xuICAgIHJldHVybiBCdWZmLnJhdyhrZXkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBrZGY1MTIoc2VjcmV0LCBzYWx0LCBjb3VudCA9IDIwNDgpIHtcbiAgICBjb25zdCBzZWMgPSBCdWZmLmJ5dGVzKHNlY3JldCk7XG4gICAgY29uc3Qgc2x0ID0gQnVmZi5ieXRlcyhzYWx0KTtcbiAgICBjb25zdCBrZXkgPSBwYmtkZjIoczUxMiwgc2VjLCBzbHQsIHsgYzogY291bnQsIGRrTGVuOiA2NCB9KTtcbiAgICByZXR1cm4gQnVmZi5yYXcoa2V5KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2guanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/hd.js":
/*!***********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/hd.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   derive_extkey: () => (/* binding */ derive_extkey),\n/* harmony export */   derive_key: () => (/* binding */ derive_key),\n/* harmony export */   derive_pubkey: () => (/* binding */ derive_pubkey),\n/* harmony export */   derive_seckey: () => (/* binding */ derive_seckey),\n/* harmony export */   derive_seed: () => (/* binding */ derive_seed),\n/* harmony export */   encode_extkey: () => (/* binding */ encode_extkey),\n/* harmony export */   generate_code: () => (/* binding */ generate_code),\n/* harmony export */   parse_extkey: () => (/* binding */ parse_extkey),\n/* harmony export */   parse_tweaks: () => (/* binding */ parse_tweaks)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _ecc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/ecc.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hash.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/hash.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/keys.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/assert.js\");\n\n\n\n\n\nconst INT_REGEX = /^[0-9]{0,10}$/, STR_REGEX = /^[0-9a-zA-Z_&?=]{64}$/;\nfunction derive_seed(path, seed) {\n    return derive_key(path, seed, undefined, true);\n}\nfunction derive_seckey(path, seckey, chaincode) {\n    return derive_key(path, seckey, chaincode, true);\n}\nfunction derive_pubkey(path, pubkey, chaincode) {\n    return derive_key(path, pubkey, chaincode, false);\n}\nfunction derive_key(path, input_key, chain_code, is_private = false) {\n    _assert_js__WEBPACK_IMPORTED_MODULE_4__.valid_chain(path, chain_code);\n    const key = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(input_key);\n    let code = (chain_code !== undefined)\n        ? _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(chain_code)\n        : _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.str('Bitcoin seed');\n    let prev = null, seckey = null, pubkey;\n    if (path.startsWith('m')) {\n        const root = generate_code(code, key);\n        code = root[1];\n        seckey = root[0];\n        pubkey = (0,_keys_js__WEBPACK_IMPORTED_MODULE_3__.get_pubkey)(seckey, false);\n    }\n    else if (is_private) {\n        _assert_js__WEBPACK_IMPORTED_MODULE_4__.size(input_key, 32);\n        seckey = key;\n        pubkey = (0,_keys_js__WEBPACK_IMPORTED_MODULE_3__.get_pubkey)(seckey, false);\n    }\n    else {\n        _assert_js__WEBPACK_IMPORTED_MODULE_4__.size(key, 33);\n        pubkey = key;\n    }\n    const tweaks = parse_tweaks(path);\n    for (const [tweak, is_hardened] of tweaks) {\n        const bytes = (is_hardened && seckey !== null)\n            ? _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([0x00, seckey, tweak])\n            : _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([pubkey, tweak]);\n        const [next_key, next_code] = generate_code(code, bytes);\n        code = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(next_code);\n        prev = pubkey;\n        if (seckey !== null) {\n            seckey = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(seckey).add(next_key).buff;\n            pubkey = (0,_keys_js__WEBPACK_IMPORTED_MODULE_3__.get_pubkey)(seckey, false);\n            _assert_js__WEBPACK_IMPORTED_MODULE_4__.in_field(seckey.big, true);\n        }\n        else {\n            pubkey = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Point.from_x(pubkey).add(next_key).buff;\n            _assert_js__WEBPACK_IMPORTED_MODULE_4__.on_curve(pubkey.slice(1).big, true);\n        }\n    }\n    return { seckey, pubkey, code, path, prev };\n}\nfunction parse_tweaks(keypath) {\n    _assert_js__WEBPACK_IMPORTED_MODULE_4__.valid_path(keypath);\n    const tweaks = [];\n    let paths = keypath.split('/');\n    if (paths[0] === 'm' || paths[0] === '') {\n        paths = paths.slice(1);\n    }\n    for (let path of paths) {\n        let is_hardened = false;\n        if (path.slice(-1) === '\\'') {\n            is_hardened = true;\n            path = path.slice(0, -1);\n        }\n        if (path.match(INT_REGEX) !== null) {\n            let index = parseInt(path, 10);\n            _assert_js__WEBPACK_IMPORTED_MODULE_4__.valid_index(index);\n            if (is_hardened)\n                index += 0x80000000;\n            tweaks.push([_cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.num(index, 4), is_hardened]);\n        }\n        else if (path.match(STR_REGEX) !== null) {\n            let index = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.str(path);\n            if (is_hardened)\n                index = index.prepend(0x80);\n            tweaks.push([index.digest, is_hardened]);\n        }\n        else {\n            throw new Error('Invalid path segment:' + path);\n        }\n    }\n    return tweaks;\n}\nfunction generate_code(chain_code, chain_data) {\n    const I = (0,_hash_js__WEBPACK_IMPORTED_MODULE_2__.hmac512)(chain_code, chain_data), IL = I.slice(0, 32), IR = I.slice(32);\n    return [IL, IR];\n}\nfunction encode_extkey(key_link, key_prefix) {\n    const { seckey, pubkey, code, prev, path } = key_link;\n    const prefix = (typeof key_prefix === 'number')\n        ? _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.num(key_prefix, 4)\n        : (seckey !== null) ? 0x0488ade4 : 0x0488b21e;\n    const tweaks = parse_tweaks(path);\n    const tprev = tweaks.at(-1);\n    const depth = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.num(tweaks.length, 1);\n    const fprint = (prev !== null) ? (0,_hash_js__WEBPACK_IMPORTED_MODULE_2__.hash160)(prev).slice(0, 4) : _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.num(0, 4);\n    const index = (tprev !== undefined) ? tprev[0].slice(-4, 4) : _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.num(0, 4);\n    const key = (seckey !== null) ? seckey.prepend(0x00) : pubkey;\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([prefix, depth, fprint, index, code, key]).to_b58chk();\n}\nfunction derive_extkey(keyhex, path = '') {\n    const { code, type, key } = parse_extkey(keyhex);\n    const is_private = (type === 0);\n    const input_key = (is_private) ? key : _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([type, key]);\n    return derive_key(path, input_key, code, is_private);\n}\nfunction parse_extkey(keyhex) {\n    const buffer = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.b58chk(keyhex).stream;\n    const prefix = buffer.read(4).num, depth = buffer.read(1).num, fprint = buffer.read(4).num, index = buffer.read(4).num, code = buffer.read(32).hex, type = buffer.read(1).num, key = buffer.read(32).hex, seckey = (type === 0) ? key : undefined, pubkey = (type === 0) ? (0,_keys_js__WEBPACK_IMPORTED_MODULE_3__.get_pubkey)(key).hex : _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([type, key]).hex;\n    if (buffer.size > 0) {\n        throw new TypeError('Unparsed data remaining in buffer!');\n    }\n    return { prefix, depth, fprint, index, code, type, key, seckey, pubkey };\n}\n//# sourceMappingURL=hd.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/hd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/keys.js":
/*!*************************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/keys.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert_32b: () => (/* binding */ convert_32b),\n/* harmony export */   convert_33b: () => (/* binding */ convert_33b),\n/* harmony export */   gen_keypair: () => (/* binding */ gen_keypair),\n/* harmony export */   gen_seckey: () => (/* binding */ gen_seckey),\n/* harmony export */   get_keypair: () => (/* binding */ get_keypair),\n/* harmony export */   get_pubkey: () => (/* binding */ get_pubkey),\n/* harmony export */   get_seckey: () => (/* binding */ get_seckey),\n/* harmony export */   has_key: () => (/* binding */ has_key),\n/* harmony export */   is_even_pub: () => (/* binding */ is_even_pub),\n/* harmony export */   parse_pubkey: () => (/* binding */ parse_pubkey),\n/* harmony export */   sort_keys: () => (/* binding */ sort_keys),\n/* harmony export */   tweak_pubkey: () => (/* binding */ tweak_pubkey),\n/* harmony export */   tweak_seckey: () => (/* binding */ tweak_seckey)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _ecc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/ecc.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/util.js\");\n\n\n\nfunction is_even_pub(pubkey) {\n    const pub = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pubkey);\n    switch (true) {\n        case (pub.length === 32):\n            return true;\n        case (pub.length === 33 && pub[0] === 0x02):\n            return true;\n        case (pub.length === 33 && pub[0] === 0x03):\n            return false;\n        default:\n            throw new TypeError(`Invalid public key: ${pub.hex}`);\n    }\n}\nfunction gen_seckey(even_y) {\n    return get_seckey((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.random)(32), even_y);\n}\nfunction get_seckey(secret, even_y = false) {\n    const sec = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(secret);\n    return (even_y) ? sec.negated.buff : sec.buff;\n}\nfunction get_pubkey(seckey, x_only = false) {\n    const p = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(seckey).point;\n    return (x_only) ? p.x : p.buff;\n}\nfunction tweak_seckey(seckey, tweaks = [], even_y = false) {\n    let sec = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(seckey);\n    for (const twk of tweaks) {\n        sec = sec.add(twk);\n        if (even_y)\n            sec = sec.negated;\n    }\n    return sec.buff;\n}\nfunction tweak_pubkey(pubkey, tweaks = [], x_only = false) {\n    let pub = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Point.from_x(pubkey, x_only);\n    for (const twk of tweaks) {\n        pub = pub.add(twk);\n        if (x_only)\n            pub = pub.negated;\n    }\n    return (x_only) ? pub.x : pub.buff;\n}\nfunction parse_pubkey(pubkey, xonly) {\n    return (xonly)\n        ? convert_32b(pubkey)\n        : convert_33b(pubkey);\n}\nfunction get_keypair(secret, x_only, even_y) {\n    const sec = get_seckey(secret, even_y);\n    const pub = get_pubkey(sec, x_only);\n    return [sec, pub];\n}\nfunction gen_keypair(x_only, even_y) {\n    const sec = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.random)(32);\n    return get_keypair(sec, x_only, even_y);\n}\nfunction convert_32b(pubkey) {\n    const key = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pubkey);\n    if (key.length === 32)\n        return key;\n    if (key.length === 33)\n        return key.slice(1, 33);\n    throw new TypeError(`Invalid key length: ${key.length}`);\n}\nfunction convert_33b(pubkey, even_y = false) {\n    const key = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pubkey);\n    if (key.length === 32) {\n        return key.prepend(0x02);\n    }\n    else if (key.length === 33) {\n        if (even_y)\n            key[0] = 0x02;\n        return key;\n    }\n    throw new TypeError(`Invalid key size: ${key.length}`);\n}\nfunction has_key(key, keys) {\n    const str = keys.map(e => _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(e).hex);\n    return str.includes(_cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(key).hex);\n}\nfunction sort_keys(keys) {\n    return keys\n        .map(e => _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(e).hex)\n        .sort()\n        .map(e => _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.hex(e));\n}\n//# sourceMappingURL=keys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL2tleXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxQztBQUNHO0FBQ0o7QUFDN0I7QUFDUCxnQkFBZ0IsK0NBQUk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxRQUFRO0FBQy9EO0FBQ0E7QUFDTztBQUNQLHNCQUFzQixnREFBTTtBQUM1QjtBQUNPO0FBQ1AsZ0JBQWdCLDBDQUFLO0FBQ3JCO0FBQ0E7QUFDTztBQUNQLGNBQWMsMENBQUs7QUFDbkI7QUFDQTtBQUNPO0FBQ1AsY0FBYywwQ0FBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsY0FBYywwQ0FBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxnQkFBZ0IsZ0RBQU07QUFDdEI7QUFDQTtBQUNPO0FBQ1AsZ0JBQWdCLCtDQUFJO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFdBQVc7QUFDMUQ7QUFDTztBQUNQLGdCQUFnQiwrQ0FBSTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFdBQVc7QUFDeEQ7QUFDTztBQUNQLDhCQUE4QiwrQ0FBSTtBQUNsQyx3QkFBd0IsK0NBQUk7QUFDNUI7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLCtDQUFJO0FBQ3RCO0FBQ0Esa0JBQWtCLCtDQUFJO0FBQ3RCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdG9vbHMvZGlzdC9saWIva2V5cy5qcz83ZDdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmYgfSBmcm9tICdAY21kY29kZS9idWZmJztcbmltcG9ydCB7IEZpZWxkLCBQb2ludCB9IGZyb20gJy4vZWNjLmpzJztcbmltcG9ydCB7IHJhbmRvbSB9IGZyb20gJy4uL3V0aWwuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzX2V2ZW5fcHViKHB1YmtleSkge1xuICAgIGNvbnN0IHB1YiA9IEJ1ZmYuYnl0ZXMocHVia2V5KTtcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgY2FzZSAocHViLmxlbmd0aCA9PT0gMzIpOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgKHB1Yi5sZW5ndGggPT09IDMzICYmIHB1YlswXSA9PT0gMHgwMik6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSAocHViLmxlbmd0aCA9PT0gMzMgJiYgcHViWzBdID09PSAweDAzKTpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgcHVibGljIGtleTogJHtwdWIuaGV4fWApO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5fc2Vja2V5KGV2ZW5feSkge1xuICAgIHJldHVybiBnZXRfc2Vja2V5KHJhbmRvbSgzMiksIGV2ZW5feSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0X3NlY2tleShzZWNyZXQsIGV2ZW5feSA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc2VjID0gRmllbGQubW9kKHNlY3JldCk7XG4gICAgcmV0dXJuIChldmVuX3kpID8gc2VjLm5lZ2F0ZWQuYnVmZiA6IHNlYy5idWZmO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldF9wdWJrZXkoc2Vja2V5LCB4X29ubHkgPSBmYWxzZSkge1xuICAgIGNvbnN0IHAgPSBGaWVsZC5tb2Qoc2Vja2V5KS5wb2ludDtcbiAgICByZXR1cm4gKHhfb25seSkgPyBwLnggOiBwLmJ1ZmY7XG59XG5leHBvcnQgZnVuY3Rpb24gdHdlYWtfc2Vja2V5KHNlY2tleSwgdHdlYWtzID0gW10sIGV2ZW5feSA9IGZhbHNlKSB7XG4gICAgbGV0IHNlYyA9IEZpZWxkLm1vZChzZWNrZXkpO1xuICAgIGZvciAoY29uc3QgdHdrIG9mIHR3ZWFrcykge1xuICAgICAgICBzZWMgPSBzZWMuYWRkKHR3ayk7XG4gICAgICAgIGlmIChldmVuX3kpXG4gICAgICAgICAgICBzZWMgPSBzZWMubmVnYXRlZDtcbiAgICB9XG4gICAgcmV0dXJuIHNlYy5idWZmO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWFrX3B1YmtleShwdWJrZXksIHR3ZWFrcyA9IFtdLCB4X29ubHkgPSBmYWxzZSkge1xuICAgIGxldCBwdWIgPSBQb2ludC5mcm9tX3gocHVia2V5LCB4X29ubHkpO1xuICAgIGZvciAoY29uc3QgdHdrIG9mIHR3ZWFrcykge1xuICAgICAgICBwdWIgPSBwdWIuYWRkKHR3ayk7XG4gICAgICAgIGlmICh4X29ubHkpXG4gICAgICAgICAgICBwdWIgPSBwdWIubmVnYXRlZDtcbiAgICB9XG4gICAgcmV0dXJuICh4X29ubHkpID8gcHViLnggOiBwdWIuYnVmZjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZV9wdWJrZXkocHVia2V5LCB4b25seSkge1xuICAgIHJldHVybiAoeG9ubHkpXG4gICAgICAgID8gY29udmVydF8zMmIocHVia2V5KVxuICAgICAgICA6IGNvbnZlcnRfMzNiKHB1YmtleSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0X2tleXBhaXIoc2VjcmV0LCB4X29ubHksIGV2ZW5feSkge1xuICAgIGNvbnN0IHNlYyA9IGdldF9zZWNrZXkoc2VjcmV0LCBldmVuX3kpO1xuICAgIGNvbnN0IHB1YiA9IGdldF9wdWJrZXkoc2VjLCB4X29ubHkpO1xuICAgIHJldHVybiBbc2VjLCBwdWJdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbl9rZXlwYWlyKHhfb25seSwgZXZlbl95KSB7XG4gICAgY29uc3Qgc2VjID0gcmFuZG9tKDMyKTtcbiAgICByZXR1cm4gZ2V0X2tleXBhaXIoc2VjLCB4X29ubHksIGV2ZW5feSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydF8zMmIocHVia2V5KSB7XG4gICAgY29uc3Qga2V5ID0gQnVmZi5ieXRlcyhwdWJrZXkpO1xuICAgIGlmIChrZXkubGVuZ3RoID09PSAzMilcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMzMpXG4gICAgICAgIHJldHVybiBrZXkuc2xpY2UoMSwgMzMpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQga2V5IGxlbmd0aDogJHtrZXkubGVuZ3RofWApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRfMzNiKHB1YmtleSwgZXZlbl95ID0gZmFsc2UpIHtcbiAgICBjb25zdCBrZXkgPSBCdWZmLmJ5dGVzKHB1YmtleSk7XG4gICAgaWYgKGtleS5sZW5ndGggPT09IDMyKSB7XG4gICAgICAgIHJldHVybiBrZXkucHJlcGVuZCgweDAyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5Lmxlbmd0aCA9PT0gMzMpIHtcbiAgICAgICAgaWYgKGV2ZW5feSlcbiAgICAgICAgICAgIGtleVswXSA9IDB4MDI7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQga2V5IHNpemU6ICR7a2V5Lmxlbmd0aH1gKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNfa2V5KGtleSwga2V5cykge1xuICAgIGNvbnN0IHN0ciA9IGtleXMubWFwKGUgPT4gQnVmZi5ieXRlcyhlKS5oZXgpO1xuICAgIHJldHVybiBzdHIuaW5jbHVkZXMoQnVmZi5ieXRlcyhrZXkpLmhleCk7XG59XG5leHBvcnQgZnVuY3Rpb24gc29ydF9rZXlzKGtleXMpIHtcbiAgICByZXR1cm4ga2V5c1xuICAgICAgICAubWFwKGUgPT4gQnVmZi5ieXRlcyhlKS5oZXgpXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLm1hcChlID0+IEJ1ZmYuaGV4KGUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/keys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/math.js":
/*!*************************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/math.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GF: () => (/* binding */ GF),\n/* harmony export */   fd: () => (/* binding */ fd),\n/* harmony export */   in_field: () => (/* binding */ in_field),\n/* harmony export */   invert: () => (/* reexport safe */ _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.invert),\n/* harmony export */   mod: () => (/* reexport safe */ _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.mod),\n/* harmony export */   mod_bytes: () => (/* binding */ mod_bytes),\n/* harmony export */   mod_n: () => (/* binding */ mod_n),\n/* harmony export */   mod_p: () => (/* binding */ mod_p),\n/* harmony export */   on_curve: () => (/* binding */ on_curve),\n/* harmony export */   pow: () => (/* reexport safe */ _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.pow),\n/* harmony export */   pow2: () => (/* reexport safe */ _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.pow2),\n/* harmony export */   pow_n: () => (/* binding */ pow_n),\n/* harmony export */   pt: () => (/* reexport module object */ _point_js__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   sqrt_n: () => (/* binding */ sqrt_n),\n/* harmony export */   sqrt_p: () => (/* binding */ sqrt_p)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/abstract/modular */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/const.js\");\n/* harmony import */ var _point_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./point.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/point.js\");\n\n\n\n\n\n\nconst fd = (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.Field)(_const_js__WEBPACK_IMPORTED_MODULE_1__._N, 32, true);\nconst GF = _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.Field;\nconst mod_n = (x) => (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.mod)(x, _const_js__WEBPACK_IMPORTED_MODULE_1__._N);\nconst mod_p = (x) => (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.mod)(x, _const_js__WEBPACK_IMPORTED_MODULE_1__._P);\nconst pow_n = (x, exp) => (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.pow)(x, exp, _const_js__WEBPACK_IMPORTED_MODULE_1__._N);\nconst sqrt_n = (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.FpSqrt)(_const_js__WEBPACK_IMPORTED_MODULE_1__._N);\nconst sqrt_p = (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.FpSqrt)(_const_js__WEBPACK_IMPORTED_MODULE_1__._P);\nconst on_curve = (x) => {\n    return typeof x === 'bigint' && _const_js__WEBPACK_IMPORTED_MODULE_1__._0n < x && x < _const_js__WEBPACK_IMPORTED_MODULE_1__._P;\n};\nconst in_field = (x) => {\n    return typeof x === 'bigint' && _const_js__WEBPACK_IMPORTED_MODULE_1__._0n < x && x < _const_js__WEBPACK_IMPORTED_MODULE_1__._N;\n};\nfunction mod_bytes(bytes) {\n    const b = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(bytes).big;\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.big(mod_n(b), 32);\n}\n//# sourceMappingURL=math.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL21hdGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxQztBQUMwQjtBQUNMO0FBQ2hCO0FBQytCO0FBQ3hDO0FBQzFCLFdBQVcscUVBQUssQ0FBQyx5Q0FBRTtBQUNuQixXQUFXLGlFQUFLO0FBQ2hCLHFCQUFxQixtRUFBRyxJQUFJLHlDQUFFO0FBQzlCLHFCQUFxQixtRUFBRyxJQUFJLHlDQUFFO0FBQzlCLDBCQUEwQixtRUFBRyxTQUFTLHlDQUFFO0FBQ3hDLGVBQWUsc0VBQU0sQ0FBQyx5Q0FBRTtBQUN4QixlQUFlLHNFQUFNLENBQUMseUNBQUU7QUFDeEI7QUFDUCxvQ0FBb0MsMENBQUcsWUFBWSx5Q0FBRTtBQUNyRDtBQUNPO0FBQ1Asb0NBQW9DLDBDQUFHLFlBQVkseUNBQUU7QUFDckQ7QUFDTztBQUNQLGNBQWMsK0NBQUk7QUFDbEIsV0FBVywrQ0FBSTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdG9vbHMvZGlzdC9saWIvbWF0aC5qcz9kZTUzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmYgfSBmcm9tICdAY21kY29kZS9idWZmJztcbmltcG9ydCB7IEZpZWxkLCBGcFNxcnQgfSBmcm9tICdAbm9ibGUvY3VydmVzL2Fic3RyYWN0L21vZHVsYXInO1xuaW1wb3J0IHsgbW9kLCBwb3cgfSBmcm9tICdAbm9ibGUvY3VydmVzL2Fic3RyYWN0L21vZHVsYXInO1xuaW1wb3J0IHsgX04sIF9QLCBfMG4gfSBmcm9tICcuLi9jb25zdC5qcyc7XG5leHBvcnQgeyBtb2QsIHBvdywgcG93MiwgaW52ZXJ0LCB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvYWJzdHJhY3QvbW9kdWxhcic7XG5leHBvcnQgKiBhcyBwdCBmcm9tICcuL3BvaW50LmpzJztcbmV4cG9ydCBjb25zdCBmZCA9IEZpZWxkKF9OLCAzMiwgdHJ1ZSk7XG5leHBvcnQgY29uc3QgR0YgPSBGaWVsZDtcbmV4cG9ydCBjb25zdCBtb2RfbiA9ICh4KSA9PiBtb2QoeCwgX04pO1xuZXhwb3J0IGNvbnN0IG1vZF9wID0gKHgpID0+IG1vZCh4LCBfUCk7XG5leHBvcnQgY29uc3QgcG93X24gPSAoeCwgZXhwKSA9PiBwb3coeCwgZXhwLCBfTik7XG5leHBvcnQgY29uc3Qgc3FydF9uID0gRnBTcXJ0KF9OKTtcbmV4cG9ydCBjb25zdCBzcXJ0X3AgPSBGcFNxcnQoX1ApO1xuZXhwb3J0IGNvbnN0IG9uX2N1cnZlID0gKHgpID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdiaWdpbnQnICYmIF8wbiA8IHggJiYgeCA8IF9QO1xufTtcbmV4cG9ydCBjb25zdCBpbl9maWVsZCA9ICh4KSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnYmlnaW50JyAmJiBfMG4gPCB4ICYmIHggPCBfTjtcbn07XG5leHBvcnQgZnVuY3Rpb24gbW9kX2J5dGVzKGJ5dGVzKSB7XG4gICAgY29uc3QgYiA9IEJ1ZmYuYnl0ZXMoYnl0ZXMpLmJpZztcbiAgICByZXR1cm4gQnVmZi5iaWcobW9kX24oYiksIDMyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/math.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/merkle.js":
/*!***************************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/merkle.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create_merkle_proof: () => (/* binding */ create_merkle_proof),\n/* harmony export */   encode_branch: () => (/* binding */ encode_branch),\n/* harmony export */   merkleize_tree: () => (/* binding */ merkleize_tree),\n/* harmony export */   verify_merkle_proof: () => (/* binding */ verify_merkle_proof)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hash.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/hash.js\");\n\n\nfunction create_merkle_proof(leaves, target, encoder = encode_branch) {\n    const l = leaves.map(e => _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(e).hex);\n    const t = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(target).hex;\n    const [root, _, path] = merkleize_tree(l, t, [], encoder);\n    return {\n        root: _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.hex(root),\n        path: path.map(e => _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.hex(e))\n    };\n}\nfunction verify_merkle_proof(path, target, root, encoder = encode_branch) {\n    const p = path.map(e => _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(e).hex);\n    let t = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(target).hex;\n    for (const branch of p) {\n        t = encoder(t, branch);\n    }\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.is_equal(root, t);\n}\nfunction merkleize_tree(tree, target = null, path = [], encoder = encode_branch) {\n    const leaves = [];\n    const branches = [];\n    if (tree.length < 1) {\n        throw new Error('Tree is empty!');\n    }\n    for (let i = 0; i < tree.length; i++) {\n        const leaf = tree[i];\n        if (Array.isArray(leaf)) {\n            const [r, t, p] = merkleize_tree(leaf, target);\n            target = t;\n            leaves.push(r);\n            for (const e of p) {\n                path.push(e);\n            }\n        }\n        else {\n            leaves.push(leaf);\n        }\n    }\n    if (leaves.length === 1) {\n        return [leaves[0], target, path];\n    }\n    leaves.sort();\n    if (leaves.length % 2 !== 0) {\n        leaves.push(leaves[leaves.length - 1]);\n    }\n    for (let i = 0; i < leaves.length - 1; i += 2) {\n        const branch = encoder(leaves[i], leaves[i + 1]);\n        branches.push(branch);\n        if (typeof target === 'string') {\n            if (target === leaves[i]) {\n                path.push(leaves[i + 1]);\n                target = branch;\n            }\n            else if (target === leaves[i + 1]) {\n                path.push(leaves[i]);\n                target = branch;\n            }\n        }\n    }\n    return merkleize_tree(branches, target, path);\n}\nfunction encode_branch(a, b) {\n    if (b < a) {\n        [a, b] = [b, a];\n    }\n    return (0,_hash_js__WEBPACK_IMPORTED_MODULE_1__.sha256)(a, b).hex;\n}\n//# sourceMappingURL=merkle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL21lcmtsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUM7QUFDRjtBQUM1QjtBQUNQLDhCQUE4QiwrQ0FBSTtBQUNsQyxjQUFjLCtDQUFJO0FBQ2xCO0FBQ0E7QUFDQSxjQUFjLCtDQUFJO0FBQ2xCLDRCQUE0QiwrQ0FBSTtBQUNoQztBQUNBO0FBQ087QUFDUCw0QkFBNEIsK0NBQUk7QUFDaEMsWUFBWSwrQ0FBSTtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxXQUFXLCtDQUFJO0FBQ2Y7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnREFBTTtBQUNqQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL21lcmtsZS5qcz9hYzYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmYgfSBmcm9tICdAY21kY29kZS9idWZmJztcbmltcG9ydCB7IHNoYTI1NiB9IGZyb20gJy4vaGFzaC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX21lcmtsZV9wcm9vZihsZWF2ZXMsIHRhcmdldCwgZW5jb2RlciA9IGVuY29kZV9icmFuY2gpIHtcbiAgICBjb25zdCBsID0gbGVhdmVzLm1hcChlID0+IEJ1ZmYuYnl0ZXMoZSkuaGV4KTtcbiAgICBjb25zdCB0ID0gQnVmZi5ieXRlcyh0YXJnZXQpLmhleDtcbiAgICBjb25zdCBbcm9vdCwgXywgcGF0aF0gPSBtZXJrbGVpemVfdHJlZShsLCB0LCBbXSwgZW5jb2Rlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogQnVmZi5oZXgocm9vdCksXG4gICAgICAgIHBhdGg6IHBhdGgubWFwKGUgPT4gQnVmZi5oZXgoZSkpXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnlfbWVya2xlX3Byb29mKHBhdGgsIHRhcmdldCwgcm9vdCwgZW5jb2RlciA9IGVuY29kZV9icmFuY2gpIHtcbiAgICBjb25zdCBwID0gcGF0aC5tYXAoZSA9PiBCdWZmLmJ5dGVzKGUpLmhleCk7XG4gICAgbGV0IHQgPSBCdWZmLmJ5dGVzKHRhcmdldCkuaGV4O1xuICAgIGZvciAoY29uc3QgYnJhbmNoIG9mIHApIHtcbiAgICAgICAgdCA9IGVuY29kZXIodCwgYnJhbmNoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmYuaXNfZXF1YWwocm9vdCwgdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVya2xlaXplX3RyZWUodHJlZSwgdGFyZ2V0ID0gbnVsbCwgcGF0aCA9IFtdLCBlbmNvZGVyID0gZW5jb2RlX2JyYW5jaCkge1xuICAgIGNvbnN0IGxlYXZlcyA9IFtdO1xuICAgIGNvbnN0IGJyYW5jaGVzID0gW107XG4gICAgaWYgKHRyZWUubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyZWUgaXMgZW1wdHkhJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBsZWFmID0gdHJlZVtpXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobGVhZikpIHtcbiAgICAgICAgICAgIGNvbnN0IFtyLCB0LCBwXSA9IG1lcmtsZWl6ZV90cmVlKGxlYWYsIHRhcmdldCk7XG4gICAgICAgICAgICB0YXJnZXQgPSB0O1xuICAgICAgICAgICAgbGVhdmVzLnB1c2gocik7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgcCkge1xuICAgICAgICAgICAgICAgIHBhdGgucHVzaChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxlYXZlcy5wdXNoKGxlYWYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChsZWF2ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBbbGVhdmVzWzBdLCB0YXJnZXQsIHBhdGhdO1xuICAgIH1cbiAgICBsZWF2ZXMuc29ydCgpO1xuICAgIGlmIChsZWF2ZXMubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgICAgICBsZWF2ZXMucHVzaChsZWF2ZXNbbGVhdmVzLmxlbmd0aCAtIDFdKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZWF2ZXMubGVuZ3RoIC0gMTsgaSArPSAyKSB7XG4gICAgICAgIGNvbnN0IGJyYW5jaCA9IGVuY29kZXIobGVhdmVzW2ldLCBsZWF2ZXNbaSArIDFdKTtcbiAgICAgICAgYnJhbmNoZXMucHVzaChicmFuY2gpO1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IGxlYXZlc1tpXSkge1xuICAgICAgICAgICAgICAgIHBhdGgucHVzaChsZWF2ZXNbaSArIDFdKTtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBicmFuY2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQgPT09IGxlYXZlc1tpICsgMV0pIHtcbiAgICAgICAgICAgICAgICBwYXRoLnB1c2gobGVhdmVzW2ldKTtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBicmFuY2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmtsZWl6ZV90cmVlKGJyYW5jaGVzLCB0YXJnZXQsIHBhdGgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZV9icmFuY2goYSwgYikge1xuICAgIGlmIChiIDwgYSkge1xuICAgICAgICBbYSwgYl0gPSBbYiwgYV07XG4gICAgfVxuICAgIHJldHVybiBzaGEyNTYoYSwgYikuaGV4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVya2xlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/merkle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/point.js":
/*!**************************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/point.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Noble: () => (/* binding */ Noble),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   assert_valid: () => (/* binding */ assert_valid),\n/* harmony export */   eq: () => (/* binding */ eq),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   is_even: () => (/* binding */ is_even),\n/* harmony export */   is_point: () => (/* binding */ is_point),\n/* harmony export */   is_valid: () => (/* binding */ is_valid),\n/* harmony export */   lift_x: () => (/* binding */ lift_x),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   to_bytes: () => (/* binding */ to_bytes)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/const.js\");\n\n\n\nconst ECPoint = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint;\nconst Noble = ECPoint;\nfunction is_even(p) {\n    const pa = new ECPoint(p.x, p.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    return pa.hasEvenY();\n}\nfunction is_point(point) {\n    const p = point;\n    return ((typeof p === 'object' && p !== null) &&\n        (typeof p.x === 'bigint' && typeof p.y === 'bigint'));\n}\nfunction is_valid(point) {\n    if (!is_point(point))\n        return false;\n    const pt = new ECPoint(point.x, point.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    try {\n        pt.assertValidity();\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction assert_valid(p) {\n    if (!is_valid(p)) {\n        throw new Error('ECC point is invalid: ' + String(p));\n    }\n}\nfunction negate(a) {\n    const pa = new ECPoint(a.x, a.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    try {\n        const pc = pa.negate();\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nfunction add(a, b) {\n    if (a === null)\n        return b;\n    if (b === null)\n        return a;\n    const pa = new ECPoint(a.x, a.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    const pb = new ECPoint(b.x, b.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    try {\n        const pc = pa.add(pb);\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nfunction sub(a, b) {\n    if (a === null)\n        return b;\n    if (b === null)\n        return a;\n    const pa = new ECPoint(a.x, a.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    const pb = new ECPoint(b.x, b.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    try {\n        const pc = pa.subtract(pb);\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nfunction eq(a, b) {\n    if (a === null && b === null) {\n        return true;\n    }\n    if (a !== null && b !== null) {\n        return (a.x === b.x && a.y === b.y);\n    }\n    return false;\n}\nfunction mul(a, b) {\n    if (a === null)\n        return null;\n    try {\n        const buff = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(b);\n        const pa = new ECPoint(a.x, a.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n        const pc = pa.multiply(buff.big);\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nfunction gen(b) {\n    const buff = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(b);\n    const base = ECPoint.BASE;\n    const pt = base.multiply(buff.big);\n    pt.assertValidity();\n    return { x: pt.x, y: pt.y };\n}\nfunction lift_x(bytes, xonly = false) {\n    let key = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(bytes);\n    if (key.length === 32) {\n        key = key.prepend(0x02);\n    }\n    if (xonly && key[0] !== 0x02) {\n        key[0] = 0x02;\n    }\n    const point = ECPoint.fromHex(key.hex);\n    point.assertValidity();\n    return { x: point.x, y: point.y };\n}\nfunction to_bytes(p) {\n    const bytes = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.big(p.x, 32);\n    const parity = is_even(p) ? 0x02 : 0x03;\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([parity, bytes]);\n}\n//# sourceMappingURL=point.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL3BvaW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUM7QUFDZTtBQUNsQjtBQUNsQyxnQkFBZ0IsOERBQVM7QUFDbEI7QUFDQTtBQUNQLHFDQUFxQywwQ0FBRztBQUN4QztBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLDZDQUE2QywwQ0FBRztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AscUNBQXFDLDBDQUFHO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywwQ0FBRztBQUN4QyxxQ0FBcUMsMENBQUc7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDBDQUFHO0FBQ3hDLHFDQUFxQywwQ0FBRztBQUN4QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLCtDQUFJO0FBQ3pCLHlDQUF5QywwQ0FBRztBQUM1QztBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGlCQUFpQiwrQ0FBSTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDTztBQUNQLGNBQWMsK0NBQUk7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNPO0FBQ1Asa0JBQWtCLCtDQUFJO0FBQ3RCO0FBQ0EsV0FBVywrQ0FBSTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdG9vbHMvZGlzdC9saWIvcG9pbnQuanM/OTY4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWZmIH0gZnJvbSAnQGNtZGNvZGUvYnVmZic7XG5pbXBvcnQgeyBzZWNwMjU2azEgfSBmcm9tICdAbm9ibGUvY3VydmVzL3NlY3AyNTZrMSc7XG5pbXBvcnQgeyBfMW4gfSBmcm9tICcuLi9jb25zdC5qcyc7XG5jb25zdCBFQ1BvaW50ID0gc2VjcDI1NmsxLlByb2plY3RpdmVQb2ludDtcbmV4cG9ydCBjb25zdCBOb2JsZSA9IEVDUG9pbnQ7XG5leHBvcnQgZnVuY3Rpb24gaXNfZXZlbihwKSB7XG4gICAgY29uc3QgcGEgPSBuZXcgRUNQb2ludChwLngsIHAueSwgXzFuKTtcbiAgICByZXR1cm4gcGEuaGFzRXZlblkoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc19wb2ludChwb2ludCkge1xuICAgIGNvbnN0IHAgPSBwb2ludDtcbiAgICByZXR1cm4gKCh0eXBlb2YgcCA9PT0gJ29iamVjdCcgJiYgcCAhPT0gbnVsbCkgJiZcbiAgICAgICAgKHR5cGVvZiBwLnggPT09ICdiaWdpbnQnICYmIHR5cGVvZiBwLnkgPT09ICdiaWdpbnQnKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNfdmFsaWQocG9pbnQpIHtcbiAgICBpZiAoIWlzX3BvaW50KHBvaW50KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHB0ID0gbmV3IEVDUG9pbnQocG9pbnQueCwgcG9pbnQueSwgXzFuKTtcbiAgICB0cnkge1xuICAgICAgICBwdC5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydF92YWxpZChwKSB7XG4gICAgaWYgKCFpc192YWxpZChwKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VDQyBwb2ludCBpcyBpbnZhbGlkOiAnICsgU3RyaW5nKHApKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKGEpIHtcbiAgICBjb25zdCBwYSA9IG5ldyBFQ1BvaW50KGEueCwgYS55LCBfMW4pO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBjID0gcGEubmVnYXRlKCk7XG4gICAgICAgIHBjLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgIHJldHVybiB7IHg6IHBjLngsIHk6IHBjLnkgfTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgaWYgKGIgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBhO1xuICAgIGNvbnN0IHBhID0gbmV3IEVDUG9pbnQoYS54LCBhLnksIF8xbik7XG4gICAgY29uc3QgcGIgPSBuZXcgRUNQb2ludChiLngsIGIueSwgXzFuKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwYyA9IHBhLmFkZChwYik7XG4gICAgICAgIHBjLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgIHJldHVybiB7IHg6IHBjLngsIHk6IHBjLnkgfTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc3ViKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgaWYgKGIgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBhO1xuICAgIGNvbnN0IHBhID0gbmV3IEVDUG9pbnQoYS54LCBhLnksIF8xbik7XG4gICAgY29uc3QgcGIgPSBuZXcgRUNQb2ludChiLngsIGIueSwgXzFuKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwYyA9IHBhLnN1YnRyYWN0KHBiKTtcbiAgICAgICAgcGMuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgcmV0dXJuIHsgeDogcGMueCwgeTogcGMueSB9O1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBlcShhLCBiKSB7XG4gICAgaWYgKGEgPT09IG51bGwgJiYgYiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGEgIT09IG51bGwgJiYgYiAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gKGEueCA9PT0gYi54ICYmIGEueSA9PT0gYi55KTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG11bChhLCBiKSB7XG4gICAgaWYgKGEgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGJ1ZmYgPSBCdWZmLmJ5dGVzKGIpO1xuICAgICAgICBjb25zdCBwYSA9IG5ldyBFQ1BvaW50KGEueCwgYS55LCBfMW4pO1xuICAgICAgICBjb25zdCBwYyA9IHBhLm11bHRpcGx5KGJ1ZmYuYmlnKTtcbiAgICAgICAgcGMuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgcmV0dXJuIHsgeDogcGMueCwgeTogcGMueSB9O1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW4oYikge1xuICAgIGNvbnN0IGJ1ZmYgPSBCdWZmLmJ5dGVzKGIpO1xuICAgIGNvbnN0IGJhc2UgPSBFQ1BvaW50LkJBU0U7XG4gICAgY29uc3QgcHQgPSBiYXNlLm11bHRpcGx5KGJ1ZmYuYmlnKTtcbiAgICBwdC5hc3NlcnRWYWxpZGl0eSgpO1xuICAgIHJldHVybiB7IHg6IHB0LngsIHk6IHB0LnkgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsaWZ0X3goYnl0ZXMsIHhvbmx5ID0gZmFsc2UpIHtcbiAgICBsZXQga2V5ID0gQnVmZi5ieXRlcyhieXRlcyk7XG4gICAgaWYgKGtleS5sZW5ndGggPT09IDMyKSB7XG4gICAgICAgIGtleSA9IGtleS5wcmVwZW5kKDB4MDIpO1xuICAgIH1cbiAgICBpZiAoeG9ubHkgJiYga2V5WzBdICE9PSAweDAyKSB7XG4gICAgICAgIGtleVswXSA9IDB4MDI7XG4gICAgfVxuICAgIGNvbnN0IHBvaW50ID0gRUNQb2ludC5mcm9tSGV4KGtleS5oZXgpO1xuICAgIHBvaW50LmFzc2VydFZhbGlkaXR5KCk7XG4gICAgcmV0dXJuIHsgeDogcG9pbnQueCwgeTogcG9pbnQueSB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvX2J5dGVzKHApIHtcbiAgICBjb25zdCBieXRlcyA9IEJ1ZmYuYmlnKHAueCwgMzIpO1xuICAgIGNvbnN0IHBhcml0eSA9IGlzX2V2ZW4ocCkgPyAweDAyIDogMHgwMztcbiAgICByZXR1cm4gQnVmZi5qb2luKFtwYXJpdHksIGJ5dGVzXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2ludC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/point.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/shamir.js":
/*!***************************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/shamir.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   combine_shares: () => (/* binding */ combine_shares),\n/* harmony export */   create_shares: () => (/* binding */ create_shares)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/const.js\");\n/* harmony import */ var _ecc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/ecc.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/math.js\");\n\n\n\n\nfunction create_shares(secret, thold, total) {\n    const coeffs = [_ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(secret).big];\n    for (let i = 1; i < thold; i++) {\n        const rand = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.random(32).big;\n        coeffs.push((0,_math_js__WEBPACK_IMPORTED_MODULE_3__.mod_n)(rand));\n    }\n    const shares = [];\n    for (let i = 1; i <= total; i++) {\n        let result = _const_js__WEBPACK_IMPORTED_MODULE_1__._0n;\n        coeffs.forEach((coeff, index) => {\n            const idx = BigInt(i) ** BigInt(index);\n            result += _math_js__WEBPACK_IMPORTED_MODULE_3__.fd.mul(coeff, idx);\n        });\n        const index = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.num(i, 4);\n        const value = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.big(result, 33);\n        const share = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([index, value]);\n        shares.push(share);\n    }\n    return shares;\n}\nfunction combine_shares(shares) {\n    const entries = shares.map(e => {\n        const bytes = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(e);\n        const index = bytes.subarray(0, 4).big;\n        const value = bytes.subarray(4).big;\n        return [index, value];\n    });\n    let secret = _const_js__WEBPACK_IMPORTED_MODULE_1__._0n;\n    for (let i = 0; i < entries.length; i++) {\n        let numer = _const_js__WEBPACK_IMPORTED_MODULE_1__._1n;\n        let denom = _const_js__WEBPACK_IMPORTED_MODULE_1__._1n;\n        for (let j = 0; j < entries.length; j++) {\n            if (i !== j) {\n                numer = (numer * -entries[j][0]) % _const_js__WEBPACK_IMPORTED_MODULE_1__._N;\n                denom = (denom * (entries[i][0] - entries[j][0])) % _const_js__WEBPACK_IMPORTED_MODULE_1__._N;\n            }\n        }\n        if (numer < _const_js__WEBPACK_IMPORTED_MODULE_1__._0n)\n            numer += _const_js__WEBPACK_IMPORTED_MODULE_1__._N;\n        if (denom < _const_js__WEBPACK_IMPORTED_MODULE_1__._0n)\n            denom += _const_js__WEBPACK_IMPORTED_MODULE_1__._N;\n        const coeff = (entries[i][1] * numer * (0,_math_js__WEBPACK_IMPORTED_MODULE_3__.invert)(denom, _const_js__WEBPACK_IMPORTED_MODULE_1__._N)) % _const_js__WEBPACK_IMPORTED_MODULE_1__._N;\n        secret = (secret + coeff) % _const_js__WEBPACK_IMPORTED_MODULE_1__._N;\n    }\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.big(secret, 32);\n}\n//# sourceMappingURL=shamir.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL3NoYW1pci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUM7QUFDTTtBQUNWO0FBQ2E7QUFDdkM7QUFDUCxvQkFBb0IsMENBQUs7QUFDekIsb0JBQW9CLFdBQVc7QUFDL0IscUJBQXFCLCtDQUFJO0FBQ3pCLG9CQUFvQiwrQ0FBSztBQUN6QjtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEMscUJBQXFCLDBDQUFHO0FBQ3hCO0FBQ0E7QUFDQSxzQkFBc0Isd0NBQUU7QUFDeEIsU0FBUztBQUNULHNCQUFzQiwrQ0FBSTtBQUMxQixzQkFBc0IsK0NBQUk7QUFDMUIsc0JBQXNCLCtDQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHNCQUFzQiwrQ0FBSTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLDBDQUFHO0FBQ3BCLG9CQUFvQixvQkFBb0I7QUFDeEMsb0JBQW9CLDBDQUFHO0FBQ3ZCLG9CQUFvQiwwQ0FBRztBQUN2Qix3QkFBd0Isb0JBQW9CO0FBQzVDO0FBQ0EsbURBQW1ELHlDQUFFO0FBQ3JELG9FQUFvRSx5Q0FBRTtBQUN0RTtBQUNBO0FBQ0Esb0JBQW9CLDBDQUFHO0FBQ3ZCLHFCQUFxQix5Q0FBRTtBQUN2QixvQkFBb0IsMENBQUc7QUFDdkIscUJBQXFCLHlDQUFFO0FBQ3ZCLCtDQUErQyxnREFBTSxRQUFRLHlDQUFFLEtBQUsseUNBQUU7QUFDdEUsb0NBQW9DLHlDQUFFO0FBQ3RDO0FBQ0EsV0FBVywrQ0FBSTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdG9vbHMvZGlzdC9saWIvc2hhbWlyLmpzPzYwMWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZiB9IGZyb20gJ0BjbWRjb2RlL2J1ZmYnO1xuaW1wb3J0IHsgXzBuLCBfMW4sIF9OIH0gZnJvbSAnLi4vY29uc3QuanMnO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuL2VjYy5qcyc7XG5pbXBvcnQgeyBmZCwgaW52ZXJ0LCBtb2RfbiB9IGZyb20gJy4vbWF0aC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX3NoYXJlcyhzZWNyZXQsIHRob2xkLCB0b3RhbCkge1xuICAgIGNvbnN0IGNvZWZmcyA9IFtGaWVsZC5tb2Qoc2VjcmV0KS5iaWddO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhvbGQ7IGkrKykge1xuICAgICAgICBjb25zdCByYW5kID0gQnVmZi5yYW5kb20oMzIpLmJpZztcbiAgICAgICAgY29lZmZzLnB1c2gobW9kX24ocmFuZCkpO1xuICAgIH1cbiAgICBjb25zdCBzaGFyZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0b3RhbDsgaSsrKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBfMG47XG4gICAgICAgIGNvZWZmcy5mb3JFYWNoKChjb2VmZiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IEJpZ0ludChpKSAqKiBCaWdJbnQoaW5kZXgpO1xuICAgICAgICAgICAgcmVzdWx0ICs9IGZkLm11bChjb2VmZiwgaWR4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gQnVmZi5udW0oaSwgNCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gQnVmZi5iaWcocmVzdWx0LCAzMyk7XG4gICAgICAgIGNvbnN0IHNoYXJlID0gQnVmZi5qb2luKFtpbmRleCwgdmFsdWVdKTtcbiAgICAgICAgc2hhcmVzLnB1c2goc2hhcmUpO1xuICAgIH1cbiAgICByZXR1cm4gc2hhcmVzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVfc2hhcmVzKHNoYXJlcykge1xuICAgIGNvbnN0IGVudHJpZXMgPSBzaGFyZXMubWFwKGUgPT4ge1xuICAgICAgICBjb25zdCBieXRlcyA9IEJ1ZmYuYnl0ZXMoZSk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gYnl0ZXMuc3ViYXJyYXkoMCwgNCkuYmlnO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGJ5dGVzLnN1YmFycmF5KDQpLmJpZztcbiAgICAgICAgcmV0dXJuIFtpbmRleCwgdmFsdWVdO1xuICAgIH0pO1xuICAgIGxldCBzZWNyZXQgPSBfMG47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBudW1lciA9IF8xbjtcbiAgICAgICAgbGV0IGRlbm9tID0gXzFuO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVudHJpZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChpICE9PSBqKSB7XG4gICAgICAgICAgICAgICAgbnVtZXIgPSAobnVtZXIgKiAtZW50cmllc1tqXVswXSkgJSBfTjtcbiAgICAgICAgICAgICAgICBkZW5vbSA9IChkZW5vbSAqIChlbnRyaWVzW2ldWzBdIC0gZW50cmllc1tqXVswXSkpICUgX047XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bWVyIDwgXzBuKVxuICAgICAgICAgICAgbnVtZXIgKz0gX047XG4gICAgICAgIGlmIChkZW5vbSA8IF8wbilcbiAgICAgICAgICAgIGRlbm9tICs9IF9OO1xuICAgICAgICBjb25zdCBjb2VmZiA9IChlbnRyaWVzW2ldWzFdICogbnVtZXIgKiBpbnZlcnQoZGVub20sIF9OKSkgJSBfTjtcbiAgICAgICAgc2VjcmV0ID0gKHNlY3JldCArIGNvZWZmKSAlIF9OO1xuICAgIH1cbiAgICByZXR1cm4gQnVmZi5iaWcoc2VjcmV0LCAzMik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFtaXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/shamir.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/sig.js":
/*!************************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/lib/sig.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gen_nonce: () => (/* binding */ gen_nonce),\n/* harmony export */   recover_key: () => (/* binding */ recover_key),\n/* harmony export */   sign_msg: () => (/* binding */ sign_msg),\n/* harmony export */   verify_sig: () => (/* binding */ verify_sig)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/const.js\");\n/* harmony import */ var _ecc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/ecc.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hash.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/hash.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/keys.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-tools/dist/assert.js\");\n\n\n\n\n\n\nfunction sign_msg(message, secret, options = {}) {\n    const { adaptor, key_tweak } = options;\n    const m = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(message);\n    let dp = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(secret);\n    if (key_tweak !== undefined) {\n        dp = dp.negated.add(key_tweak);\n    }\n    const P = dp.point;\n    const d = dp.negated;\n    const n = gen_nonce(m, d, options);\n    let kp = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(n);\n    if (adaptor !== undefined) {\n        kp = kp.negated.add(adaptor);\n    }\n    const R = kp.point;\n    const k = kp.negated.big;\n    const ch = (0,_hash_js__WEBPACK_IMPORTED_MODULE_3__.hash340)('BIP0340/challenge', R.x, P.x, m);\n    const c = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(ch);\n    const s = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(k + (c.big * d.big));\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([R.x, s.raw]);\n}\nfunction verify_sig(signature, message, pubkey, options = {}) {\n    const { throws = false } = options;\n    const msg = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(message);\n    const sig = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(signature);\n    if (sig.length < 64) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_5__.fail('Signature length is too small: ' + String(sig.length), throws);\n    }\n    _assert_js__WEBPACK_IMPORTED_MODULE_5__.size(pubkey, 32);\n    const P = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Point.from_x(pubkey);\n    const rx = sig.subarray(0, 32);\n    const R = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Point.from_x(rx);\n    const s = sig.subarray(32, 64);\n    const sG = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(s).point;\n    const ch = (0,_hash_js__WEBPACK_IMPORTED_MODULE_3__.hash340)('BIP0340/challenge', R.x, P.x, msg);\n    const c = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(ch);\n    const eP = P.mul(c.big);\n    const r = sG.sub(eP);\n    if (R.hasOddY) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_5__.fail('Signature R value has odd Y coordinate!', throws);\n    }\n    if (R.x.big === _const_js__WEBPACK_IMPORTED_MODULE_1__._0n) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_5__.fail('Signature R value is infinite!', throws);\n    }\n    if (R.x.big !== r.x.big) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_5__.fail(`Signature is invalid! R: ${R.x.hex} r:${r.x.hex}`, throws);\n    }\n    return R.x.big === r.x.big;\n}\nfunction gen_nonce(message, secret, options = {}) {\n    const { aux, nonce_seed, nonce_tweak, sec_nonce } = options;\n    let nonce;\n    if (nonce_seed !== undefined) {\n        nonce = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(nonce_seed);\n    }\n    else {\n        const seed = (aux === null) ? _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.num(0, 32) : aux;\n        const a = (0,_hash_js__WEBPACK_IMPORTED_MODULE_3__.hash340)('BIP0340/aux', seed ?? _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.random(32));\n        const t = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(secret).big ^ a.big;\n        nonce = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.join([t, (0,_keys_js__WEBPACK_IMPORTED_MODULE_4__.get_pubkey)(secret, true)]);\n    }\n    let sn = (sec_nonce !== undefined)\n        ? _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(sec_nonce)\n        : _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod((0,_hash_js__WEBPACK_IMPORTED_MODULE_3__.hash340)('BIP0340/nonce', nonce, message));\n    if (nonce_tweak !== undefined) {\n        sn = sn.negated.add(nonce_tweak);\n    }\n    return sn.buff;\n}\nfunction recover_key(message, pubkey, seed, signature) {\n    const pub = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pubkey);\n    const sig = _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(signature);\n    const s_val = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(sig.slice(32, 64));\n    const nonce = (0,_hash_js__WEBPACK_IMPORTED_MODULE_3__.hash340)('BIP0340/nonce', seed, message);\n    const chal = (0,_hash_js__WEBPACK_IMPORTED_MODULE_3__.hash340)('BIP0340/challenge', sig.slice(0, 32), pub, message);\n    const k = (0,_keys_js__WEBPACK_IMPORTED_MODULE_4__.get_seckey)(nonce, true);\n    return s_val.sub(k).div(chal).buff;\n}\n//# sourceMappingURL=sig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL3NpZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ0g7QUFDTTtBQUNKO0FBQ2U7QUFDWjtBQUNoQywrQ0FBK0M7QUFDdEQsWUFBWSxxQkFBcUI7QUFDakMsY0FBYywrQ0FBSTtBQUNsQixhQUFhLDBDQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMENBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaURBQU87QUFDdEIsY0FBYywwQ0FBSztBQUNuQixjQUFjLDBDQUFLO0FBQ25CLFdBQVcsK0NBQUk7QUFDZjtBQUNPLDREQUE0RDtBQUNuRSxZQUFZLGlCQUFpQjtBQUM3QixnQkFBZ0IsK0NBQUk7QUFDcEIsZ0JBQWdCLCtDQUFJO0FBQ3BCO0FBQ0EsZUFBZSw0Q0FBVztBQUMxQjtBQUNBLElBQUksNENBQVc7QUFDZixjQUFjLDBDQUFLO0FBQ25CO0FBQ0EsY0FBYywwQ0FBSztBQUNuQjtBQUNBLGVBQWUsMENBQUs7QUFDcEIsZUFBZSxpREFBTztBQUN0QixjQUFjLDBDQUFLO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNENBQVc7QUFDMUI7QUFDQSxvQkFBb0IsMENBQUc7QUFDdkIsZUFBZSw0Q0FBVztBQUMxQjtBQUNBO0FBQ0EsZUFBZSw0Q0FBVyw2QkFBNkIsU0FBUyxJQUFJLFFBQVE7QUFDNUU7QUFDQTtBQUNBO0FBQ08sZ0RBQWdEO0FBQ3ZELFlBQVksMENBQTBDO0FBQ3REO0FBQ0E7QUFDQSxnQkFBZ0IsK0NBQUk7QUFDcEI7QUFDQTtBQUNBLHNDQUFzQywrQ0FBSTtBQUMxQyxrQkFBa0IsaURBQU8sd0JBQXdCLCtDQUFJO0FBQ3JELGtCQUFrQiwrQ0FBSTtBQUN0QixnQkFBZ0IsK0NBQUksVUFBVSxvREFBVTtBQUN4QztBQUNBO0FBQ0EsVUFBVSwwQ0FBSztBQUNmLFVBQVUsMENBQUssS0FBSyxpREFBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxnQkFBZ0IsK0NBQUk7QUFDcEIsZ0JBQWdCLCtDQUFJO0FBQ3BCLGtCQUFrQiwwQ0FBSztBQUN2QixrQkFBa0IsaURBQU87QUFDekIsaUJBQWlCLGlEQUFPO0FBQ3hCLGNBQWMsb0RBQVU7QUFDeEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvbGliL3NpZy5qcz8xNGMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmYgfSBmcm9tICdAY21kY29kZS9idWZmJztcbmltcG9ydCB7IF8wbiB9IGZyb20gJy4uL2NvbnN0LmpzJztcbmltcG9ydCB7IEZpZWxkLCBQb2ludCB9IGZyb20gJy4vZWNjLmpzJztcbmltcG9ydCB7IGhhc2gzNDAgfSBmcm9tICcuL2hhc2guanMnO1xuaW1wb3J0IHsgZ2V0X3B1YmtleSwgZ2V0X3NlY2tleSB9IGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnLi4vYXNzZXJ0LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzaWduX21zZyhtZXNzYWdlLCBzZWNyZXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgYWRhcHRvciwga2V5X3R3ZWFrIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IG0gPSBCdWZmLmJ5dGVzKG1lc3NhZ2UpO1xuICAgIGxldCBkcCA9IEZpZWxkLm1vZChzZWNyZXQpO1xuICAgIGlmIChrZXlfdHdlYWsgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkcCA9IGRwLm5lZ2F0ZWQuYWRkKGtleV90d2Vhayk7XG4gICAgfVxuICAgIGNvbnN0IFAgPSBkcC5wb2ludDtcbiAgICBjb25zdCBkID0gZHAubmVnYXRlZDtcbiAgICBjb25zdCBuID0gZ2VuX25vbmNlKG0sIGQsIG9wdGlvbnMpO1xuICAgIGxldCBrcCA9IEZpZWxkLm1vZChuKTtcbiAgICBpZiAoYWRhcHRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtwID0ga3AubmVnYXRlZC5hZGQoYWRhcHRvcik7XG4gICAgfVxuICAgIGNvbnN0IFIgPSBrcC5wb2ludDtcbiAgICBjb25zdCBrID0ga3AubmVnYXRlZC5iaWc7XG4gICAgY29uc3QgY2ggPSBoYXNoMzQwKCdCSVAwMzQwL2NoYWxsZW5nZScsIFIueCwgUC54LCBtKTtcbiAgICBjb25zdCBjID0gRmllbGQubW9kKGNoKTtcbiAgICBjb25zdCBzID0gRmllbGQubW9kKGsgKyAoYy5iaWcgKiBkLmJpZykpO1xuICAgIHJldHVybiBCdWZmLmpvaW4oW1IueCwgcy5yYXddKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnlfc2lnKHNpZ25hdHVyZSwgbWVzc2FnZSwgcHVia2V5LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHRocm93cyA9IGZhbHNlIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IG1zZyA9IEJ1ZmYuYnl0ZXMobWVzc2FnZSk7XG4gICAgY29uc3Qgc2lnID0gQnVmZi5ieXRlcyhzaWduYXR1cmUpO1xuICAgIGlmIChzaWcubGVuZ3RoIDwgNjQpIHtcbiAgICAgICAgcmV0dXJuIGFzc2VydC5mYWlsKCdTaWduYXR1cmUgbGVuZ3RoIGlzIHRvbyBzbWFsbDogJyArIFN0cmluZyhzaWcubGVuZ3RoKSwgdGhyb3dzKTtcbiAgICB9XG4gICAgYXNzZXJ0LnNpemUocHVia2V5LCAzMik7XG4gICAgY29uc3QgUCA9IFBvaW50LmZyb21feChwdWJrZXkpO1xuICAgIGNvbnN0IHJ4ID0gc2lnLnN1YmFycmF5KDAsIDMyKTtcbiAgICBjb25zdCBSID0gUG9pbnQuZnJvbV94KHJ4KTtcbiAgICBjb25zdCBzID0gc2lnLnN1YmFycmF5KDMyLCA2NCk7XG4gICAgY29uc3Qgc0cgPSBGaWVsZC5tb2QocykucG9pbnQ7XG4gICAgY29uc3QgY2ggPSBoYXNoMzQwKCdCSVAwMzQwL2NoYWxsZW5nZScsIFIueCwgUC54LCBtc2cpO1xuICAgIGNvbnN0IGMgPSBGaWVsZC5tb2QoY2gpO1xuICAgIGNvbnN0IGVQID0gUC5tdWwoYy5iaWcpO1xuICAgIGNvbnN0IHIgPSBzRy5zdWIoZVApO1xuICAgIGlmIChSLmhhc09kZFkpIHtcbiAgICAgICAgcmV0dXJuIGFzc2VydC5mYWlsKCdTaWduYXR1cmUgUiB2YWx1ZSBoYXMgb2RkIFkgY29vcmRpbmF0ZSEnLCB0aHJvd3MpO1xuICAgIH1cbiAgICBpZiAoUi54LmJpZyA9PT0gXzBuKSB7XG4gICAgICAgIHJldHVybiBhc3NlcnQuZmFpbCgnU2lnbmF0dXJlIFIgdmFsdWUgaXMgaW5maW5pdGUhJywgdGhyb3dzKTtcbiAgICB9XG4gICAgaWYgKFIueC5iaWcgIT09IHIueC5iaWcpIHtcbiAgICAgICAgcmV0dXJuIGFzc2VydC5mYWlsKGBTaWduYXR1cmUgaXMgaW52YWxpZCEgUjogJHtSLnguaGV4fSByOiR7ci54LmhleH1gLCB0aHJvd3MpO1xuICAgIH1cbiAgICByZXR1cm4gUi54LmJpZyA9PT0gci54LmJpZztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5fbm9uY2UobWVzc2FnZSwgc2VjcmV0LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGF1eCwgbm9uY2Vfc2VlZCwgbm9uY2VfdHdlYWssIHNlY19ub25jZSB9ID0gb3B0aW9ucztcbiAgICBsZXQgbm9uY2U7XG4gICAgaWYgKG5vbmNlX3NlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub25jZSA9IEJ1ZmYuYnl0ZXMobm9uY2Vfc2VlZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBzZWVkID0gKGF1eCA9PT0gbnVsbCkgPyBCdWZmLm51bSgwLCAzMikgOiBhdXg7XG4gICAgICAgIGNvbnN0IGEgPSBoYXNoMzQwKCdCSVAwMzQwL2F1eCcsIHNlZWQgPz8gQnVmZi5yYW5kb20oMzIpKTtcbiAgICAgICAgY29uc3QgdCA9IEJ1ZmYuYnl0ZXMoc2VjcmV0KS5iaWcgXiBhLmJpZztcbiAgICAgICAgbm9uY2UgPSBCdWZmLmpvaW4oW3QsIGdldF9wdWJrZXkoc2VjcmV0LCB0cnVlKV0pO1xuICAgIH1cbiAgICBsZXQgc24gPSAoc2VjX25vbmNlICE9PSB1bmRlZmluZWQpXG4gICAgICAgID8gRmllbGQubW9kKHNlY19ub25jZSlcbiAgICAgICAgOiBGaWVsZC5tb2QoaGFzaDM0MCgnQklQMDM0MC9ub25jZScsIG5vbmNlLCBtZXNzYWdlKSk7XG4gICAgaWYgKG5vbmNlX3R3ZWFrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc24gPSBzbi5uZWdhdGVkLmFkZChub25jZV90d2Vhayk7XG4gICAgfVxuICAgIHJldHVybiBzbi5idWZmO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlY292ZXJfa2V5KG1lc3NhZ2UsIHB1YmtleSwgc2VlZCwgc2lnbmF0dXJlKSB7XG4gICAgY29uc3QgcHViID0gQnVmZi5ieXRlcyhwdWJrZXkpO1xuICAgIGNvbnN0IHNpZyA9IEJ1ZmYuYnl0ZXMoc2lnbmF0dXJlKTtcbiAgICBjb25zdCBzX3ZhbCA9IEZpZWxkLm1vZChzaWcuc2xpY2UoMzIsIDY0KSk7XG4gICAgY29uc3Qgbm9uY2UgPSBoYXNoMzQwKCdCSVAwMzQwL25vbmNlJywgc2VlZCwgbWVzc2FnZSk7XG4gICAgY29uc3QgY2hhbCA9IGhhc2gzNDAoJ0JJUDAzNDAvY2hhbGxlbmdlJywgc2lnLnNsaWNlKDAsIDMyKSwgcHViLCBtZXNzYWdlKTtcbiAgICBjb25zdCBrID0gZ2V0X3NlY2tleShub25jZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHNfdmFsLnN1YihrKS5kaXYoY2hhbCkuYnVmZjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/lib/sig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvdHlwZXMuanMiLCJtYXBwaW5ncyI6IjtBQUFVO0FBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdG9vbHMvZGlzdC90eXBlcy5qcz85MjVjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-tools/dist/util.js":
/*!*********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-tools/dist/util.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   increment_buffer: () => (/* binding */ increment_buffer),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff */ \"(ssr)/./node_modules/@cmdcode/buff/dist/index.js\");\n\nfunction random(size) {\n    return _cmdcode_buff__WEBPACK_IMPORTED_MODULE_0__.Buff.random(size);\n}\nfunction increment_buffer(buffer) {\n    let i = buffer.length - 1;\n    for (i; i >= 0; i--) {\n        if (buffer[i] < 255) {\n            buffer.set([buffer[i] + 1], i);\n            return buffer;\n        }\n    }\n    throw TypeError('Unable to increment buffer: ' + buffer.toString());\n}\nfunction stringify(content) {\n    switch (typeof content) {\n        case 'object':\n            return JSON.stringify(content);\n        case 'string':\n            return content;\n        case 'bigint':\n            return content.toString();\n        case 'number':\n            return content.toString();\n        case 'boolean':\n            return String(content);\n        default:\n            throw new TypeError('Content type not supported: ' + typeof content);\n    }\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXRvb2xzL2Rpc3QvdXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFDO0FBQzlCO0FBQ1AsV0FBVywrQ0FBSTtBQUNmO0FBQ087QUFDUDtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdG9vbHMvZGlzdC91dGlsLmpzP2I3OGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZiB9IGZyb20gJ0BjbWRjb2RlL2J1ZmYnO1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShzaXplKSB7XG4gICAgcmV0dXJuIEJ1ZmYucmFuZG9tKHNpemUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudF9idWZmZXIoYnVmZmVyKSB7XG4gICAgbGV0IGkgPSBidWZmZXIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKGk7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChidWZmZXJbaV0gPCAyNTUpIHtcbiAgICAgICAgICAgIGJ1ZmZlci5zZXQoW2J1ZmZlcltpXSArIDFdLCBpKTtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgVHlwZUVycm9yKCdVbmFibGUgdG8gaW5jcmVtZW50IGJ1ZmZlcjogJyArIGJ1ZmZlci50b1N0cmluZygpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkoY29udGVudCkge1xuICAgIHN3aXRjaCAodHlwZW9mIGNvbnRlbnQpIHtcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShjb250ZW50KTtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICBjYXNlICdiaWdpbnQnOlxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhjb250ZW50KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnRlbnQgdHlwZSBub3Qgc3VwcG9ydGVkOiAnICsgdHlwZW9mIGNvbnRlbnQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-tools/dist/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/assert.js":
/*!***********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/assert.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   fail: () => (/* binding */ fail),\n/* harmony export */   in_field: () => (/* binding */ in_field),\n/* harmony export */   ok: () => (/* binding */ ok),\n/* harmony export */   on_curve: () => (/* binding */ on_curve),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   valid_chain: () => (/* binding */ valid_chain),\n/* harmony export */   valid_derive_state: () => (/* binding */ valid_derive_state),\n/* harmony export */   valid_hash: () => (/* binding */ valid_hash),\n/* harmony export */   valid_index: () => (/* binding */ valid_index),\n/* harmony export */   valid_path: () => (/* binding */ valid_path),\n/* harmony export */   valid_pubkey: () => (/* binding */ valid_pubkey)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/const.js\");\n\n\nfunction ok(value, message) {\n    if (value === false)\n        throw new Error(message ?? 'Assertion failed!');\n}\nfunction fail(error, throws = false) {\n    if (!throws)\n        return false;\n    throw new Error(error);\n}\nfunction size(input, size, throws) {\n    const bytes = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(input);\n    if (bytes.length !== size) {\n        return fail(`Invalid byte size: ${bytes.hex} !== ${size}`, throws);\n    }\n    return true;\n}\nfunction exists(input) {\n    if (typeof input === 'undefined') {\n        throw new TypeError('Input is undefined!');\n    }\n    if (input === null) {\n        throw new TypeError('Input is null!');\n    }\n}\nfunction on_curve(x, throws) {\n    if (!(typeof x === 'bigint' && _const_js__WEBPACK_IMPORTED_MODULE_1__._0n < x && x < _const_js__WEBPACK_IMPORTED_MODULE_1__._P)) {\n        fail('x value is not on the curve!', throws);\n    }\n    return true;\n}\nfunction in_field(x, throws) {\n    if (!(typeof x === 'bigint' && _const_js__WEBPACK_IMPORTED_MODULE_1__._0n < x && x < _const_js__WEBPACK_IMPORTED_MODULE_1__._N)) {\n        fail('x value is not in the field!', throws);\n    }\n    return true;\n}\nfunction valid_chain(path, code) {\n    if (code === undefined) {\n        if (!path.startsWith('m')) {\n            throw new Error('You need to specify a chain-code for a non-root path.');\n        }\n    }\n    else {\n        if (_cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(code).length !== 32) {\n            throw new Error('Chain code must be 32 bytes!');\n        }\n    }\n}\nfunction valid_path(path) {\n    const regex = /^(m)?(\\/)?(\\w+'?\\/)*\\w+'?$/;\n    if (path !== '' && path.match(regex) === null) {\n        throw new Error('Provided path string is invalid: ' + path);\n    }\n}\nfunction valid_hash(hash) {\n    const regex = /^[0-9a-fA-F]{64}$/;\n    if (hash.match(regex) === null) {\n        throw new Error('Provided hash string is invalid: ' + hash);\n    }\n}\nfunction valid_index(index) {\n    if (index > 0x80000000) {\n        throw new TypeError('Index value must not exceed 31 bits.');\n    }\n}\nfunction valid_pubkey(pubkey) {\n    const key = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pubkey);\n    if (key.length !== 33) {\n        throw new TypeError('Index value must not exceed 31 bits.');\n    }\n}\nfunction valid_derive_state(hardened, is_private) {\n    if (hardened && !is_private) {\n        throw new Error('Cannot derive hardedened paths when is_private is false!');\n    }\n}\n//# sourceMappingURL=assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ0Y7QUFDbEM7QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxrQkFBa0IscURBQUk7QUFDdEI7QUFDQSwwQ0FBMEMsV0FBVyxNQUFNLEtBQUs7QUFDaEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsbUNBQW1DLDBDQUFHLFlBQVkseUNBQUU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLG1DQUFtQywwQ0FBRyxZQUFZLHlDQUFFO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFEQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxnQ0FBZ0MsR0FBRztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGdCQUFnQixxREFBSTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2NyeXB0by11dGlscy9kaXN0L2Fzc2VydC5qcz9kMWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmYgfSBmcm9tICdAY21kY29kZS9idWZmLXV0aWxzJztcbmltcG9ydCB7IF9OLCBfUCwgXzBuIH0gZnJvbSAnLi9jb25zdC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gb2sodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICBpZiAodmFsdWUgPT09IGZhbHNlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSA/PyAnQXNzZXJ0aW9uIGZhaWxlZCEnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmYWlsKGVycm9yLCB0aHJvd3MgPSBmYWxzZSkge1xuICAgIGlmICghdGhyb3dzKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzaXplKGlucHV0LCBzaXplLCB0aHJvd3MpIHtcbiAgICBjb25zdCBieXRlcyA9IEJ1ZmYuYnl0ZXMoaW5wdXQpO1xuICAgIGlmIChieXRlcy5sZW5ndGggIT09IHNpemUpIHtcbiAgICAgICAgcmV0dXJuIGZhaWwoYEludmFsaWQgYnl0ZSBzaXplOiAke2J5dGVzLmhleH0gIT09ICR7c2l6ZX1gLCB0aHJvd3MpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleGlzdHMoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnB1dCBpcyB1bmRlZmluZWQhJyk7XG4gICAgfVxuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnB1dCBpcyBudWxsIScpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBvbl9jdXJ2ZSh4LCB0aHJvd3MpIHtcbiAgICBpZiAoISh0eXBlb2YgeCA9PT0gJ2JpZ2ludCcgJiYgXzBuIDwgeCAmJiB4IDwgX1ApKSB7XG4gICAgICAgIGZhaWwoJ3ggdmFsdWUgaXMgbm90IG9uIHRoZSBjdXJ2ZSEnLCB0aHJvd3MpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbl9maWVsZCh4LCB0aHJvd3MpIHtcbiAgICBpZiAoISh0eXBlb2YgeCA9PT0gJ2JpZ2ludCcgJiYgXzBuIDwgeCAmJiB4IDwgX04pKSB7XG4gICAgICAgIGZhaWwoJ3ggdmFsdWUgaXMgbm90IGluIHRoZSBmaWVsZCEnLCB0aHJvd3MpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZF9jaGFpbihwYXRoLCBjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXBhdGguc3RhcnRzV2l0aCgnbScpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIHNwZWNpZnkgYSBjaGFpbi1jb2RlIGZvciBhIG5vbi1yb290IHBhdGguJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChCdWZmLmJ5dGVzKGNvZGUpLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2hhaW4gY29kZSBtdXN0IGJlIDMyIGJ5dGVzIScpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkX3BhdGgocGF0aCkge1xuICAgIGNvbnN0IHJlZ2V4ID0gL14obSk/KFxcLyk/KFxcdysnP1xcLykqXFx3Kyc/JC87XG4gICAgaWYgKHBhdGggIT09ICcnICYmIHBhdGgubWF0Y2gocmVnZXgpID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgcGF0aCBzdHJpbmcgaXMgaW52YWxpZDogJyArIHBhdGgpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZF9oYXNoKGhhc2gpIHtcbiAgICBjb25zdCByZWdleCA9IC9eWzAtOWEtZkEtRl17NjR9JC87XG4gICAgaWYgKGhhc2gubWF0Y2gocmVnZXgpID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgaGFzaCBzdHJpbmcgaXMgaW52YWxpZDogJyArIGhhc2gpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZF9pbmRleChpbmRleCkge1xuICAgIGlmIChpbmRleCA+IDB4ODAwMDAwMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW5kZXggdmFsdWUgbXVzdCBub3QgZXhjZWVkIDMxIGJpdHMuJyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkX3B1YmtleShwdWJrZXkpIHtcbiAgICBjb25zdCBrZXkgPSBCdWZmLmJ5dGVzKHB1YmtleSk7XG4gICAgaWYgKGtleS5sZW5ndGggIT09IDMzKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0luZGV4IHZhbHVlIG11c3Qgbm90IGV4Y2VlZCAzMSBiaXRzLicpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZF9kZXJpdmVfc3RhdGUoaGFyZGVuZWQsIGlzX3ByaXZhdGUpIHtcbiAgICBpZiAoaGFyZGVuZWQgJiYgIWlzX3ByaXZhdGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGVyaXZlIGhhcmRlZGVuZWQgcGF0aHMgd2hlbiBpc19wcml2YXRlIGlzIGZhbHNlIScpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/config.js":
/*!***********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/config.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sign_config: () => (/* binding */ sign_config)\n/* harmony export */ });\nconst SIGN_DEFAULTS = {\n    throws: false,\n    xonly: true\n};\nfunction sign_config(config = {}) {\n    return { ...SIGN_DEFAULTS, ...config };\n}\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvY29uZmlnLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLGdDQUFnQztBQUN2QyxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2NyeXB0by11dGlscy9kaXN0L2NvbmZpZy5qcz81ZGMxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNJR05fREVGQVVMVFMgPSB7XG4gICAgdGhyb3dzOiBmYWxzZSxcbiAgICB4b25seTogdHJ1ZVxufTtcbmV4cG9ydCBmdW5jdGlvbiBzaWduX2NvbmZpZyhjb25maWcgPSB7fSkge1xuICAgIHJldHVybiB7IC4uLlNJR05fREVGQVVMVFMsIC4uLmNvbmZpZyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/const.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/const.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _0n: () => (/* binding */ _0n),\n/* harmony export */   _1n: () => (/* binding */ _1n),\n/* harmony export */   _2n: () => (/* binding */ _2n),\n/* harmony export */   _3n: () => (/* binding */ _3n),\n/* harmony export */   _4n: () => (/* binding */ _4n),\n/* harmony export */   _G: () => (/* binding */ _G),\n/* harmony export */   _N: () => (/* binding */ _N),\n/* harmony export */   _P: () => (/* binding */ _P)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n\nconst curve = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE;\nconst _N = curve.n;\nconst _P = curve.p;\nconst _G = { x: curve.Gx, y: curve.Gy };\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _4n = BigInt(4);\n//# sourceMappingURL=const.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvY29uc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQW9EO0FBQ3BELGNBQWMsOERBQVM7QUFDaEI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdXRpbHMvZGlzdC9jb25zdC5qcz81MWVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlY3AyNTZrMSB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxJztcbmNvbnN0IGN1cnZlID0gc2VjcDI1NmsxLkNVUlZFO1xuZXhwb3J0IGNvbnN0IF9OID0gY3VydmUubjtcbmV4cG9ydCBjb25zdCBfUCA9IGN1cnZlLnA7XG5leHBvcnQgY29uc3QgX0cgPSB7IHg6IGN1cnZlLkd4LCB5OiBjdXJ2ZS5HeSB9O1xuZXhwb3J0IGNvbnN0IF8wbiA9IEJpZ0ludCgwKTtcbmV4cG9ydCBjb25zdCBfMW4gPSBCaWdJbnQoMSk7XG5leHBvcnQgY29uc3QgXzJuID0gQmlnSW50KDIpO1xuZXhwb3J0IGNvbnN0IF8zbiA9IEJpZ0ludCgzKTtcbmV4cG9ydCBjb25zdCBfNG4gPSBCaWdJbnQoNCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/const.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecc.js":
/*!********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/ecc.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   Point: () => (/* binding */ Point),\n/* harmony export */   fd: () => (/* binding */ fd)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/curves/abstract/modular */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/const.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/math.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/assert.js\");\n\n\n\n\n\n\nconst NobleField = (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_4__.Field)(_const_js__WEBPACK_IMPORTED_MODULE_1__._N, 32, true);\nconst NoblePoint = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__.secp256k1.ProjectivePoint;\nconst fd = NobleField;\nclass Field extends Uint8Array {\n    static { this.N = _const_js__WEBPACK_IMPORTED_MODULE_1__._N; }\n    static add(x) {\n        return x.map(e => Field.mod(e)).reduce((p, n) => p.add(n));\n    }\n    static mod(x) {\n        return new Field(x);\n    }\n    static mul(x) {\n        return x.map(e => Field.mod(e)).reduce((p, n) => p.mul(n));\n    }\n    static is_valid(value, throws) {\n        const big = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(value, 32).big;\n        return _assert_js__WEBPACK_IMPORTED_MODULE_3__.in_field(big, throws);\n    }\n    constructor(x) {\n        const b = _math_js__WEBPACK_IMPORTED_MODULE_2__.modN(normalizeField(x));\n        Field.is_valid(b, true);\n        super(_cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.big(b, 32), 32);\n    }\n    get buff() {\n        return new _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff(this);\n    }\n    get raw() {\n        return this.buff.raw;\n    }\n    get big() {\n        return this.buff.big;\n    }\n    get hex() {\n        return this.buff.hex;\n    }\n    get point() {\n        return this.generate();\n    }\n    get hasOddY() {\n        return this.point.hasOddY;\n    }\n    get negated() {\n        return (this.hasOddY)\n            ? this.negate()\n            : this;\n    }\n    gt(value) {\n        const x = new Field(value);\n        return x.big > this.big;\n    }\n    lt(value) {\n        const x = new Field(value);\n        return x.big < this.big;\n    }\n    eq(value) {\n        const x = new Field(value);\n        return x.big === this.big;\n    }\n    ne(value) {\n        const x = new Field(value);\n        return x.big !== this.big;\n    }\n    add(value) {\n        const x = Field.mod(value);\n        const a = fd.add(this.big, x.big);\n        return new Field(a);\n    }\n    sub(value) {\n        const x = Field.mod(value);\n        const a = fd.sub(this.big, x.big);\n        return new Field(a);\n    }\n    mul(value) {\n        const x = Field.mod(value);\n        const a = fd.mul(this.big, x.big);\n        return new Field(a);\n    }\n    pow(value) {\n        const x = Field.mod(value);\n        const a = fd.pow(this.big, x.big);\n        return new Field(a);\n    }\n    div(value) {\n        const x = Field.mod(value);\n        const a = fd.div(this.big, x.big);\n        return new Field(a);\n    }\n    negate() {\n        return new Field(Field.N - this.big);\n    }\n    generate() {\n        const base = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__.secp256k1.ProjectivePoint.BASE;\n        const point = base.multiply(this.big);\n        return Point.import(point);\n    }\n}\nclass Point {\n    static { this.P = _const_js__WEBPACK_IMPORTED_MODULE_1__._P; }\n    static { this.G = new Point(_const_js__WEBPACK_IMPORTED_MODULE_1__._G.x, _const_js__WEBPACK_IMPORTED_MODULE_1__._G.y); }\n    static { this.curve = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__.secp256k1.CURVE; }\n    static { this.base = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__.secp256k1.ProjectivePoint.BASE; }\n    static from_x(bytes, even_y = false) {\n        let cp = normalizePoint(bytes);\n        if (cp.length === 32) {\n            cp = cp.prepend(0x02);\n        }\n        else if (even_y) {\n            cp[0] = 0x02;\n        }\n        _assert_js__WEBPACK_IMPORTED_MODULE_3__.size(cp, 33);\n        const point = NoblePoint.fromHex(cp.hex);\n        point.assertValidity();\n        return new Point(point.x, point.y);\n    }\n    static generate(value) {\n        const field = Field.mod(value);\n        const point = Point.base.multiply(field.big);\n        return Point.import(point);\n    }\n    static { this.mul = Point.generate; }\n    static import(point) {\n        const p = (point instanceof Point)\n            ? { x: point.x.big, y: point.y.big }\n            : { x: point.x, y: point.y };\n        return new Point(p.x, p.y);\n    }\n    constructor(x, y) {\n        this._p = new NoblePoint(x, y, 1n);\n        this.p.assertValidity();\n    }\n    get p() {\n        return this._p;\n    }\n    get x() {\n        return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.big(this.p.x, 32);\n    }\n    get y() {\n        return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.big(this.p.y, 32);\n    }\n    get buff() {\n        return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(this.p.toRawBytes(true));\n    }\n    get raw() {\n        return this.buff.raw;\n    }\n    get hex() {\n        return this.buff.hex;\n    }\n    get hasEvenY() {\n        return this.p.hasEvenY();\n    }\n    get hasOddY() {\n        return !this.p.hasEvenY();\n    }\n    get negated() {\n        return (this.hasOddY)\n            ? this.negate()\n            : this;\n    }\n    eq(value) {\n        const p = (value instanceof Point) ? value : Point.from_x(value);\n        return this.x.big === p.x.big && this.y.big === p.y.big;\n    }\n    add(x) {\n        return (x instanceof Point)\n            ? Point.import(this.p.add(x.p))\n            : Point.import(this.p.add(Point.generate(x).p));\n    }\n    sub(x) {\n        return (x instanceof Point)\n            ? Point.import(this.p.subtract(x.p))\n            : Point.import(this.p.subtract(Point.generate(x).p));\n    }\n    mul(value) {\n        return (value instanceof Point)\n            ? Point.import(this.p.multiply(value.x.big))\n            : Point.import(this.p.multiply(Field.mod(value).big));\n    }\n    negate() {\n        return Point.import(this.p.negate());\n    }\n}\nfunction normalizeField(value) {\n    if (value instanceof Field) {\n        return value.big;\n    }\n    if (value instanceof Point) {\n        return value.x.big;\n    }\n    if (value instanceof Uint8Array) {\n        return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(value).big;\n    }\n    if (typeof value === 'string') {\n        return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.hex(value).big;\n    }\n    if (typeof value === 'number') {\n        return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.num(value).big;\n    }\n    if (typeof value === 'bigint') {\n        return BigInt(value);\n    }\n    throw TypeError('Invalid input type:' + typeof value);\n}\nfunction normalizePoint(value) {\n    if (value instanceof Field) {\n        return value.point.buff;\n    }\n    if (value instanceof Point) {\n        return value.buff;\n    }\n    if (value instanceof Uint8Array ||\n        typeof value === 'string') {\n        return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(value);\n    }\n    if (typeof value === 'number' ||\n        typeof value === 'bigint') {\n        return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(value, 32);\n    }\n    throw new TypeError(`Unknown type: ${typeof value}`);\n}\n//# sourceMappingURL=ecc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecdh.js":
/*!*********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/ecdh.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   get_shared_code: () => (/* binding */ get_shared_code),\n/* harmony export */   get_shared_key: () => (/* binding */ get_shared_key)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n/* harmony import */ var _ecc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecc.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hash.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/hash.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/keys.js\");\n\n\n\n\nfunction get_shared_key(self_sec, peer_pub) {\n    const P = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Point.from_x(peer_pub);\n    const sp = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(self_sec);\n    const sh = P.mul(sp);\n    return sh.buff;\n}\nfunction get_shared_code(self_sec, peer_pub, message, prefix = 'ecdh/hmac512') {\n    const sec = (0,_keys_js__WEBPACK_IMPORTED_MODULE_3__.get_seckey)(self_sec);\n    const pub = (0,_keys_js__WEBPACK_IMPORTED_MODULE_3__.get_pubkey)(sec);\n    const peer = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(peer_pub);\n    const tag = (0,_hash_js__WEBPACK_IMPORTED_MODULE_2__.taghash)(prefix);\n    const shared = get_shared_key(sec, peer_pub);\n    const pubs = [pub.hex, peer.hex].sort();\n    return (0,_hash_js__WEBPACK_IMPORTED_MODULE_2__.hmac512)(shared, _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([...tag, ...pubs, message]));\n}\n//# sourceMappingURL=ecdh.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvZWNkaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMkM7QUFDSDtBQUNLO0FBQ007QUFDNUM7QUFDUCxjQUFjLDBDQUFLO0FBQ25CLGVBQWUsMENBQUs7QUFDcEI7QUFDQTtBQUNBO0FBQ087QUFDUCxnQkFBZ0Isb0RBQVU7QUFDMUIsZ0JBQWdCLG9EQUFVO0FBQzFCLGlCQUFpQixxREFBSTtBQUNyQixnQkFBZ0IsaURBQU87QUFDdkI7QUFDQTtBQUNBLFdBQVcsaURBQU8sU0FBUyxxREFBSTtBQUMvQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvZWNkaC5qcz80Y2Q5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmYgfSBmcm9tICdAY21kY29kZS9idWZmLXV0aWxzJztcbmltcG9ydCB7IEZpZWxkLCBQb2ludCB9IGZyb20gJy4vZWNjLmpzJztcbmltcG9ydCB7IHRhZ2hhc2gsIGhtYWM1MTIgfSBmcm9tICcuL2hhc2guanMnO1xuaW1wb3J0IHsgZ2V0X3NlY2tleSwgZ2V0X3B1YmtleSB9IGZyb20gJy4va2V5cy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0X3NoYXJlZF9rZXkoc2VsZl9zZWMsIHBlZXJfcHViKSB7XG4gICAgY29uc3QgUCA9IFBvaW50LmZyb21feChwZWVyX3B1Yik7XG4gICAgY29uc3Qgc3AgPSBGaWVsZC5tb2Qoc2VsZl9zZWMpO1xuICAgIGNvbnN0IHNoID0gUC5tdWwoc3ApO1xuICAgIHJldHVybiBzaC5idWZmO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldF9zaGFyZWRfY29kZShzZWxmX3NlYywgcGVlcl9wdWIsIG1lc3NhZ2UsIHByZWZpeCA9ICdlY2RoL2htYWM1MTInKSB7XG4gICAgY29uc3Qgc2VjID0gZ2V0X3NlY2tleShzZWxmX3NlYyk7XG4gICAgY29uc3QgcHViID0gZ2V0X3B1YmtleShzZWMpO1xuICAgIGNvbnN0IHBlZXIgPSBCdWZmLmJ5dGVzKHBlZXJfcHViKTtcbiAgICBjb25zdCB0YWcgPSB0YWdoYXNoKHByZWZpeCk7XG4gICAgY29uc3Qgc2hhcmVkID0gZ2V0X3NoYXJlZF9rZXkoc2VjLCBwZWVyX3B1Yik7XG4gICAgY29uc3QgcHVicyA9IFtwdWIuaGV4LCBwZWVyLmhleF0uc29ydCgpO1xuICAgIHJldHVybiBobWFjNTEyKHNoYXJlZCwgQnVmZi5qb2luKFsuLi50YWcsIC4uLnB1YnMsIG1lc3NhZ2VdKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lY2RoLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecdh.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/hash.js":
/*!*********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/hash.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   digest: () => (/* binding */ digest),\n/* harmony export */   hash160: () => (/* binding */ hash160),\n/* harmony export */   hash256: () => (/* binding */ hash256),\n/* harmony export */   hmac256: () => (/* binding */ hmac256),\n/* harmony export */   hmac512: () => (/* binding */ hmac512),\n/* harmony export */   ripe160: () => (/* binding */ ripe160),\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   sha512: () => (/* binding */ sha512),\n/* harmony export */   taghash: () => (/* binding */ taghash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha512.js\");\n/* harmony import */ var _noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/ripemd160 */ \"(ssr)/./node_modules/@noble/hashes/esm/ripemd160.js\");\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n\n\n\n\n\nfunction sha256(msg) {\n    const b = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(msg);\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(b));\n}\nfunction sha512(msg) {\n    const b = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(msg);\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_2__.sha512)(b));\n}\nfunction ripe160(msg) {\n    const b = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(msg);\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_2__.sha512)(b));\n}\nfunction hash256(msg) {\n    const b = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(msg);\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(b)));\n}\nfunction hash160(msg) {\n    const b = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(msg);\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_3__.ripemd160)((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(b)));\n}\nfunction hmac256(key, msg) {\n    const k = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(key);\n    const b = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(msg);\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_4__.hmac)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, k, b));\n}\nfunction hmac512(key, msg) {\n    const k = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(key);\n    const b = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(msg);\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw((0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_4__.hmac)(_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_2__.sha512, k, b));\n}\nfunction taghash(tag) {\n    const hash = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.str(tag).digest;\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([hash, hash]);\n}\nfunction digest(tag, ...data) {\n    const hash = taghash(tag);\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([hash, ...data]).digest;\n}\n//# sourceMappingURL=hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvaGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRDtBQUNBO0FBQ007QUFDVjtBQUNQO0FBQ3BDO0FBQ1AsY0FBYyxxREFBSTtBQUNsQixXQUFXLHFEQUFJLEtBQUssNERBQUk7QUFDeEI7QUFDTztBQUNQLGNBQWMscURBQUk7QUFDbEIsV0FBVyxxREFBSSxLQUFLLDREQUFJO0FBQ3hCO0FBQ087QUFDUCxjQUFjLHFEQUFJO0FBQ2xCLFdBQVcscURBQUksS0FBSyw0REFBSTtBQUN4QjtBQUNPO0FBQ1AsY0FBYyxxREFBSTtBQUNsQixXQUFXLHFEQUFJLEtBQUssNERBQUksQ0FBQyw0REFBSTtBQUM3QjtBQUNPO0FBQ1AsY0FBYyxxREFBSTtBQUNsQixXQUFXLHFEQUFJLEtBQUssa0VBQUksQ0FBQyw0REFBSTtBQUM3QjtBQUNPO0FBQ1AsY0FBYyxxREFBSTtBQUNsQixjQUFjLHFEQUFJO0FBQ2xCLFdBQVcscURBQUksS0FBSyx3REFBSSxDQUFDLHdEQUFJO0FBQzdCO0FBQ087QUFDUCxjQUFjLHFEQUFJO0FBQ2xCLGNBQWMscURBQUk7QUFDbEIsV0FBVyxxREFBSSxLQUFLLHdEQUFJLENBQUMsd0RBQUk7QUFDN0I7QUFDTztBQUNQLGlCQUFpQixxREFBSTtBQUNyQixXQUFXLHFEQUFJO0FBQ2Y7QUFDTztBQUNQO0FBQ0EsV0FBVyxxREFBSTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdXRpbHMvZGlzdC9oYXNoLmpzPzI2MWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2hhMjU2IGFzIHMyNTYgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NoYTI1Nic7XG5pbXBvcnQgeyBzaGE1MTIgYXMgczUxMiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhNTEyJztcbmltcG9ydCB7IHJpcGVtZDE2MCBhcyByMTYwIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9yaXBlbWQxNjAnO1xuaW1wb3J0IHsgaG1hYyBhcyBITUFDIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9obWFjJztcbmltcG9ydCB7IEJ1ZmYgfSBmcm9tICdAY21kY29kZS9idWZmLXV0aWxzJztcbmV4cG9ydCBmdW5jdGlvbiBzaGEyNTYobXNnKSB7XG4gICAgY29uc3QgYiA9IEJ1ZmYuYnl0ZXMobXNnKTtcbiAgICByZXR1cm4gQnVmZi5yYXcoczI1NihiKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2hhNTEyKG1zZykge1xuICAgIGNvbnN0IGIgPSBCdWZmLmJ5dGVzKG1zZyk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KHM1MTIoYikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJpcGUxNjAobXNnKSB7XG4gICAgY29uc3QgYiA9IEJ1ZmYuYnl0ZXMobXNnKTtcbiAgICByZXR1cm4gQnVmZi5yYXcoczUxMihiKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzaDI1Nihtc2cpIHtcbiAgICBjb25zdCBiID0gQnVmZi5ieXRlcyhtc2cpO1xuICAgIHJldHVybiBCdWZmLnJhdyhzMjU2KHMyNTYoYikpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNoMTYwKG1zZykge1xuICAgIGNvbnN0IGIgPSBCdWZmLmJ5dGVzKG1zZyk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KHIxNjAoczI1NihiKSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhtYWMyNTYoa2V5LCBtc2cpIHtcbiAgICBjb25zdCBrID0gQnVmZi5ieXRlcyhrZXkpO1xuICAgIGNvbnN0IGIgPSBCdWZmLmJ5dGVzKG1zZyk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KEhNQUMoczI1NiwgaywgYikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhtYWM1MTIoa2V5LCBtc2cpIHtcbiAgICBjb25zdCBrID0gQnVmZi5ieXRlcyhrZXkpO1xuICAgIGNvbnN0IGIgPSBCdWZmLmJ5dGVzKG1zZyk7XG4gICAgcmV0dXJuIEJ1ZmYucmF3KEhNQUMoczUxMiwgaywgYikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRhZ2hhc2godGFnKSB7XG4gICAgY29uc3QgaGFzaCA9IEJ1ZmYuc3RyKHRhZykuZGlnZXN0O1xuICAgIHJldHVybiBCdWZmLmpvaW4oW2hhc2gsIGhhc2hdKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaWdlc3QodGFnLCAuLi5kYXRhKSB7XG4gICAgY29uc3QgaGFzaCA9IHRhZ2hhc2godGFnKTtcbiAgICByZXR1cm4gQnVmZi5qb2luKFtoYXNoLCAuLi5kYXRhXSkuZGlnZXN0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/hd.js":
/*!*******************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/hd.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode_extkey: () => (/* binding */ decode_extkey),\n/* harmony export */   derive: () => (/* binding */ derive),\n/* harmony export */   encode_extkey: () => (/* binding */ encode_extkey),\n/* harmony export */   generate_code: () => (/* binding */ generate_code),\n/* harmony export */   parse_extkey: () => (/* binding */ parse_extkey),\n/* harmony export */   parse_tweaks: () => (/* binding */ parse_tweaks)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n/* harmony import */ var _ecc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecc.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/keys.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hash.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/hash.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/assert.js\");\n\n\n\n\n\nconst INT_REGEX = /^[0-9]{0,10}$/, STR_REGEX = /^[0-9a-zA-Z_&?=]{64}$/;\nfunction derive(path, input_key, chain_code, is_private = false) {\n    _assert_js__WEBPACK_IMPORTED_MODULE_4__.valid_chain(path, chain_code);\n    const key = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(input_key);\n    let code = (chain_code !== undefined)\n        ? _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(chain_code)\n        : _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.str('Bitcoin seed');\n    let prev = null, seckey = null, pubkey;\n    if (path.startsWith('m')) {\n        const root = generate_code(code, key);\n        code = root[1];\n        seckey = root[0];\n        pubkey = (0,_keys_js__WEBPACK_IMPORTED_MODULE_2__.get_pubkey)(seckey, false);\n    }\n    else if (is_private) {\n        _assert_js__WEBPACK_IMPORTED_MODULE_4__.size(input_key, 32);\n        seckey = key;\n        pubkey = (0,_keys_js__WEBPACK_IMPORTED_MODULE_2__.get_pubkey)(seckey, false);\n    }\n    else {\n        _assert_js__WEBPACK_IMPORTED_MODULE_4__.size(key, 33);\n        pubkey = key;\n    }\n    const tweaks = parse_tweaks(path);\n    for (const [tweak, is_hardened] of tweaks) {\n        const bytes = (is_hardened && seckey !== null)\n            ? _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([0x00, seckey, tweak])\n            : _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([pubkey, tweak]);\n        const [next_key, next_code] = generate_code(code, bytes);\n        code = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.raw(next_code);\n        prev = pubkey;\n        if (seckey !== null) {\n            seckey = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(seckey).add(next_key).buff;\n            pubkey = (0,_keys_js__WEBPACK_IMPORTED_MODULE_2__.get_pubkey)(seckey, false);\n            _assert_js__WEBPACK_IMPORTED_MODULE_4__.in_field(seckey.big, true);\n        }\n        else {\n            pubkey = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Point.from_x(pubkey).add(next_key).buff;\n            _assert_js__WEBPACK_IMPORTED_MODULE_4__.on_curve(pubkey.slice(1).big, true);\n        }\n    }\n    return { seckey, pubkey, code, path, prev };\n}\nfunction parse_tweaks(keypath) {\n    _assert_js__WEBPACK_IMPORTED_MODULE_4__.valid_path(keypath);\n    const tweaks = [];\n    let paths = keypath.split('/');\n    if (paths[0] === 'm' || paths[0] === '') {\n        paths = paths.slice(1);\n    }\n    for (let path of paths) {\n        let is_hardened = false;\n        if (path.slice(-1) === '\\'') {\n            is_hardened = true;\n            path = path.slice(0, -1);\n        }\n        if (path.match(INT_REGEX) !== null) {\n            let index = parseInt(path, 10);\n            _assert_js__WEBPACK_IMPORTED_MODULE_4__.valid_index(index);\n            if (is_hardened)\n                index += 0x80000000;\n            tweaks.push([_cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.num(index, 4), is_hardened]);\n        }\n        else if (path.match(STR_REGEX) !== null) {\n            let index = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.str(path);\n            if (is_hardened)\n                index = index.prepend(0x80);\n            tweaks.push([index.digest, is_hardened]);\n        }\n        else {\n            throw new Error('Invalid path segment:' + path);\n        }\n    }\n    return tweaks;\n}\nfunction generate_code(chain, data) {\n    const I = (0,_hash_js__WEBPACK_IMPORTED_MODULE_3__.hmac512)(chain, data), IL = I.slice(0, 32), IR = I.slice(32);\n    return [IL, IR];\n}\nfunction encode_extkey(hdkey, key_prefix) {\n    const { seckey, pubkey, code, prev, path } = hdkey;\n    const prefix = (typeof key_prefix === 'number')\n        ? _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.num(key_prefix, 4)\n        : (seckey !== null) ? 0x0488ade4 : 0x0488b21e;\n    const tweaks = parse_tweaks(path);\n    const tprev = tweaks.at(-1);\n    const depth = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.num(tweaks.length, 1);\n    const fprint = (prev !== null) ? (0,_hash_js__WEBPACK_IMPORTED_MODULE_3__.hash160)(prev).slice(0, 4) : _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.num(0, 4);\n    const index = (tprev !== undefined) ? tprev[0].slice(-4, 4) : _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.num(0, 4);\n    const key = (seckey !== null) ? seckey.prepend(0x00) : pubkey;\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([prefix, depth, fprint, index, code, key]).to_b58chk();\n}\nfunction parse_extkey(keystr, path = '') {\n    const { code, type, key } = decode_extkey(keystr);\n    const is_private = (type === 0);\n    const input_key = (is_private) ? key : _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([type, key]);\n    return derive(path, input_key, code, is_private);\n}\nfunction decode_extkey(keystr) {\n    const buffer = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.b58chk(keystr).stream;\n    const prefix = buffer.read(4).num, depth = buffer.read(1).num, fprint = buffer.read(4).num, index = buffer.read(4).num, code = buffer.read(32).hex, type = buffer.read(1).num, key = buffer.read(32).hex, seckey = (type === 0) ? key : undefined, pubkey = (type === 0) ? (0,_keys_js__WEBPACK_IMPORTED_MODULE_2__.get_pubkey)(key).hex : _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([type, key]).hex;\n    if (buffer.size > 0) {\n        throw new TypeError('Unparsed data remaining in buffer!');\n    }\n    return { prefix, depth, fprint, index, code, type, key, seckey, pubkey };\n}\n//# sourceMappingURL=hd.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvaGQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDSDtBQUNEO0FBQ007QUFDUDtBQUN0QywwQkFBMEIsS0FBSyxrQ0FBa0MsR0FBRztBQUM3RDtBQUNQLElBQUksbURBQWtCO0FBQ3RCLGdCQUFnQixxREFBSTtBQUNwQjtBQUNBLFVBQVUscURBQUk7QUFDZCxVQUFVLHFEQUFJO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvREFBVTtBQUMzQjtBQUNBO0FBQ0EsUUFBUSw0Q0FBVztBQUNuQjtBQUNBLGlCQUFpQixvREFBVTtBQUMzQjtBQUNBO0FBQ0EsUUFBUSw0Q0FBVztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxREFBSTtBQUNsQixjQUFjLHFEQUFJO0FBQ2xCO0FBQ0EsZUFBZSxxREFBSTtBQUNuQjtBQUNBO0FBQ0EscUJBQXFCLDBDQUFLO0FBQzFCLHFCQUFxQixvREFBVTtBQUMvQixZQUFZLGdEQUFlO0FBQzNCO0FBQ0E7QUFDQSxxQkFBcUIsMENBQUs7QUFDMUIsWUFBWSxnREFBZTtBQUMzQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ087QUFDUCxJQUFJLGtEQUFpQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbURBQWtCO0FBQzlCO0FBQ0E7QUFDQSx5QkFBeUIscURBQUk7QUFDN0I7QUFDQTtBQUNBLHdCQUF3QixxREFBSTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsY0FBYyxpREFBTztBQUNyQjtBQUNBO0FBQ087QUFDUCxZQUFZLG1DQUFtQztBQUMvQztBQUNBLFVBQVUscURBQUk7QUFDZDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscURBQUk7QUFDdEIscUNBQXFDLGlEQUFPLHFCQUFxQixxREFBSTtBQUNyRSxrRUFBa0UscURBQUk7QUFDdEU7QUFDQSxXQUFXLHFEQUFJO0FBQ2Y7QUFDTztBQUNQLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0EsMkNBQTJDLHFEQUFJO0FBQy9DO0FBQ0E7QUFDTztBQUNQLG1CQUFtQixxREFBSTtBQUN2QiwrUUFBK1Esb0RBQVUsWUFBWSxxREFBSTtBQUN6UztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2NyeXB0by11dGlscy9kaXN0L2hkLmpzPzZmOTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZiB9IGZyb20gJ0BjbWRjb2RlL2J1ZmYtdXRpbHMnO1xuaW1wb3J0IHsgRmllbGQsIFBvaW50IH0gZnJvbSAnLi9lY2MuanMnO1xuaW1wb3J0IHsgZ2V0X3B1YmtleSB9IGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQgeyBoYXNoMTYwLCBobWFjNTEyIH0gZnJvbSAnLi9oYXNoLmpzJztcbmltcG9ydCAqIGFzIGFzc2VydCBmcm9tICcuL2Fzc2VydC5qcyc7XG5jb25zdCBJTlRfUkVHRVggPSAvXlswLTldezAsMTB9JC8sIFNUUl9SRUdFWCA9IC9eWzAtOWEtekEtWl8mPz1dezY0fSQvO1xuZXhwb3J0IGZ1bmN0aW9uIGRlcml2ZShwYXRoLCBpbnB1dF9rZXksIGNoYWluX2NvZGUsIGlzX3ByaXZhdGUgPSBmYWxzZSkge1xuICAgIGFzc2VydC52YWxpZF9jaGFpbihwYXRoLCBjaGFpbl9jb2RlKTtcbiAgICBjb25zdCBrZXkgPSBCdWZmLmJ5dGVzKGlucHV0X2tleSk7XG4gICAgbGV0IGNvZGUgPSAoY2hhaW5fY29kZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICA/IEJ1ZmYuYnl0ZXMoY2hhaW5fY29kZSlcbiAgICAgICAgOiBCdWZmLnN0cignQml0Y29pbiBzZWVkJyk7XG4gICAgbGV0IHByZXYgPSBudWxsLCBzZWNrZXkgPSBudWxsLCBwdWJrZXk7XG4gICAgaWYgKHBhdGguc3RhcnRzV2l0aCgnbScpKSB7XG4gICAgICAgIGNvbnN0IHJvb3QgPSBnZW5lcmF0ZV9jb2RlKGNvZGUsIGtleSk7XG4gICAgICAgIGNvZGUgPSByb290WzFdO1xuICAgICAgICBzZWNrZXkgPSByb290WzBdO1xuICAgICAgICBwdWJrZXkgPSBnZXRfcHVia2V5KHNlY2tleSwgZmFsc2UpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc19wcml2YXRlKSB7XG4gICAgICAgIGFzc2VydC5zaXplKGlucHV0X2tleSwgMzIpO1xuICAgICAgICBzZWNrZXkgPSBrZXk7XG4gICAgICAgIHB1YmtleSA9IGdldF9wdWJrZXkoc2Vja2V5LCBmYWxzZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhc3NlcnQuc2l6ZShrZXksIDMzKTtcbiAgICAgICAgcHVia2V5ID0ga2V5O1xuICAgIH1cbiAgICBjb25zdCB0d2Vha3MgPSBwYXJzZV90d2Vha3MocGF0aCk7XG4gICAgZm9yIChjb25zdCBbdHdlYWssIGlzX2hhcmRlbmVkXSBvZiB0d2Vha3MpIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSAoaXNfaGFyZGVuZWQgJiYgc2Vja2V5ICE9PSBudWxsKVxuICAgICAgICAgICAgPyBCdWZmLmpvaW4oWzB4MDAsIHNlY2tleSwgdHdlYWtdKVxuICAgICAgICAgICAgOiBCdWZmLmpvaW4oW3B1YmtleSwgdHdlYWtdKTtcbiAgICAgICAgY29uc3QgW25leHRfa2V5LCBuZXh0X2NvZGVdID0gZ2VuZXJhdGVfY29kZShjb2RlLCBieXRlcyk7XG4gICAgICAgIGNvZGUgPSBCdWZmLnJhdyhuZXh0X2NvZGUpO1xuICAgICAgICBwcmV2ID0gcHVia2V5O1xuICAgICAgICBpZiAoc2Vja2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzZWNrZXkgPSBGaWVsZC5tb2Qoc2Vja2V5KS5hZGQobmV4dF9rZXkpLmJ1ZmY7XG4gICAgICAgICAgICBwdWJrZXkgPSBnZXRfcHVia2V5KHNlY2tleSwgZmFsc2UpO1xuICAgICAgICAgICAgYXNzZXJ0LmluX2ZpZWxkKHNlY2tleS5iaWcsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHVia2V5ID0gUG9pbnQuZnJvbV94KHB1YmtleSkuYWRkKG5leHRfa2V5KS5idWZmO1xuICAgICAgICAgICAgYXNzZXJ0Lm9uX2N1cnZlKHB1YmtleS5zbGljZSgxKS5iaWcsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHNlY2tleSwgcHVia2V5LCBjb2RlLCBwYXRoLCBwcmV2IH07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VfdHdlYWtzKGtleXBhdGgpIHtcbiAgICBhc3NlcnQudmFsaWRfcGF0aChrZXlwYXRoKTtcbiAgICBjb25zdCB0d2Vha3MgPSBbXTtcbiAgICBsZXQgcGF0aHMgPSBrZXlwYXRoLnNwbGl0KCcvJyk7XG4gICAgaWYgKHBhdGhzWzBdID09PSAnbScgfHwgcGF0aHNbMF0gPT09ICcnKSB7XG4gICAgICAgIHBhdGhzID0gcGF0aHMuc2xpY2UoMSk7XG4gICAgfVxuICAgIGZvciAobGV0IHBhdGggb2YgcGF0aHMpIHtcbiAgICAgICAgbGV0IGlzX2hhcmRlbmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChwYXRoLnNsaWNlKC0xKSA9PT0gJ1xcJycpIHtcbiAgICAgICAgICAgIGlzX2hhcmRlbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0aC5tYXRjaChJTlRfUkVHRVgpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBwYXJzZUludChwYXRoLCAxMCk7XG4gICAgICAgICAgICBhc3NlcnQudmFsaWRfaW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGlzX2hhcmRlbmVkKVxuICAgICAgICAgICAgICAgIGluZGV4ICs9IDB4ODAwMDAwMDA7XG4gICAgICAgICAgICB0d2Vha3MucHVzaChbQnVmZi5udW0oaW5kZXgsIDQpLCBpc19oYXJkZW5lZF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhdGgubWF0Y2goU1RSX1JFR0VYKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gQnVmZi5zdHIocGF0aCk7XG4gICAgICAgICAgICBpZiAoaXNfaGFyZGVuZWQpXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleC5wcmVwZW5kKDB4ODApO1xuICAgICAgICAgICAgdHdlYWtzLnB1c2goW2luZGV4LmRpZ2VzdCwgaXNfaGFyZGVuZWRdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwYXRoIHNlZ21lbnQ6JyArIHBhdGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0d2Vha3M7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVfY29kZShjaGFpbiwgZGF0YSkge1xuICAgIGNvbnN0IEkgPSBobWFjNTEyKGNoYWluLCBkYXRhKSwgSUwgPSBJLnNsaWNlKDAsIDMyKSwgSVIgPSBJLnNsaWNlKDMyKTtcbiAgICByZXR1cm4gW0lMLCBJUl07XG59XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlX2V4dGtleShoZGtleSwga2V5X3ByZWZpeCkge1xuICAgIGNvbnN0IHsgc2Vja2V5LCBwdWJrZXksIGNvZGUsIHByZXYsIHBhdGggfSA9IGhka2V5O1xuICAgIGNvbnN0IHByZWZpeCA9ICh0eXBlb2Yga2V5X3ByZWZpeCA9PT0gJ251bWJlcicpXG4gICAgICAgID8gQnVmZi5udW0oa2V5X3ByZWZpeCwgNClcbiAgICAgICAgOiAoc2Vja2V5ICE9PSBudWxsKSA/IDB4MDQ4OGFkZTQgOiAweDA0ODhiMjFlO1xuICAgIGNvbnN0IHR3ZWFrcyA9IHBhcnNlX3R3ZWFrcyhwYXRoKTtcbiAgICBjb25zdCB0cHJldiA9IHR3ZWFrcy5hdCgtMSk7XG4gICAgY29uc3QgZGVwdGggPSBCdWZmLm51bSh0d2Vha3MubGVuZ3RoLCAxKTtcbiAgICBjb25zdCBmcHJpbnQgPSAocHJldiAhPT0gbnVsbCkgPyBoYXNoMTYwKHByZXYpLnNsaWNlKDAsIDQpIDogQnVmZi5udW0oMCwgNCk7XG4gICAgY29uc3QgaW5kZXggPSAodHByZXYgIT09IHVuZGVmaW5lZCkgPyB0cHJldlswXS5zbGljZSgtNCwgNCkgOiBCdWZmLm51bSgwLCA0KTtcbiAgICBjb25zdCBrZXkgPSAoc2Vja2V5ICE9PSBudWxsKSA/IHNlY2tleS5wcmVwZW5kKDB4MDApIDogcHVia2V5O1xuICAgIHJldHVybiBCdWZmLmpvaW4oW3ByZWZpeCwgZGVwdGgsIGZwcmludCwgaW5kZXgsIGNvZGUsIGtleV0pLnRvX2I1OGNoaygpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlX2V4dGtleShrZXlzdHIsIHBhdGggPSAnJykge1xuICAgIGNvbnN0IHsgY29kZSwgdHlwZSwga2V5IH0gPSBkZWNvZGVfZXh0a2V5KGtleXN0cik7XG4gICAgY29uc3QgaXNfcHJpdmF0ZSA9ICh0eXBlID09PSAwKTtcbiAgICBjb25zdCBpbnB1dF9rZXkgPSAoaXNfcHJpdmF0ZSkgPyBrZXkgOiBCdWZmLmpvaW4oW3R5cGUsIGtleV0pO1xuICAgIHJldHVybiBkZXJpdmUocGF0aCwgaW5wdXRfa2V5LCBjb2RlLCBpc19wcml2YXRlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVfZXh0a2V5KGtleXN0cikge1xuICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmYuYjU4Y2hrKGtleXN0cikuc3RyZWFtO1xuICAgIGNvbnN0IHByZWZpeCA9IGJ1ZmZlci5yZWFkKDQpLm51bSwgZGVwdGggPSBidWZmZXIucmVhZCgxKS5udW0sIGZwcmludCA9IGJ1ZmZlci5yZWFkKDQpLm51bSwgaW5kZXggPSBidWZmZXIucmVhZCg0KS5udW0sIGNvZGUgPSBidWZmZXIucmVhZCgzMikuaGV4LCB0eXBlID0gYnVmZmVyLnJlYWQoMSkubnVtLCBrZXkgPSBidWZmZXIucmVhZCgzMikuaGV4LCBzZWNrZXkgPSAodHlwZSA9PT0gMCkgPyBrZXkgOiB1bmRlZmluZWQsIHB1YmtleSA9ICh0eXBlID09PSAwKSA/IGdldF9wdWJrZXkoa2V5KS5oZXggOiBCdWZmLmpvaW4oW3R5cGUsIGtleV0pLmhleDtcbiAgICBpZiAoYnVmZmVyLnNpemUgPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucGFyc2VkIGRhdGEgcmVtYWluaW5nIGluIGJ1ZmZlciEnKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcHJlZml4LCBkZXB0aCwgZnByaW50LCBpbmRleCwgY29kZSwgdHlwZSwga2V5LCBzZWNrZXksIHB1YmtleSB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/hd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONST: () => (/* reexport module object */ _const_js__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   Field: () => (/* reexport safe */ _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field),\n/* harmony export */   Point: () => (/* reexport safe */ _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Point),\n/* harmony export */   assert: () => (/* reexport module object */ _assert_js__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   ecdh: () => (/* reexport module object */ _ecdh_js__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   fd: () => (/* reexport safe */ _ecc_js__WEBPACK_IMPORTED_MODULE_2__.fd),\n/* harmony export */   hash: () => (/* reexport module object */ _hash_js__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   hd: () => (/* reexport module object */ _hd_js__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   keys: () => (/* reexport module object */ _keys_js__WEBPACK_IMPORTED_MODULE_9__),\n/* harmony export */   math: () => (/* reexport module object */ _math_js__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   noble: () => (/* binding */ noble),\n/* harmony export */   proof: () => (/* reexport module object */ _proof_js__WEBPACK_IMPORTED_MODULE_11__),\n/* harmony export */   pt: () => (/* reexport module object */ _point_js__WEBPACK_IMPORTED_MODULE_12__),\n/* harmony export */   sign_config: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.sign_config),\n/* harmony export */   signer: () => (/* reexport module object */ _sig_js__WEBPACK_IMPORTED_MODULE_13__),\n/* harmony export */   util: () => (/* reexport module object */ _util_js__WEBPACK_IMPORTED_MODULE_14__)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/config.js\");\n/* harmony import */ var _ecc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecc.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/types.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/assert.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/const.js\");\n/* harmony import */ var _ecdh_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ecdh.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecdh.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hash.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/hash.js\");\n/* harmony import */ var _hd_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hd.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/hd.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/keys.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/math.js\");\n/* harmony import */ var _proof_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./proof.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/proof.js\");\n/* harmony import */ var _point_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./point.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/point.js\");\n/* harmony import */ var _sig_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./sig.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/sig.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/util.js\");\n\nconst noble = { secp: _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1, schnorr: _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.schnorr };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxRTtBQUM5RCxnQkFBZ0IsSUFBSSx5RUFBUztBQUNSO0FBQ0g7QUFDRTtBQUNXO0FBQ0Y7QUFDRjtBQUNBO0FBQ0o7QUFDSTtBQUNBO0FBQ0U7QUFDSDtBQUNFO0FBQ0Q7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdXRpbHMvZGlzdC9pbmRleC5qcz9jZGE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlY3AyNTZrMSBhcyBzZWNwLCBzY2hub3JyIH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9zZWNwMjU2azEnO1xuZXhwb3J0IGNvbnN0IG5vYmxlID0geyBzZWNwLCBzY2hub3JyIH07XG5leHBvcnQgKiBmcm9tICcuL2NvbmZpZy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2VjYy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbmV4cG9ydCAqIGFzIGFzc2VydCBmcm9tICcuL2Fzc2VydC5qcyc7XG5leHBvcnQgKiBhcyBDT05TVCBmcm9tICcuL2NvbnN0LmpzJztcbmV4cG9ydCAqIGFzIGVjZGggZnJvbSAnLi9lY2RoLmpzJztcbmV4cG9ydCAqIGFzIGhhc2ggZnJvbSAnLi9oYXNoLmpzJztcbmV4cG9ydCAqIGFzIGhkIGZyb20gJy4vaGQuanMnO1xuZXhwb3J0ICogYXMga2V5cyBmcm9tICcuL2tleXMuanMnO1xuZXhwb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnO1xuZXhwb3J0ICogYXMgcHJvb2YgZnJvbSAnLi9wcm9vZi5qcyc7XG5leHBvcnQgKiBhcyBwdCBmcm9tICcuL3BvaW50LmpzJztcbmV4cG9ydCAqIGFzIHNpZ25lciBmcm9tICcuL3NpZy5qcyc7XG5leHBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbC5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/keys.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert_32: () => (/* binding */ convert_32),\n/* harmony export */   convert_33: () => (/* binding */ convert_33),\n/* harmony export */   gen_keypair: () => (/* binding */ gen_keypair),\n/* harmony export */   gen_seckey: () => (/* binding */ gen_seckey),\n/* harmony export */   get_keypair: () => (/* binding */ get_keypair),\n/* harmony export */   get_pubkey: () => (/* binding */ get_pubkey),\n/* harmony export */   get_seckey: () => (/* binding */ get_seckey),\n/* harmony export */   is_even_pub: () => (/* binding */ is_even_pub),\n/* harmony export */   negate_seckey: () => (/* binding */ negate_seckey),\n/* harmony export */   tweak_pubkey: () => (/* binding */ tweak_pubkey),\n/* harmony export */   tweak_seckey: () => (/* binding */ tweak_seckey)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n/* harmony import */ var _ecc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecc.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/util.js\");\n\n\n\nfunction is_even_pub(pubkey) {\n    const pub = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pubkey);\n    switch (true) {\n        case (pub.length === 32):\n            return true;\n        case (pub.length === 33 && pub[0] === 0x02):\n            return true;\n        case (pub.length === 33 && pub[0] === 0x03):\n            return false;\n        default:\n            throw new TypeError(`Invalid public key: ${pub.hex}`);\n    }\n}\nfunction gen_seckey(even_y) {\n    return get_seckey((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.random)(32), even_y);\n}\nfunction get_seckey(secret, even_y = false) {\n    const sec = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(secret);\n    return (even_y) ? sec.negated.buff : sec.buff;\n}\nfunction get_pubkey(seckey, x_only = false) {\n    const p = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(seckey).point;\n    return (x_only) ? p.x : p.buff;\n}\nfunction tweak_seckey(seckey, tweaks = [], even_y = false) {\n    let sec = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(seckey);\n    for (const twk of tweaks) {\n        sec = sec.add(twk);\n        if (even_y)\n            sec = sec.negated;\n    }\n    return sec.buff;\n}\nfunction tweak_pubkey(pubkey, tweaks = [], x_only = false) {\n    let pub = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Point.from_x(pubkey, x_only);\n    for (const twk of tweaks) {\n        pub = pub.add(twk);\n        if (x_only)\n            pub = pub.negated;\n    }\n    return (x_only) ? pub.x : pub.buff;\n}\nfunction negate_seckey(seckey, negate) {\n    const s = _ecc_js__WEBPACK_IMPORTED_MODULE_1__.Field.mod(seckey);\n    return (negate) ? s.negate().buff : s.buff;\n}\nfunction get_keypair(secret, x_only, even_y) {\n    const sec = get_seckey(secret, even_y);\n    const pub = get_pubkey(sec, x_only);\n    return [sec, pub];\n}\nfunction gen_keypair(x_only, even_y) {\n    const sec = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.random)(32);\n    return get_keypair(sec, x_only, even_y);\n}\nfunction convert_32(pubkey) {\n    const key = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pubkey);\n    if (key.length === 32)\n        return key;\n    if (key.length === 33)\n        return key.slice(1, 33);\n    throw new TypeError(`Invalid key length: ${key.length}`);\n}\nfunction convert_33(pubkey, even_y = false) {\n    const key = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pubkey);\n    if (key.length === 32) {\n        return key.prepend(0x02);\n    }\n    else if (key.length === 33) {\n        if (even_y)\n            key[0] = 0x02;\n        return key;\n    }\n    throw new TypeError(`Invalid key size: ${key.length}`);\n}\n//# sourceMappingURL=keys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3Qva2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUEyQztBQUNIO0FBQ0w7QUFDNUI7QUFDUCxnQkFBZ0IscURBQUk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxRQUFRO0FBQy9EO0FBQ0E7QUFDTztBQUNQLHNCQUFzQixnREFBTTtBQUM1QjtBQUNPO0FBQ1AsZ0JBQWdCLDBDQUFLO0FBQ3JCO0FBQ0E7QUFDTztBQUNQLGNBQWMsMENBQUs7QUFDbkI7QUFDQTtBQUNPO0FBQ1AsY0FBYywwQ0FBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsY0FBYywwQ0FBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsY0FBYywwQ0FBSztBQUNuQjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0JBQWdCLGdEQUFNO0FBQ3RCO0FBQ0E7QUFDTztBQUNQLGdCQUFnQixxREFBSTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxXQUFXO0FBQzFEO0FBQ087QUFDUCxnQkFBZ0IscURBQUk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxXQUFXO0FBQ3hEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdXRpbHMvZGlzdC9rZXlzLmpzP2VkYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZiB9IGZyb20gJ0BjbWRjb2RlL2J1ZmYtdXRpbHMnO1xuaW1wb3J0IHsgRmllbGQsIFBvaW50IH0gZnJvbSAnLi9lY2MuanMnO1xuaW1wb3J0IHsgcmFuZG9tIH0gZnJvbSAnLi91dGlsLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc19ldmVuX3B1YihwdWJrZXkpIHtcbiAgICBjb25zdCBwdWIgPSBCdWZmLmJ5dGVzKHB1YmtleSk7XG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgIGNhc2UgKHB1Yi5sZW5ndGggPT09IDMyKTpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlIChwdWIubGVuZ3RoID09PSAzMyAmJiBwdWJbMF0gPT09IDB4MDIpOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgKHB1Yi5sZW5ndGggPT09IDMzICYmIHB1YlswXSA9PT0gMHgwMyk6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHB1YmxpYyBrZXk6ICR7cHViLmhleH1gKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuX3NlY2tleShldmVuX3kpIHtcbiAgICByZXR1cm4gZ2V0X3NlY2tleShyYW5kb20oMzIpLCBldmVuX3kpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldF9zZWNrZXkoc2VjcmV0LCBldmVuX3kgPSBmYWxzZSkge1xuICAgIGNvbnN0IHNlYyA9IEZpZWxkLm1vZChzZWNyZXQpO1xuICAgIHJldHVybiAoZXZlbl95KSA/IHNlYy5uZWdhdGVkLmJ1ZmYgOiBzZWMuYnVmZjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRfcHVia2V5KHNlY2tleSwgeF9vbmx5ID0gZmFsc2UpIHtcbiAgICBjb25zdCBwID0gRmllbGQubW9kKHNlY2tleSkucG9pbnQ7XG4gICAgcmV0dXJuICh4X29ubHkpID8gcC54IDogcC5idWZmO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWFrX3NlY2tleShzZWNrZXksIHR3ZWFrcyA9IFtdLCBldmVuX3kgPSBmYWxzZSkge1xuICAgIGxldCBzZWMgPSBGaWVsZC5tb2Qoc2Vja2V5KTtcbiAgICBmb3IgKGNvbnN0IHR3ayBvZiB0d2Vha3MpIHtcbiAgICAgICAgc2VjID0gc2VjLmFkZCh0d2spO1xuICAgICAgICBpZiAoZXZlbl95KVxuICAgICAgICAgICAgc2VjID0gc2VjLm5lZ2F0ZWQ7XG4gICAgfVxuICAgIHJldHVybiBzZWMuYnVmZjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0d2Vha19wdWJrZXkocHVia2V5LCB0d2Vha3MgPSBbXSwgeF9vbmx5ID0gZmFsc2UpIHtcbiAgICBsZXQgcHViID0gUG9pbnQuZnJvbV94KHB1YmtleSwgeF9vbmx5KTtcbiAgICBmb3IgKGNvbnN0IHR3ayBvZiB0d2Vha3MpIHtcbiAgICAgICAgcHViID0gcHViLmFkZCh0d2spO1xuICAgICAgICBpZiAoeF9vbmx5KVxuICAgICAgICAgICAgcHViID0gcHViLm5lZ2F0ZWQ7XG4gICAgfVxuICAgIHJldHVybiAoeF9vbmx5KSA/IHB1Yi54IDogcHViLmJ1ZmY7XG59XG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlX3NlY2tleShzZWNrZXksIG5lZ2F0ZSkge1xuICAgIGNvbnN0IHMgPSBGaWVsZC5tb2Qoc2Vja2V5KTtcbiAgICByZXR1cm4gKG5lZ2F0ZSkgPyBzLm5lZ2F0ZSgpLmJ1ZmYgOiBzLmJ1ZmY7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0X2tleXBhaXIoc2VjcmV0LCB4X29ubHksIGV2ZW5feSkge1xuICAgIGNvbnN0IHNlYyA9IGdldF9zZWNrZXkoc2VjcmV0LCBldmVuX3kpO1xuICAgIGNvbnN0IHB1YiA9IGdldF9wdWJrZXkoc2VjLCB4X29ubHkpO1xuICAgIHJldHVybiBbc2VjLCBwdWJdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbl9rZXlwYWlyKHhfb25seSwgZXZlbl95KSB7XG4gICAgY29uc3Qgc2VjID0gcmFuZG9tKDMyKTtcbiAgICByZXR1cm4gZ2V0X2tleXBhaXIoc2VjLCB4X29ubHksIGV2ZW5feSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydF8zMihwdWJrZXkpIHtcbiAgICBjb25zdCBrZXkgPSBCdWZmLmJ5dGVzKHB1YmtleSk7XG4gICAgaWYgKGtleS5sZW5ndGggPT09IDMyKVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgIGlmIChrZXkubGVuZ3RoID09PSAzMylcbiAgICAgICAgcmV0dXJuIGtleS5zbGljZSgxLCAzMyk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBrZXkgbGVuZ3RoOiAke2tleS5sZW5ndGh9YCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydF8zMyhwdWJrZXksIGV2ZW5feSA9IGZhbHNlKSB7XG4gICAgY29uc3Qga2V5ID0gQnVmZi5ieXRlcyhwdWJrZXkpO1xuICAgIGlmIChrZXkubGVuZ3RoID09PSAzMikge1xuICAgICAgICByZXR1cm4ga2V5LnByZXBlbmQoMHgwMik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleS5sZW5ndGggPT09IDMzKSB7XG4gICAgICAgIGlmIChldmVuX3kpXG4gICAgICAgICAgICBrZXlbMF0gPSAweDAyO1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGtleSBzaXplOiAke2tleS5sZW5ndGh9YCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/keys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/math.js":
/*!*********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/math.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   in_field: () => (/* binding */ in_field),\n/* harmony export */   invert: () => (/* reexport safe */ _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.invert),\n/* harmony export */   mod: () => (/* reexport safe */ _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.mod),\n/* harmony export */   modN: () => (/* binding */ modN),\n/* harmony export */   modP: () => (/* binding */ modP),\n/* harmony export */   mod_bytes: () => (/* binding */ mod_bytes),\n/* harmony export */   on_curve: () => (/* binding */ on_curve),\n/* harmony export */   pow: () => (/* reexport safe */ _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.pow),\n/* harmony export */   pow2: () => (/* reexport safe */ _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.pow2),\n/* harmony export */   powN: () => (/* binding */ powN)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n/* harmony import */ var _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/abstract/modular */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/const.js\");\n\n\n\n\nconst modN = (x) => (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.mod)(x, _const_js__WEBPACK_IMPORTED_MODULE_1__._N);\nconst modP = (x) => (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.mod)(x, _const_js__WEBPACK_IMPORTED_MODULE_1__._P);\nconst powN = (x, exp) => (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_2__.pow)(x, exp, _const_js__WEBPACK_IMPORTED_MODULE_1__._N);\nconst on_curve = (x) => {\n    return typeof x === 'bigint' && _const_js__WEBPACK_IMPORTED_MODULE_1__._0n < x && x < _const_js__WEBPACK_IMPORTED_MODULE_1__._P;\n};\nconst in_field = (x) => {\n    return typeof x === 'bigint' && _const_js__WEBPACK_IMPORTED_MODULE_1__._0n < x && x < _const_js__WEBPACK_IMPORTED_MODULE_1__._N;\n};\nfunction mod_bytes(bytes) {\n    const b = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(bytes).big;\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.big(modN(b), 32);\n}\n//# sourceMappingURL=math.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvbWF0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ2U7QUFDakI7QUFDK0I7QUFDakUsb0JBQW9CLG1FQUFHLElBQUkseUNBQUU7QUFDN0Isb0JBQW9CLG1FQUFHLElBQUkseUNBQUU7QUFDN0IseUJBQXlCLG1FQUFHLFNBQVMseUNBQUU7QUFDdkM7QUFDUCxvQ0FBb0MsMENBQUcsWUFBWSx5Q0FBRTtBQUNyRDtBQUNPO0FBQ1Asb0NBQW9DLDBDQUFHLFlBQVkseUNBQUU7QUFDckQ7QUFDTztBQUNQLGNBQWMscURBQUk7QUFDbEIsV0FBVyxxREFBSTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdXRpbHMvZGlzdC9tYXRoLmpzP2U3NzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZiB9IGZyb20gJ0BjbWRjb2RlL2J1ZmYtdXRpbHMnO1xuaW1wb3J0IHsgbW9kLCBwb3cgfSBmcm9tICdAbm9ibGUvY3VydmVzL2Fic3RyYWN0L21vZHVsYXInO1xuaW1wb3J0IHsgX04sIF9QLCBfMG4gfSBmcm9tICcuL2NvbnN0LmpzJztcbmV4cG9ydCB7IG1vZCwgcG93LCBwb3cyLCBpbnZlcnQgfSBmcm9tICdAbm9ibGUvY3VydmVzL2Fic3RyYWN0L21vZHVsYXInO1xuZXhwb3J0IGNvbnN0IG1vZE4gPSAoeCkgPT4gbW9kKHgsIF9OKTtcbmV4cG9ydCBjb25zdCBtb2RQID0gKHgpID0+IG1vZCh4LCBfUCk7XG5leHBvcnQgY29uc3QgcG93TiA9ICh4LCBleHApID0+IHBvdyh4LCBleHAsIF9OKTtcbmV4cG9ydCBjb25zdCBvbl9jdXJ2ZSA9ICh4KSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnYmlnaW50JyAmJiBfMG4gPCB4ICYmIHggPCBfUDtcbn07XG5leHBvcnQgY29uc3QgaW5fZmllbGQgPSAoeCkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ2JpZ2ludCcgJiYgXzBuIDwgeCAmJiB4IDwgX047XG59O1xuZXhwb3J0IGZ1bmN0aW9uIG1vZF9ieXRlcyhieXRlcykge1xuICAgIGNvbnN0IGIgPSBCdWZmLmJ5dGVzKGJ5dGVzKS5iaWc7XG4gICAgcmV0dXJuIEJ1ZmYuYmlnKG1vZE4oYiksIDMyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/math.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/point.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/point.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Noble: () => (/* binding */ Noble),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   assert_valid: () => (/* binding */ assert_valid),\n/* harmony export */   eq: () => (/* binding */ eq),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   is_even: () => (/* binding */ is_even),\n/* harmony export */   is_point: () => (/* binding */ is_point),\n/* harmony export */   is_valid: () => (/* binding */ is_valid),\n/* harmony export */   lift_x: () => (/* binding */ lift_x),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   to_bytes: () => (/* binding */ to_bytes)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/const.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/keys.js\");\n\n\n\n\nconst ECPoint = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_3__.secp256k1.ProjectivePoint;\nconst Noble = ECPoint;\nfunction is_even(p) {\n    const pa = new ECPoint(p.x, p.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    return pa.hasEvenY();\n}\nfunction is_point(point) {\n    const p = point;\n    return ((typeof p === 'object' && p !== null) &&\n        (typeof p.x === 'bigint' && typeof p.y === 'bigint'));\n}\nfunction is_valid(point) {\n    if (!is_point(point))\n        return false;\n    const pt = new ECPoint(point.x, point.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    try {\n        pt.assertValidity();\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction assert_valid(p) {\n    if (!is_valid(p)) {\n        throw new Error('ECC point is invalid: ' + String(p));\n    }\n}\nfunction negate(a) {\n    const pa = new ECPoint(a.x, a.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    try {\n        const pc = pa.negate();\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nfunction add(a, b) {\n    if (a === null)\n        return b;\n    if (b === null)\n        return a;\n    const pa = new ECPoint(a.x, a.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    const pb = new ECPoint(b.x, b.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    try {\n        const pc = pa.add(pb);\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nfunction sub(a, b) {\n    if (a === null)\n        return b;\n    if (b === null)\n        return a;\n    const pa = new ECPoint(a.x, a.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    const pb = new ECPoint(b.x, b.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n    try {\n        const pc = pa.subtract(pb);\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nfunction eq(a, b) {\n    if (a === null && b === null) {\n        return true;\n    }\n    if (a !== null && b !== null) {\n        return (a.x === b.x && a.y === b.y);\n    }\n    return false;\n}\nfunction mul(a, b) {\n    if (a === null)\n        return null;\n    try {\n        const buff = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(b);\n        const pa = new ECPoint(a.x, a.y, _const_js__WEBPACK_IMPORTED_MODULE_1__._1n);\n        const pc = pa.multiply(buff.big);\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nfunction gen(b) {\n    const buff = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(b);\n    const base = ECPoint.BASE;\n    const pt = base.multiply(buff.big);\n    pt.assertValidity();\n    return { x: pt.x, y: pt.y };\n}\nfunction lift_x(bytes, xonly = false) {\n    const buff = (0,_keys_js__WEBPACK_IMPORTED_MODULE_2__.convert_33)(bytes, xonly);\n    const point = ECPoint.fromHex(buff.hex);\n    point.assertValidity();\n    return { x: point.x, y: point.y };\n}\nfunction to_bytes(p) {\n    const bytes = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.big(p.x, 32);\n    const parity = is_even(p) ? 0x02 : 0x03;\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([parity, bytes]);\n}\n//# sourceMappingURL=point.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvcG9pbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDUztBQUNuQjtBQUNNO0FBQ3ZDLGdCQUFnQiw4REFBUztBQUNsQjtBQUNBO0FBQ1AscUNBQXFDLDBDQUFHO0FBQ3hDO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsNkNBQTZDLDBDQUFHO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxxQ0FBcUMsMENBQUc7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDBDQUFHO0FBQ3hDLHFDQUFxQywwQ0FBRztBQUN4QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsMENBQUc7QUFDeEMscUNBQXFDLDBDQUFHO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQUk7QUFDekIseUNBQXlDLDBDQUFHO0FBQzVDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaUJBQWlCLHFEQUFJO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNPO0FBQ1AsaUJBQWlCLG9EQUFVO0FBQzNCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDTztBQUNQLGtCQUFrQixxREFBSTtBQUN0QjtBQUNBLFdBQVcscURBQUk7QUFDZjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvcG9pbnQuanM/ZjIyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWZmIH0gZnJvbSAnQGNtZGNvZGUvYnVmZi11dGlscyc7XG5pbXBvcnQgeyBzZWNwMjU2azEgfSBmcm9tICdAbm9ibGUvY3VydmVzL3NlY3AyNTZrMSc7XG5pbXBvcnQgeyBfMW4gfSBmcm9tICcuL2NvbnN0LmpzJztcbmltcG9ydCB7IGNvbnZlcnRfMzMgfSBmcm9tICcuL2tleXMuanMnO1xuY29uc3QgRUNQb2ludCA9IHNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQ7XG5leHBvcnQgY29uc3QgTm9ibGUgPSBFQ1BvaW50O1xuZXhwb3J0IGZ1bmN0aW9uIGlzX2V2ZW4ocCkge1xuICAgIGNvbnN0IHBhID0gbmV3IEVDUG9pbnQocC54LCBwLnksIF8xbik7XG4gICAgcmV0dXJuIHBhLmhhc0V2ZW5ZKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNfcG9pbnQocG9pbnQpIHtcbiAgICBjb25zdCBwID0gcG9pbnQ7XG4gICAgcmV0dXJuICgodHlwZW9mIHAgPT09ICdvYmplY3QnICYmIHAgIT09IG51bGwpICYmXG4gICAgICAgICh0eXBlb2YgcC54ID09PSAnYmlnaW50JyAmJiB0eXBlb2YgcC55ID09PSAnYmlnaW50JykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzX3ZhbGlkKHBvaW50KSB7XG4gICAgaWYgKCFpc19wb2ludChwb2ludCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBwdCA9IG5ldyBFQ1BvaW50KHBvaW50LngsIHBvaW50LnksIF8xbik7XG4gICAgdHJ5IHtcbiAgICAgICAgcHQuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRfdmFsaWQocCkge1xuICAgIGlmICghaXNfdmFsaWQocCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFQ0MgcG9pbnQgaXMgaW52YWxpZDogJyArIFN0cmluZyhwKSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShhKSB7XG4gICAgY29uc3QgcGEgPSBuZXcgRUNQb2ludChhLngsIGEueSwgXzFuKTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwYyA9IHBhLm5lZ2F0ZSgpO1xuICAgICAgICBwYy5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICByZXR1cm4geyB4OiBwYy54LCB5OiBwYy55IH07XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGFkZChhLCBiKSB7XG4gICAgaWYgKGEgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBiO1xuICAgIGlmIChiID09PSBudWxsKVxuICAgICAgICByZXR1cm4gYTtcbiAgICBjb25zdCBwYSA9IG5ldyBFQ1BvaW50KGEueCwgYS55LCBfMW4pO1xuICAgIGNvbnN0IHBiID0gbmV3IEVDUG9pbnQoYi54LCBiLnksIF8xbik7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGMgPSBwYS5hZGQocGIpO1xuICAgICAgICBwYy5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICByZXR1cm4geyB4OiBwYy54LCB5OiBwYy55IH07XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHN1YihhLCBiKSB7XG4gICAgaWYgKGEgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBiO1xuICAgIGlmIChiID09PSBudWxsKVxuICAgICAgICByZXR1cm4gYTtcbiAgICBjb25zdCBwYSA9IG5ldyBFQ1BvaW50KGEueCwgYS55LCBfMW4pO1xuICAgIGNvbnN0IHBiID0gbmV3IEVDUG9pbnQoYi54LCBiLnksIF8xbik7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGMgPSBwYS5zdWJ0cmFjdChwYik7XG4gICAgICAgIHBjLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgIHJldHVybiB7IHg6IHBjLngsIHk6IHBjLnkgfTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZXEoYSwgYikge1xuICAgIGlmIChhID09PSBudWxsICYmIGIgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChhICE9PSBudWxsICYmIGIgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIChhLnggPT09IGIueCAmJiBhLnkgPT09IGIueSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtdWwoYSwgYikge1xuICAgIGlmIChhID09PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBidWZmID0gQnVmZi5ieXRlcyhiKTtcbiAgICAgICAgY29uc3QgcGEgPSBuZXcgRUNQb2ludChhLngsIGEueSwgXzFuKTtcbiAgICAgICAgY29uc3QgcGMgPSBwYS5tdWx0aXBseShidWZmLmJpZyk7XG4gICAgICAgIHBjLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgIHJldHVybiB7IHg6IHBjLngsIHk6IHBjLnkgfTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuKGIpIHtcbiAgICBjb25zdCBidWZmID0gQnVmZi5ieXRlcyhiKTtcbiAgICBjb25zdCBiYXNlID0gRUNQb2ludC5CQVNFO1xuICAgIGNvbnN0IHB0ID0gYmFzZS5tdWx0aXBseShidWZmLmJpZyk7XG4gICAgcHQuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICByZXR1cm4geyB4OiBwdC54LCB5OiBwdC55IH07XG59XG5leHBvcnQgZnVuY3Rpb24gbGlmdF94KGJ5dGVzLCB4b25seSA9IGZhbHNlKSB7XG4gICAgY29uc3QgYnVmZiA9IGNvbnZlcnRfMzMoYnl0ZXMsIHhvbmx5KTtcbiAgICBjb25zdCBwb2ludCA9IEVDUG9pbnQuZnJvbUhleChidWZmLmhleCk7XG4gICAgcG9pbnQuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICByZXR1cm4geyB4OiBwb2ludC54LCB5OiBwb2ludC55IH07XG59XG5leHBvcnQgZnVuY3Rpb24gdG9fYnl0ZXMocCkge1xuICAgIGNvbnN0IGJ5dGVzID0gQnVmZi5iaWcocC54LCAzMik7XG4gICAgY29uc3QgcGFyaXR5ID0gaXNfZXZlbihwKSA/IDB4MDIgOiAweDAzO1xuICAgIHJldHVybiBCdWZmLmpvaW4oW3Bhcml0eSwgYnl0ZXNdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvaW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/point.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/proof.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/proof.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create_event: () => (/* binding */ create_event),\n/* harmony export */   create_proof: () => (/* binding */ create_proof),\n/* harmony export */   decode_params: () => (/* binding */ decode_params),\n/* harmony export */   encode_params: () => (/* binding */ encode_params),\n/* harmony export */   parse_config: () => (/* binding */ parse_config),\n/* harmony export */   parse_proof: () => (/* binding */ parse_proof),\n/* harmony export */   parse_proofs: () => (/* binding */ parse_proofs),\n/* harmony export */   validate_proof: () => (/* binding */ validate_proof),\n/* harmony export */   verify_proof: () => (/* binding */ verify_proof)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/keys.js\");\n/* harmony import */ var _sig_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sig.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/sig.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/assert.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/util.js\");\n\n\n\n\n\nconst PROOF_DEFAULTS = {\n    kind: 20000,\n    stamp: 0x00000000,\n    tags: []\n};\nfunction create_proof(seckey, data, params, options) {\n    const { kind, stamp, tags } = parse_config(params ?? []);\n    const content = _util_js__WEBPACK_IMPORTED_MODULE_4__.stringify(data);\n    const pub = (0,_keys_js__WEBPACK_IMPORTED_MODULE_1__.get_pubkey)(seckey, true).hex;\n    const ref = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.str(content).digest;\n    const img = [0, pub, stamp, kind, tags, content];\n    const pid = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.json(img).digest;\n    const sig = (0,_sig_js__WEBPACK_IMPORTED_MODULE_2__.sign)(pid, seckey, options);\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([ref, pub, pid, sig]).hex + encode_params(params);\n}\nfunction parse_proof(proof) {\n    const [hexstr, query] = proof.split('?');\n    const stream = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.hex(hexstr).stream;\n    _assert_js__WEBPACK_IMPORTED_MODULE_3__.ok(stream.size === 160);\n    return {\n        ref: stream.read(32).hex,\n        pub: stream.read(32).hex,\n        pid: stream.read(32).hex,\n        sig: stream.read(64).hex,\n        params: decode_params(query)\n    };\n}\nfunction parse_proofs(proofs) {\n    return proofs.map(e => parse_proof(e));\n}\nfunction validate_proof(proof) {\n    const regex = /^[0-9a-fA-F]{320}(?:\\?[A-Za-z0-9_]+=[A-Za-z0-9_]+(?:&[A-Za-z0-9_]+=[A-Za-z0-9_]+)*)?$/;\n    return regex.test(proof);\n}\nfunction verify_proof(proof, data, options) {\n    const { throws = false } = options ?? {};\n    const { ref, pub, pid, sig, params } = parse_proof(proof);\n    const { kind, stamp, tags } = parse_config(params);\n    const content = _util_js__WEBPACK_IMPORTED_MODULE_4__.stringify(data);\n    const content_ref = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.str(content).digest.hex;\n    if (content_ref !== ref) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_3__.fail('Content hash does not match reference hash!', throws);\n    }\n    const img = [0, pub, stamp, kind, tags, content];\n    const proof_hash = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.json(img).digest;\n    if (proof_hash.hex !== pid) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_3__.fail('Proof hash does not equal proof id!', throws);\n    }\n    if (!(0,_sig_js__WEBPACK_IMPORTED_MODULE_2__.verify)(sig, pid, pub)) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_3__.fail('Proof signature is invalid!', throws);\n    }\n    return true;\n}\nfunction create_event(proof, data) {\n    const content = _util_js__WEBPACK_IMPORTED_MODULE_4__.stringify(data);\n    const { pub, pid, sig, params } = parse_proof(proof);\n    const { kind, stamp, tags } = parse_config(params);\n    return { kind, content, tags, pubkey: pub, id: pid, sig, created_at: stamp };\n}\nfunction encode_params(params = []) {\n    const strings = params.map(e => [String(e[0]), String(e[1])]);\n    return (params.length !== 0)\n        ? '?' + new URLSearchParams(strings).toString()\n        : '';\n}\nfunction decode_params(str) {\n    return (typeof str === 'string')\n        ? [...new URLSearchParams(str)]\n        : [];\n}\nfunction parse_config(params = []) {\n    const { kind, stamp, ...rest } = Object.fromEntries(params);\n    return {\n        tags: Object.entries(rest).map(([k, v]) => [k, String(v)]),\n        kind: (kind !== undefined) ? Number(kind) : PROOF_DEFAULTS.kind,\n        stamp: (stamp !== undefined) ? Number(stamp) : PROOF_DEFAULTS.stamp\n    };\n}\n//# sourceMappingURL=proof.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvcHJvb2YuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDSjtBQUNDO0FBQ0Y7QUFDSjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLG9CQUFvQjtBQUNoQyxvQkFBb0IsK0NBQWM7QUFDbEMsZ0JBQWdCLG9EQUFVO0FBQzFCLGdCQUFnQixxREFBSTtBQUNwQjtBQUNBLGdCQUFnQixxREFBSTtBQUNwQixnQkFBZ0IsNkNBQUk7QUFDcEIsV0FBVyxxREFBSTtBQUNmO0FBQ087QUFDUDtBQUNBLG1CQUFtQixxREFBSTtBQUN2QixJQUFJLDBDQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1AsZ0NBQWdDLElBQUk7QUFDcEM7QUFDQTtBQUNPO0FBQ1AsWUFBWSxpQkFBaUI7QUFDN0IsWUFBWSw2QkFBNkI7QUFDekMsWUFBWSxvQkFBb0I7QUFDaEMsb0JBQW9CLCtDQUFjO0FBQ2xDLHdCQUF3QixxREFBSTtBQUM1QjtBQUNBLGVBQWUsNENBQVc7QUFDMUI7QUFDQTtBQUNBLHVCQUF1QixxREFBSTtBQUMzQjtBQUNBLGVBQWUsNENBQVc7QUFDMUI7QUFDQSxTQUFTLCtDQUFNO0FBQ2YsZUFBZSw0Q0FBVztBQUMxQjtBQUNBO0FBQ0E7QUFDTztBQUNQLG9CQUFvQiwrQ0FBYztBQUNsQyxZQUFZLHdCQUF3QjtBQUNwQyxZQUFZLG9CQUFvQjtBQUNoQyxhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHVCQUF1QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0BjbWRjb2RlL2NyeXB0by11dGlscy9kaXN0L3Byb29mLmpzPzI5NjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZiB9IGZyb20gJ0BjbWRjb2RlL2J1ZmYtdXRpbHMnO1xuaW1wb3J0IHsgZ2V0X3B1YmtleSB9IGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQgeyBzaWduLCB2ZXJpZnkgfSBmcm9tICcuL3NpZy5qcyc7XG5pbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnLi9hc3NlcnQuanMnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwuanMnO1xuY29uc3QgUFJPT0ZfREVGQVVMVFMgPSB7XG4gICAga2luZDogMjAwMDAsXG4gICAgc3RhbXA6IDB4MDAwMDAwMDAsXG4gICAgdGFnczogW11cbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX3Byb29mKHNlY2tleSwgZGF0YSwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBraW5kLCBzdGFtcCwgdGFncyB9ID0gcGFyc2VfY29uZmlnKHBhcmFtcyA/PyBbXSk7XG4gICAgY29uc3QgY29udGVudCA9IHV0aWwuc3RyaW5naWZ5KGRhdGEpO1xuICAgIGNvbnN0IHB1YiA9IGdldF9wdWJrZXkoc2Vja2V5LCB0cnVlKS5oZXg7XG4gICAgY29uc3QgcmVmID0gQnVmZi5zdHIoY29udGVudCkuZGlnZXN0O1xuICAgIGNvbnN0IGltZyA9IFswLCBwdWIsIHN0YW1wLCBraW5kLCB0YWdzLCBjb250ZW50XTtcbiAgICBjb25zdCBwaWQgPSBCdWZmLmpzb24oaW1nKS5kaWdlc3Q7XG4gICAgY29uc3Qgc2lnID0gc2lnbihwaWQsIHNlY2tleSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIEJ1ZmYuam9pbihbcmVmLCBwdWIsIHBpZCwgc2lnXSkuaGV4ICsgZW5jb2RlX3BhcmFtcyhwYXJhbXMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlX3Byb29mKHByb29mKSB7XG4gICAgY29uc3QgW2hleHN0ciwgcXVlcnldID0gcHJvb2Yuc3BsaXQoJz8nKTtcbiAgICBjb25zdCBzdHJlYW0gPSBCdWZmLmhleChoZXhzdHIpLnN0cmVhbTtcbiAgICBhc3NlcnQub2soc3RyZWFtLnNpemUgPT09IDE2MCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVmOiBzdHJlYW0ucmVhZCgzMikuaGV4LFxuICAgICAgICBwdWI6IHN0cmVhbS5yZWFkKDMyKS5oZXgsXG4gICAgICAgIHBpZDogc3RyZWFtLnJlYWQoMzIpLmhleCxcbiAgICAgICAgc2lnOiBzdHJlYW0ucmVhZCg2NCkuaGV4LFxuICAgICAgICBwYXJhbXM6IGRlY29kZV9wYXJhbXMocXVlcnkpXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZV9wcm9vZnMocHJvb2ZzKSB7XG4gICAgcmV0dXJuIHByb29mcy5tYXAoZSA9PiBwYXJzZV9wcm9vZihlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVfcHJvb2YocHJvb2YpIHtcbiAgICBjb25zdCByZWdleCA9IC9eWzAtOWEtZkEtRl17MzIwfSg/OlxcP1tBLVphLXowLTlfXSs9W0EtWmEtejAtOV9dKyg/OiZbQS1aYS16MC05X10rPVtBLVphLXowLTlfXSspKik/JC87XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QocHJvb2YpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeV9wcm9vZihwcm9vZiwgZGF0YSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgdGhyb3dzID0gZmFsc2UgfSA9IG9wdGlvbnMgPz8ge307XG4gICAgY29uc3QgeyByZWYsIHB1YiwgcGlkLCBzaWcsIHBhcmFtcyB9ID0gcGFyc2VfcHJvb2YocHJvb2YpO1xuICAgIGNvbnN0IHsga2luZCwgc3RhbXAsIHRhZ3MgfSA9IHBhcnNlX2NvbmZpZyhwYXJhbXMpO1xuICAgIGNvbnN0IGNvbnRlbnQgPSB1dGlsLnN0cmluZ2lmeShkYXRhKTtcbiAgICBjb25zdCBjb250ZW50X3JlZiA9IEJ1ZmYuc3RyKGNvbnRlbnQpLmRpZ2VzdC5oZXg7XG4gICAgaWYgKGNvbnRlbnRfcmVmICE9PSByZWYpIHtcbiAgICAgICAgcmV0dXJuIGFzc2VydC5mYWlsKCdDb250ZW50IGhhc2ggZG9lcyBub3QgbWF0Y2ggcmVmZXJlbmNlIGhhc2ghJywgdGhyb3dzKTtcbiAgICB9XG4gICAgY29uc3QgaW1nID0gWzAsIHB1Yiwgc3RhbXAsIGtpbmQsIHRhZ3MsIGNvbnRlbnRdO1xuICAgIGNvbnN0IHByb29mX2hhc2ggPSBCdWZmLmpzb24oaW1nKS5kaWdlc3Q7XG4gICAgaWYgKHByb29mX2hhc2guaGV4ICE9PSBwaWQpIHtcbiAgICAgICAgcmV0dXJuIGFzc2VydC5mYWlsKCdQcm9vZiBoYXNoIGRvZXMgbm90IGVxdWFsIHByb29mIGlkIScsIHRocm93cyk7XG4gICAgfVxuICAgIGlmICghdmVyaWZ5KHNpZywgcGlkLCBwdWIpKSB7XG4gICAgICAgIHJldHVybiBhc3NlcnQuZmFpbCgnUHJvb2Ygc2lnbmF0dXJlIGlzIGludmFsaWQhJywgdGhyb3dzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2V2ZW50KHByb29mLCBkYXRhKSB7XG4gICAgY29uc3QgY29udGVudCA9IHV0aWwuc3RyaW5naWZ5KGRhdGEpO1xuICAgIGNvbnN0IHsgcHViLCBwaWQsIHNpZywgcGFyYW1zIH0gPSBwYXJzZV9wcm9vZihwcm9vZik7XG4gICAgY29uc3QgeyBraW5kLCBzdGFtcCwgdGFncyB9ID0gcGFyc2VfY29uZmlnKHBhcmFtcyk7XG4gICAgcmV0dXJuIHsga2luZCwgY29udGVudCwgdGFncywgcHVia2V5OiBwdWIsIGlkOiBwaWQsIHNpZywgY3JlYXRlZF9hdDogc3RhbXAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVfcGFyYW1zKHBhcmFtcyA9IFtdKSB7XG4gICAgY29uc3Qgc3RyaW5ncyA9IHBhcmFtcy5tYXAoZSA9PiBbU3RyaW5nKGVbMF0pLCBTdHJpbmcoZVsxXSldKTtcbiAgICByZXR1cm4gKHBhcmFtcy5sZW5ndGggIT09IDApXG4gICAgICAgID8gJz8nICsgbmV3IFVSTFNlYXJjaFBhcmFtcyhzdHJpbmdzKS50b1N0cmluZygpXG4gICAgICAgIDogJyc7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlX3BhcmFtcyhzdHIpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKVxuICAgICAgICA/IFsuLi5uZXcgVVJMU2VhcmNoUGFyYW1zKHN0cildXG4gICAgICAgIDogW107XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VfY29uZmlnKHBhcmFtcyA9IFtdKSB7XG4gICAgY29uc3QgeyBraW5kLCBzdGFtcCwgLi4ucmVzdCB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKHBhcmFtcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFnczogT2JqZWN0LmVudHJpZXMocmVzdCkubWFwKChbaywgdl0pID0+IFtrLCBTdHJpbmcodildKSxcbiAgICAgICAga2luZDogKGtpbmQgIT09IHVuZGVmaW5lZCkgPyBOdW1iZXIoa2luZCkgOiBQUk9PRl9ERUZBVUxUUy5raW5kLFxuICAgICAgICBzdGFtcDogKHN0YW1wICE9PSB1bmRlZmluZWQpID8gTnVtYmVyKHN0YW1wKSA6IFBST09GX0RFRkFVTFRTLnN0YW1wXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb29mLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/proof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/sig.js":
/*!********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/sig.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gen_nonce: () => (/* binding */ gen_nonce),\n/* harmony export */   recover: () => (/* binding */ recover),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/const.js\");\n/* harmony import */ var _ecc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ecc.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecc.js\");\n/* harmony import */ var _ecdh_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ecdh.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/ecdh.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hash.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/hash.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/keys.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./config.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/config.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/./node_modules/@cmdcode/crypto-utils/dist/assert.js\");\n\n\n\n\n\n\n\n\nfunction sign(message, secret, options) {\n    const opt = (0,_config_js__WEBPACK_IMPORTED_MODULE_6__.sign_config)(options);\n    const { adaptor, tweak, xonly } = opt;\n    const m = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(message);\n    let dp = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(secret);\n    if (tweak !== undefined) {\n        if (xonly)\n            dp = dp.negated;\n        dp = dp.add(tweak);\n    }\n    const P = dp.point;\n    const d = (xonly) ? dp.negated : dp;\n    const n = gen_nonce(m, d, opt);\n    let kp = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(n);\n    if (adaptor !== undefined) {\n        if (xonly)\n            kp = kp.negated;\n        kp = kp.add(adaptor);\n    }\n    const R = kp.point;\n    const k = (xonly) ? kp.negated.big : kp.big;\n    const ch = (0,_hash_js__WEBPACK_IMPORTED_MODULE_4__.digest)('BIP0340/challenge', R.x.raw, P.x.raw, m);\n    const c = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(ch);\n    const s = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(k + (c.big * d.big));\n    const rx = (xonly) ? R.x.raw : R.raw;\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([rx, s.raw]);\n}\nfunction verify(signature, message, pubkey, options) {\n    const { throws } = (0,_config_js__WEBPACK_IMPORTED_MODULE_6__.sign_config)(options);\n    const msg = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(message);\n    const sig = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(signature);\n    if (sig.length < 64) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_7__.fail('Signature length is too small: ' + String(sig.length), throws);\n    }\n    _assert_js__WEBPACK_IMPORTED_MODULE_7__.size(pubkey, 32);\n    const P = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Point.from_x(pubkey);\n    const rx = sig.subarray(0, 32);\n    const R = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Point.from_x(rx);\n    const s = sig.subarray(32, 64);\n    const sG = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(s).point;\n    const ch = (0,_hash_js__WEBPACK_IMPORTED_MODULE_4__.digest)('BIP0340/challenge', R.x, P.x, msg);\n    const c = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod(ch);\n    const eP = P.mul(c.big);\n    const r = sG.sub(eP);\n    if (R.hasOddY) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_7__.fail('Signature R value has odd Y coordinate!', throws);\n    }\n    if (R.x.big === _const_js__WEBPACK_IMPORTED_MODULE_1__._0n) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_7__.fail('Signature R value is infinite!', throws);\n    }\n    if (R.x.big !== r.x.big) {\n        return _assert_js__WEBPACK_IMPORTED_MODULE_7__.fail(`Signature is invalid! R: ${R.x.hex} r:${r.x.hex}`, throws);\n    }\n    return R.x.big === r.x.big;\n}\nfunction recover(signature, message, pub_key, rec_key) {\n    const sig = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(signature);\n    const msg = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(message);\n    const pub = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(pub_key);\n    const seed = (0,_ecdh_js__WEBPACK_IMPORTED_MODULE_3__.get_shared_key)(rec_key, pub_key);\n    const nonce = (0,_hash_js__WEBPACK_IMPORTED_MODULE_4__.digest)('BIP0340/nonce', seed, message);\n    const chal = (0,_hash_js__WEBPACK_IMPORTED_MODULE_4__.digest)('BIP0340/challenge', sig.slice(0, 32), (0,_keys_js__WEBPACK_IMPORTED_MODULE_5__.convert_32)(pub), msg);\n    const c = new _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field(chal);\n    const k = new _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field(nonce).negated;\n    const s = new _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field(sig.slice(32, 64));\n    return s.sub(k).div(c).buff;\n}\nfunction gen_nonce(message, secret, options) {\n    const { aux, nonce, nonce_tweaks = [], recovery, xonly } = (0,_config_js__WEBPACK_IMPORTED_MODULE_6__.sign_config)(options);\n    let n;\n    if (nonce !== undefined) {\n        n = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(nonce);\n    }\n    else if (recovery !== undefined) {\n        n = (0,_ecdh_js__WEBPACK_IMPORTED_MODULE_3__.get_shared_key)(secret, recovery);\n    }\n    else {\n        const seed = (aux === null) ? _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.num(0, 32) : aux;\n        const a = (0,_hash_js__WEBPACK_IMPORTED_MODULE_4__.digest)('BIP0340/aux', seed ?? _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.random(32));\n        const t = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(secret).big ^ a.big;\n        n = _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.join([t, (0,_keys_js__WEBPACK_IMPORTED_MODULE_5__.get_pubkey)(secret, xonly)]);\n    }\n    let sn = _ecc_js__WEBPACK_IMPORTED_MODULE_2__.Field.mod((0,_hash_js__WEBPACK_IMPORTED_MODULE_4__.digest)('BIP0340/nonce', n, _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.bytes(message)));\n    nonce_tweaks.forEach(e => { sn = sn.add(e).negated; });\n    return sn.buff;\n}\n//# sourceMappingURL=sig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3Qvc2lnLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUEyQztBQUNWO0FBQ087QUFDRztBQUNSO0FBQ2dCO0FBQ1Q7QUFDSjtBQUMvQjtBQUNQLGdCQUFnQix1REFBVztBQUMzQixZQUFZLHdCQUF3QjtBQUNwQyxjQUFjLHFEQUFJO0FBQ2xCLGFBQWEsMENBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMENBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdEQUFNO0FBQ3JCLGNBQWMsMENBQUs7QUFDbkIsY0FBYywwQ0FBSztBQUNuQjtBQUNBLFdBQVcscURBQUk7QUFDZjtBQUNPO0FBQ1AsWUFBWSxTQUFTLEVBQUUsdURBQVc7QUFDbEMsZ0JBQWdCLHFEQUFJO0FBQ3BCLGdCQUFnQixxREFBSTtBQUNwQjtBQUNBLGVBQWUsNENBQVc7QUFDMUI7QUFDQSxJQUFJLDRDQUFXO0FBQ2YsY0FBYywwQ0FBSztBQUNuQjtBQUNBLGNBQWMsMENBQUs7QUFDbkI7QUFDQSxlQUFlLDBDQUFLO0FBQ3BCLGVBQWUsZ0RBQU07QUFDckIsY0FBYywwQ0FBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLDRDQUFXO0FBQzFCO0FBQ0Esb0JBQW9CLDBDQUFHO0FBQ3ZCLGVBQWUsNENBQVc7QUFDMUI7QUFDQTtBQUNBLGVBQWUsNENBQVcsNkJBQTZCLFNBQVMsSUFBSSxRQUFRO0FBQzVFO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0JBQWdCLHFEQUFJO0FBQ3BCLGdCQUFnQixxREFBSTtBQUNwQixnQkFBZ0IscURBQUk7QUFDcEIsaUJBQWlCLHdEQUFjO0FBQy9CLGtCQUFrQixnREFBTTtBQUN4QixpQkFBaUIsZ0RBQU0sd0NBQXdDLG9EQUFVO0FBQ3pFLGtCQUFrQiwwQ0FBSztBQUN2QixrQkFBa0IsMENBQUs7QUFDdkIsa0JBQWtCLDBDQUFLO0FBQ3ZCO0FBQ0E7QUFDTztBQUNQLFlBQVksaURBQWlELEVBQUUsdURBQVc7QUFDMUU7QUFDQTtBQUNBLFlBQVkscURBQUk7QUFDaEI7QUFDQTtBQUNBLFlBQVksd0RBQWM7QUFDMUI7QUFDQTtBQUNBLHNDQUFzQyxxREFBSTtBQUMxQyxrQkFBa0IsZ0RBQU0sd0JBQXdCLHFEQUFJO0FBQ3BELGtCQUFrQixxREFBSTtBQUN0QixZQUFZLHFEQUFJLFVBQVUsb0RBQVU7QUFDcEM7QUFDQSxhQUFhLDBDQUFLLEtBQUssZ0RBQU0scUJBQXFCLHFEQUFJO0FBQ3RELGdDQUFnQyx5QkFBeUI7QUFDekQ7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3Qvc2lnLmpzPzIzYmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZiB9IGZyb20gJ0BjbWRjb2RlL2J1ZmYtdXRpbHMnO1xuaW1wb3J0IHsgXzBuIH0gZnJvbSAnLi9jb25zdC5qcyc7XG5pbXBvcnQgeyBGaWVsZCwgUG9pbnQgfSBmcm9tICcuL2VjYy5qcyc7XG5pbXBvcnQgeyBnZXRfc2hhcmVkX2tleSB9IGZyb20gJy4vZWNkaC5qcyc7XG5pbXBvcnQgeyBkaWdlc3QgfSBmcm9tICcuL2hhc2guanMnO1xuaW1wb3J0IHsgZ2V0X3B1YmtleSwgY29udmVydF8zMiB9IGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQgeyBzaWduX2NvbmZpZyB9IGZyb20gJy4vY29uZmlnLmpzJztcbmltcG9ydCAqIGFzIGFzc2VydCBmcm9tICcuL2Fzc2VydC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gc2lnbihtZXNzYWdlLCBzZWNyZXQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHQgPSBzaWduX2NvbmZpZyhvcHRpb25zKTtcbiAgICBjb25zdCB7IGFkYXB0b3IsIHR3ZWFrLCB4b25seSB9ID0gb3B0O1xuICAgIGNvbnN0IG0gPSBCdWZmLmJ5dGVzKG1lc3NhZ2UpO1xuICAgIGxldCBkcCA9IEZpZWxkLm1vZChzZWNyZXQpO1xuICAgIGlmICh0d2VhayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh4b25seSlcbiAgICAgICAgICAgIGRwID0gZHAubmVnYXRlZDtcbiAgICAgICAgZHAgPSBkcC5hZGQodHdlYWspO1xuICAgIH1cbiAgICBjb25zdCBQID0gZHAucG9pbnQ7XG4gICAgY29uc3QgZCA9ICh4b25seSkgPyBkcC5uZWdhdGVkIDogZHA7XG4gICAgY29uc3QgbiA9IGdlbl9ub25jZShtLCBkLCBvcHQpO1xuICAgIGxldCBrcCA9IEZpZWxkLm1vZChuKTtcbiAgICBpZiAoYWRhcHRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh4b25seSlcbiAgICAgICAgICAgIGtwID0ga3AubmVnYXRlZDtcbiAgICAgICAga3AgPSBrcC5hZGQoYWRhcHRvcik7XG4gICAgfVxuICAgIGNvbnN0IFIgPSBrcC5wb2ludDtcbiAgICBjb25zdCBrID0gKHhvbmx5KSA/IGtwLm5lZ2F0ZWQuYmlnIDoga3AuYmlnO1xuICAgIGNvbnN0IGNoID0gZGlnZXN0KCdCSVAwMzQwL2NoYWxsZW5nZScsIFIueC5yYXcsIFAueC5yYXcsIG0pO1xuICAgIGNvbnN0IGMgPSBGaWVsZC5tb2QoY2gpO1xuICAgIGNvbnN0IHMgPSBGaWVsZC5tb2QoayArIChjLmJpZyAqIGQuYmlnKSk7XG4gICAgY29uc3QgcnggPSAoeG9ubHkpID8gUi54LnJhdyA6IFIucmF3O1xuICAgIHJldHVybiBCdWZmLmpvaW4oW3J4LCBzLnJhd10pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeShzaWduYXR1cmUsIG1lc3NhZ2UsIHB1YmtleSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgdGhyb3dzIH0gPSBzaWduX2NvbmZpZyhvcHRpb25zKTtcbiAgICBjb25zdCBtc2cgPSBCdWZmLmJ5dGVzKG1lc3NhZ2UpO1xuICAgIGNvbnN0IHNpZyA9IEJ1ZmYuYnl0ZXMoc2lnbmF0dXJlKTtcbiAgICBpZiAoc2lnLmxlbmd0aCA8IDY0KSB7XG4gICAgICAgIHJldHVybiBhc3NlcnQuZmFpbCgnU2lnbmF0dXJlIGxlbmd0aCBpcyB0b28gc21hbGw6ICcgKyBTdHJpbmcoc2lnLmxlbmd0aCksIHRocm93cyk7XG4gICAgfVxuICAgIGFzc2VydC5zaXplKHB1YmtleSwgMzIpO1xuICAgIGNvbnN0IFAgPSBQb2ludC5mcm9tX3gocHVia2V5KTtcbiAgICBjb25zdCByeCA9IHNpZy5zdWJhcnJheSgwLCAzMik7XG4gICAgY29uc3QgUiA9IFBvaW50LmZyb21feChyeCk7XG4gICAgY29uc3QgcyA9IHNpZy5zdWJhcnJheSgzMiwgNjQpO1xuICAgIGNvbnN0IHNHID0gRmllbGQubW9kKHMpLnBvaW50O1xuICAgIGNvbnN0IGNoID0gZGlnZXN0KCdCSVAwMzQwL2NoYWxsZW5nZScsIFIueCwgUC54LCBtc2cpO1xuICAgIGNvbnN0IGMgPSBGaWVsZC5tb2QoY2gpO1xuICAgIGNvbnN0IGVQID0gUC5tdWwoYy5iaWcpO1xuICAgIGNvbnN0IHIgPSBzRy5zdWIoZVApO1xuICAgIGlmIChSLmhhc09kZFkpIHtcbiAgICAgICAgcmV0dXJuIGFzc2VydC5mYWlsKCdTaWduYXR1cmUgUiB2YWx1ZSBoYXMgb2RkIFkgY29vcmRpbmF0ZSEnLCB0aHJvd3MpO1xuICAgIH1cbiAgICBpZiAoUi54LmJpZyA9PT0gXzBuKSB7XG4gICAgICAgIHJldHVybiBhc3NlcnQuZmFpbCgnU2lnbmF0dXJlIFIgdmFsdWUgaXMgaW5maW5pdGUhJywgdGhyb3dzKTtcbiAgICB9XG4gICAgaWYgKFIueC5iaWcgIT09IHIueC5iaWcpIHtcbiAgICAgICAgcmV0dXJuIGFzc2VydC5mYWlsKGBTaWduYXR1cmUgaXMgaW52YWxpZCEgUjogJHtSLnguaGV4fSByOiR7ci54LmhleH1gLCB0aHJvd3MpO1xuICAgIH1cbiAgICByZXR1cm4gUi54LmJpZyA9PT0gci54LmJpZztcbn1cbmV4cG9ydCBmdW5jdGlvbiByZWNvdmVyKHNpZ25hdHVyZSwgbWVzc2FnZSwgcHViX2tleSwgcmVjX2tleSkge1xuICAgIGNvbnN0IHNpZyA9IEJ1ZmYuYnl0ZXMoc2lnbmF0dXJlKTtcbiAgICBjb25zdCBtc2cgPSBCdWZmLmJ5dGVzKG1lc3NhZ2UpO1xuICAgIGNvbnN0IHB1YiA9IEJ1ZmYuYnl0ZXMocHViX2tleSk7XG4gICAgY29uc3Qgc2VlZCA9IGdldF9zaGFyZWRfa2V5KHJlY19rZXksIHB1Yl9rZXkpO1xuICAgIGNvbnN0IG5vbmNlID0gZGlnZXN0KCdCSVAwMzQwL25vbmNlJywgc2VlZCwgbWVzc2FnZSk7XG4gICAgY29uc3QgY2hhbCA9IGRpZ2VzdCgnQklQMDM0MC9jaGFsbGVuZ2UnLCBzaWcuc2xpY2UoMCwgMzIpLCBjb252ZXJ0XzMyKHB1YiksIG1zZyk7XG4gICAgY29uc3QgYyA9IG5ldyBGaWVsZChjaGFsKTtcbiAgICBjb25zdCBrID0gbmV3IEZpZWxkKG5vbmNlKS5uZWdhdGVkO1xuICAgIGNvbnN0IHMgPSBuZXcgRmllbGQoc2lnLnNsaWNlKDMyLCA2NCkpO1xuICAgIHJldHVybiBzLnN1YihrKS5kaXYoYykuYnVmZjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5fbm9uY2UobWVzc2FnZSwgc2VjcmV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBhdXgsIG5vbmNlLCBub25jZV90d2Vha3MgPSBbXSwgcmVjb3ZlcnksIHhvbmx5IH0gPSBzaWduX2NvbmZpZyhvcHRpb25zKTtcbiAgICBsZXQgbjtcbiAgICBpZiAobm9uY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuID0gQnVmZi5ieXRlcyhub25jZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlY292ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbiA9IGdldF9zaGFyZWRfa2V5KHNlY3JldCwgcmVjb3ZlcnkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2VlZCA9IChhdXggPT09IG51bGwpID8gQnVmZi5udW0oMCwgMzIpIDogYXV4O1xuICAgICAgICBjb25zdCBhID0gZGlnZXN0KCdCSVAwMzQwL2F1eCcsIHNlZWQgPz8gQnVmZi5yYW5kb20oMzIpKTtcbiAgICAgICAgY29uc3QgdCA9IEJ1ZmYuYnl0ZXMoc2VjcmV0KS5iaWcgXiBhLmJpZztcbiAgICAgICAgbiA9IEJ1ZmYuam9pbihbdCwgZ2V0X3B1YmtleShzZWNyZXQsIHhvbmx5KV0pO1xuICAgIH1cbiAgICBsZXQgc24gPSBGaWVsZC5tb2QoZGlnZXN0KCdCSVAwMzQwL25vbmNlJywgbiwgQnVmZi5ieXRlcyhtZXNzYWdlKSkpO1xuICAgIG5vbmNlX3R3ZWFrcy5mb3JFYWNoKGUgPT4geyBzbiA9IHNuLmFkZChlKS5uZWdhdGVkOyB9KTtcbiAgICByZXR1cm4gc24uYnVmZjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/sig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvdHlwZXMuanMiLCJtYXBwaW5ncyI6IjtBQUFVO0FBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdXRpbHMvZGlzdC90eXBlcy5qcz9jOTQ3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/crypto-utils/dist/util.js":
/*!*********************************************************!*\
  !*** ./node_modules/@cmdcode/crypto-utils/dist/util.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   increment_buffer: () => (/* binding */ increment_buffer),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cmdcode/buff-utils */ \"(ssr)/./node_modules/@cmdcode/buff-utils/dist/module.mjs\");\n\nfunction random(size) {\n    return _cmdcode_buff_utils__WEBPACK_IMPORTED_MODULE_0__.Buff.random(size);\n}\nfunction increment_buffer(buffer) {\n    let i = buffer.length - 1;\n    for (i; i >= 0; i--) {\n        if (buffer[i] < 255) {\n            buffer.set([buffer[i] + 1], i);\n            return buffer;\n        }\n    }\n    throw TypeError('Unable to increment buffer: ' + buffer.toString());\n}\nfunction stringify(content) {\n    switch (typeof content) {\n        case 'object':\n            return JSON.stringify(content);\n        case 'string':\n            return content;\n        case 'bigint':\n            return content.toString();\n        case 'number':\n            return content.toString();\n        case 'boolean':\n            return String(content);\n        default:\n            throw new TypeError('Content type not supported: ' + typeof content);\n    }\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNtZGNvZGUvY3J5cHRvLXV0aWxzL2Rpc3QvdXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJDO0FBQ3BDO0FBQ1AsV0FBVyxxREFBSTtBQUNmO0FBQ087QUFDUDtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY21kY29kZS9jcnlwdG8tdXRpbHMvZGlzdC91dGlsLmpzP2NkMjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZiB9IGZyb20gJ0BjbWRjb2RlL2J1ZmYtdXRpbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShzaXplKSB7XG4gICAgcmV0dXJuIEJ1ZmYucmFuZG9tKHNpemUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudF9idWZmZXIoYnVmZmVyKSB7XG4gICAgbGV0IGkgPSBidWZmZXIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKGk7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChidWZmZXJbaV0gPCAyNTUpIHtcbiAgICAgICAgICAgIGJ1ZmZlci5zZXQoW2J1ZmZlcltpXSArIDFdLCBpKTtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgVHlwZUVycm9yKCdVbmFibGUgdG8gaW5jcmVtZW50IGJ1ZmZlcjogJyArIGJ1ZmZlci50b1N0cmluZygpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkoY29udGVudCkge1xuICAgIHN3aXRjaCAodHlwZW9mIGNvbnRlbnQpIHtcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShjb250ZW50KTtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICBjYXNlICdiaWdpbnQnOlxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhjb250ZW50KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnRlbnQgdHlwZSBub3Qgc3VwcG9ydGVkOiAnICsgdHlwZW9mIGNvbnRlbnQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/crypto-utils/dist/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cmdcode/tapscript/dist/module.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@cmdcode/tapscript/dist/module.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address),\n/* harmony export */   Input: () => (/* binding */ TxInput$1),\n/* harmony export */   Output: () => (/* binding */ TxOutput$1),\n/* harmony export */   Script: () => (/* binding */ Script),\n/* harmony export */   Sequence: () => (/* binding */ TxSequence),\n/* harmony export */   Signer: () => (/* binding */ Signer),\n/* harmony export */   Tap: () => (/* binding */ Tap),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   Tx: () => (/* binding */ Tx),\n/* harmony export */   Witness: () => (/* binding */ TxWitness)\n/* harmony export */ });\nfunction number$3(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool$3(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes$3(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash$4(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number$3(hash.outputLen);\n    number$3(hash.blockLen);\n}\nfunction exists$3(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output$3(out, instance) {\n    bytes$3(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert$1$2 = {\n    number: number$3,\n    bool: bool$3,\n    bytes: bytes$3,\n    hash: hash$4,\n    exists: exists$3,\n    output: output$3,\n};\nvar assert$2$1 = assert$1$2;\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Cast array to view\nconst createView$3 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr$3 = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE$3 = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE$3)\n    throw new Error('Non little-endian hardware is not supported');\nArray.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction utf8ToBytes$4(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nfunction toBytes$5(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes$4(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n// For runtime check if class implements interface\nlet Hash$3 = class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n};\nfunction wrapConstructor$3(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes$5(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\n\n// Polyfill for Safari 14\nfunction setBigUint64$3(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nlet SHA2$3 = class SHA2 extends Hash$3 {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView$3(this.buffer);\n    }\n    update(data) {\n        assert$2$1.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes$5(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView$3(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert$2$1.exists(this);\n        assert$2$1.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64$3(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView$3(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n};\n\n// Choice: a ? b : c\nconst Chi$3 = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj$3 = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K$3 = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV$3 = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W$3 = new Uint32Array(64);\nlet SHA256$3 = class SHA256 extends SHA2$3 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV$3[0] | 0;\n        this.B = IV$3[1] | 0;\n        this.C = IV$3[2] | 0;\n        this.D = IV$3[3] | 0;\n        this.E = IV$3[4] | 0;\n        this.F = IV$3[5] | 0;\n        this.G = IV$3[6] | 0;\n        this.H = IV$3[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W$3[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W$3[i - 15];\n            const W2 = SHA256_W$3[i - 2];\n            const s0 = rotr$3(W15, 7) ^ rotr$3(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr$3(W2, 17) ^ rotr$3(W2, 19) ^ (W2 >>> 10);\n            SHA256_W$3[i] = (s1 + SHA256_W$3[i - 7] + s0 + SHA256_W$3[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr$3(E, 6) ^ rotr$3(E, 11) ^ rotr$3(E, 25);\n            const T1 = (H + sigma1 + Chi$3(E, F, G) + SHA256_K$3[i] + SHA256_W$3[i]) | 0;\n            const sigma0 = rotr$3(A, 2) ^ rotr$3(A, 13) ^ rotr$3(A, 22);\n            const T2 = (sigma0 + Maj$3(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W$3.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n};\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nlet SHA224$3 = class SHA224 extends SHA256$3 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n};\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256$4 = wrapConstructor$3(() => new SHA256$3());\nwrapConstructor$3(() => new SHA224$3());\n\nfunction within_size$1(data, size) {\n    if (data.length > size) {\n        throw new TypeError(`Data is larger than array size: ${data.length} > ${size}`);\n    }\n}\nfunction is_hex$1(hex) {\n    if (hex.match(/[^a-fA-f0-9]/) !== null) {\n        throw new TypeError('Invalid characters in hex string: ' + hex);\n    }\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Length of hex string is invalid: ${hex.length}`);\n    }\n}\nfunction is_safe_num$1(num) {\n    if (num > Number.MAX_SAFE_INTEGER) {\n        throw new TypeError('Number exceeds safe bounds!');\n    }\n}\n\nconst { getRandomValues: getRandomValues$1 } = crypto ?? globalThis.crypto ?? window.crypto;\nfunction random$2(size = 32) {\n    if (typeof getRandomValues$1 === 'function') {\n        return crypto.getRandomValues(new Uint8Array(size));\n    }\n    throw new Error('Crypto module missing getRandomValues!');\n}\nfunction set_buffer$1(data, size, endian = 'be') {\n    if (size === undefined)\n        size = data.length;\n    within_size$1(data, size);\n    const buffer = new Uint8Array(size).fill(0);\n    const offset = (endian === 'be') ? 0 : size - data.length;\n    buffer.set(data, offset);\n    return buffer;\n}\nfunction join_array$1(arr) {\n    let i, offset = 0;\n    const size = arr.reduce((len, arr) => len + arr.length, 0);\n    const buff = new Uint8Array(size);\n    for (i = 0; i < arr.length; i++) {\n        const a = arr[i];\n        buff.set(a, offset);\n        offset += a.length;\n    }\n    return buff;\n}\n\nconst ec$2$1 = new TextEncoder();\nconst ALPHABETS$1 = [\n    {\n        name: 'base58',\n        charset: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n    }\n];\nfunction getAlphabet$1(name) {\n    for (const alpha of ALPHABETS$1) {\n        if (alpha.name === name) {\n            return alpha.charset;\n        }\n    }\n    throw TypeError('Charset does not exist: ' + name);\n}\nfunction encode$1$2(data, charset, padding = false) {\n    if (typeof data === 'string')\n        data = ec$2$1.encode(data);\n    const alphabet = getAlphabet$1(charset);\n    const len = alphabet.length;\n    const d = [];\n    let s = '', i, j = 0, c, n;\n    for (i = 0; i < data.length; i++) {\n        j = 0;\n        c = data[i];\n        s += (c > 0 || (s.length ^ i) > 0) ? '' : '1';\n        while (j in d || c > 0) {\n            n = d[j];\n            n = n > 0 ? n * 256 + c : c;\n            c = n / len | 0;\n            d[j] = n % len;\n            j++;\n        }\n    }\n    while (j-- > 0) {\n        s += alphabet[d[j]];\n    }\n    return (padding && s.length % 4 > 0)\n        ? s + '='.repeat(4 - s.length % 4)\n        : s;\n}\nfunction decode$1$2(encoded, charset) {\n    const alphabet = getAlphabet$1(charset);\n    const len = alphabet.length, d = [], b = [];\n    encoded = encoded.replace('=', '');\n    let i, j = 0, c, n;\n    for (i = 0; i < encoded.length; i++) {\n        j = 0;\n        c = alphabet.indexOf(encoded[i]);\n        if (c < 0) {\n            throw new Error(`Character range out of bounds: ${c}`);\n        }\n        if (!(c > 0 || (b.length ^ i) > 0))\n            b.push(0);\n        while (j in d || c > 0) {\n            n = d[j];\n            n = n > 0 ? n * len + c : c;\n            c = n >> 8;\n            d[j] = n % 256;\n            j++;\n        }\n    }\n    while (j-- > 0) {\n        b.push(d[j]);\n    }\n    return new Uint8Array(b);\n}\nfunction hash256$2(data) {\n    return sha256$4(sha256$4(data));\n}\nfunction addChecksum$1(data) {\n    const sum = hash256$2(data);\n    return join_array$1([data, sum.slice(0, 4)]);\n}\nfunction checkTheSum$1(data) {\n    const ret = data.slice(0, -4);\n    const chk = data.slice(-4);\n    const sum = hash256$2(ret).slice(0, 4);\n    if (sum.toString() !== chk.toString()) {\n        throw new Error('Invalid checksum!');\n    }\n    return ret;\n}\nconst BaseX$1 = {\n    encode: encode$1$2,\n    decode: decode$1$2\n};\nconst Base58C$1 = {\n    encode: (data) => {\n        const withSum = addChecksum$1(data);\n        return BaseX$1.encode(withSum, 'base58');\n    },\n    decode: (data) => {\n        const decoded = BaseX$1.decode(data, 'base58');\n        return checkTheSum$1(decoded);\n    }\n};\n\nconst CHARSET$1 = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nconst GENERATOR$1 = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nconst ENCODINGS$1 = [\n    { version: 0, name: 'bech32', const: 1 },\n    { version: 1, name: 'bech32m', const: 0x2bc830a3 }\n];\nfunction polymod$1(values) {\n    let chk = 1;\n    for (let p = 0; p < values.length; ++p) {\n        const top = chk >> 25;\n        chk = (chk & 0x1ffffff) << 5 ^ values[p];\n        for (let i = 0; i < 5; ++i) {\n            if (((top >> i) & 1) !== 0) {\n                chk ^= GENERATOR$1[i];\n            }\n        }\n    }\n    return chk;\n}\nfunction hrpExpand$1(hrp) {\n    const ret = [];\n    let p;\n    for (p = 0; p < hrp.length; ++p) {\n        ret.push(hrp.charCodeAt(p) >> 5);\n    }\n    ret.push(0);\n    for (p = 0; p < hrp.length; ++p) {\n        ret.push(hrp.charCodeAt(p) & 31);\n    }\n    return ret;\n}\nfunction verifyChecksum$1(hrp, data, enc) {\n    const combined = hrpExpand$1(hrp).concat(data);\n    return polymod$1(combined) === enc.const;\n}\nfunction createChecksum$1(hrp, data, enc) {\n    const values = hrpExpand$1(hrp).concat(data).concat([0, 0, 0, 0, 0, 0]);\n    const mod = polymod$1(values) ^ enc.const;\n    const ret = [];\n    for (let p = 0; p < 6; ++p) {\n        ret.push((mod >> 5 * (5 - p)) & 31);\n    }\n    return ret;\n}\nfunction convertBits$1(data, fromBits, toBits, pad = true) {\n    const ret = [];\n    let acc = 0;\n    let bits = 0;\n    const maxVal = (1 << toBits) - 1;\n    const maxAcc = (1 << (fromBits + toBits - 1)) - 1;\n    for (const val of data) {\n        if (val < 0 || (val >> fromBits) > 0) {\n            throw new Error('Failed to perform base conversion. Invalid value: ' + String(val));\n        }\n        acc = ((acc << fromBits) | val) & maxAcc;\n        bits += fromBits;\n        while (bits >= toBits) {\n            bits -= toBits;\n            ret.push((acc >> bits) & maxVal);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            ret.push((acc << (toBits - bits)) & maxVal);\n        }\n    }\n    else if (bits >= fromBits || ((acc << (toBits - bits)) & maxVal) > 0) {\n        throw new Error('Failed to perform base conversion. Invalid Size!');\n    }\n    return ret;\n}\nfunction encode$6(hrp, data, enc) {\n    const combined = data.concat(createChecksum$1(hrp, data, enc));\n    let ret = hrp + '1';\n    for (let p = 0; p < combined.length; ++p) {\n        ret += CHARSET$1.charAt(combined[p]);\n    }\n    return ret;\n}\nfunction decode$6(bechstr) {\n    if (!checkBounds$1(bechstr)) {\n        throw new Error('Encoded string goes out of bounds!');\n    }\n    bechstr = bechstr.toLowerCase();\n    if (!checkSeparatorPos$1(bechstr)) {\n        throw new Error('Encoded string has invalid separator!');\n    }\n    const data = [];\n    const pos = bechstr.lastIndexOf('1');\n    const hrp = bechstr.substring(0, pos);\n    for (let p = pos + 1; p < bechstr.length; ++p) {\n        const d = CHARSET$1.indexOf(bechstr.charAt(p));\n        if (d === -1) {\n            throw new Error('Character idx out of bounds: ' + String(p));\n        }\n        data.push(d);\n    }\n    const enc = ENCODINGS$1.find(e => e.version === data[0]) ?? ENCODINGS$1[0];\n    if (!verifyChecksum$1(hrp, data, enc)) {\n        throw new Error('Checksum verification failed!');\n    }\n    return [hrp, data.slice(0, data.length - 6)];\n}\nfunction checkBounds$1(bechstr) {\n    let p;\n    let char;\n    let hasLower = false;\n    let hasUpper = false;\n    for (p = 0; p < bechstr.length; ++p) {\n        char = bechstr.charCodeAt(p);\n        if (char < 33 || char > 126) {\n            return false;\n        }\n        if (char >= 97 && char <= 122) {\n            hasLower = true;\n        }\n        if (char >= 65 && char <= 90) {\n            hasUpper = true;\n        }\n    }\n    if (hasLower && hasUpper)\n        return false;\n    return true;\n}\nfunction checkSeparatorPos$1(bechstr) {\n    const pos = bechstr.lastIndexOf('1');\n    return !(pos < 1 ||\n        pos + 7 > bechstr.length ||\n        bechstr.length > 90);\n}\nfunction b32encode$1(data, hrp = 'bc', version = 0) {\n    const dat = [version, ...convertBits$1([...data], 8, 5)];\n    const enc = ENCODINGS$1.find(e => e.version === version) ?? ENCODINGS$1[0];\n    const str = encode$6(hrp, dat, enc);\n    b32decode$1(str);\n    return str;\n}\nfunction b32decode$1(str) {\n    str = str.toLowerCase();\n    const hrp = str.split('1', 1)[0];\n    const [hrpgot, data] = decode$6(str);\n    const decoded = convertBits$1(data.slice(1), 5, 8, false);\n    const length = decoded.length;\n    switch (true) {\n        case (hrp !== hrpgot):\n            throw new Error('Returned hrp string is invalid.');\n        case (decoded === null || length < 2 || length > 40):\n            throw new Error('Decoded string is invalid or out of spec.');\n        case (data[0] > 16):\n            throw new Error('Returned version bit is out of range.');\n        default:\n            return Uint8Array.from(decoded);\n    }\n}\nfunction getVersion$2(str) {\n    str = str.toLowerCase();\n    const [_, data] = decode$6(str);\n    return data[0];\n}\nconst Bech32$1 = {\n    encode: b32encode$1,\n    decode: b32decode$1,\n    version: getVersion$2\n};\n\nconst BASE64_MAP$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst B64URL_MAP$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nconst ec$1$1 = new TextEncoder();\nfunction b64encode$1(input, urlSafe = false, padding = true) {\n    if (typeof input === 'string')\n        input = ec$1$1.encode(input);\n    const map = urlSafe ? B64URL_MAP$1 : BASE64_MAP$1;\n    let output = '';\n    let bits = 0;\n    let buffer = 0;\n    for (let i = 0; i < input.length; i++) {\n        buffer = (buffer << 8) | input[i];\n        bits += 8;\n        while (bits >= 6) {\n            bits -= 6;\n            output += map[(buffer >> bits) & 0x3f];\n        }\n    }\n    if (bits > 0) {\n        buffer <<= 6 - bits;\n        output += map[buffer & 0x3f];\n        while (bits < 6) {\n            output += padding ? '=' : '';\n            bits += 2;\n        }\n    }\n    return output;\n}\nfunction b64decode$1(input, urlSafe = false) {\n    const map = (urlSafe || input.includes('-') || input.includes('_'))\n        ? B64URL_MAP$1.split('')\n        : BASE64_MAP$1.split('');\n    input = input.replace(/=+$/, '');\n    const chars = input.split('');\n    let bits = 0;\n    let value = 0;\n    const bytes = [];\n    for (let i = 0; i < chars.length; i++) {\n        const c = chars[i];\n        const index = map.indexOf(c);\n        if (index === -1) {\n            throw new Error('Invalid character: ' + c);\n        }\n        bits += 6;\n        value <<= 6;\n        value |= index;\n        if (bits >= 8) {\n            bits -= 8;\n            bytes.push((value >>> bits) & 0xff);\n        }\n    }\n    return new Uint8Array(bytes);\n}\nconst Base64$1 = {\n    encode: b64encode$1,\n    decode: b64decode$1\n};\nconst B64URL$1 = {\n    encode: (data) => b64encode$1(data, true, false),\n    decode: (data) => b64decode$1(data, true)\n};\n\nconst _0n = BigInt(0);\nconst _255n$1 = BigInt(255);\nconst _256n$1 = BigInt(256);\nfunction big_size$1(big) {\n    if (big <= 0xffn)\n        return 1;\n    if (big <= 0xffffn)\n        return 2;\n    if (big <= 0xffffffffn)\n        return 4;\n    if (big <= 0xffffffffffffffffn)\n        return 8;\n    if (big <= 0xffffffffffffffffffffffffffffffffn)\n        return 16;\n    if (big <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn) {\n        return 32;\n    }\n    throw new TypeError('Must specify a fixed buffer size for bigints greater than 32 bytes.');\n}\nfunction bigToBytes$1(big, size, endian = 'be') {\n    if (size === undefined)\n        size = big_size$1(big);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (big > _0n) {\n        const byte = big & _255n$1;\n        const num = Number(byte);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        big = (big - byte) / _256n$1;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToBig$1(bytes) {\n    let num = BigInt(0);\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * _256n$1) + BigInt(bytes[i]);\n    }\n    return BigInt(num);\n}\n\nfunction binToBytes$1(binary) {\n    const bins = binary.split('').map(Number);\n    if (bins.length % 8 !== 0) {\n        throw new Error(`Binary array is invalid length: ${binary.length}`);\n    }\n    const bytes = new Uint8Array(bins.length / 8);\n    for (let i = 0, ct = 0; i < bins.length; i += 8, ct++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j++) {\n            byte |= (bins[i + j] << (7 - j));\n        }\n        bytes[ct] = byte;\n    }\n    return bytes;\n}\nfunction bytesToBin$1(bytes) {\n    const bin = new Array(bytes.length * 8);\n    let count = 0;\n    for (const num of bytes) {\n        if (num > 255) {\n            throw new Error(`Invalid byte value: ${num}. Byte values must be between 0 and 255.`);\n        }\n        for (let i = 7; i >= 0; i--, count++) {\n            bin[count] = (num >> i) & 1;\n        }\n    }\n    return bin.join('');\n}\n\nfunction num_size$1(num) {\n    if (num <= 0xFF)\n        return 1;\n    if (num <= 0xFFFF)\n        return 2;\n    if (num <= 0xFFFFFFFF)\n        return 4;\n    throw new TypeError('Numbers larger than 4 bytes must specify a fixed size!');\n}\nfunction numToBytes$1(num, size, endian = 'be') {\n    if (size === undefined)\n        size = num_size$1(num);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (num > 0) {\n        const byte = num & 255;\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        num = (num - byte) / 256;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToNum$1(bytes) {\n    let num = 0;\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * 256) + bytes[i];\n        is_safe_num$1(num);\n    }\n    return num;\n}\n\nconst ec$3 = new TextEncoder();\nconst dc$1 = new TextDecoder();\nfunction strToBytes$1(str) {\n    return ec$3.encode(str);\n}\nfunction bytesToStr$1(bytes) {\n    return dc$1.decode(bytes);\n}\nfunction hex_size$1(hexstr, size) {\n    is_hex$1(hexstr);\n    const len = hexstr.length / 2;\n    if (size === undefined)\n        size = len;\n    if (len > size) {\n        throw new TypeError(`Hex string is larger than array size: ${len} > ${size}`);\n    }\n    return size;\n}\nfunction hexToBytes$2(hexstr, size, endian = 'le') {\n    size = hex_size$1(hexstr, size);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    for (let i = 0; i < hexstr.length; i += 2) {\n        const char = hexstr.substring(i, i + 2);\n        const num = parseInt(char, 16);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToHex$2(bytes) {\n    let chars = '';\n    for (let i = 0; i < bytes.length; i++) {\n        chars += bytes[i].toString(16).padStart(2, '0');\n    }\n    return chars;\n}\nfunction jsonToBytes$1(obj) {\n    const str = JSON.stringify(obj, (_, v) => {\n        return typeof v === 'bigint'\n            ? `${v}n`\n            : v;\n    });\n    return strToBytes$1(str);\n}\n\nfunction buffer$1(data, size, endian) {\n    if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    if (data instanceof Uint8Array) {\n        return set_buffer$1(data, size, endian);\n    }\n    if (typeof data === 'string') {\n        return hexToBytes$2(data, size, endian);\n    }\n    if (typeof data === 'bigint') {\n        return bigToBytes$1(data, size, endian);\n    }\n    if (typeof data === 'number') {\n        return numToBytes$1(data, size, endian);\n    }\n    if (typeof data === 'boolean') {\n        return Uint8Array.of(data ? 1 : 0);\n    }\n    throw TypeError('Unsupported format:' + String(typeof data));\n}\n\nlet Buff$1 = class Buff extends Uint8Array {\n    static { this.num = numToBuff$1; }\n    static { this.big = bigToBuff$1; }\n    static { this.bin = binToBuff$1; }\n    static { this.raw = rawToBuff$1; }\n    static { this.str = strToBuff$1; }\n    static { this.hex = hexToBuff$1; }\n    static { this.bytes = bytesToBuff$1; }\n    static { this.json = jsonToBuff$1; }\n    static { this.base64 = base64ToBuff$1; }\n    static { this.b64url = b64urlToBuff$1; }\n    static { this.bech32 = bech32ToBuff$1; }\n    static { this.b58chk = b58chkToBuff$1; }\n    static { this.encode = strToBytes$1; }\n    static { this.decode = bytesToStr$1; }\n    static random(size = 32) {\n        const rand = random$2(size);\n        return new Buff(rand, size);\n    }\n    constructor(data, size, endian) {\n        const buffer$1$1 = buffer$1(data, size, endian);\n        super(buffer$1$1);\n    }\n    get arr() {\n        return [...this];\n    }\n    get num() {\n        return this.toNum();\n    }\n    get big() {\n        return this.toBig();\n    }\n    get str() {\n        return this.toStr();\n    }\n    get hex() {\n        return this.toHex();\n    }\n    get raw() {\n        return new Uint8Array(this);\n    }\n    get bin() {\n        return this.toBin();\n    }\n    get b58chk() {\n        return this.tob58chk();\n    }\n    get base64() {\n        return this.toBase64();\n    }\n    get b64url() {\n        return this.toB64url();\n    }\n    get digest() {\n        return this.toHash();\n    }\n    get id() {\n        return this.toHash().hex;\n    }\n    get stream() {\n        return new Stream$1(this);\n    }\n    toNum(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return bytesToNum$1(bytes);\n    }\n    toBin() {\n        return bytesToBin$1(this);\n    }\n    toBig(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return bytesToBig$1(bytes);\n    }\n    toHash() {\n        const digest = sha256$4(this);\n        return new Buff(digest);\n    }\n    toJson() {\n        const str = bytesToStr$1(this);\n        return JSON.parse(str);\n    }\n    toBech32(hrp, version = 0) {\n        return Bech32$1.encode(this, hrp, version);\n    }\n    toStr() { return bytesToStr$1(this); }\n    toHex() { return bytesToHex$2(this); }\n    toBytes() { return new Uint8Array(this); }\n    tob58chk() { return Base58C$1.encode(this); }\n    toBase64() { return Base64$1.encode(this); }\n    toB64url() { return B64URL$1.encode(this); }\n    prepend(data) {\n        return Buff.join([Buff.bytes(data), this]);\n    }\n    append(data) {\n        return Buff.join([this, Buff.bytes(data)]);\n    }\n    slice(start, end) {\n        const arr = new Uint8Array(this).slice(start, end);\n        return new Buff(arr);\n    }\n    subarray(begin, end) {\n        const arr = new Uint8Array(this).subarray(begin, end);\n        return new Buff(arr);\n    }\n    reverse() {\n        const arr = new Uint8Array(this).reverse();\n        return new Buff(arr);\n    }\n    write(bytes, offset) {\n        const b = Buff.bytes(bytes);\n        this.set(b, offset);\n    }\n    prefixSize(endian) {\n        const size = Buff.varInt(this.length, endian);\n        return Buff.join([size, this]);\n    }\n    static from(data) {\n        return new Buff(Uint8Array.from(data));\n    }\n    static of(...args) {\n        return new Buff(Uint8Array.of(...args));\n    }\n    static join(arr) {\n        const bytes = arr.map(e => Buff.bytes(e));\n        const joined = join_array$1(bytes);\n        return new Buff(joined);\n    }\n    static varInt(num, endian) {\n        if (num < 0xFD) {\n            return Buff.num(num, 1);\n        }\n        else if (num < 0x10000) {\n            return Buff.of(0xFD, ...Buff.num(num, 2, endian));\n        }\n        else if (num < 0x100000000) {\n            return Buff.of(0xFE, ...Buff.num(num, 4, endian));\n        }\n        else if (BigInt(num) < 0x10000000000000000n) {\n            return Buff.of(0xFF, ...Buff.num(num, 8, endian));\n        }\n        else {\n            throw new Error(`Value is too large: ${num}`);\n        }\n    }\n};\nfunction numToBuff$1(number, size, endian) {\n    return new Buff$1(number, size, endian);\n}\nfunction binToBuff$1(data, size, endian) {\n    return new Buff$1(binToBytes$1(data), size, endian);\n}\nfunction bigToBuff$1(bigint, size, endian) {\n    return new Buff$1(bigint, size, endian);\n}\nfunction rawToBuff$1(data, size, endian) {\n    return new Buff$1(data, size, endian);\n}\nfunction strToBuff$1(data, size, endian) {\n    return new Buff$1(strToBytes$1(data), size, endian);\n}\nfunction hexToBuff$1(data, size, endian) {\n    return new Buff$1(data, size, endian);\n}\nfunction bytesToBuff$1(data, size, endian) {\n    return new Buff$1(data, size, endian);\n}\nfunction jsonToBuff$1(data) {\n    return new Buff$1(jsonToBytes$1(data));\n}\nfunction base64ToBuff$1(data) {\n    return new Buff$1(Base64$1.decode(data));\n}\nfunction b64urlToBuff$1(data) {\n    return new Buff$1(B64URL$1.decode(data));\n}\nfunction bech32ToBuff$1(data) {\n    return new Buff$1(Bech32$1.decode(data));\n}\nfunction b58chkToBuff$1(data) {\n    return new Buff$1(Base58C$1.decode(data));\n}\nlet Stream$1 = class Stream {\n    constructor(data) {\n        this.data = Buff$1.bytes(data);\n        this.size = this.data.length;\n    }\n    peek(size) {\n        if (size > this.size) {\n            throw new Error(`Size greater than stream: ${size} > ${this.size}`);\n        }\n        return new Buff$1(this.data.slice(0, size));\n    }\n    read(size) {\n        size = size ?? this.readSize();\n        const chunk = this.peek(size);\n        this.data = this.data.slice(size);\n        this.size = this.data.length;\n        return chunk;\n    }\n    readSize(endian) {\n        const num = this.read(1).num;\n        switch (true) {\n            case (num >= 0 && num < 0xFD):\n                return num;\n            case (num === 0xFD):\n                return this.read(2).toNum(endian);\n            case (num === 0xFE):\n                return this.read(4).toNum(endian);\n            case (num === 0xFF):\n                return this.read(8).toNum(endian);\n            default:\n                throw new Error(`Varint is out of range: ${num}`);\n        }\n    }\n};\n\nfunction checkSize(input, size) {\n    const bytes = Buff$1.bytes(input);\n    if (bytes.length !== size) {\n        throw new Error(`Invalid input size: ${bytes.hex} !== ${size}`);\n    }\n}\nfunction safeThrow(errorMsg, shouldThrow) {\n    if (shouldThrow) {\n        throw new Error(errorMsg);\n    }\n    else {\n        return false;\n    }\n}\nfunction hashTag(tag, ...data) {\n    const htag = Buff$1.str(tag).digest.raw;\n    const buff = data.map(e => Buff$1.bytes(e));\n    return Buff$1.join([htag, htag, Buff$1.join(buff)]).digest;\n}\n\nconst OPCODE_MAP = {\n    OP_0: 0,\n    OP_PUSHDATA1: 76,\n    OP_PUSHDATA2: 77,\n    OP_PUSHDATA4: 78,\n    OP_1NEGATE: 79,\n    OP_SUCCESS80: 80,\n    OP_1: 81,\n    OP_2: 82,\n    OP_3: 83,\n    OP_4: 84,\n    OP_5: 85,\n    OP_6: 86,\n    OP_7: 87,\n    OP_8: 88,\n    OP_9: 89,\n    OP_10: 90,\n    OP_11: 91,\n    OP_12: 92,\n    OP_13: 93,\n    OP_14: 94,\n    OP_15: 95,\n    OP_16: 96,\n    OP_NOP: 97,\n    OP_SUCCESS98: 98,\n    OP_IF: 99,\n    OP_NOTIF: 100,\n    OP_ELSE: 103,\n    OP_ENDIF: 104,\n    OP_VERIFY: 105,\n    OP_RETURN: 106,\n    OP_TOALTSTACK: 107,\n    OP_FROMALTSTACK: 108,\n    OP_2DROP: 109,\n    OP_2DUP: 110,\n    OP_3DUP: 111,\n    OP_2OVER: 112,\n    OP_2ROT: 113,\n    OP_2SWAP: 114,\n    OP_IFDUP: 115,\n    OP_DEPTH: 116,\n    OP_DROP: 117,\n    OP_DUP: 118,\n    OP_NIP: 119,\n    OP_OVER: 120,\n    OP_PICK: 121,\n    OP_ROLL: 122,\n    OP_ROT: 123,\n    OP_SWAP: 124,\n    OP_TUCK: 125,\n    OP_SUCCESS126: 126,\n    OP_SUCCESS127: 127,\n    OP_SUCCESS128: 128,\n    OP_SUCCESS129: 129,\n    OP_SIZE: 130,\n    OP_SUCCESS131: 131,\n    OP_SUCCESS132: 132,\n    OP_SUCCESS133: 133,\n    OP_SUCCESS134: 134,\n    OP_EQUAL: 135,\n    OP_EQUALVERIFY: 136,\n    OP_SUCCESS137: 137,\n    OP_SUCCESS138: 138,\n    OP_1ADD: 139,\n    OP_1SUB: 140,\n    OP_SUCCESS141: 141,\n    OP_SUCCESS142: 142,\n    OP_NEGATE: 143,\n    OP_ABS: 144,\n    OP_NOT: 145,\n    OP_0NOTEQUAL: 146,\n    OP_ADD: 147,\n    OP_SUB: 148,\n    OP_SUCCESS149: 149,\n    OP_SUCCESS150: 150,\n    OP_SUCCESS151: 151,\n    OP_SUCCESS152: 152,\n    OP_SUCCESS153: 153,\n    OP_BOOLAND: 154,\n    OP_BOOLOR: 155,\n    OP_NUMEQUAL: 156,\n    OP_NUMEQUALVERIFY: 157,\n    OP_NUMNOTEQUAL: 158,\n    OP_LESSTHAN: 159,\n    OP_GREATERTHAN: 160,\n    OP_LESSTHANOREQUAL: 161,\n    OP_GREATERTHANOREQUAL: 162,\n    OP_MIN: 163,\n    OP_MAX: 164,\n    OP_WITHIN: 165,\n    OP_RIPEMD160: 166,\n    OP_SHA1: 167,\n    OP_SHA256: 168,\n    OP_HASH160: 169,\n    OP_HASH256: 170,\n    OP_CODESEPARATOR: 171,\n    OP_CHECKSIG: 172,\n    OP_CHECKSIGVERIFY: 173,\n    OP_CHECKMULTISIG: 174,\n    OP_CHECKMULTISIGVERIFY: 175,\n    OP_NOP1: 176,\n    OP_CHECKLOCKTIMEVERIFY: 177,\n    OP_CHECKSEQUENCEVERIFY: 178,\n    OP_NOP4: 179,\n    OP_NOP5: 180,\n    OP_NOP6: 181,\n    OP_NOP7: 182,\n    OP_NOP8: 183,\n    OP_NOP9: 184,\n    OP_NOP10: 185,\n    OP_CHECKSIGADD: 186,\n    OP_SUCCESS187: 187,\n    OP_SUCCESS188: 188,\n    OP_SUCCESS189: 189,\n    OP_SUCCESS190: 190,\n    OP_SUCCESS191: 191,\n    OP_SUCCESS192: 192,\n    OP_SUCCESS193: 193,\n    OP_SUCCESS194: 194,\n    OP_SUCCESS195: 195,\n    OP_SUCCESS196: 196,\n    OP_SUCCESS197: 197,\n    OP_SUCCESS198: 198,\n    OP_SUCCESS199: 199,\n    OP_SUCCESS200: 200,\n    OP_SUCCESS201: 201,\n    OP_SUCCESS202: 202,\n    OP_SUCCESS203: 203,\n    OP_SUCCESS204: 204,\n    OP_SUCCESS205: 205,\n    OP_SUCCESS206: 206,\n    OP_SUCCESS207: 207,\n    OP_SUCCESS208: 208,\n    OP_SUCCESS209: 209,\n    OP_SUCCESS210: 210,\n    OP_SUCCESS211: 211,\n    OP_SUCCESS212: 212,\n    OP_SUCCESS213: 213,\n    OP_SUCCESS214: 214,\n    OP_SUCCESS215: 215,\n    OP_SUCCESS216: 216,\n    OP_SUCCESS217: 217,\n    OP_SUCCESS218: 218,\n    OP_SUCCESS219: 219,\n    OP_SUCCESS220: 220,\n    OP_SUCCESS221: 221,\n    OP_SUCCESS222: 222,\n    OP_SUCCESS223: 223,\n    OP_SUCCESS224: 224,\n    OP_SUCCESS225: 225,\n    OP_SUCCESS226: 226,\n    OP_SUCCESS227: 227,\n    OP_SUCCESS228: 228,\n    OP_SUCCESS229: 229,\n    OP_SUCCESS230: 230,\n    OP_SUCCESS231: 231,\n    OP_SUCCESS232: 232,\n    OP_SUCCESS233: 233,\n    OP_SUCCESS234: 234,\n    OP_SUCCESS235: 235,\n    OP_SUCCESS236: 236,\n    OP_SUCCESS237: 237,\n    OP_SUCCESS238: 238,\n    OP_SUCCESS239: 239,\n    OP_SUCCESS240: 240,\n    OP_SUCCESS241: 241,\n    OP_SUCCESS242: 242,\n    OP_SUCCESS243: 243,\n    OP_SUCCESS244: 244,\n    OP_SUCCESS245: 245,\n    OP_SUCCESS246: 246,\n    OP_SUCCESS247: 247,\n    OP_SUCCESS248: 248,\n    OP_SUCCESS249: 249,\n    OP_SUCCESS250: 250,\n    OP_SUCCESS251: 251,\n    OP_SUCCESS252: 252,\n    OP_SUCCESS253: 253,\n    OP_SUCCESS254: 254\n};\nfunction getOpLabel(num) {\n    if (num > 186 && num < 255) {\n        return 'OP_SUCCESS' + String(num);\n    }\n    for (const [k, v] of Object.entries(OPCODE_MAP)) {\n        if (v === num)\n            return k;\n    }\n    throw new Error('OPCODE not found:' + String(num));\n}\nfunction getOpCode(string) {\n    for (const [k, v] of Object.entries(OPCODE_MAP)) {\n        if (k === string)\n            return Number(v);\n    }\n    throw new Error('OPCODE not found:' + string);\n}\nfunction getWordType(word) {\n    switch (true) {\n        case (word === 0):\n            return 'opcode';\n        case (word >= 1 && word <= 75):\n            return 'varint';\n        case (word === 76):\n            return 'pushdata1';\n        case (word === 77):\n            return 'pushdata2';\n        case (word === 78):\n            return 'pushdata4';\n        case (word <= 254):\n            return 'opcode';\n        default:\n            throw new Error(`Invalid word range: ${word}`);\n    }\n}\nfunction isValidWord(word) {\n    const MIN_RANGE = 75;\n    const MAX_RANGE = 254;\n    const DISABLED_OPCODES = [];\n    switch (true) {\n        case (typeof (word) !== 'number'):\n            return false;\n        case (word === 0):\n            return true;\n        case (DISABLED_OPCODES.includes(word)):\n            return false;\n        case (MIN_RANGE < word && word < MAX_RANGE):\n            return true;\n        default:\n            return false;\n    }\n}\n\nfunction isHex(value) {\n    return (typeof value === 'string' &&\n        value.length % 2 === 0 &&\n        /[0-9a-fA-F]/.test(value));\n}\nfunction isBytes$1(value) {\n    return (isHex(value) || value instanceof Uint8Array);\n}\n\nconst MAX_WORD_SIZE = 0x208;\nfunction encodeScript(script = [], varint = true) {\n    let buff = Buff$1.num(0);\n    if (Array.isArray(script)) {\n        buff = Buff$1.raw(encodeWords(script));\n    }\n    if (isHex(script)) {\n        buff = Buff$1.hex(script);\n    }\n    if (script instanceof Uint8Array) {\n        buff = Buff$1.raw(script);\n    }\n    if (varint) {\n        buff = buff.prefixSize('le');\n    }\n    return buff;\n}\nfunction encodeWords(wordArray) {\n    const words = [];\n    for (const word of wordArray) {\n        words.push(encodeWord(word));\n    }\n    return (words.length > 0)\n        ? Buff$1.join(words)\n        : new Uint8Array();\n}\nfunction encodeWord(word) {\n    let buff = new Uint8Array();\n    if (typeof (word) === 'string') {\n        if (word.startsWith('OP_')) {\n            return Buff$1.num(getOpCode(word), 1);\n        }\n        else if (isHex(word)) {\n            buff = Buff$1.hex(word);\n        }\n        else {\n            buff = Buff$1.str(word);\n        }\n    }\n    else {\n        buff = Buff$1.bytes(word);\n    }\n    if (buff.length === 1) {\n        if (buff[0] !== 0 && buff[0] <= 16) {\n            buff[0] += 0x50;\n            return buff;\n        }\n        else if (buff[0] > 128 && buff[0] <= 255) {\n            buff = new Uint8Array([buff[0], 0]);\n        }\n        return Buff$1.join([encodeSize(buff.length), buff]);\n    }\n    else if (buff.length > MAX_WORD_SIZE) {\n        const words = splitWord(buff);\n        return encodeWords(words);\n    }\n    else {\n        return Buff$1.join([encodeSize(buff.length), buff]);\n    }\n}\nfunction encodeSize(size) {\n    const OP_DATAPUSH1 = Buff$1.num(0x4c, 1);\n    const OP_DATAPUSH2 = Buff$1.num(0x4d, 1);\n    switch (true) {\n        case (size <= 0x4b):\n            return Buff$1.num(size);\n        case (size > 0x4b && size < 0x100):\n            return Buff$1.join([OP_DATAPUSH1, Buff$1.num(size, 1, 'le')]);\n        case (size >= 0x100 && size <= MAX_WORD_SIZE):\n            return Buff$1.join([OP_DATAPUSH2, Buff$1.num(size, 2, 'le')]);\n        default:\n            throw new Error('Invalid word size:' + size.toString());\n    }\n}\nfunction splitWord(word) {\n    const words = [];\n    const buff = new Stream$1(word);\n    while (buff.size > MAX_WORD_SIZE) {\n        words.push(buff.read(MAX_WORD_SIZE));\n    }\n    words.push(buff.read(buff.size));\n    return words;\n}\n\nfunction decodeScript(script, varint = false) {\n    let buff = Buff$1.bytes(script);\n    if (varint) {\n        const stream = buff.stream;\n        const len = stream.readSize('le');\n        buff = buff.slice(1);\n        if (buff.length !== len) {\n            throw new Error(`Varint does not match stream size: ${len} !== ${buff.length}`);\n        }\n    }\n    return decodeWords(buff);\n}\nfunction decodeWords(words) {\n    const stream = new Stream$1(words);\n    const stack = [];\n    const stackSize = stream.size;\n    let word;\n    let wordType;\n    let wordSize;\n    let count = 0;\n    while (count < stackSize) {\n        word = stream.read(1).num;\n        wordType = getWordType(word);\n        count++;\n        switch (wordType) {\n            case 'varint':\n                stack.push(stream.read(word).hex);\n                count += word;\n                break;\n            case 'pushdata1':\n                wordSize = stream.read(1).reverse().num;\n                stack.push(stream.read(wordSize).hex);\n                count += wordSize + 1;\n                break;\n            case 'pushdata2':\n                wordSize = stream.read(2).reverse().num;\n                stack.push(stream.read(wordSize).hex);\n                count += wordSize + 2;\n                break;\n            case 'pushdata4':\n                wordSize = stream.read(4).reverse().num;\n                stack.push(stream.read(wordSize).hex);\n                count += wordSize + 4;\n                break;\n            case 'opcode':\n                if (!isValidWord(word)) {\n                    throw new Error(`Invalid OPCODE: ${word}`);\n                }\n                stack.push(getOpLabel(word));\n                break;\n            default:\n                throw new Error(`Word type undefined: ${word}`);\n        }\n    }\n    return stack;\n}\n\nfunction toAsm(script, varint) {\n    if (Array.isArray(script)) {\n        script = encodeScript(script, varint);\n    }\n    if (script instanceof Uint8Array ||\n        isHex(script)) {\n        return decodeScript(script, varint);\n    }\n    throw new Error('Invalid format: ' + String(typeof script));\n}\nfunction toBytes$4(script, varint) {\n    if (script instanceof Uint8Array ||\n        isHex(script)) {\n        script = decodeScript(script, varint);\n    }\n    if (Array.isArray(script)) {\n        return encodeScript(script, varint);\n    }\n    throw new Error('Invalid format: ' + String(typeof script));\n}\nfunction toParam(script) {\n    if (!Array.isArray(script)) {\n        return Buff$1.bytes(script);\n    }\n    throw new Error('Invalid format: ' + String(typeof script));\n}\nconst FmtScript = {\n    toAsm,\n    toBytes: toBytes$4,\n    toParam\n};\n\nconst Script = {\n    encode: encodeScript,\n    decode: decodeScript,\n    fmt: FmtScript\n};\n\nfunction number$2(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool$2(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes$2(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash$3(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number$2(hash.outputLen);\n    number$2(hash.blockLen);\n}\nfunction exists$2(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output$2(out, instance) {\n    bytes$2(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert$3 = {\n    number: number$2,\n    bool: bool$2,\n    bytes: bytes$2,\n    hash: hash$3,\n    exists: exists$2,\n    output: output$2,\n};\nvar assert$4 = assert$3;\n\nconst crypto$1 = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use `globalThis.crypto`, but node.js versions earlier than v19 don't\n// declare it in global scope. For node.js, package.json#exports field mapping\n// rewrites import from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\n// Cast array to view\nconst createView$2 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr$2 = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE$2 = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE$2)\n    throw new Error('Non little-endian hardware is not supported');\nArray.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction utf8ToBytes$3(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nfunction toBytes$2(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes$3(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes$1(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nlet Hash$2 = class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n};\nfunction wrapConstructor$2(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes$2(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto$1 && typeof crypto$1.getRandomValues === 'function') {\n        return crypto$1.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n\n// Polyfill for Safari 14\nfunction setBigUint64$2(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nlet SHA2$2 = class SHA2 extends Hash$2 {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView$2(this.buffer);\n    }\n    update(data) {\n        assert$4.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes$2(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView$2(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert$4.exists(this);\n        assert$4.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64$2(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView$2(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n};\n\n// Choice: a ? b : c\nconst Chi$2 = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj$2 = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K$2 = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV$2 = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W$2 = new Uint32Array(64);\nlet SHA256$2 = class SHA256 extends SHA2$2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV$2[0] | 0;\n        this.B = IV$2[1] | 0;\n        this.C = IV$2[2] | 0;\n        this.D = IV$2[3] | 0;\n        this.E = IV$2[4] | 0;\n        this.F = IV$2[5] | 0;\n        this.G = IV$2[6] | 0;\n        this.H = IV$2[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W$2[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W$2[i - 15];\n            const W2 = SHA256_W$2[i - 2];\n            const s0 = rotr$2(W15, 7) ^ rotr$2(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr$2(W2, 17) ^ rotr$2(W2, 19) ^ (W2 >>> 10);\n            SHA256_W$2[i] = (s1 + SHA256_W$2[i - 7] + s0 + SHA256_W$2[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr$2(E, 6) ^ rotr$2(E, 11) ^ rotr$2(E, 25);\n            const T1 = (H + sigma1 + Chi$2(E, F, G) + SHA256_K$2[i] + SHA256_W$2[i]) | 0;\n            const sigma0 = rotr$2(A, 2) ^ rotr$2(A, 13) ^ rotr$2(A, 22);\n            const T2 = (sigma0 + Maj$2(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W$2.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n};\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nlet SHA224$2 = class SHA224 extends SHA256$2 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n};\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256$3 = wrapConstructor$2(() => new SHA256$2());\nwrapConstructor$2(() => new SHA224$2());\n\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst _0n$8 = BigInt(0);\nconst _1n$5 = BigInt(1);\nconst _2n$4 = BigInt(2);\nconst u8a$1 = (a) => a instanceof Uint8Array;\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex$1(bytes) {\n    if (!u8a$1(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// Caching slows it down 2-3x\nfunction hexToBytes$1(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    if (hex.length % 2)\n        throw new Error('hex string is invalid: unpadded ' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// Big Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex$1(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    if (!u8a$1(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex$1(Uint8Array.from(bytes).reverse()));\n}\nconst numberToBytesBE = (n, len) => hexToBytes$1(n.toString(16).padStart(len * 2, '0'));\nconst numberToBytesLE = (n, len) => numberToBytesBE(n, len).reverse();\n// Returns variable number bytes (minimal bigint encoding?)\nconst numberToVarBytesBE = (n) => hexToBytes$1(numberToHexUnpadded(n));\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes$1(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a$1(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n// Copies several Uint8Arrays into one.\nfunction concatBytes(...arrs) {\n    const r = new Uint8Array(arrs.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrs.forEach((a) => {\n        if (!u8a$1(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nfunction equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\nfunction utf8ToBytes$2(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\n// Bit operations\n// Amount of bits inside bigint (Same as n.toString(2).length)\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > 0n; n >>= _1n$5, len += 1)\n        ;\n    return len;\n}\n// Gets single bit at position. NOTE: first bit position is 0 (same as arrays)\n// Same as !!+Array.from(n.toString(2)).reverse()[pos]\nconst bitGet = (n, pos) => (n >> BigInt(pos)) & 1n;\n// Sets single bit at position\nconst bitSet = (n, pos, value) => n | ((value ? _1n$5 : _0n$8) << BigInt(pos));\n// Return mask for N bits (Same as BigInt(`0b${Array(i).fill('1').join('')}`))\n// Not using ** operator with bigints for old engines.\nconst bitMask = (n) => (_2n$4 << BigInt(n - 1)) - _1n$5;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\nvar ut = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    bitGet: bitGet,\n    bitLen: bitLen,\n    bitMask: bitMask,\n    bitSet: bitSet,\n    bytesToHex: bytesToHex$1,\n    bytesToNumberBE: bytesToNumberBE,\n    bytesToNumberLE: bytesToNumberLE,\n    concatBytes: concatBytes,\n    createHmacDrbg: createHmacDrbg,\n    ensureBytes: ensureBytes,\n    equalBytes: equalBytes,\n    hexToBytes: hexToBytes$1,\n    hexToNumber: hexToNumber,\n    numberToBytesBE: numberToBytesBE,\n    numberToBytesLE: numberToBytesLE,\n    numberToHexUnpadded: numberToHexUnpadded,\n    numberToVarBytesBE: numberToVarBytesBE,\n    utf8ToBytes: utf8ToBytes$2,\n    validateObject: validateObject\n});\n\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\n// prettier-ignore\nconst _0n$7 = BigInt(0), _1n$4 = BigInt(1), _2n$3 = BigInt(2), _3n$2 = BigInt(3);\n// prettier-ignore\nconst _4n$2 = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nBigInt(9); BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n$7 ? result : b + result;\n}\n/**\n * Efficiently exponentiate num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * powMod(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n$7 || power < _0n$7)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n$4)\n        return _0n$7;\n    let res = _1n$4;\n    while (power > _0n$7) {\n        if (power & _1n$4)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n$4;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n$7) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n$7 || modulo <= _0n$7) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Eucledian GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n$7, u = _1n$4;\n    while (a !== _0n$7) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        // prettier-ignore\n        b = a, a = r, x = u, u = m;\n    }\n    const gcd = b;\n    if (gcd !== _1n$4)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n$4) / _2n$3;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n$4, S = 0; Q % _2n$3 === _0n$7; Q /= _2n$3, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n$3; Z < P && pow(Z, legendreC, P) !== P - _1n$4; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n$4) / _4n$2;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n$4) / _2n$3;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n$4 << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n$2 === _3n$2) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n$4) / _4n$2;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n$3);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n$3), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n$7)\n        throw new Error('Expected power > 0');\n    if (power === _0n$7)\n        return f.ONE;\n    if (power === _1n$4)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n$7) {\n        if (power & _1n$4)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n$4;\n    }\n    return p;\n}\n// 0 is non-invertible: non-batched version will throw on 0\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field$1(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n$7)\n        throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n$7,\n        ONE: _1n$4,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n$7 <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n$7,\n        isOdd: (num) => (num & _1n$4) === _1n$4,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being neglible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @returns valid private scalar\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n$4) + _1n$4;\n}\n\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nconst _0n$6 = BigInt(0);\nconst _1n$3 = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n$6) {\n                if (n & _1n$3)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n$3;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n$3;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nfunction validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        if (res[0] === 0x00 && res[1] <= 0x7f)\n            throw new E('Invalid signature integer: trailing length');\n        // ^ Weird condition: not about length, but about first bytes of number.\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        const slice = (s) => (Number.parseInt(s[0], 16) >= 8 ? '00' + s : s); // slice DER\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n$5 = BigInt(0), _1n$2 = BigInt(1), _2n$2 = BigInt(2), _3n$1 = BigInt(3), _4n$1 = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((c, point, isCompressed) => {\n            const a = point.toAffine();\n            return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n$5 < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = bytesToHex$1(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            // Zero is valid point too!\n            if (this.is0()) {\n                if (CURVE.allowInfinityPoint)\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n$1);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n$1);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n$5)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n$2)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n$5 || k2 > _0n$5) {\n                if (k1 & _1n$2)\n                    k1p = k1p.add(d);\n                if (k2 & _1n$2)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n$2;\n                k2 >>= _1n$2;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n$5 || a === _1n$2 || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n$2)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n$2)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return bytesToHex$1(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n$5 < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n$2) === _1n$2;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => bytesToHex$1(numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n$2;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return hexToBytes$1(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return hexToBytes$1(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size (nBitLength+64)\n         * as per FIPS 186 B.4.1 with modulo bias being neglible.\n         */\n        randomPrivateKey: () => {\n            const rand = CURVE.randomBytes(Fp.BYTES + 8);\n            const num = hashToPrivateScalar(rand, CURVE_ORDER);\n            return numberToBytesBE(num, CURVE.nByteLength);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n$5 <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n        }\n        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n$5)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n$5)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n$2); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash (not message: you need to hash it by yourself).\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param opts `lowS, extraEntropy, prehash`\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const drbg = createHmacDrbg(CURVE.hash.outputLen, CURVE.nByteLength, CURVE.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n// Implementation of the Shallue and van de Woestijne method for any Weierstrass curve\n// TODO: check if there is a way to merge this with uvRatio in Edwards && move to modular?\n// b = True and y = sqrt(u / v) if (u / v) is square in F, and\n// b = False and y = sqrt(Z * (u / v)) otherwise.\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n$5;\n    for (let o = q - _1n$2; o % _2n$2 === _0n$5; o /= _2n$2)\n        l += _1n$2;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    const c2 = (q - _1n$2) / _2n$2 ** c1; // 2. c2 = (q - 1) / (2^c1)        # Integer arithmetic\n    const c3 = (c2 - _1n$2) / _2n$2; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n$2 ** c1 - _1n$2; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n$2 ** (c1 - _1n$2); // 5. c5 = 2^(c1 - 1)              # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n$2) / _2n$2); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > 1; i--) {\n            let tv5 = _2n$2 ** (i - _2n$2); // 18.    tv5 = i - 2;    19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n$1 === _3n$1) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n$1) / _4n$1; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n// From draft-irtf-cfrg-hash-to-curve-16\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n\nfunction validateDST(dst) {\n    if (dst instanceof Uint8Array)\n        return dst;\n    if (typeof dst === 'string')\n        return utf8ToBytes$2(dst);\n    throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction isBytes(item) {\n    if (!(item instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes$2('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes$2('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'string',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    isBytes(msg);\n    isNum(count);\n    const DST = validateDST(_DST);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === undefined) {\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\", \"xof\" or undefined');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve\n        // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n\n// HMAC (RFC 2104)\nlet HMAC$1 = class HMAC extends Hash$2 {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert$4.hash(hash);\n        const key = toBytes$2(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert$4.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert$4.exists(this);\n        assert$4.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n};\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac$2 = (hash, key, message) => new HMAC$1(hash, key).update(message).digest();\nhmac$2.create = (hash, key) => new HMAC$1(hash, key);\n\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac$2(hash, key, concatBytes$1(...msgs)),\n        randomBytes,\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n$1 = BigInt(1);\nconst _2n$1 = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n$1) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n$1, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n$1, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field$1(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nconst secp256k1 = createCurve({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n$1 * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256$3);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n$4 = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n$4 < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n$4 < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256$3(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256$3(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP$1 = (x) => mod(x, secp256k1P);\nconst modN$1 = (x) => mod(x, secp256k1N);\nconst Point$2 = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point$2.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point$2.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN$1(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP$1(x * x);\n    const c = modP$1(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n$1 !== _0n$4)\n        y = modP$1(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point$2(x, y, _1n$1); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN$1(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN$1(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n$4)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN$1(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN$1(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nconst schnorr = {\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n};\nconst isoMap = isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j))));\nconst mapSWU = mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n});\ncreateHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256$3,\n});\n\nfunction number$1(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool$1(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes$1(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash$2(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number$1(hash.outputLen);\n    number$1(hash.blockLen);\n}\nfunction exists$1(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output$1(out, instance) {\n    bytes$1(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert$1$1 = {\n    number: number$1,\n    bool: bool$1,\n    bytes: bytes$1,\n    hash: hash$2,\n    exists: exists$1,\n    output: output$1,\n};\nvar assert$2 = assert$1$1;\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Cast array to view\nconst createView$1 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr$1 = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE$1 = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE$1)\n    throw new Error('Non little-endian hardware is not supported');\nArray.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction utf8ToBytes$1(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nfunction toBytes$1(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes$1(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n// For runtime check if class implements interface\nlet Hash$1 = class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n};\nfunction wrapConstructor$1(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes$1(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\n\n// Polyfill for Safari 14\nfunction setBigUint64$1(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nlet SHA2$1 = class SHA2 extends Hash$1 {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView$1(this.buffer);\n    }\n    update(data) {\n        assert$2.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes$1(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView$1(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert$2.exists(this);\n        assert$2.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64$1(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView$1(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n};\n\n// Choice: a ? b : c\nconst Chi$1 = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj$1 = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K$1 = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV$1 = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W$1 = new Uint32Array(64);\nlet SHA256$1 = class SHA256 extends SHA2$1 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV$1[0] | 0;\n        this.B = IV$1[1] | 0;\n        this.C = IV$1[2] | 0;\n        this.D = IV$1[3] | 0;\n        this.E = IV$1[4] | 0;\n        this.F = IV$1[5] | 0;\n        this.G = IV$1[6] | 0;\n        this.H = IV$1[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W$1[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W$1[i - 15];\n            const W2 = SHA256_W$1[i - 2];\n            const s0 = rotr$1(W15, 7) ^ rotr$1(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr$1(W2, 17) ^ rotr$1(W2, 19) ^ (W2 >>> 10);\n            SHA256_W$1[i] = (s1 + SHA256_W$1[i - 7] + s0 + SHA256_W$1[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr$1(E, 6) ^ rotr$1(E, 11) ^ rotr$1(E, 25);\n            const T1 = (H + sigma1 + Chi$1(E, F, G) + SHA256_K$1[i] + SHA256_W$1[i]) | 0;\n            const sigma0 = rotr$1(A, 2) ^ rotr$1(A, 13) ^ rotr$1(A, 22);\n            const T2 = (sigma0 + Maj$1(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W$1.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n};\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nlet SHA224$1 = class SHA224 extends SHA256$1 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n};\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256$2 = wrapConstructor$1(() => new SHA256$1());\nwrapConstructor$1(() => new SHA224$1());\n\nfunction within_size(data, size) {\n    if (data.length > size) {\n        throw new TypeError(`Data is larger than array size: ${data.length} > ${size}`);\n    }\n}\nfunction is_hex(hex) {\n    if (hex.match(/[^a-fA-f0-9]/) !== null) {\n        throw new TypeError('Invalid characters in hex string: ' + hex);\n    }\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Length of hex string is invalid: ${hex.length}`);\n    }\n}\nfunction is_safe_num(num) {\n    if (num > Number.MAX_SAFE_INTEGER) {\n        throw new TypeError('Number exceeds safe bounds!');\n    }\n}\n\nconst { getRandomValues } = crypto ?? globalThis.crypto ?? window.crypto;\nfunction random$1(size = 32) {\n    if (typeof getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(size));\n    }\n    throw new Error('Crypto module missing getRandomValues!');\n}\nfunction set_buffer(data, size, endian = 'be') {\n    if (size === undefined)\n        size = data.length;\n    within_size(data, size);\n    const buffer = new Uint8Array(size).fill(0);\n    const offset = (endian === 'be') ? 0 : size - data.length;\n    buffer.set(data, offset);\n    return buffer;\n}\nfunction join_array(arr) {\n    let i, offset = 0;\n    const size = arr.reduce((len, arr) => len + arr.length, 0);\n    const buff = new Uint8Array(size);\n    for (i = 0; i < arr.length; i++) {\n        const a = arr[i];\n        buff.set(a, offset);\n        offset += a.length;\n    }\n    return buff;\n}\n\nconst ec$2 = new TextEncoder();\nconst ALPHABETS = [\n    {\n        name: 'base58',\n        charset: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n    }\n];\nfunction getAlphabet(name) {\n    for (const alpha of ALPHABETS) {\n        if (alpha.name === name) {\n            return alpha.charset;\n        }\n    }\n    throw TypeError('Charset does not exist: ' + name);\n}\nfunction encode$1$1(data, charset, padding = false) {\n    if (typeof data === 'string')\n        data = ec$2.encode(data);\n    const alphabet = getAlphabet(charset);\n    const len = alphabet.length;\n    const d = [];\n    let s = '', i, j = 0, c, n;\n    for (i = 0; i < data.length; i++) {\n        j = 0;\n        c = data[i];\n        s += (c > 0 || (s.length ^ i) > 0) ? '' : '1';\n        while (j in d || c > 0) {\n            n = d[j];\n            n = n > 0 ? n * 256 + c : c;\n            c = n / len | 0;\n            d[j] = n % len;\n            j++;\n        }\n    }\n    while (j-- > 0) {\n        s += alphabet[d[j]];\n    }\n    return (padding && s.length % 4 > 0)\n        ? s + '='.repeat(4 - s.length % 4)\n        : s;\n}\nfunction decode$1$1(encoded, charset) {\n    const alphabet = getAlphabet(charset);\n    const len = alphabet.length, d = [], b = [];\n    encoded = encoded.replace('=', '');\n    let i, j = 0, c, n;\n    for (i = 0; i < encoded.length; i++) {\n        j = 0;\n        c = alphabet.indexOf(encoded[i]);\n        if (c < 0) {\n            throw new Error(`Character range out of bounds: ${c}`);\n        }\n        if (!(c > 0 || (b.length ^ i) > 0))\n            b.push(0);\n        while (j in d || c > 0) {\n            n = d[j];\n            n = n > 0 ? n * len + c : c;\n            c = n >> 8;\n            d[j] = n % 256;\n            j++;\n        }\n    }\n    while (j-- > 0) {\n        b.push(d[j]);\n    }\n    return new Uint8Array(b);\n}\nfunction hash256$1(data) {\n    return sha256$2(sha256$2(data));\n}\nfunction addChecksum(data) {\n    const sum = hash256$1(data);\n    return join_array([data, sum.slice(0, 4)]);\n}\nfunction checkTheSum(data) {\n    const ret = data.slice(0, -4);\n    const chk = data.slice(-4);\n    const sum = hash256$1(ret).slice(0, 4);\n    if (sum.toString() !== chk.toString()) {\n        throw new Error('Invalid checksum!');\n    }\n    return ret;\n}\nconst BaseX = {\n    encode: encode$1$1,\n    decode: decode$1$1\n};\nconst Base58C = {\n    encode: (data) => {\n        const withSum = addChecksum(data);\n        return BaseX.encode(withSum, 'base58');\n    },\n    decode: (data) => {\n        const decoded = BaseX.decode(data, 'base58');\n        return checkTheSum(decoded);\n    }\n};\n\nconst CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nconst GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nconst ENCODINGS = [\n    { version: 0, name: 'bech32', const: 1 },\n    { version: 1, name: 'bech32m', const: 0x2bc830a3 }\n];\nfunction polymod(values) {\n    let chk = 1;\n    for (let p = 0; p < values.length; ++p) {\n        const top = chk >> 25;\n        chk = (chk & 0x1ffffff) << 5 ^ values[p];\n        for (let i = 0; i < 5; ++i) {\n            if (((top >> i) & 1) !== 0) {\n                chk ^= GENERATOR[i];\n            }\n        }\n    }\n    return chk;\n}\nfunction hrpExpand(hrp) {\n    const ret = [];\n    let p;\n    for (p = 0; p < hrp.length; ++p) {\n        ret.push(hrp.charCodeAt(p) >> 5);\n    }\n    ret.push(0);\n    for (p = 0; p < hrp.length; ++p) {\n        ret.push(hrp.charCodeAt(p) & 31);\n    }\n    return ret;\n}\nfunction verifyChecksum(hrp, data, enc) {\n    const combined = hrpExpand(hrp).concat(data);\n    return polymod(combined) === enc.const;\n}\nfunction createChecksum(hrp, data, enc) {\n    const values = hrpExpand(hrp).concat(data).concat([0, 0, 0, 0, 0, 0]);\n    const mod = polymod(values) ^ enc.const;\n    const ret = [];\n    for (let p = 0; p < 6; ++p) {\n        ret.push((mod >> 5 * (5 - p)) & 31);\n    }\n    return ret;\n}\nfunction convertBits(data, fromBits, toBits, pad = true) {\n    const ret = [];\n    let acc = 0;\n    let bits = 0;\n    const maxVal = (1 << toBits) - 1;\n    const maxAcc = (1 << (fromBits + toBits - 1)) - 1;\n    for (const val of data) {\n        if (val < 0 || (val >> fromBits) > 0) {\n            throw new Error('Failed to perform base conversion. Invalid value: ' + String(val));\n        }\n        acc = ((acc << fromBits) | val) & maxAcc;\n        bits += fromBits;\n        while (bits >= toBits) {\n            bits -= toBits;\n            ret.push((acc >> bits) & maxVal);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            ret.push((acc << (toBits - bits)) & maxVal);\n        }\n    }\n    else if (bits >= fromBits || ((acc << (toBits - bits)) & maxVal) > 0) {\n        throw new Error('Failed to perform base conversion. Invalid Size!');\n    }\n    return ret;\n}\nfunction encode$5(hrp, data, enc) {\n    const combined = data.concat(createChecksum(hrp, data, enc));\n    let ret = hrp + '1';\n    for (let p = 0; p < combined.length; ++p) {\n        ret += CHARSET.charAt(combined[p]);\n    }\n    return ret;\n}\nfunction decode$5(bechstr) {\n    if (!checkBounds(bechstr)) {\n        throw new Error('Encoded string goes out of bounds!');\n    }\n    bechstr = bechstr.toLowerCase();\n    if (!checkSeparatorPos(bechstr)) {\n        throw new Error('Encoded string has invalid separator!');\n    }\n    const data = [];\n    const pos = bechstr.lastIndexOf('1');\n    const hrp = bechstr.substring(0, pos);\n    for (let p = pos + 1; p < bechstr.length; ++p) {\n        const d = CHARSET.indexOf(bechstr.charAt(p));\n        if (d === -1) {\n            throw new Error('Character idx out of bounds: ' + String(p));\n        }\n        data.push(d);\n    }\n    const enc = ENCODINGS.find(e => e.version === data[0]) ?? ENCODINGS[0];\n    if (!verifyChecksum(hrp, data, enc)) {\n        throw new Error('Checksum verification failed!');\n    }\n    return [hrp, data.slice(0, data.length - 6)];\n}\nfunction checkBounds(bechstr) {\n    let p;\n    let char;\n    let hasLower = false;\n    let hasUpper = false;\n    for (p = 0; p < bechstr.length; ++p) {\n        char = bechstr.charCodeAt(p);\n        if (char < 33 || char > 126) {\n            return false;\n        }\n        if (char >= 97 && char <= 122) {\n            hasLower = true;\n        }\n        if (char >= 65 && char <= 90) {\n            hasUpper = true;\n        }\n    }\n    if (hasLower && hasUpper)\n        return false;\n    return true;\n}\nfunction checkSeparatorPos(bechstr) {\n    const pos = bechstr.lastIndexOf('1');\n    return !(pos < 1 ||\n        pos + 7 > bechstr.length ||\n        bechstr.length > 90);\n}\nfunction b32encode(data, hrp = 'bc', version = 0) {\n    const dat = [version, ...convertBits([...data], 8, 5)];\n    const enc = ENCODINGS.find(e => e.version === version) ?? ENCODINGS[0];\n    const str = encode$5(hrp, dat, enc);\n    b32decode(str);\n    return str;\n}\nfunction b32decode(str) {\n    str = str.toLowerCase();\n    const hrp = str.split('1', 1)[0];\n    const [hrpgot, data] = decode$5(str);\n    const decoded = convertBits(data.slice(1), 5, 8, false);\n    const length = decoded.length;\n    switch (true) {\n        case (hrp !== hrpgot):\n            throw new Error('Returned hrp string is invalid.');\n        case (decoded === null || length < 2 || length > 40):\n            throw new Error('Decoded string is invalid or out of spec.');\n        case (data[0] > 16):\n            throw new Error('Returned version bit is out of range.');\n        default:\n            return Uint8Array.from(decoded);\n    }\n}\nfunction getVersion$1(str) {\n    str = str.toLowerCase();\n    const [_, data] = decode$5(str);\n    return data[0];\n}\nconst Bech32 = {\n    encode: b32encode,\n    decode: b32decode,\n    version: getVersion$1\n};\n\nconst BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst B64URL_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nconst ec$1 = new TextEncoder();\nfunction b64encode(input, urlSafe = false, padding = true) {\n    if (typeof input === 'string')\n        input = ec$1.encode(input);\n    const map = urlSafe ? B64URL_MAP : BASE64_MAP;\n    let output = '';\n    let bits = 0;\n    let buffer = 0;\n    for (let i = 0; i < input.length; i++) {\n        buffer = (buffer << 8) | input[i];\n        bits += 8;\n        while (bits >= 6) {\n            bits -= 6;\n            output += map[(buffer >> bits) & 0x3f];\n        }\n    }\n    if (bits > 0) {\n        buffer <<= 6 - bits;\n        output += map[buffer & 0x3f];\n        while (bits < 6) {\n            output += padding ? '=' : '';\n            bits += 2;\n        }\n    }\n    return output;\n}\nfunction b64decode(input, urlSafe = false) {\n    const map = (urlSafe || input.includes('-') || input.includes('_'))\n        ? B64URL_MAP.split('')\n        : BASE64_MAP.split('');\n    input = input.replace(/=+$/, '');\n    const chars = input.split('');\n    let bits = 0;\n    let value = 0;\n    const bytes = [];\n    for (let i = 0; i < chars.length; i++) {\n        const c = chars[i];\n        const index = map.indexOf(c);\n        if (index === -1) {\n            throw new Error('Invalid character: ' + c);\n        }\n        bits += 6;\n        value <<= 6;\n        value |= index;\n        if (bits >= 8) {\n            bits -= 8;\n            bytes.push((value >>> bits) & 0xff);\n        }\n    }\n    return new Uint8Array(bytes);\n}\nconst Base64 = {\n    encode: b64encode,\n    decode: b64decode\n};\nconst B64URL = {\n    encode: (data) => b64encode(data, true, false),\n    decode: (data) => b64decode(data, true)\n};\n\nconst _0n$3 = BigInt(0);\nconst _255n = BigInt(255);\nconst _256n = BigInt(256);\nfunction big_size(big) {\n    if (big <= 0xffn)\n        return 1;\n    if (big <= 0xffffn)\n        return 2;\n    if (big <= 0xffffffffn)\n        return 4;\n    if (big <= 0xffffffffffffffffn)\n        return 8;\n    if (big <= 0xffffffffffffffffffffffffffffffffn)\n        return 16;\n    if (big <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn) {\n        return 32;\n    }\n    throw new TypeError('Must specify a fixed buffer size for bigints greater than 32 bytes.');\n}\nfunction bigToBytes(big, size, endian = 'be') {\n    if (size === undefined)\n        size = big_size(big);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (big > _0n$3) {\n        const byte = big & _255n;\n        const num = Number(byte);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        big = (big - byte) / _256n;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToBig(bytes) {\n    let num = BigInt(0);\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * _256n) + BigInt(bytes[i]);\n    }\n    return BigInt(num);\n}\n\nfunction binToBytes(binary) {\n    const bins = binary.split('').map(Number);\n    if (bins.length % 8 !== 0) {\n        throw new Error(`Binary array is invalid length: ${binary.length}`);\n    }\n    const bytes = new Uint8Array(bins.length / 8);\n    for (let i = 0, ct = 0; i < bins.length; i += 8, ct++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j++) {\n            byte |= (bins[i + j] << (7 - j));\n        }\n        bytes[ct] = byte;\n    }\n    return bytes;\n}\nfunction bytesToBin(bytes) {\n    const bin = new Array(bytes.length * 8);\n    let count = 0;\n    for (const num of bytes) {\n        if (num > 255) {\n            throw new Error(`Invalid byte value: ${num}. Byte values must be between 0 and 255.`);\n        }\n        for (let i = 7; i >= 0; i--, count++) {\n            bin[count] = (num >> i) & 1;\n        }\n    }\n    return bin.join('');\n}\n\nfunction num_size(num) {\n    if (num <= 0xFF)\n        return 1;\n    if (num <= 0xFFFF)\n        return 2;\n    if (num <= 0xFFFFFFFF)\n        return 4;\n    throw new TypeError('Numbers larger than 4 bytes must specify a fixed size!');\n}\nfunction numToBytes(num, size, endian = 'be') {\n    if (size === undefined)\n        size = num_size(num);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (num > 0) {\n        const byte = num & 255;\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        num = (num - byte) / 256;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToNum(bytes) {\n    let num = 0;\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * 256) + bytes[i];\n        is_safe_num(num);\n    }\n    return num;\n}\n\nconst ec = new TextEncoder();\nconst dc = new TextDecoder();\nfunction strToBytes(str) {\n    return ec.encode(str);\n}\nfunction bytesToStr(bytes) {\n    return dc.decode(bytes);\n}\nfunction hex_size(hexstr, size) {\n    is_hex(hexstr);\n    const len = hexstr.length / 2;\n    if (size === undefined)\n        size = len;\n    if (len > size) {\n        throw new TypeError(`Hex string is larger than array size: ${len} > ${size}`);\n    }\n    return size;\n}\nfunction hexToBytes(hexstr, size, endian = 'le') {\n    size = hex_size(hexstr, size);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    for (let i = 0; i < hexstr.length; i += 2) {\n        const char = hexstr.substring(i, i + 2);\n        const num = parseInt(char, 16);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToHex(bytes) {\n    let chars = '';\n    for (let i = 0; i < bytes.length; i++) {\n        chars += bytes[i].toString(16).padStart(2, '0');\n    }\n    return chars;\n}\nfunction jsonToBytes(obj) {\n    const str = JSON.stringify(obj, (_, v) => {\n        return typeof v === 'bigint'\n            ? `${v}n`\n            : v;\n    });\n    return strToBytes(str);\n}\n\nfunction buffer(data, size, endian) {\n    if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    if (data instanceof Uint8Array) {\n        return set_buffer(data, size, endian);\n    }\n    if (typeof data === 'string') {\n        return hexToBytes(data, size, endian);\n    }\n    if (typeof data === 'bigint') {\n        return bigToBytes(data, size, endian);\n    }\n    if (typeof data === 'number') {\n        return numToBytes(data, size, endian);\n    }\n    if (typeof data === 'boolean') {\n        return Uint8Array.of(data ? 1 : 0);\n    }\n    throw TypeError('Unsupported format:' + String(typeof data));\n}\n\nclass Buff extends Uint8Array {\n    static { this.num = numToBuff; }\n    static { this.big = bigToBuff; }\n    static { this.bin = binToBuff; }\n    static { this.raw = rawToBuff; }\n    static { this.str = strToBuff; }\n    static { this.hex = hexToBuff; }\n    static { this.bytes = bytesToBuff; }\n    static { this.json = jsonToBuff; }\n    static { this.base64 = base64ToBuff; }\n    static { this.b64url = b64urlToBuff; }\n    static { this.bech32 = bech32ToBuff; }\n    static { this.b58chk = b58chkToBuff; }\n    static { this.encode = strToBytes; }\n    static { this.decode = bytesToStr; }\n    static random(size = 32) {\n        const rand = random$1(size);\n        return new Buff(rand, size);\n    }\n    constructor(data, size, endian) {\n        const buffer$1 = buffer(data, size, endian);\n        super(buffer$1);\n    }\n    get arr() {\n        return [...this];\n    }\n    get num() {\n        return this.toNum();\n    }\n    get big() {\n        return this.toBig();\n    }\n    get str() {\n        return this.toStr();\n    }\n    get hex() {\n        return this.toHex();\n    }\n    get raw() {\n        return new Uint8Array(this);\n    }\n    get bin() {\n        return this.toBin();\n    }\n    get b58chk() {\n        return this.tob58chk();\n    }\n    get base64() {\n        return this.toBase64();\n    }\n    get b64url() {\n        return this.toB64url();\n    }\n    get digest() {\n        return this.toHash();\n    }\n    get id() {\n        return this.toHash().hex;\n    }\n    get stream() {\n        return new Stream(this);\n    }\n    toNum(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return bytesToNum(bytes);\n    }\n    toBin() {\n        return bytesToBin(this);\n    }\n    toBig(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return bytesToBig(bytes);\n    }\n    toHash() {\n        const digest = sha256$2(this);\n        return new Buff(digest);\n    }\n    toJson() {\n        const str = bytesToStr(this);\n        return JSON.parse(str);\n    }\n    toBech32(hrp, version = 0) {\n        return Bech32.encode(this, hrp, version);\n    }\n    toStr() { return bytesToStr(this); }\n    toHex() { return bytesToHex(this); }\n    toBytes() { return new Uint8Array(this); }\n    tob58chk() { return Base58C.encode(this); }\n    toBase64() { return Base64.encode(this); }\n    toB64url() { return B64URL.encode(this); }\n    prepend(data) {\n        return Buff.join([Buff.bytes(data), this]);\n    }\n    append(data) {\n        return Buff.join([this, Buff.bytes(data)]);\n    }\n    slice(start, end) {\n        const arr = new Uint8Array(this).slice(start, end);\n        return new Buff(arr);\n    }\n    subarray(begin, end) {\n        const arr = new Uint8Array(this).subarray(begin, end);\n        return new Buff(arr);\n    }\n    reverse() {\n        const arr = new Uint8Array(this).reverse();\n        return new Buff(arr);\n    }\n    write(bytes, offset) {\n        const b = Buff.bytes(bytes);\n        this.set(b, offset);\n    }\n    prefixSize(endian) {\n        const size = Buff.varInt(this.length, endian);\n        return Buff.join([size, this]);\n    }\n    static from(data) {\n        return new Buff(Uint8Array.from(data));\n    }\n    static of(...args) {\n        return new Buff(Uint8Array.of(...args));\n    }\n    static join(arr) {\n        const bytes = arr.map(e => Buff.bytes(e));\n        const joined = join_array(bytes);\n        return new Buff(joined);\n    }\n    static varInt(num, endian) {\n        if (num < 0xFD) {\n            return Buff.num(num, 1);\n        }\n        else if (num < 0x10000) {\n            return Buff.of(0xFD, ...Buff.num(num, 2, endian));\n        }\n        else if (num < 0x100000000) {\n            return Buff.of(0xFE, ...Buff.num(num, 4, endian));\n        }\n        else if (BigInt(num) < 0x10000000000000000n) {\n            return Buff.of(0xFF, ...Buff.num(num, 8, endian));\n        }\n        else {\n            throw new Error(`Value is too large: ${num}`);\n        }\n    }\n}\nfunction numToBuff(number, size, endian) {\n    return new Buff(number, size, endian);\n}\nfunction binToBuff(data, size, endian) {\n    return new Buff(binToBytes(data), size, endian);\n}\nfunction bigToBuff(bigint, size, endian) {\n    return new Buff(bigint, size, endian);\n}\nfunction rawToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction strToBuff(data, size, endian) {\n    return new Buff(strToBytes(data), size, endian);\n}\nfunction hexToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction bytesToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction jsonToBuff(data) {\n    return new Buff(jsonToBytes(data));\n}\nfunction base64ToBuff(data) {\n    return new Buff(Base64.decode(data));\n}\nfunction b64urlToBuff(data) {\n    return new Buff(B64URL.decode(data));\n}\nfunction bech32ToBuff(data) {\n    return new Buff(Bech32.decode(data));\n}\nfunction b58chkToBuff(data) {\n    return new Buff(Base58C.decode(data));\n}\nclass Stream {\n    constructor(data) {\n        this.data = Buff.bytes(data);\n        this.size = this.data.length;\n    }\n    peek(size) {\n        if (size > this.size) {\n            throw new Error(`Size greater than stream: ${size} > ${this.size}`);\n        }\n        return new Buff(this.data.slice(0, size));\n    }\n    read(size) {\n        size = size ?? this.readSize();\n        const chunk = this.peek(size);\n        this.data = this.data.slice(size);\n        this.size = this.data.length;\n        return chunk;\n    }\n    readSize(endian) {\n        const num = this.read(1).num;\n        switch (true) {\n            case (num >= 0 && num < 0xFD):\n                return num;\n            case (num === 0xFD):\n                return this.read(2).toNum(endian);\n            case (num === 0xFE):\n                return this.read(4).toNum(endian);\n            case (num === 0xFF):\n                return this.read(8).toNum(endian);\n            default:\n                throw new Error(`Varint is out of range: ${num}`);\n        }\n    }\n}\n\nconst curve = secp256k1.CURVE;\nconst N$1 = curve.n;\nconst P$1 = curve.p;\nconst G = { x: curve.Gx, y: curve.Gy };\nconst _0n$2 = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _4n = BigInt(4);\nconst CONST = { N: N$1, P: P$1, G, _0n: _0n$2, _1n, _2n, _3n, _4n };\nconst ecc = Field$1(N$1, 32, true);\nconst modN = (x) => mod(x, N$1);\n\nfunction fail(error, throws = false) {\n    if (throws) {\n        throw new Error(error);\n    }\n    else {\n        return false;\n    }\n}\nfunction random(size) {\n    return Buff.random(size);\n}\nfunction mod_bytes(bytes) {\n    const b = Buff.bytes(bytes).big;\n    return Buff.big(modN(b), 32);\n}\n\nvar utl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    fail: fail,\n    mod_bytes: mod_bytes,\n    random: random\n});\n\nconst { N, P, _0n: _0n$1 } = CONST;\nfunction size(input, size, throws) {\n    const bytes = Buff.bytes(input);\n    if (bytes.length !== size) {\n        return fail(`Invalid byte size: ${bytes.hex} !== ${size}`, throws);\n    }\n    return true;\n}\nfunction in_field(x, throws) {\n    if (!(typeof x === 'bigint' && _0n$1 < x && x < N)) {\n        fail('x value is not in the field!', throws);\n    }\n    return true;\n}\n\nconst NoblePoint = secp256k1.ProjectivePoint;\nclass Field extends Uint8Array {\n    static { this.N = secp256k1.CURVE.n; }\n    static mod(x) {\n        return new Field(x);\n    }\n    static is_valid(value, throws) {\n        const big = Buff.bytes(value, 32).big;\n        return in_field(big, throws);\n    }\n    constructor(x) {\n        let b = normalizeField(x);\n        b = modN(b);\n        Field.is_valid(b, true);\n        super(Buff.big(b, 32), 32);\n    }\n    get buff() {\n        return new Buff(this);\n    }\n    get raw() {\n        return this.buff.raw;\n    }\n    get big() {\n        return this.buff.big;\n    }\n    get hex() {\n        return this.buff.hex;\n    }\n    get point() {\n        return this.generate();\n    }\n    get hasOddY() {\n        return this.point.hasOddY;\n    }\n    get negated() {\n        return (this.hasOddY)\n            ? this.negate()\n            : this;\n    }\n    gt(value) {\n        const x = new Field(value);\n        return x.big > this.big;\n    }\n    lt(value) {\n        const x = new Field(value);\n        return x.big < this.big;\n    }\n    eq(value) {\n        const x = new Field(value);\n        return x.big === this.big;\n    }\n    ne(value) {\n        const x = new Field(value);\n        return x.big !== this.big;\n    }\n    add(value) {\n        const x = Field.mod(value);\n        const a = ecc.add(this.big, x.big);\n        return new Field(a);\n    }\n    sub(value) {\n        const x = Field.mod(value);\n        const a = ecc.sub(this.big, x.big);\n        return new Field(a);\n    }\n    mul(value) {\n        const x = Field.mod(value);\n        const a = ecc.mul(this.big, x.big);\n        return new Field(a);\n    }\n    pow(value) {\n        const x = Field.mod(value);\n        const a = ecc.pow(this.big, x.big);\n        return new Field(a);\n    }\n    div(value) {\n        const x = Field.mod(value);\n        const a = ecc.div(this.big, x.big);\n        return new Field(a);\n    }\n    negate() {\n        return new Field(Field.N - this.big);\n    }\n    generate() {\n        const base = secp256k1.ProjectivePoint.BASE;\n        const point = base.multiply(this.big);\n        return Point.import(point);\n    }\n}\nclass Point {\n    static { this.P = CONST.P; }\n    static { this.G = CONST.G; }\n    static { this.base = secp256k1.ProjectivePoint.BASE; }\n    static from_x(bytes) {\n        let cp = normalizePoint(bytes);\n        if (cp.length === 32) {\n            cp = cp.prepend(0x02);\n        }\n        size(cp, 33);\n        const point = NoblePoint.fromHex(cp.hex);\n        point.assertValidity();\n        return new Point(point.x, point.y);\n    }\n    static generate(value) {\n        const field = Field.mod(value);\n        const point = Point.base.multiply(field.big);\n        return Point.import(point);\n    }\n    static import(point) {\n        const p = (point instanceof Point)\n            ? { x: point.x.big, y: point.y.big }\n            : { x: point.x, y: point.y };\n        return new Point(p.x, p.y);\n    }\n    constructor(x, y) {\n        this._p = new NoblePoint(x, y, 1n);\n        this.p.assertValidity();\n    }\n    get p() {\n        return this._p;\n    }\n    get x() {\n        return Buff.big(this.p.x, 32);\n    }\n    get y() {\n        return Buff.big(this.p.y, 32);\n    }\n    get buff() {\n        return Buff.raw(this.p.toRawBytes(true));\n    }\n    get raw() {\n        return this.buff.raw;\n    }\n    get hex() {\n        return this.buff.hex;\n    }\n    get hasEvenY() {\n        return this.p.hasEvenY();\n    }\n    get hasOddY() {\n        return !this.p.hasEvenY();\n    }\n    eq(value) {\n        const p = (value instanceof Point) ? value : Point.from_x(value);\n        return this.x.big === p.x.big && this.y.big === p.y.big;\n    }\n    add(x) {\n        return (x instanceof Point)\n            ? Point.import(this.p.add(x.p))\n            : Point.import(this.p.add(Point.generate(x).p));\n    }\n    sub(x) {\n        return (x instanceof Point)\n            ? Point.import(this.p.subtract(x.p))\n            : Point.import(this.p.subtract(Point.generate(x).p));\n    }\n    mul(value) {\n        return (value instanceof Point)\n            ? Point.import(this.p.multiply(value.x.big))\n            : Point.import(this.p.multiply(Field.mod(value).big));\n    }\n    negate() {\n        return Point.import(this.p.negate());\n    }\n}\nfunction normalizeField(value) {\n    if (value instanceof Field) {\n        return value.big;\n    }\n    if (value instanceof Point) {\n        return value.x.big;\n    }\n    if (value instanceof Uint8Array) {\n        return Buff.raw(value).big;\n    }\n    if (typeof value === 'string') {\n        return Buff.hex(value).big;\n    }\n    if (typeof value === 'number') {\n        return Buff.num(value).big;\n    }\n    if (typeof value === 'bigint') {\n        return BigInt(value);\n    }\n    throw TypeError('Invalid input type:' + typeof value);\n}\nfunction normalizePoint(value) {\n    if (value instanceof Field) {\n        return value.point.buff;\n    }\n    if (value instanceof Point) {\n        return value.buff;\n    }\n    if (value instanceof Uint8Array ||\n        typeof value === 'string') {\n        return Buff.bytes(value);\n    }\n    if (typeof value === 'number' ||\n        typeof value === 'bigint') {\n        return Buff.bytes(value, 32);\n    }\n    throw new TypeError(`Unknown type: ${typeof value}`);\n}\n\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash$1(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash: hash$1,\n    exists,\n    output,\n};\nvar assert$1 = assert;\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nArray.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes$3(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes$3(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert$1.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes$3(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert$1.exists(this);\n        assert$1.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256$1 = wrapConstructor(() => new SHA256());\nwrapConstructor(() => new SHA224());\n\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nvar u64$1 = u64;\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64$1.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64$1.rotrSH(W15h, W15l, 1) ^ u64$1.rotrSH(W15h, W15l, 8) ^ u64$1.shrSH(W15h, W15l, 7);\n            const s0l = u64$1.rotrSL(W15h, W15l, 1) ^ u64$1.rotrSL(W15h, W15l, 8) ^ u64$1.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64$1.rotrSH(W2h, W2l, 19) ^ u64$1.rotrBH(W2h, W2l, 61) ^ u64$1.shrSH(W2h, W2l, 6);\n            const s1l = u64$1.rotrSL(W2h, W2l, 19) ^ u64$1.rotrBL(W2h, W2l, 61) ^ u64$1.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64$1.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64$1.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64$1.rotrSH(Eh, El, 14) ^ u64$1.rotrSH(Eh, El, 18) ^ u64$1.rotrBH(Eh, El, 41);\n            const sigma1l = u64$1.rotrSL(Eh, El, 14) ^ u64$1.rotrSL(Eh, El, 18) ^ u64$1.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64$1.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64$1.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64$1.rotrSH(Ah, Al, 28) ^ u64$1.rotrBH(Ah, Al, 34) ^ u64$1.rotrBH(Ah, Al, 39);\n            const sigma0l = u64$1.rotrSL(Ah, Al, 28) ^ u64$1.rotrBL(Ah, Al, 34) ^ u64$1.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64$1.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64$1.add3L(T1l, sigma0l, MAJl);\n            Ah = u64$1.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64$1.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64$1.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64$1.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64$1.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64$1.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64$1.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64$1.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64$1.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nconst sha512$1 = wrapConstructor(() => new SHA512());\nwrapConstructor(() => new SHA512_224());\nwrapConstructor(() => new SHA512_256());\nwrapConstructor(() => new SHA384());\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nclass RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nconst ripemd160 = wrapConstructor(() => new RIPEMD160());\n\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert$1.hash(hash);\n        const key = toBytes$3(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert$1.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert$1.exists(this);\n        assert$1.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac$1 = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac$1.create = (hash, key) => new HMAC(hash, key);\n\nfunction sha256(msg) {\n    const b = Buff.bytes(msg);\n    return Buff.raw(sha256$1(b));\n}\nfunction hash256(msg) {\n    const b = Buff.bytes(msg);\n    return Buff.raw(sha256$1(sha256$1(b)));\n}\nfunction hash160(msg) {\n    const b = Buff.bytes(msg);\n    return Buff.raw(ripemd160(sha256$1(b)));\n}\nfunction hmac512(key, msg) {\n    const k = Buff.bytes(key);\n    const b = Buff.bytes(msg);\n    return Buff.raw(hmac$1(sha512$1, k, b));\n}\nfunction hashtag(tag) {\n    const hash = Buff.str(tag).digest;\n    return Buff.join([hash, hash]);\n}\n\nfunction genSecretKey(size = 32) {\n    return getSecretKey(random(size));\n}\nfunction getSecretKey(secret) {\n    return Field.mod(secret).buff;\n}\nfunction getPublicKey(seckey, xonly = false) {\n    const p = Field.mod(seckey).point;\n    return (xonly) ? p.x : p.buff;\n}\nfunction getSharedKey(seckey, pubkey) {\n    const P = Point.from_x(pubkey);\n    const sp = Field.mod(seckey);\n    const sh = P.mul(sp);\n    return sh.buff;\n}\nfunction getSharedCode(self_sec, peer_pub, tag = 'ecdh/code') {\n    const hash = hashtag(tag);\n    const sec = getSecretKey(self_sec);\n    const pub = getPublicKey(sec);\n    const peer = Buff.bytes(peer_pub);\n    const link = getSharedKey(sec, peer);\n    const keys = [pub.hex, peer.hex];\n    keys.sort();\n    return hmac512(link, Buff.join([hash, ...keys]));\n}\nfunction is_even_pub(pubkey) {\n    const pub = Buff.bytes(pubkey);\n    switch (true) {\n        case (pub.length === 32):\n            return true;\n        case (pub.length === 33 && pub[0] === 0x02):\n            return true;\n        case (pub.length === 33 && pub[0] === 0x03):\n            return false;\n        default:\n            throw new TypeError(`Invalid public key: ${pub.hex}`);\n    }\n}\nfunction xonly_pub(pubkey) {\n    const key = Buff.bytes(pubkey);\n    switch (key.length) {\n        case 32:\n            return key;\n        case 33:\n            return key.slice(1, 33);\n        default:\n            throw new Error(`Invalid key length: ${key.length}`);\n    }\n}\n\nvar key = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    genSecretKey: genSecretKey,\n    getPublicKey: getPublicKey,\n    getSecretKey: getSecretKey,\n    getSharedCode: getSharedCode,\n    getSharedKey: getSharedKey,\n    is_even_pub: is_even_pub,\n    xonly_pub: xonly_pub\n});\n\n({\n    aux: Buff.random(32),\n    throws: false,\n    xonly: true\n});\n\nconst noble = { secp: secp256k1, schnorr };\nconst util$1 = { ...key, ...utl };\n\nfunction hash160pkh(pubkey) {\n    const bytes = Buff$1.bytes(pubkey);\n    checkSize(bytes, 33);\n    return hash160(bytes);\n}\nfunction hash160sh(script) {\n    const bytes = Script.fmt.toBytes(script, false);\n    return hash160(bytes);\n}\nfunction sha256sh(script) {\n    const bytes = Script.fmt.toBytes(script, false);\n    return sha256(bytes);\n}\n\nfunction check$4(address, network = 'main') {\n    const prefixes = (network === 'main') ? ['1'] : ['m', 'n'];\n    for (const prefix of prefixes) {\n        if (address.startsWith(prefix)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction encode$4(input, network = 'main') {\n    const bytes = Buff$1.bytes(input);\n    const prefix = (network === 'main') ? Buff$1.num(0x00) : Buff$1.num(0x6F);\n    checkSize(input, 20);\n    return bytes.prepend(prefix).tob58chk();\n}\nfunction decode$4(address, network = 'main') {\n    if (!check$4(address, network)) {\n        throw new TypeError('Invalid p2pkh address!');\n    }\n    return Buff$1.b58chk(address).slice(1);\n}\nfunction scriptPubKey$4(input) {\n    const bytes = Buff$1.bytes(input);\n    checkSize(bytes, 20);\n    return ['OP_DUP', 'OP_HASH160', bytes.hex, 'OP_EQUALVERIFY', 'OP_CHECKSIG'];\n}\nfunction fromPubKey$2(pubkey, network) {\n    const pkh = hash160pkh(pubkey);\n    return encode$4(pkh, network);\n}\nconst P2PKH = { check: check$4, encode: encode$4, decode: decode$4, hash: hash160pkh, scriptPubKey: scriptPubKey$4, fromPubKey: fromPubKey$2 };\n\nfunction check$3(address, network = 'main') {\n    const prefixes = (network === 'main') ? ['3'] : ['2'];\n    for (const prefix of prefixes) {\n        if (address.startsWith(prefix)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction encode$3(input, network = 'main') {\n    const prefix = (network === 'main') ? Buff$1.num(0x05) : Buff$1.num(0xC4);\n    const bytes = Buff$1.bytes(input);\n    checkSize(bytes, 20);\n    return bytes.prepend(prefix).tob58chk();\n}\nfunction decode$3(address, network = 'main') {\n    if (!check$3(address, network)) {\n        throw new TypeError(`Invalid p2sh address for network ${network}:` + address);\n    }\n    return Buff$1.b58chk(address).slice(1);\n}\nfunction scriptPubKey$3(input) {\n    const bytes = Buff$1.bytes(input);\n    return ['OP_HASH160', bytes.hex, 'OP_EQUAL'];\n}\nfunction fromScript$1(script, network) {\n    const scriptHash = hash160sh(script);\n    return encode$3(scriptHash, network);\n}\nconst P2SH = { check: check$3, encode: encode$3, decode: decode$3, hash: hash160sh, scriptPubKey: scriptPubKey$3, fromScript: fromScript$1 };\n\nconst BECH32_PREFIXES = {\n    main: 'bc',\n    testnet: 'tb',\n    signet: 'tb',\n    regtest: 'bcrt'\n};\n\nconst VALID_PREFIXES$2 = ['bc1q', 'tb1q', 'bcrt1q'];\nfunction check$2(address) {\n    for (const prefix of VALID_PREFIXES$2) {\n        if (address.startsWith(prefix)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction encode$2(input, network = 'main') {\n    const prefix = BECH32_PREFIXES[network];\n    const bytes = Buff$1.bytes(input);\n    checkSize(bytes, 20);\n    return bytes.toBech32(prefix, 0);\n}\nfunction decode$2(address) {\n    if (!check$2(address)) {\n        throw new TypeError('Invalid segwit address!');\n    }\n    return Buff$1.bech32(address);\n}\nfunction scriptPubKey$2(input) {\n    const bytes = Buff$1.bytes(input);\n    checkSize(bytes, 20);\n    return ['OP_0', bytes.hex];\n}\nfunction fromPubKey$1(pubkey, network) {\n    const pkh = hash160pkh(pubkey);\n    return encode$2(pkh, network);\n}\nconst P2WPKH = { check: check$2, encode: encode$2, decode: decode$2, hash: hash160pkh, scriptPubKey: scriptPubKey$2, fromPubKey: fromPubKey$1 };\n\nconst VALID_PREFIXES$1 = ['bc1q', 'tb1q', 'bcrt1q'];\nfunction check$1(address) {\n    for (const prefix of VALID_PREFIXES$1) {\n        if (address.startsWith(prefix)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction encode$1(input, network = 'main') {\n    const prefix = BECH32_PREFIXES[network];\n    const bytes = Buff$1.bytes(input);\n    checkSize(bytes, 32);\n    return bytes.toBech32(prefix, 0);\n}\nfunction decode$1(address) {\n    if (!check$1(address)) {\n        throw new TypeError('Invalid segwit address!');\n    }\n    return Buff$1.bech32(address);\n}\nfunction scriptPubKey$1(input) {\n    const bytes = Buff$1.bytes(input);\n    checkSize(bytes, 32);\n    return ['OP_0', bytes.hex];\n}\nfunction fromScript(script, network) {\n    const sh = sha256sh(script);\n    return encode$1(sh, network);\n}\nconst P2WSH = { check: check$1, encode: encode$1, decode: decode$1, hash: sha256sh, scriptPubKey: scriptPubKey$1, fromScript };\n\nfunction xOnlyPub(key) {\n    const bytes = Buff$1.bytes(key);\n    return (bytes.length > 32) ? bytes.slice(1, 33) : bytes;\n}\n\nconst VALID_PREFIXES = ['bc1p', 'tb1p', 'bcrt1p'];\nfunction check(address) {\n    for (const prefix of VALID_PREFIXES) {\n        if (address.startsWith(prefix)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction encode(input, network = 'main') {\n    const prefix = BECH32_PREFIXES[network];\n    const bytes = Buff$1.bytes(input);\n    checkSize(bytes, 32);\n    return bytes.toBech32(prefix, 1);\n}\nfunction decode(address) {\n    if (!check(address)) {\n        throw new TypeError('Invalid taproot address!');\n    }\n    return Buff$1.bech32(address);\n}\nfunction scriptPubKey(input) {\n    const bytes = Buff$1.bytes(input);\n    checkSize(bytes, 32);\n    return ['OP_1', bytes.hex];\n}\nfunction fromPubKey(pubkey, network) {\n    const bytes = xOnlyPub(pubkey);\n    return encode(bytes, network);\n}\nconst P2TR = { check, encode, decode, scriptPubKey, fromPubKey };\n\nconst DEFAULT_TX = {\n    version: 2,\n    vin: [],\n    vout: [],\n    locktime: 0\n};\nconst DEFAULT_VIN = {\n    scriptSig: [],\n    sequence: 4294967293,\n    witness: []\n};\nconst DEFAULT_VOUT = {\n    value: 0n,\n    scriptPubKey: []\n};\nfunction createTx(template) {\n    const tx = { ...DEFAULT_TX, ...template };\n    tx.vin = tx.vin.map(txin => { return { ...DEFAULT_VIN, ...txin }; });\n    tx.vout = tx.vout.map(txout => { return { ...DEFAULT_VOUT, ...txout }; });\n    return tx;\n}\n\nfunction encodeTx(txdata, omitWitness) {\n    const { version, vin, vout, locktime } = createTx(txdata);\n    const useWitness = (omitWitness !== true && checkForWitness(vin));\n    const raw = [encodeVersion(version)];\n    if (useWitness) {\n        raw.push(Buff$1.hex('0001'));\n    }\n    raw.push(encodeInputs(vin));\n    raw.push(encodeOutputs(vout));\n    for (const txin of vin) {\n        if (useWitness) {\n            raw.push(encodeWitness(txin.witness));\n        }\n    }\n    raw.push(encodeLocktime(locktime));\n    return Buff$1.join(raw);\n}\nfunction checkForWitness(vin) {\n    for (const txin of vin) {\n        const { witness } = txin;\n        if (typeof witness === 'string' ||\n            witness instanceof Uint8Array ||\n            (Array.isArray(witness) && witness.length > 0)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction encodeVersion(num) {\n    return Buff$1.num(num, 4).reverse();\n}\nfunction encodeTxid(txid) {\n    return Buff$1.hex(txid, 32).reverse();\n}\nfunction encodePrevOut(vout) {\n    return Buff$1.num(vout, 4).reverse();\n}\nfunction encodeSequence(sequence) {\n    if (typeof sequence === 'string') {\n        return Buff$1.hex(sequence, 4).reverse();\n    }\n    if (typeof sequence === 'number') {\n        return Buff$1.num(sequence, 4).reverse();\n    }\n    throw new Error('Unrecognized format: ' + String(sequence));\n}\nfunction encodeInputs(arr) {\n    const raw = [Buff$1.varInt(arr.length, 'le')];\n    for (const vin of arr) {\n        const { txid, vout, scriptSig, sequence } = vin;\n        raw.push(encodeTxid(txid));\n        raw.push(encodePrevOut(vout));\n        raw.push(encodeScript(scriptSig, true));\n        raw.push(encodeSequence(sequence));\n    }\n    return Buff$1.join(raw);\n}\nfunction encodeValue(value) {\n    if (typeof value === 'number') {\n        if (value % 1 !== 0) {\n            throw new Error('Value must be an integer:' + String(value));\n        }\n        return Buff$1.num(value, 8).reverse();\n    }\n    return Buff$1.big(value, 8).reverse();\n}\nfunction encodeOutputs(arr) {\n    const raw = [Buff$1.varInt(arr.length, 'le')];\n    for (const vout of arr) {\n        raw.push(encodeOutput(vout));\n    }\n    return Buff$1.join(raw);\n}\nfunction encodeOutput(vout) {\n    const { value, scriptPubKey } = vout;\n    const raw = [];\n    raw.push(encodeValue(value));\n    raw.push(encodeScript(scriptPubKey, true));\n    return Buff$1.join(raw);\n}\nfunction encodeWitness(data = []) {\n    const buffer = [];\n    if (Array.isArray(data)) {\n        const count = Buff$1.varInt(data.length);\n        buffer.push(count);\n        for (const entry of data) {\n            buffer.push(encodeData(entry));\n        }\n        return Buff$1.join(buffer);\n    }\n    else {\n        return Buff$1.bytes(data);\n    }\n}\nfunction encodeData(data) {\n    return (!isEmpty(data))\n        ? encodeScript(data, true)\n        : new Buff$1(0);\n}\nfunction isEmpty(data) {\n    if (Array.isArray(data)) {\n        return data.length === 0;\n    }\n    if (typeof data === 'string') {\n        if (data === '')\n            return true;\n    }\n    const bytes = Buff$1.bytes(data);\n    return bytes.length === 1 && bytes[0] === 0;\n}\nfunction encodeLocktime(locktime) {\n    if (typeof locktime === 'string') {\n        return Buff$1.hex(locktime, 4);\n    }\n    if (typeof locktime === 'number') {\n        return Buff$1.num(locktime, 4).reverse();\n    }\n    throw new Error('Unrecognized format: ' + String(locktime));\n}\n\nfunction decodeTx(bytes) {\n    if (typeof bytes === 'string') {\n        bytes = Buff$1.hex(bytes).raw;\n    }\n    const stream = new Stream$1(bytes);\n    const version = readVersion(stream);\n    const hasWitness = checkWitnessFlag(stream);\n    const vin = readInputs(stream);\n    const vout = readOutputs(stream);\n    if (hasWitness) {\n        for (const txin of vin) {\n            txin.witness = readWitness$1(stream);\n        }\n    }\n    const locktime = readLocktime(stream);\n    return { version, vin, vout, locktime };\n}\nfunction readVersion(stream) {\n    return stream.read(4).reverse().toNum();\n}\nfunction checkWitnessFlag(stream) {\n    const [marker, flag] = [...stream.peek(2)];\n    if (marker === 0) {\n        stream.read(2);\n        if (flag === 1) {\n            return true;\n        }\n        else {\n            throw new Error(`Invalid witness flag: ${flag}`);\n        }\n    }\n    return false;\n}\nfunction readInputs(stream) {\n    const inputs = [];\n    const vinCount = stream.readSize('le');\n    for (let i = 0; i < vinCount; i++) {\n        inputs.push(readInput(stream));\n    }\n    return inputs;\n}\nfunction readInput(stream) {\n    const txin = {\n        txid: stream.read(32).reverse().toHex(),\n        vout: stream.read(4).reverse().toNum(),\n        scriptSig: readScript(stream, true),\n        sequence: stream.read(4).reverse().toHex(),\n        witness: []\n    };\n    return txin;\n}\nfunction readOutputs(stream) {\n    const outputs = [];\n    const outcount = stream.readSize('le');\n    for (let i = 0; i < outcount; i++) {\n        outputs.push(readOutput(stream));\n    }\n    return outputs;\n}\nfunction readOutput(stream) {\n    const txout = {\n        value: stream.read(8).reverse().big,\n        scriptPubKey: readScript(stream, true)\n    };\n    return txout;\n}\nfunction readWitness$1(stream) {\n    const stack = [];\n    const count = stream.readSize();\n    for (let i = 0; i < count; i++) {\n        const word = readData(stream, true);\n        stack.push(word ?? '');\n    }\n    return stack;\n}\nfunction readData(stream, varint) {\n    const size = (varint === true)\n        ? stream.readSize('le')\n        : stream.size;\n    return size > 0\n        ? stream.read(size).hex\n        : null;\n}\nfunction readScript(stream, varint) {\n    const data = readData(stream, varint);\n    return (data !== null) ? data : [];\n}\nfunction readLocktime(stream) {\n    return stream.read(4).reverse().toNum();\n}\n\nfunction toJson(txdata) {\n    if (isBytes$1(txdata)) {\n        return decodeTx(txdata);\n    }\n    if (typeof txdata === 'object' &&\n        !(txdata instanceof Uint8Array)) {\n        encodeTx(txdata);\n        return createTx(txdata);\n    }\n    throw new Error('Invalid format: ' + String(typeof txdata));\n}\nfunction toBytes(txdata) {\n    if (isBytes$1(txdata)) {\n        decodeTx(txdata);\n        return Buff$1.bytes(txdata);\n    }\n    if (typeof txdata === 'object') {\n        return encodeTx(txdata);\n    }\n    throw new Error('Invalid format: ' + String(typeof txdata));\n}\nconst TxFmt = {\n    toBytes,\n    toJson\n};\n\nconst OUTPUT_TYPES = [\n    ['p2pkh', /^76a914(?<hash>\\w{40})88ac$/],\n    ['p2sh', /^a914(?<hash>\\w{40})87$/],\n    ['p2w-pkh', /^0014(?<hash>\\w{40})$/],\n    ['p2w-sh', /^0020(?<hash>\\w{64})$/],\n    ['p2tr', /^5120(?<hash>\\w{64})$/]\n];\nconst LEAF_VERSIONS = [\n    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce,\n    0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,\n    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee,\n    0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,\n    0x66, 0x7e, 0x80, 0x84, 0x96, 0x98, 0xba, 0xbc,\n    0xbe\n];\nfunction parseAnnex(data) {\n    let item = data.at(-1);\n    if (isHex(item)) {\n        item = Buff$1.hex(item);\n    }\n    if (data.length > 1 &&\n        item instanceof Uint8Array &&\n        item[0] === 0x50) {\n        data.pop();\n        return Buff$1.raw(item);\n    }\n    return null;\n}\nfunction parseBlock(data) {\n    let item = data.at(-1);\n    if (isHex(item)) {\n        item = Buff$1.hex(item);\n    }\n    if (data.length > 1 &&\n        item instanceof Uint8Array &&\n        item.length > 32 &&\n        LEAF_VERSIONS.includes(item[0] & 0xfe)) {\n        data.pop();\n        return Buff$1.raw(item);\n    }\n    return null;\n}\nfunction parseWitScript(data) {\n    if (data.length > 1) {\n        const item = data.at(-1);\n        try {\n            const script = Script.fmt.toBytes(item);\n            data.pop();\n            return script;\n        }\n        catch (err) {\n            return null;\n        }\n    }\n    return null;\n}\nfunction parseParams(data) {\n    const params = [];\n    for (const d of data) {\n        if (isHex(d) ||\n            d instanceof Uint8Array ||\n            typeof d === 'number') {\n            params.push(Buff$1.bytes(d));\n        }\n        else {\n            throw new Error('unrecognized value: ' + String(d));\n        }\n    }\n    return params;\n}\nfunction readWitness(data = []) {\n    const items = [...data];\n    const annex = parseAnnex(items);\n    const cblock = parseBlock(items);\n    const script = parseWitScript(items);\n    const params = parseParams(items);\n    return { annex, cblock, script, params };\n}\nfunction readScriptPubKey(script) {\n    const hex = Script.fmt.toBytes(script, false).hex;\n    for (const [keytype, pattern] of OUTPUT_TYPES) {\n        const type = keytype;\n        const { groups } = pattern.exec(hex) ?? {};\n        const { hash } = groups ?? {};\n        if (isHex(hash)) {\n            return { type, data: Buff$1.hex(hash) };\n        }\n    }\n    return { type: 'raw', data: Buff$1.hex(hex) };\n}\nfunction getTxid(txdata) {\n    const json = TxFmt.toJson(txdata);\n    const data = encodeTx(json, true);\n    return hash256(data).reverse().hex;\n}\nfunction getTxSize(txdata) {\n    const json = TxFmt.toJson(txdata);\n    const bsize = encodeTx(json, true).length;\n    const fsize = encodeTx(json, false).length;\n    const weight = bsize * 3 + fsize;\n    const remain = (weight % 4 > 0) ? 1 : 0;\n    const vsize = Math.floor(weight / 4) + remain;\n    return { size: fsize, bsize, vsize, weight };\n}\n\nconst Tx = {\n    create: createTx,\n    encode: encodeTx,\n    decode: decodeTx,\n    fmt: TxFmt,\n    util: {\n        getTxSize,\n        getTxid,\n        readScriptPubKey,\n        readWitness\n    }\n};\n\nconst ADDRESS_TYPES = [\n    ['1', 'p2pkh', 'main', 20, 'base58'],\n    ['3', 'p2sh', 'main', 20, 'base58'],\n    ['m', 'p2pkh', 'testnet', 20, 'base58'],\n    ['n', 'p2pkh', 'testnet', 20, 'base58'],\n    ['2', 'p2sh', 'testnet', 20, 'base58'],\n    ['bc1q', 'p2w-pkh', 'main', 20, 'bech32'],\n    ['tb1q', 'p2w-pkh', 'testnet', 20, 'bech32'],\n    ['bcrt1q', 'p2w-pkh', 'regtest', 20, 'bech32'],\n    ['bc1q', 'p2w-sh', 'main', 32, 'bech32'],\n    ['tb1q', 'p2w-sh', 'testnet', 32, 'bech32'],\n    ['bcrt1q', 'p2w-sh', 'regtest', 32, 'bech32'],\n    ['bc1p', 'p2tr', 'main', 32, 'bech32m'],\n    ['tb1p', 'p2tr', 'testnet', 32, 'bech32m'],\n    ['bcrt1p', 'p2tr', 'regtest', 32, 'bech32m']\n];\nfunction decodeFormat(address, format) {\n    switch (format) {\n        case 'base58': return Buff$1.b58chk(address).slice(1);\n        case 'bech32': return Buff$1.bech32(address);\n        case 'bech32m': return Buff$1.bech32(address);\n        default: throw new Error('Invalid address format: ' + format);\n    }\n}\nfunction getData(address) {\n    for (const row of ADDRESS_TYPES) {\n        const [prefix, _type, _network, size, format] = row;\n        if (address.startsWith(prefix)) {\n            const bytes = decodeFormat(address, format);\n            if (bytes.length === size)\n                return row;\n        }\n    }\n    throw new Error('Invalid address: ' + address);\n}\nfunction getTool(type) {\n    switch (type) {\n        case 'p2pkh': return P2PKH;\n        case 'p2sh': return P2SH;\n        case 'p2w-pkh': return P2WPKH;\n        case 'p2w-sh': return P2WSH;\n        case 'p2tr': return P2TR;\n        default: throw new Error('Invalid address type: ' + type);\n    }\n}\nfunction decodeAddress(address) {\n    const [prefix, type, network] = getData(address);\n    const tool = getTool(type);\n    const data = tool.decode(address, network);\n    const script = tool.scriptPubKey(data);\n    return { prefix, type, network, data, script };\n}\nfunction fromScriptPubKey(script, network) {\n    const { type, data } = Tx.util.readScriptPubKey(script);\n    const tool = getTool(type);\n    return tool.encode(data, network);\n}\nfunction toScriptPubKey(address) {\n    const { script } = decodeAddress(address);\n    return Script.fmt.toAsm(script, false);\n}\n\nconst Address = {\n    p2pkh: P2PKH,\n    p2sh: P2SH,\n    p2wpkh: P2WPKH,\n    p2wsh: P2WSH,\n    p2tr: P2TR,\n    decode: decodeAddress,\n    fromScriptPubKey,\n    toScriptPubKey\n};\n\nconst VALID_HASH_TYPES$1 = [0x01, 0x02, 0x03];\nfunction hashTx$1(txdata, idx, config = {}) {\n    const { sigflag = 0x01 } = config;\n    const isAnypay = (sigflag & 0x80) === 0x80;\n    const flag = sigflag % 0x80;\n    if (!VALID_HASH_TYPES$1.includes(flag)) {\n        throw new Error('Invalid hash type: ' + String(sigflag));\n    }\n    const tx = Tx.fmt.toJson(txdata);\n    const { version, vin, vout, locktime } = tx;\n    const { txid, vout: prevIdx, prevout, sequence } = vin[idx];\n    const { value } = prevout ?? {};\n    if (value === undefined) {\n        throw new Error('Prevout value is empty!');\n    }\n    let script = config.script;\n    if (script === undefined &&\n        config.pubkey !== undefined) {\n        const pkhash = hash160(config.pubkey);\n        script = `76a914${pkhash.hex}88ac`;\n    }\n    if (script === undefined) {\n        throw new Error('No pubkey / script has been set!');\n    }\n    if (Script.fmt.toAsm(script).includes('OP_CODESEPARATOR')) {\n        throw new Error('This library does not currently support the use of OP_CODESEPARATOR in segwit scripts.');\n    }\n    const sighash = [\n        encodeVersion(version),\n        hashPrevouts(vin, isAnypay),\n        hashSequence$1(vin, flag, isAnypay),\n        encodeTxid(txid),\n        encodePrevOut(prevIdx),\n        Script.encode(script, true),\n        encodeValue(value),\n        encodeSequence(sequence),\n        hashOutputs$1(vout, idx, flag),\n        encodeLocktime(locktime),\n        Buff$1.num(sigflag, 4).reverse()\n    ];\n    return hash256(Buff$1.join(sighash));\n}\nfunction hashPrevouts(vin, isAnypay) {\n    if (isAnypay === true) {\n        return Buff$1.num(0, 32);\n    }\n    const stack = [];\n    for (const { txid, vout } of vin) {\n        stack.push(encodeTxid(txid));\n        stack.push(encodePrevOut(vout));\n    }\n    return hash256(Buff$1.join(stack));\n}\nfunction hashSequence$1(vin, sigflag, isAnyPay) {\n    if (isAnyPay || sigflag !== 0x01) {\n        return Buff$1.num(0, 32);\n    }\n    const stack = [];\n    for (const { sequence } of vin) {\n        stack.push(encodeSequence(sequence));\n    }\n    return hash256(Buff$1.join(stack));\n}\nfunction hashOutputs$1(vout, idx, sigflag) {\n    const stack = [];\n    if (sigflag === 0x01) {\n        for (const { value, scriptPubKey } of vout) {\n            stack.push(encodeValue(value));\n            stack.push(Script.encode(scriptPubKey, true));\n        }\n        return hash256(Buff$1.join(stack));\n    }\n    if (sigflag === 0x03 && idx < vout.length) {\n        const { value, scriptPubKey } = vout[idx];\n        stack.push(encodeValue(value));\n        stack.push(Script.encode(scriptPubKey, true));\n        return hash256(Buff$1.join(stack));\n    }\n    return Buff$1.num(0, 32);\n}\n\nfunction signTx$1(seckey, txdata, index, config = {}) {\n    const { sigflag = 0x01 } = config;\n    const hash = hashTx$1(txdata, index, config);\n    const sig = noble.secp.sign(hash, seckey).toDERRawBytes(true);\n    return Buff$1.join([sig, sigflag]);\n}\n\nfunction verifyTx$1(txdata, index, config = {}) {\n    const tx = Tx.fmt.toJson(txdata);\n    const { throws = false } = config;\n    const { witness = [] } = tx.vin[index];\n    const witnessData = Tx.util.readWitness(witness);\n    const { script, params } = witnessData;\n    let pub = null;\n    if (params.length < 1) {\n        return safeThrow('Invalid witness data: ' + String(witness), throws);\n    }\n    if (config.script === undefined &&\n        script !== null) {\n        config.script = script;\n    }\n    if (config.pubkey !== undefined) {\n        pub = Buff$1.bytes(config.pubkey);\n    }\n    else if (params.length > 1 &&\n        params[1].length === 33) {\n        pub = Buff$1.bytes(params[1]);\n    }\n    else {\n        return safeThrow('No pubkey provided!', throws);\n    }\n    const rawsig = Script.fmt.toParam(params[0]);\n    const signature = rawsig.slice(0, -1);\n    const sigflag = rawsig.slice(-1)[0];\n    const hash = hashTx$1(tx, index, { ...config, sigflag });\n    if (!noble.secp.verify(signature, hash, pub)) {\n        return safeThrow('Invalid signature!', throws);\n    }\n    return true;\n}\n\nconst SWSigner = {\n    hash: hashTx$1,\n    sign: signTx$1,\n    verify: verifyTx$1\n};\n\nconst VALID_HASH_TYPES = [0x00, 0x01, 0x02, 0x03, 0x81, 0x82, 0x83];\nfunction hashTx(template, index, config = {}) {\n    const { extension, sigflag = 0x00, extflag = 0x00, key_version = 0x00, separator_pos = 0xFFFFFFFF } = config;\n    const txdata = Tx.fmt.toJson(template);\n    const { version, vin: input, vout: output, locktime } = txdata;\n    if (index >= input.length) {\n        throw new Error('Index out of bounds: ' + String(index));\n    }\n    if (!VALID_HASH_TYPES.includes(sigflag)) {\n        throw new Error('Invalid hash type: ' + String(sigflag));\n    }\n    if (extflag < 0 || extflag > 127) {\n        throw new Error('Extention flag out of range: ' + String(extflag));\n    }\n    const { txid, vout, sequence, witness = [] } = input[index];\n    const isAnyPay = (sigflag & 0x80) === 0x80;\n    const annex = getAnnexData(witness);\n    const annexBit = (annex !== undefined) ? 1 : 0;\n    const extendBit = (extension !== undefined) ? 1 : 0;\n    const spendType = ((extflag + extendBit) * 2) + annexBit;\n    const hashtag = Buff$1.str('TapSighash').digest;\n    const preimage = [\n        hashtag,\n        hashtag,\n        Buff$1.num(0x00, 1),\n        Buff$1.num(sigflag, 1),\n        encodeVersion(version),\n        encodeLocktime(locktime)\n    ];\n    if (!isAnyPay) {\n        const prevouts = input.map(e => getPrevout(e));\n        preimage.push(hashOutpoints(input), hashAmounts(prevouts), hashScripts(prevouts), hashSequence(input));\n    }\n    if ((sigflag & 0x03) < 2 || (sigflag & 0x03) > 3) {\n        preimage.push(hashOutputs(output));\n    }\n    preimage.push(Buff$1.num(spendType, 1));\n    if (isAnyPay) {\n        const { value, scriptPubKey } = getPrevout(input[index]);\n        preimage.push(encodeTxid(txid), encodePrevOut(vout), encodeValue(value), Script.encode(scriptPubKey, true), encodeSequence(sequence));\n    }\n    else {\n        preimage.push(Buff$1.num(index, 4).reverse());\n    }\n    if (annex !== undefined) {\n        preimage.push(annex);\n    }\n    if ((sigflag & 0x03) === 0x03) {\n        preimage.push(hashOutput(output[index]));\n    }\n    if (extension !== undefined) {\n        preimage.push(Buff$1.bytes(extension), Buff$1.num(key_version), Buff$1.num(separator_pos, 4, 'le'));\n    }\n    return Buff$1.join(preimage).digest;\n}\nfunction hashOutpoints(vin) {\n    const stack = [];\n    for (const { txid, vout } of vin) {\n        stack.push(encodeTxid(txid));\n        stack.push(encodePrevOut(vout));\n    }\n    return Buff$1.join(stack).digest;\n}\nfunction hashSequence(vin) {\n    const stack = [];\n    for (const { sequence } of vin) {\n        stack.push(encodeSequence(sequence));\n    }\n    return Buff$1.join(stack).digest;\n}\nfunction hashAmounts(prevouts) {\n    const stack = [];\n    for (const { value } of prevouts) {\n        stack.push(encodeValue(value));\n    }\n    return Buff$1.join(stack).digest;\n}\nfunction hashScripts(prevouts) {\n    const stack = [];\n    for (const { scriptPubKey } of prevouts) {\n        stack.push(encodeScript(scriptPubKey, true));\n    }\n    return Buff$1.join(stack).digest;\n}\nfunction hashOutputs(vout) {\n    const stack = [];\n    for (const { value, scriptPubKey } of vout) {\n        stack.push(encodeValue(value));\n        stack.push(Script.encode(scriptPubKey, true));\n    }\n    return Buff$1.join(stack).digest;\n}\nfunction hashOutput(vout) {\n    return Buff$1.join([\n        encodeValue(vout.value),\n        Script.encode(vout.scriptPubKey, true)\n    ]).digest;\n}\nfunction getAnnexData(witness) {\n    if (witness === undefined)\n        return;\n    if (witness.length < 2)\n        return;\n    let annex = witness.at(-1);\n    if (typeof annex === 'string') {\n        annex = Buff$1.hex(annex);\n    }\n    if (annex instanceof Uint8Array &&\n        annex[0] === 0x50) {\n        return Buff$1.raw(annex).prefixSize('be').digest;\n    }\n    return undefined;\n}\nfunction getPrevout(vin) {\n    if (vin.prevout === undefined) {\n        throw new Error('Prevout data missing for input: ' + String(vin.txid));\n    }\n    return vin.prevout;\n}\n\nconst FIELD_SIZE = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn;\nconst CURVE_ORDER = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n;\nfunction signTx(seckey, txdata, index, config = {}) {\n    const { sigflag = 0x00 } = config;\n    const hash = hashTx(txdata, index, config);\n    const sig = sign(seckey, hash);\n    return (sigflag === 0x00)\n        ? Buff$1.raw(sig)\n        : Buff$1.join([sig, sigflag]);\n}\nfunction sign(secret, message, rand = Buff$1.random(32)) {\n    const m = Buff$1.bytes(message);\n    const dp = new Field(secret);\n    const P = dp.point;\n    const d = (P.hasEvenY) ? dp.big : dp.negated.big;\n    const a = hashTag('BIP0340/aux', Buff$1.bytes(rand));\n    const t = d ^ a.big;\n    const n = hashTag('BIP0340/nonce', t, P.x.raw, m);\n    const kp = new Field(n);\n    const R = kp.point;\n    const k = (R.hasEvenY) ? kp.big : kp.negated.big;\n    const e = new Field(hashTag('BIP0340/challenge', R.x.raw, P.x.raw, m));\n    const s = new Field(k + (e.big * d));\n    return Buff$1.join([R.x.raw, s.raw]);\n}\nfunction verify(signature, message, pubkey, shouldThrow = false) {\n    const P = Point.from_x(xOnlyPub(pubkey));\n    const m = Buff$1.bytes(message);\n    const stream = Buff$1.bytes(signature).stream;\n    if (stream.size < 64) {\n        safeThrow('Signature length is too small: ' + String(stream.size), shouldThrow);\n    }\n    const r = stream.read(32);\n    if (r.big > FIELD_SIZE) {\n        safeThrow('Signature r value greater than field size!', shouldThrow);\n    }\n    const s = stream.read(32);\n    if (s.big > CURVE_ORDER) {\n        safeThrow('Signature s value greater than curve order!', shouldThrow);\n    }\n    const e = new Field(hashTag('BIP0340/challenge', r.raw, P.x.raw, m));\n    const sG = new Field(s).point;\n    const eP = P.mul(e.big);\n    const R = sG.sub(eP);\n    if (R.hasOddY) {\n        safeThrow('Signature R value has odd Y coordinate!', shouldThrow);\n    }\n    if (R.x.big === 0n) {\n        safeThrow('Signature R value is infinite!', shouldThrow);\n    }\n    return R.x.big === r.big;\n}\n\nconst DEFAULT_VERSION$1 = 0xc0;\nfunction getTapTag(tag) {\n    const htag = Buff$1.str(tag).digest;\n    return Buff$1.join([htag, htag]);\n}\nfunction getTapLeaf(data, version = DEFAULT_VERSION$1) {\n    return Buff$1.join([\n        getTapTag('TapLeaf'),\n        getVersion(version),\n        Buff$1.bytes(data)\n    ]).digest.hex;\n}\nfunction getTapScript(script, version) {\n    return getTapLeaf(Script.fmt.toBytes(script), version);\n}\nfunction getTapBranch(leafA, leafB) {\n    if (leafB < leafA) {\n        [leafA, leafB] = [leafB, leafA];\n    }\n    return Buff$1.join([\n        getTapTag('TapBranch'),\n        Buff$1.hex(leafA).raw,\n        Buff$1.hex(leafB).raw\n    ]).digest.hex;\n}\nfunction getTapRoot(leaves) {\n    return Buff$1.hex(merkleize(leaves)[0]);\n}\nfunction merkleize(taptree, target, path = []) {\n    const leaves = [];\n    const tree = [];\n    if (taptree.length < 1) {\n        throw new Error('Tree is empty!');\n    }\n    for (let i = 0; i < taptree.length; i++) {\n        const leaf = taptree[i];\n        if (Array.isArray(leaf)) {\n            const [r, t, p] = merkleize(leaf, target);\n            target = t;\n            leaves.push(r);\n            for (const e of p) {\n                path.push(e);\n            }\n        }\n        else {\n            leaves.push(leaf);\n        }\n    }\n    if (leaves.length === 1) {\n        return [leaves[0], target, path];\n    }\n    leaves.sort();\n    if (leaves.length % 2 !== 0) {\n        leaves.push(leaves[leaves.length - 1]);\n    }\n    for (let i = 0; i < leaves.length - 1; i += 2) {\n        const branch = getTapBranch(leaves[i], leaves[i + 1]);\n        tree.push(branch);\n        if (typeof target === 'string') {\n            if (target === leaves[i]) {\n                path.push(leaves[i + 1]);\n                target = branch;\n            }\n            else if (target === leaves[i + 1]) {\n                path.push(leaves[i]);\n                target = branch;\n            }\n        }\n    }\n    return merkleize(tree, target, path);\n}\nfunction getVersion(version = 0xc0) {\n    return version & 0xfe;\n}\n\nfunction getTapTweak(key, data = new Uint8Array(), isPrivate = false) {\n    const pub = (isPrivate)\n        ? new Field(key).point.x.raw\n        : xOnlyPub(key);\n    return Buff$1.join([getTapTag('TapTweak'), pub, Buff$1.bytes(data)]).digest;\n}\nfunction getTweakedKey(intkey, data, isPrivate = false) {\n    if (data === undefined)\n        data = new Uint8Array();\n    const k = Buff$1.bytes(intkey);\n    const t = getTapTweak(intkey, data, isPrivate);\n    if (isPrivate) {\n        return tweakSecKey(k, t);\n    }\n    else {\n        return tweakPubKey(k, t);\n    }\n}\nfunction getTweakedPub(pubkey, data) {\n    return getTweakedKey(pubkey, data);\n}\nfunction getTweakedSec(seckey, data) {\n    return getTweakedKey(seckey, data, true);\n}\nfunction tweakSecKey(seckey, tweak) {\n    let sec = new Field(seckey);\n    if (sec.point.hasOddY) {\n        sec = sec.negate();\n    }\n    return Buff$1.raw(sec.add(tweak).raw);\n}\nfunction tweakPubKey(pubkey, tweak) {\n    pubkey = xOnlyPub(pubkey);\n    const P = Point.from_x(pubkey);\n    const Q = P.add(tweak);\n    return Buff$1.raw(Q.raw);\n}\nfunction getScriptOnlyPubkey() {\n    const G = Buff$1.hex('0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8');\n    return Point.from_x(G.digest).x;\n}\nconst SCRIPT_PUBKEY = getScriptOnlyPubkey();\n\nconst DEFAULT_VERSION = 0xc0;\nfunction getTapSecKey(seckey, config = {}) {\n    return getTapKey(seckey, { ...config, isPrivate: true });\n}\nfunction getTapPubKey(pubkey, config = {}) {\n    return getTapKey(pubkey, { ...config, isPrivate: false });\n}\nfunction getTapKey(intkey, config = {}) {\n    const { isPrivate = false, tree = [], version = DEFAULT_VERSION } = config;\n    const pubkey = (isPrivate)\n        ? util$1.getPublicKey(intkey, true)\n        : xOnlyPub(intkey);\n    let { target } = config;\n    if (target !== undefined)\n        target = Buff$1.bytes(target).hex;\n    let tapkey, ctrlpath = [];\n    if (tree.length > 0) {\n        const [root, _t, path] = merkleize(tree, target);\n        ctrlpath = path;\n        tapkey = getTweakedKey(intkey, root, isPrivate);\n    }\n    else {\n        if (target !== undefined) {\n            tapkey = getTweakedKey(intkey, target, isPrivate);\n        }\n        else {\n            tapkey = getTweakedKey(intkey, undefined, isPrivate);\n        }\n    }\n    const parity = (isPrivate)\n        ? util$1.getPublicKey(tapkey)[0]\n        : tapkey[0];\n    const cbit = Buff$1.num(version + readParityBit(parity));\n    const block = [cbit, pubkey];\n    if (ctrlpath.length > 0) {\n        ctrlpath.forEach(e => block.push(Buff$1.hex(e)));\n    }\n    const cblock = Buff$1.join(block);\n    if (target !== undefined) {\n        if (!checkPath(tapkey, target, cblock, config)) {\n            throw new Error('Path checking failed! Unable to generate path.');\n        }\n    }\n    return [xOnlyPub(tapkey).hex, cblock.hex];\n}\nfunction checkPath(tapkey, target, cblock, config = {}) {\n    const { isPrivate = false, throws = false } = config;\n    const { parity, paths, intkey } = readCtrlBlock(cblock);\n    const pub = (isPrivate)\n        ? util$1.getPublicKey(tapkey, true)\n        : xOnlyPub(tapkey);\n    const extkey = Buff$1.join([parity, pub]);\n    if (extkey.length !== 33) {\n        return safeThrow('Invalid tapkey: ' + extkey.hex, throws);\n    }\n    let branch = Buff$1.bytes(target).hex;\n    for (const path of paths) {\n        branch = getTapBranch(branch, path);\n    }\n    const k = getTweakedKey(intkey, branch);\n    return (Buff$1.raw(k).hex === Buff$1.raw(extkey).hex);\n}\nfunction readCtrlBlock(cblock) {\n    const buffer = new Stream$1(Buff$1.bytes(cblock));\n    const cbyte = buffer.read(1).num;\n    const intkey = buffer.read(32);\n    const [version, parity] = (cbyte % 2 === 0)\n        ? [cbyte, 0x02]\n        : [cbyte - 1, 0x03];\n    const paths = [];\n    while (buffer.size >= 32) {\n        paths.push(buffer.read(32).hex);\n    }\n    if (buffer.size !== 0) {\n        throw new Error('Non-empty buffer on control block: ' + String(buffer));\n    }\n    return { intkey, paths, parity, version };\n}\nfunction readParityBit(parity = 0x02) {\n    if (parity === 0 || parity === 1)\n        return parity;\n    if (parity === 0x02 || parity === '02')\n        return 0;\n    if (parity === 0x03 || parity === '03')\n        return 1;\n    throw new Error('Invalid parity bit: ' + String(parity));\n}\n\nfunction verifyTx(txdata, index, config = {}) {\n    const tx = Tx.fmt.toJson(txdata);\n    const { throws = false } = config;\n    const { prevout, witness = [] } = tx.vin[index];\n    const witnessData = Tx.util.readWitness(witness);\n    const { cblock, script, params } = witnessData;\n    let pub;\n    if (params.length < 1) {\n        return safeThrow('Invalid witness data: ' + String(witness), throws);\n    }\n    const { scriptPubKey } = prevout ?? {};\n    if (scriptPubKey === undefined) {\n        return safeThrow('Prevout scriptPubKey is empty!', throws);\n    }\n    const { type, data: tapkey } = Tx.util.readScriptPubKey(scriptPubKey);\n    if (type !== 'p2tr') {\n        return safeThrow('Prevout script is not a valid taproot output:' + tapkey.hex, throws);\n    }\n    if (tapkey.length !== 32) {\n        return safeThrow('Invalid tapkey length: ' + String(tapkey.length), throws);\n    }\n    if (cblock !== null &&\n        script !== null) {\n        const version = cblock[0] & 0xfe;\n        const target = getTapLeaf(script, version);\n        config.extension = target;\n        if (!checkPath(tapkey, target, cblock, { throws })) {\n            return safeThrow('cblock verification failed!', throws);\n        }\n    }\n    if (config.pubkey !== undefined) {\n        pub = Buff$1.bytes(config.pubkey);\n    }\n    else if (params.length > 1 && params[1].length === 32) {\n        pub = Buff$1.bytes(params[1]);\n    }\n    else {\n        pub = Buff$1.bytes(tapkey);\n    }\n    const rawsig = Script.fmt.toParam(params[0]);\n    const stream = new Stream$1(rawsig);\n    const signature = stream.read(64).raw;\n    if (stream.size === 1) {\n        config.sigflag = stream.read(1).num;\n        if (config.sigflag === 0x00) {\n            return safeThrow('0x00 is not a valid appended sigflag!', throws);\n        }\n    }\n    const hash = hashTx(tx, index, config);\n    if (!verify(signature, hash, pub, throws)) {\n        return safeThrow('Invalid signature!', throws);\n    }\n    return true;\n}\n\nconst TRSigner = {\n    hash: hashTx,\n    sign: signTx,\n    verify: verifyTx\n};\n\nconst Signer = {\n    segwit: SWSigner,\n    taproot: TRSigner\n};\n\nconst TapTree = {\n    getTag: getTapTag,\n    getLeaf: getTapLeaf,\n    getBranch: getTapBranch,\n    getRoot: getTapRoot\n};\nconst TapUtil = {\n    readCtrlBlock: readCtrlBlock,\n    readParityBit: readParityBit\n};\nconst TapTweak = {\n    getPubKey: getTweakedPub,\n    getSecKey: getTweakedSec,\n    getTweak: getTapTweak,\n    tweakSecKey: tweakSecKey,\n    tweakPubKey: tweakPubKey\n};\nconst Tap = {\n    getPubKey: getTapPubKey,\n    getSecKey: getTapSecKey,\n    encodeScript: getTapScript,\n    checkPath: checkPath,\n    tree: TapTree,\n    tweak: TapTweak,\n    util: TapUtil,\n    SCRIPT_PUBKEY: SCRIPT_PUBKEY\n};\n\nclass TxScript {\n    constructor(script) {\n        this._buff = Buff$1.raw(encodeScript(script));\n    }\n    get raw() {\n        return this._buff.raw;\n    }\n    get hex() {\n        return this._buff.hex;\n    }\n    get asm() {\n        return decodeScript(this._buff);\n    }\n    getHash(format, version) {\n        switch (format) {\n            case 'p2w':\n                return hash256(this._buff).hex;\n            case 'p2sh':\n                return hash160(this._buff).hex;\n            case 'p2tr':\n                return TapTree.getLeaf(this._buff, version);\n            default:\n                throw new Error('Unrecognized format: ' + format);\n        }\n    }\n    toJSON() {\n        return this.asm ?? [];\n    }\n}\n\nconst MAX_VAL = 0xFFFFFFFF;\nconst NO_LOCK = (1 << 31);\nconst TIME_MOD = 512;\nconst LOCK_TYPE = (1 << 22);\nclass TxSequence {\n    constructor(value) {\n        if (typeof value === 'string') {\n            this.value = parseInt(value, 16);\n        }\n        else {\n            this.value = value;\n        }\n    }\n    get isReplaceable() {\n        return this.value < MAX_VAL;\n    }\n    get isLocked() {\n        return !(this.value !== MAX_VAL || (this.value & NO_LOCK) !== 0);\n    }\n    get isTimelock() {\n        return (this.value & LOCK_TYPE) !== 0;\n    }\n    get timestamp() {\n        return this.isLocked\n            ? this.isTimelock\n                ? this.value * TIME_MOD\n                : this.value * TIME_MOD * 600\n            : 0;\n    }\n    set timestamp(value) {\n        this.value = Math.ceil(value / TIME_MOD);\n    }\n    get blockheight() {\n        return this.isLocked\n            ? !this.isTimelock\n                ? this.value\n                : Math.ceil((this.value * TIME_MOD) / 600)\n            : 0;\n    }\n    set blockheight(value) {\n        this.value = value;\n    }\n    get estDate() {\n        return this.isTimelock\n            ? new Date(Date.now() + (this.value * TIME_MOD * 1000))\n            : new Date(Date.now() + (this.value * 600 * 1000));\n    }\n    set estDate(date) {\n        const delta = date.getTime() - Date.now();\n        this.value = (delta > (TIME_MOD * 1000))\n            ? Math.ceil(delta / 1000 / TIME_MOD)\n            : 1;\n    }\n    toJSON() {\n        return this.value;\n    }\n}\n\nlet TxOutput$1 = class TxOutput {\n    constructor(txout) {\n        this.value = BigInt(txout.value);\n        this.scriptPubKey = new TxScript(txout.scriptPubKey);\n    }\n    get type() {\n        const { type } = readScriptPubKey(this.scriptPubKey.raw);\n        return type;\n    }\n};\n\nclass TxWitness {\n    constructor(data, format) {\n        this._data = data;\n        this._meta = readWitness(data);\n        this.format = format;\n    }\n    get length() {\n        return this._data.length;\n    }\n    get annex() {\n        const annex = this._meta.annex;\n        return (annex !== null)\n            ? Buff$1.raw(annex).hex\n            : undefined;\n    }\n    get cblock() {\n        const cblock = this._meta.cblock;\n        return (cblock !== null)\n            ? Buff$1.raw(cblock).hex\n            : undefined;\n    }\n    get script() {\n        const script = this._meta.script;\n        return (script !== null)\n            ? Script.decode(script)\n            : undefined;\n    }\n    get params() {\n        return this._meta.params;\n    }\n    toJSON() {\n        return this._data;\n    }\n}\n\nlet TxInput$1 = class TxInput {\n    constructor(txdata, index) {\n        this._tx = txdata;\n        this.idx = index;\n    }\n    get data() {\n        return this._tx.vin[this.idx];\n    }\n    get txid() {\n        return this.data.txid;\n    }\n    get vout() {\n        return this.data.vout;\n    }\n    get prevout() {\n        return (this.data.prevout !== undefined)\n            ? new TxOutput$1(this.data.prevout)\n            : undefined;\n    }\n    get scriptSig() {\n        return new TxScript(this.data.scriptSig);\n    }\n    get sequence() {\n        return new TxSequence(this.data.sequence);\n    }\n    get witness() {\n        return new TxWitness(this.data.witness);\n    }\n    get type() {\n        if (this.prevout !== undefined) {\n            const script = this.prevout.scriptPubKey.raw;\n            const { type } = readScriptPubKey(script);\n            if (type === 'p2sh') {\n                const asm = this.scriptSig.asm;\n                if (asm[0] === 'OP_0') {\n                    if (asm[1].length === 20) {\n                        return 'p2w-p2pkh';\n                    }\n                    if (asm[1].length === 32) {\n                        return 'p2w-p2sh';\n                    }\n                }\n                return 'p2sh';\n            }\n            return type;\n        }\n        return 'raw';\n    }\n    sign(seckey, config) {\n        if (this.type.startsWith('p2w')) {\n            return Signer.segwit.sign(seckey, this._tx, this.idx, config);\n        }\n        if (this.type.startsWith('p2tr')) {\n            return Signer.taproot.sign(seckey, this._tx, this.idx, config);\n        }\n        if (this.type.startsWith('p2pkh') ||\n            this.type.startsWith('p2sh')) {\n            throw new Error('This library does not support signing legacy transactions.');\n        }\n        throw new Error('Unable to sign this input type:' + String(this.type));\n    }\n};\n\nconst LOCKTIME_THRESHOLD = 500000000;\nclass TxLocktime {\n    constructor(value = 0) {\n        this.value = Buff$1.bytes(value).num;\n    }\n    get isTimelock() {\n        return this.value > LOCKTIME_THRESHOLD;\n    }\n    get timestamp() {\n        return this.isTimelock\n            ? this.value\n            : this.value * 600;\n    }\n    set timestamp(value) {\n        this.value = value;\n    }\n    get blockheight() {\n        return !this.isTimelock\n            ? this.value\n            : Math.floor(this.value / 600);\n    }\n    set blockheight(value) {\n        this.value = value;\n    }\n    get estDate() {\n        return this.isTimelock\n            ? new Date(Date.now() + (this.value * 1000))\n            : new Date(Date.now() + (this.value * 600 * 1000));\n    }\n    set estDate(date) {\n        this.value = Math.floor((date.getTime() - Date.now()) / 1000);\n    }\n    toJSON() {\n        return this.value;\n    }\n}\n\nvar util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: issueData.message || errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            getErrorMap(),\n            errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            syncPairs.push({\n                key: await pair.key,\n                value: await pair.value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (typeof value.value !== \"undefined\" || pair.alwaysSet) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        if (typeof ctx.data === \"undefined\") {\n            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };\n        }\n        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this, this._def);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[a-z][a-z0-9]*$/;\nconst ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;\nconst uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\nconst emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;\nconst ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;\nconst ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\n// Adapted from https://stackoverflow.com/a/3143231\nconst datetimeRegex = (args) => {\n    if (args.precision) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}Z$`);\n        }\n    }\n    else if (args.precision === 0) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$`);\n        }\n    }\n    else {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$`);\n        }\n    }\n};\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n        /**\n         * @deprecated Use z.string().min(1) instead.\n         * @see {@link ZodString.min}\n         */\n        this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));\n        this.trim = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n        this.toLowerCase = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n        this.toUpperCase = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            }\n            //\n            );\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = BigInt(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    syncPairs.push({\n                        key,\n                        value: await pair.value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return Object.keys(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else {\n        return null;\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            return OK(async (...args) => {\n                const error = new ZodError([]);\n                const parsedArgs = await this._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await fn(...parsedArgs);\n                const parsedReturns = await this._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            return OK((...args) => {\n                const parsedArgs = this._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = fn(...parsedArgs.data);\n                const parsedReturns = this._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (this._def.values.indexOf(input.data) === -1) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values) {\n        return ZodEnum.create(values);\n    }\n    exclude(values) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (nativeEnumValues.indexOf(input.data) === -1) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then((processed) => {\n                    return this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                });\n            }\n            else {\n                return this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc\n            // effect: RefinementEffect<any>\n            ) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nconst custom = (check, params = {}, \n/*\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) => {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            if (!check(data)) {\n                const p = typeof params === \"function\"\n                    ? params(data)\n                    : typeof params === \"string\"\n                        ? { message: params }\n                        : params;\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n            }\n        });\n    return ZodAny.create();\n};\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nconst hexstr = z.string().regex(/^[a-fA-F0-9]$/);\nconst hash = z.string().regex(/^[a-fA-F0-9]{64}$/);\nconst uint32 = z.number().min(0).max(0xFFFFFFFF);\nconst uint64 = z.bigint();\nconst byteArr = z.instanceof(Uint8Array);\nconst asmcode = z.union([hexstr, uint32, z.string(), byteArr]).array();\nconst script = z.union([asmcode, hexstr, byteArr]);\nconst witness = z.array(script);\nconst TxOutput = z.object({\n    value: z.union([uint32, uint64]),\n    scriptPubKey: script\n});\nconst TxInput = z.object({\n    txid: hash,\n    vout: uint32,\n    scriptSig: script,\n    sequence: uint32,\n    prevout: TxOutput.optional(),\n    witness\n});\nconst TxData = z.object({\n    version: uint32,\n    vin: z.array(TxInput),\n    vout: z.array(TxOutput),\n    locktime: uint32\n});\nconst Schema = {\n    TxData,\n    TxInput,\n    TxOutput,\n    witness,\n    script,\n    hexstr,\n    hash,\n    uint32,\n    uint64\n};\n\nclass Transaction {\n    constructor(txdata) {\n        if (typeof txdata === 'string') {\n            txdata = Buff$1.hex(txdata);\n        }\n        if (txdata instanceof Uint8Array) {\n            txdata = Tx.decode(txdata);\n        }\n        const schema = Schema.TxData;\n        this._data = schema.parse(Tx.create(txdata));\n    }\n    get data() {\n        return this._data;\n    }\n    get version() {\n        return this.data.version;\n    }\n    get vin() {\n        return this.data.vin.map((_e, i) => new TxInput$1(this.data, i));\n    }\n    get vout() {\n        return this.data.vout.map((e) => new TxOutput$1(e));\n    }\n    get locktime() {\n        return new TxLocktime(this.data.locktime);\n    }\n    get base() {\n        return Tx.encode(this.data, true);\n    }\n    get buff() {\n        return Tx.encode(this.data);\n    }\n    get raw() {\n        return this.buff.raw;\n    }\n    get hex() {\n        return this.buff.hex;\n    }\n    get size() {\n        return this.raw.length;\n    }\n    get bsize() {\n        return this.base.length;\n    }\n    get weight() {\n        return this.bsize * 3 + this.size;\n    }\n    get vsize() {\n        const remainder = (this.weight % 4 > 0) ? 1 : 0;\n        return Math.floor(this.weight / 4) + remainder;\n    }\n    get hash() {\n        const hash = hash256(this.buff);\n        return hash.reverse().hex;\n    }\n    get txid() {\n        const hash = hash256(this.base);\n        return hash.reverse().hex;\n    }\n    async export() {\n        const { size, weight, vsize, hex } = this;\n        const txid = this.txid;\n        const hash = this.hash;\n        return { txid, hash, ...this.data, size, weight, vsize, hex };\n    }\n}\n\n\n//# sourceMappingURL=module.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cmdcode/tapscript/dist/module.mjs\n");

/***/ })

};
;