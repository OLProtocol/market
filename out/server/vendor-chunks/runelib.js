"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/runelib";
exports.ids = ["vendor-chunks/runelib"];
exports.modules = {

/***/ "(ssr)/./node_modules/runelib/dist/base26.js":
/*!*********************************************!*\
  !*** ./node_modules/runelib/dist/base26.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.base26Decode = exports.base26Encode = void 0;\nfunction base26Encode(input) {\n    let result = 0n;\n    for (let i = 0; i < input.length; i++) {\n        const charCode = BigInt(input.charCodeAt(i) - 'A'.charCodeAt(0));\n        const iInv = BigInt(input.length) - 1n - BigInt(i);\n        if (iInv == 0n) {\n            result += charCode;\n        }\n        else {\n            const base = 26n ** iInv;\n            result += base * (charCode + 1n);\n        }\n    }\n    return result;\n}\nexports.base26Encode = base26Encode;\nfunction base26Decode(s) {\n    if (s === 340282366920938463463374607431768211455n) {\n        return \"BCGDENLQRQWDSLRUGSNLBTMFIJAV\";\n    }\n    s += 1n;\n    let symbol = [];\n    while (s > 0) {\n        const i = (s - 1n) % 26n;\n        symbol.push(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".charAt(Number(i)));\n        s = (s - 1n) / 26n;\n    }\n    return symbol.reverse().join('');\n}\nexports.base26Decode = base26Decode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcnVuZWxpYi9kaXN0L2Jhc2UyNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxvQkFBb0I7QUFDM0M7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvcnVuZWxpYi9kaXN0L2Jhc2UyNi5qcz9hNTE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5iYXNlMjZEZWNvZGUgPSBleHBvcnRzLmJhc2UyNkVuY29kZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGJhc2UyNkVuY29kZShpbnB1dCkge1xuICAgIGxldCByZXN1bHQgPSAwbjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoYXJDb2RlID0gQmlnSW50KGlucHV0LmNoYXJDb2RlQXQoaSkgLSAnQScuY2hhckNvZGVBdCgwKSk7XG4gICAgICAgIGNvbnN0IGlJbnYgPSBCaWdJbnQoaW5wdXQubGVuZ3RoKSAtIDFuIC0gQmlnSW50KGkpO1xuICAgICAgICBpZiAoaUludiA9PSAwbikge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGNoYXJDb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYmFzZSA9IDI2biAqKiBpSW52O1xuICAgICAgICAgICAgcmVzdWx0ICs9IGJhc2UgKiAoY2hhckNvZGUgKyAxbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuYmFzZTI2RW5jb2RlID0gYmFzZTI2RW5jb2RlO1xuZnVuY3Rpb24gYmFzZTI2RGVjb2RlKHMpIHtcbiAgICBpZiAocyA9PT0gMzQwMjgyMzY2OTIwOTM4NDYzNDYzMzc0NjA3NDMxNzY4MjExNDU1bikge1xuICAgICAgICByZXR1cm4gXCJCQ0dERU5MUVJRV0RTTFJVR1NOTEJUTUZJSkFWXCI7XG4gICAgfVxuICAgIHMgKz0gMW47XG4gICAgbGV0IHN5bWJvbCA9IFtdO1xuICAgIHdoaWxlIChzID4gMCkge1xuICAgICAgICBjb25zdCBpID0gKHMgLSAxbikgJSAyNm47XG4gICAgICAgIHN5bWJvbC5wdXNoKFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcIi5jaGFyQXQoTnVtYmVyKGkpKSk7XG4gICAgICAgIHMgPSAocyAtIDFuKSAvIDI2bjtcbiAgICB9XG4gICAgcmV0dXJuIHN5bWJvbC5yZXZlcnNlKCkuam9pbignJyk7XG59XG5leHBvcnRzLmJhc2UyNkRlY29kZSA9IGJhc2UyNkRlY29kZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/runelib/dist/base26.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/runelib/dist/fts.js":
/*!******************************************!*\
  !*** ./node_modules/runelib/dist/fts.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.none = exports.some = void 0;\nclass None {\n    constructor() { }\n    isSome() {\n        return false;\n    }\n    map(f) {\n        return new None();\n    }\n    value() {\n        return null;\n    }\n}\nclass Some {\n    constructor(value) {\n        this._value = value;\n    }\n    isSome() {\n        return true;\n    }\n    map(f) {\n        return new Some(f(this.value()));\n    }\n    value() {\n        return this._value;\n    }\n}\nfunction some(t) {\n    return new Some(t);\n}\nexports.some = some;\nfunction none() {\n    return new None();\n}\nexports.none = none;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcnVuZWxpYi9kaXN0L2Z0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZLEdBQUcsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9ydW5lbGliL2Rpc3QvZnRzLmpzPzczNDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5vbmUgPSBleHBvcnRzLnNvbWUgPSB2b2lkIDA7XG5jbGFzcyBOb25lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuICAgIGlzU29tZSgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBtYXAoZikge1xuICAgICAgICByZXR1cm4gbmV3IE5vbmUoKTtcbiAgICB9XG4gICAgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmNsYXNzIFNvbWUge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGlzU29tZSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIG1hcChmKSB7XG4gICAgICAgIHJldHVybiBuZXcgU29tZShmKHRoaXMudmFsdWUoKSkpO1xuICAgIH1cbiAgICB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNvbWUodCkge1xuICAgIHJldHVybiBuZXcgU29tZSh0KTtcbn1cbmV4cG9ydHMuc29tZSA9IHNvbWU7XG5mdW5jdGlvbiBub25lKCkge1xuICAgIHJldHVybiBuZXcgTm9uZSgpO1xufVxuZXhwb3J0cy5ub25lID0gbm9uZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/runelib/dist/fts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/runelib/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/runelib/dist/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.removeSpacers = exports.getSpacersVal = exports.applySpacers = exports.some = exports.none = void 0;\n__exportStar(__webpack_require__(/*! ./runestones */ \"(ssr)/./node_modules/runelib/dist/runestones.js\"), exports);\nvar fts_1 = __webpack_require__(/*! ./fts */ \"(ssr)/./node_modules/runelib/dist/fts.js\");\nObject.defineProperty(exports, \"none\", ({ enumerable: true, get: function () { return fts_1.none; } }));\nObject.defineProperty(exports, \"some\", ({ enumerable: true, get: function () { return fts_1.some; } }));\nvar spacers_1 = __webpack_require__(/*! ./spacers */ \"(ssr)/./node_modules/runelib/dist/spacers.js\");\nObject.defineProperty(exports, \"applySpacers\", ({ enumerable: true, get: function () { return spacers_1.applySpacers; } }));\nObject.defineProperty(exports, \"getSpacersVal\", ({ enumerable: true, get: function () { return spacers_1.getSpacersVal; } }));\nObject.defineProperty(exports, \"removeSpacers\", ({ enumerable: true, get: function () { return spacers_1.removeSpacers; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcnVuZWxpYi9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLHFCQUFxQixHQUFHLG9CQUFvQixHQUFHLFlBQVksR0FBRyxZQUFZO0FBQ2xHLGFBQWEsbUJBQU8sQ0FBQyxxRUFBYztBQUNuQyxZQUFZLG1CQUFPLENBQUMsdURBQU87QUFDM0Isd0NBQXVDLEVBQUUscUNBQXFDLHNCQUFzQixFQUFDO0FBQ3JHLHdDQUF1QyxFQUFFLHFDQUFxQyxzQkFBc0IsRUFBQztBQUNyRyxnQkFBZ0IsbUJBQU8sQ0FBQywrREFBVztBQUNuQyxnREFBK0MsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDekgsaURBQWdELEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQzNILGlEQUFnRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3J1bmVsaWIvZGlzdC9pbmRleC5qcz83ZTQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlbW92ZVNwYWNlcnMgPSBleHBvcnRzLmdldFNwYWNlcnNWYWwgPSBleHBvcnRzLmFwcGx5U3BhY2VycyA9IGV4cG9ydHMuc29tZSA9IGV4cG9ydHMubm9uZSA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ydW5lc3RvbmVzXCIpLCBleHBvcnRzKTtcbnZhciBmdHNfMSA9IHJlcXVpcmUoXCIuL2Z0c1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5vbmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ0c18xLm5vbmU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzb21lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdHNfMS5zb21lOyB9IH0pO1xudmFyIHNwYWNlcnNfMSA9IHJlcXVpcmUoXCIuL3NwYWNlcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhcHBseVNwYWNlcnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNwYWNlcnNfMS5hcHBseVNwYWNlcnM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRTcGFjZXJzVmFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzcGFjZXJzXzEuZ2V0U3BhY2Vyc1ZhbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbW92ZVNwYWNlcnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNwYWNlcnNfMS5yZW1vdmVTcGFjZXJzOyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/runelib/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/runelib/dist/leb128.js":
/*!*********************************************!*\
  !*** ./node_modules/runelib/dist/leb128.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeLEB128 = exports.encodeLEB128 = void 0;\nfunction encodeLEB128(value) {\n    const bytes = [];\n    let more = true;\n    while (more) {\n        let byte = Number(value & BigInt(0x7F)); // Get the lowest 7 bits\n        value >>= BigInt(7);\n        if (value === BigInt(0)) { // No more data to encode\n            more = false;\n        }\n        else { // More bytes to come\n            byte |= 0x80; // Set the continuation bit\n        }\n        bytes.push(byte);\n    }\n    // Convert array to Buffer\n    return bytes;\n}\nexports.encodeLEB128 = encodeLEB128;\nfunction decodeLEB128(buf) {\n    let n = BigInt(0);\n    for (let i = 0; i < buf.length; i++) {\n        const byte = BigInt(buf[i]);\n        if (i > 18) {\n            throw new Error(\"Overlong\");\n        }\n        let value = byte & BigInt(127);\n        if ((i == 18) && ((value & BigInt(124)) != BigInt(0))) {\n            throw new Error(\"Overflow\");\n        }\n        n |= value << (BigInt(7) * BigInt(i));\n        if ((byte & BigInt(128)) == BigInt(0)) {\n            return {\n                n,\n                len: i + 1\n            };\n        }\n    }\n    throw new Error(\"Unterminated\");\n}\nexports.decodeLEB128 = decodeLEB128;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcnVuZWxpYi9kaXN0L2xlYjEyOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxvQkFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBLGVBQWU7QUFDZiwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3J1bmVsaWIvZGlzdC9sZWIxMjguanM/ODQwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlTEVCMTI4ID0gZXhwb3J0cy5lbmNvZGVMRUIxMjggPSB2b2lkIDA7XG5mdW5jdGlvbiBlbmNvZGVMRUIxMjgodmFsdWUpIHtcbiAgICBjb25zdCBieXRlcyA9IFtdO1xuICAgIGxldCBtb3JlID0gdHJ1ZTtcbiAgICB3aGlsZSAobW9yZSkge1xuICAgICAgICBsZXQgYnl0ZSA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweDdGKSk7IC8vIEdldCB0aGUgbG93ZXN0IDcgYml0c1xuICAgICAgICB2YWx1ZSA+Pj0gQmlnSW50KDcpO1xuICAgICAgICBpZiAodmFsdWUgPT09IEJpZ0ludCgwKSkgeyAvLyBObyBtb3JlIGRhdGEgdG8gZW5jb2RlXG4gICAgICAgICAgICBtb3JlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIE1vcmUgYnl0ZXMgdG8gY29tZVxuICAgICAgICAgICAgYnl0ZSB8PSAweDgwOyAvLyBTZXQgdGhlIGNvbnRpbnVhdGlvbiBiaXRcbiAgICAgICAgfVxuICAgICAgICBieXRlcy5wdXNoKGJ5dGUpO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGFycmF5IHRvIEJ1ZmZlclxuICAgIHJldHVybiBieXRlcztcbn1cbmV4cG9ydHMuZW5jb2RlTEVCMTI4ID0gZW5jb2RlTEVCMTI4O1xuZnVuY3Rpb24gZGVjb2RlTEVCMTI4KGJ1Zikge1xuICAgIGxldCBuID0gQmlnSW50KDApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSBCaWdJbnQoYnVmW2ldKTtcbiAgICAgICAgaWYgKGkgPiAxOCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3ZlcmxvbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHZhbHVlID0gYnl0ZSAmIEJpZ0ludCgxMjcpO1xuICAgICAgICBpZiAoKGkgPT0gMTgpICYmICgodmFsdWUgJiBCaWdJbnQoMTI0KSkgIT0gQmlnSW50KDApKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3ZlcmZsb3dcIik7XG4gICAgICAgIH1cbiAgICAgICAgbiB8PSB2YWx1ZSA8PCAoQmlnSW50KDcpICogQmlnSW50KGkpKTtcbiAgICAgICAgaWYgKChieXRlICYgQmlnSW50KDEyOCkpID09IEJpZ0ludCgwKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgIGxlbjogaSArIDFcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW50ZXJtaW5hdGVkXCIpO1xufVxuZXhwb3J0cy5kZWNvZGVMRUIxMjggPSBkZWNvZGVMRUIxMjg7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/runelib/dist/leb128.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/runelib/dist/runestones.js":
/*!*************************************************!*\
  !*** ./node_modules/runelib/dist/runestones.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EtchInscription = exports.Message = exports.Runestone = exports.Etching = exports.Rune = exports.Terms = exports.Range = exports.Flaw = exports.Tag = exports.Flag = exports.Edict = exports.RuneId = void 0;\nconst bitcoinjs_lib_1 = __webpack_require__(/*! bitcoinjs-lib */ \"(ssr)/./node_modules/bitcoinjs-lib/src/index.js\");\nconst base26_1 = __webpack_require__(/*! ./base26 */ \"(ssr)/./node_modules/runelib/dist/base26.js\");\nconst fts_1 = __webpack_require__(/*! ./fts */ \"(ssr)/./node_modules/runelib/dist/fts.js\");\nconst leb128_1 = __webpack_require__(/*! ./leb128 */ \"(ssr)/./node_modules/runelib/dist/leb128.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/runelib/dist/utils.js\");\nconst spacers_1 = __webpack_require__(/*! ./spacers */ \"(ssr)/./node_modules/runelib/dist/spacers.js\");\n/**\n * Rune IDs are represented in text as BLOCK:TX.\n */\nclass RuneId {\n    constructor(block, idx) {\n        this.block = block;\n        this.idx = idx;\n    }\n    next(block, idx) {\n        if (block > BigInt(Number.MAX_SAFE_INTEGER)) {\n            return (0, fts_1.none)();\n        }\n        if (idx > BigInt(Number.MAX_SAFE_INTEGER)) {\n            return (0, fts_1.none)();\n        }\n        let b = BigInt(this.block) + block;\n        if (b > BigInt(Number.MAX_SAFE_INTEGER)) {\n            return (0, fts_1.none)();\n        }\n        let i = block === 0n ? BigInt(this.idx) + idx : idx;\n        if (i > BigInt(Number.MAX_SAFE_INTEGER)) {\n            return (0, fts_1.none)();\n        }\n        return (0, fts_1.some)(new RuneId(Number(b), Number(i)));\n    }\n}\nexports.RuneId = RuneId;\n/**\n * Rune ID block heights and transaction indices in edicts are delta encoded.\n * Edict rune ID decoding starts with a base block height and transaction index of zero.\n * When decoding each rune ID, first the encoded block height delta is added to the base block height.\n * If the block height delta is zero, the next integer is a transaction index delta.\n * If the block height delta is greater than zero, the next integer is instead an absolute transaction index.\n */\nclass Edict {\n    constructor(id, amount, output) {\n        this.id = id;\n        this.amount = amount;\n        this.output = output;\n    }\n    static from_integers(tx, id, amount, output) {\n        if (output > 4294967295n || output < 0n) {\n            return (0, fts_1.none)();\n        }\n        if (Number(output) > tx.outs.length) {\n            return (0, fts_1.none)();\n        }\n        return (0, fts_1.some)(new Edict(id, amount, Number(output)));\n    }\n}\nexports.Edict = Edict;\nvar Flag;\n(function (Flag) {\n    /** The Etching flag marks this transaction as containing an etching. */\n    Flag[Flag[\"Etching\"] = 0] = \"Etching\";\n    /** The Terms flag marks this transaction's etching as having open mint terms. */\n    Flag[Flag[\"Terms\"] = 1] = \"Terms\";\n    /** The Turbo flag marks this transaction's etching as opting into future protocol changes. These protocol changes may increase light client validation costs, or just be highly degenerate. */\n    Flag[Flag[\"Turbo\"] = 2] = \"Turbo\";\n    /** The Cenotaph flag is unrecognized. */\n    Flag[Flag[\"Cenotaph\"] = 127] = \"Cenotaph\";\n})(Flag || (exports.Flag = Flag = {}));\nvar Tag;\n(function (Tag) {\n    /** The Body tag marks the end of the runestone's fields, causing all following integers to be interpreted as edicts. */\n    Tag[Tag[\"Body\"] = 0] = \"Body\";\n    /** The Flag field contains a bitmap of flags, whose position is 1 << FLAG_VALUE: */\n    Tag[Tag[\"Flags\"] = 2] = \"Flags\";\n    /** The Rune field contains the name of the rune being etched. If the Etching flag is set but the Rune field is omitted, a reserved rune name is allocated. */\n    Tag[Tag[\"Rune\"] = 4] = \"Rune\";\n    /** The Premine field contains the amount of premined runes. */\n    Tag[Tag[\"Premine\"] = 6] = \"Premine\";\n    /** The Cap field contains the allowed number of mints. */\n    Tag[Tag[\"Cap\"] = 8] = \"Cap\";\n    /** The Amount field contains the amount of runes each mint transaction receives. */\n    Tag[Tag[\"Amount\"] = 10] = \"Amount\";\n    /** The HeightStart and HeightEnd fields contain the mint's starting and ending absolute block heights, respectively. The mint is open starting in the block with height HeightStart, and closes in the block with height HeightEnd. */\n    Tag[Tag[\"HeightStart\"] = 12] = \"HeightStart\";\n    Tag[Tag[\"HeightEnd\"] = 14] = \"HeightEnd\";\n    /** The OffsetStart and OffsetEnd fields contain the mint's starting and ending block heights, relative to the block in which the etching is mined. The mint is open starting in the block with height OffsetStart + ETCHING_HEIGHT, and closes in the block with height OffsetEnd + ETCHING_HEIGHT. */\n    Tag[Tag[\"OffsetStart\"] = 16] = \"OffsetStart\";\n    Tag[Tag[\"OffsetEnd\"] = 18] = \"OffsetEnd\";\n    /** The Mint field contains the Rune ID of the rune to be minted in this transaction. */\n    Tag[Tag[\"Mint\"] = 20] = \"Mint\";\n    /** The Pointer field contains the index of the output to which runes unallocated by edicts should be transferred. If the Pointer field is absent, unallocated runes are transferred to the first non-OP_RETURN output. */\n    Tag[Tag[\"Pointer\"] = 22] = \"Pointer\";\n    /** The Cenotaph field is unrecognized. */\n    Tag[Tag[\"Cenotaph\"] = 126] = \"Cenotaph\";\n    /** The Divisibility field, raised to the power of ten, is the number of subunits in a super unit of runes. */\n    Tag[Tag[\"Divisibility\"] = 1] = \"Divisibility\";\n    /** The Spacers field is a bitfield of • spacers that should be displayed between the letters of the rune's name. Trailing spacers are ignored. */\n    Tag[Tag[\"Spacers\"] = 3] = \"Spacers\";\n    /** The Symbol field is the Unicode codepoint of the Rune's currency symbol,\n     * which should be displayed after amounts of that rune. If a rune does not have a currency symbol,\n     * the generic currency character ¤ should be used.\n     * For example, if the Symbol is # and the divisibility is 2,\n     * the amount of 1234 units should be displayed as 12.34 #.\n     */\n    Tag[Tag[\"Symbol\"] = 5] = \"Symbol\";\n    /** The Nop field is unrecognized. */\n    Tag[Tag[\"Nop\"] = 127] = \"Nop\";\n})(Tag || (exports.Tag = Tag = {}));\nvar Flaw;\n(function (Flaw) {\n    Flaw[Flaw[\"EdictOutput\"] = 0] = \"EdictOutput\";\n    Flaw[Flaw[\"EdictRuneId\"] = 1] = \"EdictRuneId\";\n    Flaw[Flaw[\"InvalidScript\"] = 2] = \"InvalidScript\";\n    Flaw[Flaw[\"Opcode\"] = 3] = \"Opcode\";\n    Flaw[Flaw[\"SupplyOverflow\"] = 4] = \"SupplyOverflow\";\n    Flaw[Flaw[\"TrailingIntegers\"] = 5] = \"TrailingIntegers\";\n    Flaw[Flaw[\"TruncatedField\"] = 6] = \"TruncatedField\";\n    Flaw[Flaw[\"UnrecognizedEvenTag\"] = 7] = \"UnrecognizedEvenTag\";\n    Flaw[Flaw[\"UnrecognizedFlag\"] = 8] = \"UnrecognizedFlag\";\n    Flaw[Flaw[\"Varint\"] = 9] = \"Varint\";\n})(Flaw || (exports.Flaw = Flaw = {}));\nclass Range {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n}\nexports.Range = Range;\nclass Terms {\n    constructor(amount, cap, height, offset) {\n        this.amount = amount;\n        this.cap = cap;\n        this.height = height;\n        this.offset = offset;\n    }\n}\nexports.Terms = Terms;\nclass Rune {\n    constructor(value) {\n        this.value = value;\n    }\n    get name() {\n        return Rune.toName(this.value);\n    }\n    static toName(s) {\n        return (0, base26_1.base26Decode)(s);\n    }\n    static fromName(name) {\n        return new Rune((0, base26_1.base26Encode)((0, spacers_1.removeSpacers)(name)));\n    }\n    toString() {\n        return this.name;\n    }\n}\nexports.Rune = Rune;\nclass Etching {\n    constructor(divisibility, premine, rune, spacers, symbol, terms, turbo) {\n        this.divisibility = divisibility;\n        this.premine = premine;\n        this.rune = rune;\n        this.spacers = spacers;\n        this.symbol = symbol;\n        this.terms = terms;\n        this.turbo = turbo;\n    }\n}\nexports.Etching = Etching;\nEtching.MAX_DIVISIBILITY = 38;\nEtching.MAX_SPACERS = 134217727;\nclass Runestone {\n    constructor(edicts = [], etching, mint, pointer) {\n        this.edicts = edicts;\n        this.etching = etching;\n        this.mint = mint;\n        this.pointer = pointer;\n    }\n    static create(json, type = 'etch') {\n        if (type === 'etch') {\n            json = json;\n            const runename = Rune.fromName(json.name);\n            const terms = new Terms(json.amount, json.cap, new Range(json.startHeight ? (0, fts_1.some)(json.startHeight) : (0, fts_1.none)(), json.endHeight ? (0, fts_1.some)(json.endHeight) : (0, fts_1.none)()), new Range(json.startOffset ? (0, fts_1.some)(json.startOffset) : (0, fts_1.none)(), json.endOffset ? (0, fts_1.some)(json.endOffset) : (0, fts_1.none)()));\n            const divisibility = json.divisibility ? (0, fts_1.some)(json.divisibility) : (0, fts_1.none)();\n            const premine = json.premine ? (0, fts_1.some)(json.premine) : (0, fts_1.none)();\n            const spacers = json.name.indexOf('•') > -1 ? (0, fts_1.some)((0, spacers_1.getSpacersVal)(json.name)) : (0, fts_1.none)();\n            const symbol = json.symbol ? (0, fts_1.some)(json.symbol) : (0, fts_1.none)();\n            const pointer = typeof json.pointer === 'number' ? (0, fts_1.some)(json.pointer) : (0, fts_1.none)();\n            const etching = new Etching(divisibility, premine, (0, fts_1.some)(runename), spacers, symbol, (0, fts_1.some)(terms), true);\n            return new Runestone([], (0, fts_1.some)(etching), (0, fts_1.none)(), pointer);\n        }\n        else if (type === 'mint') {\n            json = json;\n            const pointer = typeof json.pointer === 'number' ? (0, fts_1.some)(json.pointer) : (0, fts_1.none)();\n            return new Runestone([], (0, fts_1.none)(), (0, fts_1.some)(new RuneId(json.block, json.txIdx)), pointer);\n        }\n        else {\n            throw new Error(`not ${type} support now`);\n        }\n    }\n    static decipher(rawTx) {\n        const tx = bitcoinjs_lib_1.Transaction.fromHex(rawTx);\n        const payload = Runestone.payload(tx);\n        if (payload.isSome()) {\n            const integers = Runestone.integers(payload.value());\n            const message = Message.from_integers(tx, integers.value());\n            const etching = message.getEtching();\n            const mint = message.getMint();\n            const pointer = message.getPointer();\n            return (0, fts_1.some)(new Runestone(message.edicts, etching, mint, pointer));\n        }\n        return (0, fts_1.none)();\n    }\n    encipher() {\n        const msg = this.toMessage();\n        const msgBuff = msg.toBuffer();\n        const prefix = Buffer.from('6a5d', 'hex'); // OP_RETURN OP_13\n        let pushNum;\n        if (msgBuff.length < 0x4c) {\n            pushNum = Buffer.alloc(1);\n            pushNum.writeUint8(msgBuff.length);\n        }\n        else if (msgBuff.length < 0x100) {\n            pushNum = Buffer.alloc(2);\n            pushNum.writeUint8(0x4c);\n            pushNum.writeUint8(msgBuff.length);\n        }\n        else if (msgBuff.length < 0x10000) {\n            pushNum = Buffer.alloc(3);\n            pushNum.writeUint8(0x4d);\n            pushNum.writeUint16LE(msgBuff.length);\n        }\n        else if (msgBuff.length < 0x100000000) {\n            pushNum = Buffer.alloc(5);\n            pushNum.writeUint8(0x4e);\n            pushNum.writeUint32LE(msgBuff.length);\n        }\n        else {\n            throw new Error(\"runestone too big!\");\n        }\n        return Buffer.concat([prefix, pushNum, msgBuff]);\n    }\n    static payload(tx) {\n        for (const output of tx.outs) {\n            //script.fromASM\n            const ls = bitcoinjs_lib_1.script.decompile(output.script);\n            if (ls[0] !== bitcoinjs_lib_1.script.OPS.OP_RETURN) {\n                continue;\n            }\n            if (ls[1] !== Runestone.MAGIC_NUMBER) {\n                continue;\n            }\n            for (let i = 2; i < ls.length; i++) {\n                const element = ls[i];\n                if (element instanceof Uint8Array) {\n                    return (0, fts_1.some)(Array.from(element));\n                }\n                return (0, fts_1.none)();\n            }\n            return (0, fts_1.none)();\n        }\n        return (0, fts_1.none)();\n    }\n    static integers(payload) {\n        let integers = [];\n        let i = 0;\n        while (i < payload.length) {\n            let { n, len } = (0, leb128_1.decodeLEB128)(payload.slice(i));\n            integers.push(n);\n            i += len;\n        }\n        return (0, fts_1.some)(integers);\n    }\n    toMessage() {\n        let fields = new Map();\n        const etching = this.etching.value();\n        if (etching) {\n            let flags = 1;\n            if (etching.terms.isSome()) {\n                let mask = 1 << Flag.Terms;\n                flags |= mask;\n            }\n            if (etching.turbo) {\n                let mask = 1 << Flag.Turbo;\n                flags |= mask;\n            }\n            fields.set(Tag.Flags, [BigInt(flags)]);\n            const rune = etching.rune.value();\n            if (rune !== null) {\n                fields.set(Tag.Rune, [BigInt(rune.value)]);\n            }\n            const divisibility = etching.divisibility.value();\n            if (divisibility !== null) {\n                fields.set(Tag.Divisibility, [BigInt(divisibility)]);\n            }\n            const spacers = etching.spacers.value();\n            if (spacers !== null) {\n                fields.set(Tag.Spacers, [BigInt(spacers)]);\n            }\n            const symbol = etching.symbol.value();\n            if (symbol !== null) {\n                fields.set(Tag.Symbol, [BigInt(symbol.charCodeAt(0))]);\n            }\n            const premine = etching.premine.value();\n            if (premine !== null) {\n                fields.set(Tag.Premine, [BigInt(premine)]);\n            }\n            const terms = etching.terms.value();\n            if (terms !== null) {\n                fields.set(Tag.Amount, [BigInt(terms.amount)]);\n                fields.set(Tag.Cap, [BigInt(terms.cap)]);\n                const heightStart = terms.height.start.value();\n                if (heightStart) {\n                    fields.set(Tag.HeightStart, [BigInt(heightStart)]);\n                }\n                const heightEnd = terms.height.end.value();\n                if (heightEnd) {\n                    fields.set(Tag.HeightEnd, [BigInt(heightEnd)]);\n                }\n                const offsetStart = terms.offset.start.value();\n                if (offsetStart) {\n                    fields.set(Tag.OffsetStart, [BigInt(offsetStart)]);\n                }\n                const offsetEnd = terms.offset.end.value();\n                if (offsetEnd) {\n                    fields.set(Tag.OffsetEnd, [BigInt(offsetEnd)]);\n                }\n            }\n        }\n        const mint = this.mint.value();\n        if (mint !== null) {\n            fields.set(Tag.Mint, [BigInt(mint.block), BigInt(mint.idx)]);\n        }\n        const pointer = this.pointer.value();\n        if (pointer !== null) {\n            fields.set(Tag.Pointer, [BigInt(pointer)]);\n        }\n        return new Message(fields, this.edicts, 0);\n    }\n}\nexports.Runestone = Runestone;\nRunestone.MAGIC_NUMBER = 93;\nclass Message {\n    constructor(fields = new Map(), edicts = [], flaws = 0) {\n        this.fields = fields;\n        this.edicts = edicts;\n        this.flaws = flaws;\n    }\n    static from_integers(tx, integers) {\n        let fields = new Map();\n        let edicts = [];\n        let flaws = 0;\n        let isBody = false;\n        for (let i = 0; i < integers.length;) {\n            let tag = integers[i];\n            if (Number(tag) === Tag.Body) {\n                isBody = true;\n                i += 1;\n                continue;\n            }\n            if (!isBody) {\n                // Fields:\n                let val = integers[i + 1];\n                const vals = fields.get(Number(tag)) || [];\n                vals.push(val);\n                fields.set(Number(tag), vals);\n                i += 2;\n            }\n            else {\n                // Edicts:\n                let id = new RuneId(0, 0);\n                for (const chunk of (0, utils_1.chunks)(integers.slice(i), 4)) {\n                    if (chunk.length != 4) {\n                        flaws |= Flaw.TrailingIntegers;\n                        break;\n                    }\n                    let next = id.next(chunk[0], chunk[1]);\n                    if (!next.isSome()) {\n                        flaws |= Flaw.EdictRuneId;\n                        break;\n                    }\n                    const edict = Edict.from_integers(tx, next.value(), chunk[2], chunk[3]);\n                    if (!edict.isSome()) {\n                        flaws |= Flaw.EdictOutput;\n                        break;\n                    }\n                    id = next.value();\n                    edicts.push(edict.value());\n                }\n                i += 4;\n            }\n        }\n        return new Message(fields, edicts, flaws);\n    }\n    addFieldVal(tag, val) {\n        const vals = this.fields.get(Number(tag)) || [];\n        vals.push(val);\n        this.fields.set(Number(tag), vals);\n    }\n    addEdict(edict) {\n        this.edicts.push(edict);\n    }\n    toBuffer() {\n        const buffArr = [];\n        // Serialize fields.\n        for (const [tag, vals] of this.fields) {\n            for (const val of vals) {\n                const tagBuff = Buffer.alloc(1);\n                tagBuff.writeUInt8(tag);\n                buffArr.push(tagBuff);\n                buffArr.push(Buffer.from((0, leb128_1.encodeLEB128)(val)));\n            }\n        }\n        // Serialize edicts.\n        if (this.edicts.length > 0) {\n            buffArr.push(Buffer.from('00', 'hex'));\n            // 1) Sort by block height\n            // 2) Sort by tx idx\n            this.edicts.sort((a, b) => {\n                if (a.id.block == b.id.block) {\n                    return a.id.idx - b.id.idx;\n                }\n                return a.id.block - b.id.block;\n            });\n            // 3) Delta encode\n            let lastBlockHeight = 0n;\n            let lastTxIdx = 0n;\n            for (let i = 0; i < this.edicts.length; i++) {\n                const edict = this.edicts[i];\n                if (i == 0) {\n                    lastBlockHeight = BigInt(edict.id.block);\n                    lastTxIdx = BigInt(edict.id.idx);\n                    buffArr.push(Buffer.from((0, leb128_1.encodeLEB128)(lastBlockHeight)));\n                    buffArr.push(Buffer.from((0, leb128_1.encodeLEB128)(lastTxIdx)));\n                }\n                else {\n                    const currBlockHeight = BigInt(edict.id.block);\n                    const currTxIdx = BigInt(edict.id.idx);\n                    if (currBlockHeight == lastBlockHeight) {\n                        const deltaTxIdx = currTxIdx - lastTxIdx;\n                        lastTxIdx = currTxIdx;\n                        buffArr.push(Buffer.from((0, leb128_1.encodeLEB128)(0n)));\n                        buffArr.push(Buffer.from((0, leb128_1.encodeLEB128)(deltaTxIdx)));\n                    }\n                    else {\n                        const deltaBlockHeight = currBlockHeight - lastBlockHeight;\n                        lastBlockHeight = currBlockHeight;\n                        lastTxIdx = currTxIdx;\n                        buffArr.push(Buffer.from((0, leb128_1.encodeLEB128)(deltaBlockHeight)));\n                        buffArr.push(Buffer.from((0, leb128_1.encodeLEB128)(currTxIdx)));\n                    }\n                }\n                buffArr.push(Buffer.from((0, leb128_1.encodeLEB128)(BigInt(edict.amount))));\n                buffArr.push(Buffer.from((0, leb128_1.encodeLEB128)(BigInt(edict.output))));\n            }\n        }\n        return Buffer.concat(buffArr);\n    }\n    getFlags() {\n        return Number(this.fields.get(Tag.Flags));\n    }\n    hasFlags(flag) {\n        const flags = this.getFlags();\n        const mask = 1 << flag;\n        return (flags & mask) != 0;\n    }\n    getMint() {\n        if (!this.fields.has(Tag.Mint)) {\n            return (0, fts_1.none)();\n        }\n        const [block, tx] = this.fields.get(Tag.Mint);\n        return (0, fts_1.some)(new RuneId(Number(block), Number(tx)));\n    }\n    getEtching() {\n        if (!this.hasFlags(Flag.Etching)) {\n            return (0, fts_1.none)();\n        }\n        const divisibility = this.getDivisibility();\n        const premine = this.getPremine();\n        const rune = this.getRune();\n        const spacers = this.getSpacers();\n        const symbol = this.getSymbol();\n        const terms = this.getTerms();\n        const turbo = this.hasFlags(Flag.Turbo);\n        return (0, fts_1.some)(new Etching(divisibility, premine, rune, spacers, symbol, terms, turbo));\n    }\n    getDivisibility() {\n        if (!this.fields.has(Tag.Divisibility)) {\n            return (0, fts_1.none)();\n        }\n        const [divisibility] = this.fields.get(Tag.Divisibility);\n        if (divisibility > Etching.MAX_DIVISIBILITY) {\n            throw new Error(\"invalid divisibility\");\n        }\n        return (0, fts_1.some)(Number(divisibility));\n    }\n    getPremine() {\n        if (!this.fields.has(Tag.Premine)) {\n            return (0, fts_1.none)();\n        }\n        const [premine] = this.fields.get(Tag.Premine);\n        return (0, fts_1.some)(Number(premine));\n    }\n    getRune() {\n        if (!this.fields.has(Tag.Rune)) {\n            return (0, fts_1.none)();\n        }\n        const [rune] = this.fields.get(Tag.Rune);\n        return (0, fts_1.some)(new Rune(rune));\n    }\n    getSpacers() {\n        if (!this.fields.has(Tag.Spacers)) {\n            return (0, fts_1.none)();\n        }\n        const [spacers] = this.fields.get(Tag.Spacers);\n        if (spacers > Etching.MAX_SPACERS) {\n            throw new Error(\"invalid spacers\");\n        }\n        return (0, fts_1.some)(Number(spacers));\n    }\n    getHeightStart() {\n        if (!this.fields.has(Tag.HeightStart)) {\n            return (0, fts_1.none)();\n        }\n        const [heightStart] = this.fields.get(Tag.HeightStart);\n        return (0, fts_1.some)(Number(heightStart));\n    }\n    getHeightEnd() {\n        if (!this.fields.has(Tag.HeightEnd)) {\n            return (0, fts_1.none)();\n        }\n        const [heightEnd] = this.fields.get(Tag.HeightEnd);\n        return (0, fts_1.some)(Number(heightEnd));\n    }\n    getOffsetStart() {\n        if (!this.fields.has(Tag.OffsetStart)) {\n            return (0, fts_1.none)();\n        }\n        const [offsetStart] = this.fields.get(Tag.OffsetStart);\n        return (0, fts_1.some)(Number(offsetStart));\n    }\n    getOffsetEnd() {\n        if (!this.fields.has(Tag.OffsetEnd)) {\n            return (0, fts_1.none)();\n        }\n        const [offsetEnd] = this.fields.get(Tag.OffsetEnd);\n        return (0, fts_1.some)(Number(offsetEnd));\n    }\n    getCap() {\n        if (!this.fields.has(Tag.Cap)) {\n            return (0, fts_1.none)();\n        }\n        const [cap] = this.fields.get(Tag.Cap);\n        return (0, fts_1.some)(Number(cap));\n    }\n    getAmount() {\n        if (!this.fields.has(Tag.Amount)) {\n            return (0, fts_1.none)();\n        }\n        const [amount] = this.fields.get(Tag.Amount);\n        return (0, fts_1.some)(Number(amount));\n    }\n    getSymbol() {\n        if (!this.fields.has(Tag.Symbol)) {\n            return (0, fts_1.none)();\n        }\n        const [symbol] = this.fields.get(Tag.Symbol);\n        return (0, fts_1.some)(String.fromCharCode(Number(symbol)));\n    }\n    getTerms() {\n        if (!this.hasFlags(Flag.Terms)) {\n            return (0, fts_1.none)();\n        }\n        const cap = this.getCap();\n        if (!cap.isSome()) {\n            throw new Error(\"no cap field\");\n        }\n        const amount = this.getAmount();\n        if (!amount.isSome()) {\n            throw new Error(\"no amount field\");\n        }\n        const heightStart = this.getHeightStart();\n        const heightEnd = this.getHeightEnd();\n        const offsetStart = this.getOffsetStart();\n        const offsetEnd = this.getOffsetEnd();\n        const height = new Range(heightStart, heightEnd);\n        const offset = new Range(offsetStart, offsetEnd);\n        return (0, fts_1.some)(new Terms(amount.value(), cap.value(), height, offset));\n    }\n    getPointer() {\n        if (!this.fields.has(Tag.Pointer)) {\n            return (0, fts_1.none)();\n        }\n        const [pointer] = this.fields.get(Tag.Pointer);\n        return (0, fts_1.some)(Number(pointer));\n    }\n}\nexports.Message = Message;\nclass EtchInscription {\n    constructor(fields = new Map(), data = Buffer.alloc(0)) {\n        this.fields = fields;\n        this.data = data;\n    }\n    setContent(contentType, data) {\n        this.fields.set(1, Buffer.from(contentType, 'utf8'));\n        this.data = data;\n    }\n    setRune(rune) {\n        const n = (0, base26_1.base26Encode)((0, spacers_1.removeSpacers)(rune));\n        let nstr = n.toString(16);\n        if (nstr.length % 2 === 1) {\n            nstr = '0' + nstr;\n        }\n        this.setField(EtchInscription.Tag.RUNE, Buffer.from(nstr, 'hex').reverse());\n    }\n    setField(field, val) {\n        this.fields.set(field, val);\n    }\n    static decipher(rawTx, inputIdx) {\n        const tx = bitcoinjs_lib_1.Transaction.fromHex(rawTx);\n        const witness = tx.ins[inputIdx].witness;\n        const tapscript = witness[1];\n        const ls = bitcoinjs_lib_1.script.decompile(tapscript);\n        const fields = new Map();\n        const dataChunks = [];\n        let isData = false;\n        for (let i = 5; i < ls.length - 1;) {\n            const chunk = ls[i];\n            if (chunk === 0) {\n                isData = true;\n                i++;\n                continue;\n            }\n            else if (isData) {\n                // Data\n                dataChunks.push(chunk);\n                i++;\n            }\n            else {\n                // Fields\n                const tag = chunk - 80;\n                const val = ls[i + 1];\n                if (typeof val == 'number') {\n                    const buff = Buffer.alloc(1);\n                    buff.writeUint8(val);\n                    fields.set(tag, buff);\n                }\n                else {\n                    fields.set(tag, val);\n                }\n                i += 2;\n            }\n        }\n        return new EtchInscription(fields, Buffer.concat(dataChunks));\n    }\n    encipher() {\n        const res = [];\n        if (this.data && this.data.length > 0) {\n            res.push(Buffer.from('0063036f7264', 'hex') // 0 OP_IF \"ord\"\n            );\n            Array.from(this.fields.entries())\n                .sort((a, b) => a[0] - b[0]) // Sorting by tag in ascending order\n                .forEach(([tag, val]) => {\n                const tagBuff = Buffer.alloc(1);\n                tagBuff.writeUInt8(tag);\n                res.push(Buffer.from('01', 'hex'));\n                res.push(tagBuff);\n                if (val.length != 1 || val[0] != 0x00) {\n                    res.push((0, utils_1.toPushData)(val));\n                }\n                else {\n                    res.push(val);\n                }\n            });\n            res.push(Buffer.from('00', 'hex'));\n            const dataChunks = (0, utils_1.chunks)(Array.from(this.data), 520);\n            for (const chunk of dataChunks) {\n                res.push((0, utils_1.toPushData)(Buffer.from(chunk)));\n            }\n        }\n        else {\n            res.push(Buffer.from('0063', 'hex') // 0 OP_IF\n            );\n            const rune = this.fields.get(EtchInscription.Tag.RUNE);\n            if (!rune) {\n                throw new Error(`No rune found!`);\n            }\n            res.push((0, utils_1.toPushData)(rune));\n        }\n        res.push(Buffer.from('68', 'hex')); // OP_ENDIF\n        return Buffer.concat(res);\n    }\n}\nexports.EtchInscription = EtchInscription;\nEtchInscription.Tag = {\n    CONTENT_TYPE: 1,\n    POINTER: 2,\n    PARENT: 3,\n    METADATA: 5,\n    METAPROTOCOL: 7,\n    CONTENT_ENCODING: 9,\n    DELEGATE: 11,\n    RUNE: 13\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/runelib/dist/runestones.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/runelib/dist/spacers.js":
/*!**********************************************!*\
  !*** ./node_modules/runelib/dist/spacers.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.removeSpacers = exports.getSpacersVal = exports.applySpacers = void 0;\nfunction applySpacers(str, spacers) {\n    let res = '';\n    for (let i = 0; i < str.length; i++) {\n        res += str.charAt(i);\n        if (spacers > 0) {\n            // Get the least significant bit\n            let bit = spacers & 1;\n            if (bit === 1) {\n                res += '•';\n            }\n            // Right shift the number to process the next bit\n            spacers >>= 1;\n        }\n    }\n    return res;\n}\nexports.applySpacers = applySpacers;\nfunction getSpacersVal(str) {\n    let res = 0;\n    let spacersCnt = 0;\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charAt(i);\n        if (char === '•') {\n            res += 1 << (i - 1 - spacersCnt);\n            spacersCnt++;\n        }\n    }\n    return res;\n}\nexports.getSpacersVal = getSpacersVal;\nfunction removeSpacers(rune) {\n    return rune.replace(/[•]+/g, \"\");\n}\nexports.removeSpacers = removeSpacers;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcnVuZWxpYi9kaXN0L3NwYWNlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcscUJBQXFCLEdBQUcsb0JBQW9CO0FBQ3BFO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9ydW5lbGliL2Rpc3Qvc3BhY2Vycy5qcz9mMzExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW1vdmVTcGFjZXJzID0gZXhwb3J0cy5nZXRTcGFjZXJzVmFsID0gZXhwb3J0cy5hcHBseVNwYWNlcnMgPSB2b2lkIDA7XG5mdW5jdGlvbiBhcHBseVNwYWNlcnMoc3RyLCBzcGFjZXJzKSB7XG4gICAgbGV0IHJlcyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlcyArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICBpZiAoc3BhY2VycyA+IDApIHtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0XG4gICAgICAgICAgICBsZXQgYml0ID0gc3BhY2VycyAmIDE7XG4gICAgICAgICAgICBpZiAoYml0ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzICs9ICfigKInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmlnaHQgc2hpZnQgdGhlIG51bWJlciB0byBwcm9jZXNzIHRoZSBuZXh0IGJpdFxuICAgICAgICAgICAgc3BhY2VycyA+Pj0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5hcHBseVNwYWNlcnMgPSBhcHBseVNwYWNlcnM7XG5mdW5jdGlvbiBnZXRTcGFjZXJzVmFsKHN0cikge1xuICAgIGxldCByZXMgPSAwO1xuICAgIGxldCBzcGFjZXJzQ250ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgaWYgKGNoYXIgPT09ICfigKInKSB7XG4gICAgICAgICAgICByZXMgKz0gMSA8PCAoaSAtIDEgLSBzcGFjZXJzQ250KTtcbiAgICAgICAgICAgIHNwYWNlcnNDbnQrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5nZXRTcGFjZXJzVmFsID0gZ2V0U3BhY2Vyc1ZhbDtcbmZ1bmN0aW9uIHJlbW92ZVNwYWNlcnMocnVuZSkge1xuICAgIHJldHVybiBydW5lLnJlcGxhY2UoL1vigKJdKy9nLCBcIlwiKTtcbn1cbmV4cG9ydHMucmVtb3ZlU3BhY2VycyA9IHJlbW92ZVNwYWNlcnM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/runelib/dist/spacers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/runelib/dist/utils.js":
/*!********************************************!*\
  !*** ./node_modules/runelib/dist/utils.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toPushData = exports.chunks = exports.toHex = exports.zero2 = void 0;\n/**\n * Prepends a '0' to an odd character length word to ensure it has an even number of characters.\n * @param {string} word - The input word.\n * @returns {string} - The word with a leading '0' if it's an odd character length; otherwise, the original word.\n */\nconst zero2 = (word) => {\n    if (word.length % 2 === 1) {\n        return '0' + word;\n    }\n    else {\n        return word;\n    }\n};\nexports.zero2 = zero2;\n/**\n * Converts an array of numbers to a hexadecimal string representation.\n * @param {number[]} msg - The input array of numbers.\n * @returns {string} - The hexadecimal string representation of the input array.\n */\nconst toHex = (msg) => {\n    let res = '';\n    for (let i = 0; i < msg.length; i++) {\n        res += (0, exports.zero2)(msg[i].toString(16));\n    }\n    return res;\n};\nexports.toHex = toHex;\nfunction chunks(bin, chunkSize) {\n    const chunks = [];\n    let offset = 0;\n    while (offset < bin.length) {\n        // Use Buffer.slice to create a chunk. This method does not copy the memory;\n        // it creates a new Buffer that references the original memory.\n        const chunk = bin.slice(offset, offset + chunkSize);\n        chunks.push(chunk);\n        offset += chunkSize;\n    }\n    return chunks;\n}\nexports.chunks = chunks;\nfunction toPushData(data) {\n    const res = [];\n    const dLen = data.length;\n    if (dLen < 0x4c) {\n        const dLenBuff = Buffer.alloc(1);\n        dLenBuff.writeUInt8(dLen);\n        res.push(dLenBuff);\n    }\n    else if (dLen <= 0xff) {\n        // OP_PUSHDATA1\n        res.push(Buffer.from('4c', 'hex'));\n        const dLenBuff = Buffer.alloc(1);\n        dLenBuff.writeUInt8(dLen);\n        res.push(dLenBuff);\n    }\n    else if (dLen <= 0xffff) {\n        // OP_PUSHDATA2\n        res.push(Buffer.from('4d', 'hex'));\n        const dLenBuff = Buffer.alloc(2);\n        dLenBuff.writeUint16LE(dLen);\n        res.push(dLenBuff);\n    }\n    else {\n        // OP_PUSHDATA4\n        res.push(Buffer.from('4e', 'hex'));\n        const dLenBuff = Buffer.alloc(4);\n        dLenBuff.writeUint32LE(dLen);\n        res.push(dLenBuff);\n    }\n    res.push(data);\n    return Buffer.concat(res);\n}\nexports.toPushData = toPushData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcnVuZWxpYi9kaXN0L3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLGNBQWMsR0FBRyxhQUFhLEdBQUcsYUFBYTtBQUNuRTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUSwrREFBK0Q7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9ydW5lbGliL2Rpc3QvdXRpbHMuanM/MGNhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9QdXNoRGF0YSA9IGV4cG9ydHMuY2h1bmtzID0gZXhwb3J0cy50b0hleCA9IGV4cG9ydHMuemVybzIgPSB2b2lkIDA7XG4vKipcbiAqIFByZXBlbmRzIGEgJzAnIHRvIGFuIG9kZCBjaGFyYWN0ZXIgbGVuZ3RoIHdvcmQgdG8gZW5zdXJlIGl0IGhhcyBhbiBldmVuIG51bWJlciBvZiBjaGFyYWN0ZXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IHdvcmQgLSBUaGUgaW5wdXQgd29yZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIHdvcmQgd2l0aCBhIGxlYWRpbmcgJzAnIGlmIGl0J3MgYW4gb2RkIGNoYXJhY3RlciBsZW5ndGg7IG90aGVyd2lzZSwgdGhlIG9yaWdpbmFsIHdvcmQuXG4gKi9cbmNvbnN0IHplcm8yID0gKHdvcmQpID0+IHtcbiAgICBpZiAod29yZC5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHdvcmQ7XG4gICAgfVxufTtcbmV4cG9ydHMuemVybzIgPSB6ZXJvMjtcbi8qKlxuICogQ29udmVydHMgYW4gYXJyYXkgb2YgbnVtYmVycyB0byBhIGhleGFkZWNpbWFsIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyW119IG1zZyAtIFRoZSBpbnB1dCBhcnJheSBvZiBudW1iZXJzLlxuICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgaGV4YWRlY2ltYWwgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbnB1dCBhcnJheS5cbiAqL1xuY29uc3QgdG9IZXggPSAobXNnKSA9PiB7XG4gICAgbGV0IHJlcyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlcyArPSAoMCwgZXhwb3J0cy56ZXJvMikobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuZXhwb3J0cy50b0hleCA9IHRvSGV4O1xuZnVuY3Rpb24gY2h1bmtzKGJpbiwgY2h1bmtTaXplKSB7XG4gICAgY29uc3QgY2h1bmtzID0gW107XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgd2hpbGUgKG9mZnNldCA8IGJpbi5sZW5ndGgpIHtcbiAgICAgICAgLy8gVXNlIEJ1ZmZlci5zbGljZSB0byBjcmVhdGUgYSBjaHVuay4gVGhpcyBtZXRob2QgZG9lcyBub3QgY29weSB0aGUgbWVtb3J5O1xuICAgICAgICAvLyBpdCBjcmVhdGVzIGEgbmV3IEJ1ZmZlciB0aGF0IHJlZmVyZW5jZXMgdGhlIG9yaWdpbmFsIG1lbW9yeS5cbiAgICAgICAgY29uc3QgY2h1bmsgPSBiaW4uc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBjaHVua1NpemUpO1xuICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgIG9mZnNldCArPSBjaHVua1NpemU7XG4gICAgfVxuICAgIHJldHVybiBjaHVua3M7XG59XG5leHBvcnRzLmNodW5rcyA9IGNodW5rcztcbmZ1bmN0aW9uIHRvUHVzaERhdGEoZGF0YSkge1xuICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgIGNvbnN0IGRMZW4gPSBkYXRhLmxlbmd0aDtcbiAgICBpZiAoZExlbiA8IDB4NGMpIHtcbiAgICAgICAgY29uc3QgZExlbkJ1ZmYgPSBCdWZmZXIuYWxsb2MoMSk7XG4gICAgICAgIGRMZW5CdWZmLndyaXRlVUludDgoZExlbik7XG4gICAgICAgIHJlcy5wdXNoKGRMZW5CdWZmKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZExlbiA8PSAweGZmKSB7XG4gICAgICAgIC8vIE9QX1BVU0hEQVRBMVxuICAgICAgICByZXMucHVzaChCdWZmZXIuZnJvbSgnNGMnLCAnaGV4JykpO1xuICAgICAgICBjb25zdCBkTGVuQnVmZiA9IEJ1ZmZlci5hbGxvYygxKTtcbiAgICAgICAgZExlbkJ1ZmYud3JpdGVVSW50OChkTGVuKTtcbiAgICAgICAgcmVzLnB1c2goZExlbkJ1ZmYpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkTGVuIDw9IDB4ZmZmZikge1xuICAgICAgICAvLyBPUF9QVVNIREFUQTJcbiAgICAgICAgcmVzLnB1c2goQnVmZmVyLmZyb20oJzRkJywgJ2hleCcpKTtcbiAgICAgICAgY29uc3QgZExlbkJ1ZmYgPSBCdWZmZXIuYWxsb2MoMik7XG4gICAgICAgIGRMZW5CdWZmLndyaXRlVWludDE2TEUoZExlbik7XG4gICAgICAgIHJlcy5wdXNoKGRMZW5CdWZmKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIE9QX1BVU0hEQVRBNFxuICAgICAgICByZXMucHVzaChCdWZmZXIuZnJvbSgnNGUnLCAnaGV4JykpO1xuICAgICAgICBjb25zdCBkTGVuQnVmZiA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICAgICAgZExlbkJ1ZmYud3JpdGVVaW50MzJMRShkTGVuKTtcbiAgICAgICAgcmVzLnB1c2goZExlbkJ1ZmYpO1xuICAgIH1cbiAgICByZXMucHVzaChkYXRhKTtcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChyZXMpO1xufVxuZXhwb3J0cy50b1B1c2hEYXRhID0gdG9QdXNoRGF0YTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/runelib/dist/utils.js\n");

/***/ })

};
;