/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bitcore-lib";
exports.ids = ["vendor-chunks/bitcore-lib"];
exports.modules = {

/***/ "(ssr)/./node_modules/bitcore-lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/bitcore-lib/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bitcore = module.exports;\n\n// module information\nbitcore.version = 'v' + (__webpack_require__(/*! ./package.json */ \"(ssr)/./node_modules/bitcore-lib/package.json\").version);\nbitcore.versionGuard = function(version) {\n  if (version !== undefined) {\n    var message = 'More than one instance of bitcore-lib found. ' +\n      'Please make sure to require bitcore-lib and check that submodules do' +\n      ' not also include their own bitcore-lib dependency.';\n    throw new Error(message);\n  }\n};\nbitcore.versionGuard(global._bitcore);\nglobal._bitcore = bitcore.version;\n\n// crypto\nbitcore.crypto = {};\nbitcore.crypto.BN = __webpack_require__(/*! ./lib/crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nbitcore.crypto.ECDSA = __webpack_require__(/*! ./lib/crypto/ecdsa */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/ecdsa.js\");\nbitcore.crypto.Schnorr = __webpack_require__(/*! ./lib/crypto/schnorr */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/schnorr.js\");\nbitcore.crypto.Hash = __webpack_require__(/*! ./lib/crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nbitcore.crypto.Random = __webpack_require__(/*! ./lib/crypto/random */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/random.js\");\nbitcore.crypto.Point = __webpack_require__(/*! ./lib/crypto/point */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/point.js\");\nbitcore.crypto.Signature = __webpack_require__(/*! ./lib/crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nbitcore.crypto.TaggedHash = __webpack_require__(/*! ./lib/crypto/taggedhash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js\");\n\n// encoding\nbitcore.encoding = {};\nbitcore.encoding.Base58 = __webpack_require__(/*! ./lib/encoding/base58 */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/base58.js\");\nbitcore.encoding.Base58Check = __webpack_require__(/*! ./lib/encoding/base58check */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/base58check.js\");\nbitcore.encoding.BufferReader = __webpack_require__(/*! ./lib/encoding/bufferreader */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\");\nbitcore.encoding.BufferWriter = __webpack_require__(/*! ./lib/encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nbitcore.encoding.Varint = __webpack_require__(/*! ./lib/encoding/varint */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/varint.js\");\n\n// utilities\nbitcore.util = {};\nbitcore.util.buffer = __webpack_require__(/*! ./lib/util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nbitcore.util.js = __webpack_require__(/*! ./lib/util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nbitcore.util.preconditions = __webpack_require__(/*! ./lib/util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\n// errors thrown by the library\nbitcore.errors = __webpack_require__(/*! ./lib/errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\n\n// main bitcoin library\nbitcore.Address = __webpack_require__(/*! ./lib/address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\nbitcore.Block = __webpack_require__(/*! ./lib/block */ \"(ssr)/./node_modules/bitcore-lib/lib/block/index.js\");\nbitcore.MerkleBlock = __webpack_require__(/*! ./lib/block/merkleblock */ \"(ssr)/./node_modules/bitcore-lib/lib/block/merkleblock.js\");\nbitcore.BlockHeader = __webpack_require__(/*! ./lib/block/blockheader */ \"(ssr)/./node_modules/bitcore-lib/lib/block/blockheader.js\");\nbitcore.HDPrivateKey = __webpack_require__(/*! ./lib/hdprivatekey.js */ \"(ssr)/./node_modules/bitcore-lib/lib/hdprivatekey.js\");\nbitcore.HDPublicKey = __webpack_require__(/*! ./lib/hdpublickey.js */ \"(ssr)/./node_modules/bitcore-lib/lib/hdpublickey.js\");\nbitcore.Message = __webpack_require__(/*! ./lib/message */ \"(ssr)/./node_modules/bitcore-lib/lib/message.js\");\nbitcore.Networks = __webpack_require__(/*! ./lib/networks */ \"(ssr)/./node_modules/bitcore-lib/lib/networks.js\");\nbitcore.Opcode = __webpack_require__(/*! ./lib/opcode */ \"(ssr)/./node_modules/bitcore-lib/lib/opcode.js\");\nbitcore.PrivateKey = __webpack_require__(/*! ./lib/privatekey */ \"(ssr)/./node_modules/bitcore-lib/lib/privatekey.js\");\nbitcore.PublicKey = __webpack_require__(/*! ./lib/publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\nbitcore.Script = __webpack_require__(/*! ./lib/script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nbitcore.Transaction = __webpack_require__(/*! ./lib/transaction */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/index.js\");\nbitcore.URI = __webpack_require__(/*! ./lib/uri */ \"(ssr)/./node_modules/bitcore-lib/lib/uri.js\");\nbitcore.Unit = __webpack_require__(/*! ./lib/unit */ \"(ssr)/./node_modules/bitcore-lib/lib/unit.js\");\n\n// dependencies, subject to change\nbitcore.deps = {};\nbitcore.deps.bnjs = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bitcore-lib/node_modules/bn.js/lib/bn.js\");\nbitcore.deps.bs58 = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bitcore-lib/node_modules/bs58/index.js\");\nbitcore.deps.Buffer = Buffer;\nbitcore.deps.elliptic = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\nbitcore.deps._ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\n// Internal usage, exposed for testing/advanced tweaking\nbitcore.Transaction.sighash = __webpack_require__(/*! ./lib/transaction/sighash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUE7QUFDQSx3QkFBd0Isb0dBQWlDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQU8sQ0FBQywwRUFBaUI7QUFDN0MsdUJBQXVCLG1CQUFPLENBQUMsZ0ZBQW9CO0FBQ25ELHlCQUF5QixtQkFBTyxDQUFDLG9GQUFzQjtBQUN2RCxzQkFBc0IsbUJBQU8sQ0FBQyw4RUFBbUI7QUFDakQsd0JBQXdCLG1CQUFPLENBQUMsa0ZBQXFCO0FBQ3JELHVCQUF1QixtQkFBTyxDQUFDLGdGQUFvQjtBQUNuRCwyQkFBMkIsbUJBQU8sQ0FBQyx3RkFBd0I7QUFDM0QsNEJBQTRCLG1CQUFPLENBQUMsMEZBQXlCOztBQUU3RDtBQUNBO0FBQ0EsMEJBQTBCLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ3pELCtCQUErQixtQkFBTyxDQUFDLGdHQUE0QjtBQUNuRSxnQ0FBZ0MsbUJBQU8sQ0FBQyxrR0FBNkI7QUFDckUsZ0NBQWdDLG1CQUFPLENBQUMsa0dBQTZCO0FBQ3JFLDBCQUEwQixtQkFBTyxDQUFDLHNGQUF1Qjs7QUFFekQ7QUFDQTtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLDhFQUFtQjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyxzRUFBZTtBQUN6Qyw2QkFBNkIsbUJBQU8sQ0FBQyw0RkFBMEI7O0FBRS9EO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsMEVBQWM7O0FBRXZDO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsc0VBQWU7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQWE7QUFDckMsc0JBQXNCLG1CQUFPLENBQUMsMEZBQXlCO0FBQ3ZELHNCQUFzQixtQkFBTyxDQUFDLDBGQUF5QjtBQUN2RCx1QkFBdUIsbUJBQU8sQ0FBQyxtRkFBdUI7QUFDdEQsc0JBQXNCLG1CQUFPLENBQUMsaUZBQXNCO0FBQ3BELGtCQUFrQixtQkFBTyxDQUFDLHNFQUFlO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLHdFQUFnQjtBQUMzQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBYztBQUN2QyxxQkFBcUIsbUJBQU8sQ0FBQyw0RUFBa0I7QUFDL0Msb0JBQW9CLG1CQUFPLENBQUMsMEVBQWlCO0FBQzdDLGlCQUFpQixtQkFBTyxDQUFDLDBFQUFjO0FBQ3ZDLHNCQUFzQixtQkFBTyxDQUFDLG9GQUFtQjtBQUNqRCxjQUFjLG1CQUFPLENBQUMsOERBQVc7QUFDakMsZUFBZSxtQkFBTyxDQUFDLGdFQUFZOztBQUVuQztBQUNBO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsNEVBQU87QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMseUVBQU07QUFDbEM7QUFDQSx3QkFBd0IsbUJBQU8sQ0FBQywrREFBVTtBQUMxQyxpQkFBaUIsbUJBQU8sQ0FBQyxxREFBUTs7QUFFakM7QUFDQSw4QkFBOEIsbUJBQU8sQ0FBQyw4RkFBMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9pbmRleC5qcz8yYjQ4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGJpdGNvcmUgPSBtb2R1bGUuZXhwb3J0cztcblxuLy8gbW9kdWxlIGluZm9ybWF0aW9uXG5iaXRjb3JlLnZlcnNpb24gPSAndicgKyByZXF1aXJlKCcuL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5iaXRjb3JlLnZlcnNpb25HdWFyZCA9IGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBtZXNzYWdlID0gJ01vcmUgdGhhbiBvbmUgaW5zdGFuY2Ugb2YgYml0Y29yZS1saWIgZm91bmQuICcgK1xuICAgICAgJ1BsZWFzZSBtYWtlIHN1cmUgdG8gcmVxdWlyZSBiaXRjb3JlLWxpYiBhbmQgY2hlY2sgdGhhdCBzdWJtb2R1bGVzIGRvJyArXG4gICAgICAnIG5vdCBhbHNvIGluY2x1ZGUgdGhlaXIgb3duIGJpdGNvcmUtbGliIGRlcGVuZGVuY3kuJztcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn07XG5iaXRjb3JlLnZlcnNpb25HdWFyZChnbG9iYWwuX2JpdGNvcmUpO1xuZ2xvYmFsLl9iaXRjb3JlID0gYml0Y29yZS52ZXJzaW9uO1xuXG4vLyBjcnlwdG9cbmJpdGNvcmUuY3J5cHRvID0ge307XG5iaXRjb3JlLmNyeXB0by5CTiA9IHJlcXVpcmUoJy4vbGliL2NyeXB0by9ibicpO1xuYml0Y29yZS5jcnlwdG8uRUNEU0EgPSByZXF1aXJlKCcuL2xpYi9jcnlwdG8vZWNkc2EnKTtcbmJpdGNvcmUuY3J5cHRvLlNjaG5vcnIgPSByZXF1aXJlKCcuL2xpYi9jcnlwdG8vc2Nobm9ycicpO1xuYml0Y29yZS5jcnlwdG8uSGFzaCA9IHJlcXVpcmUoJy4vbGliL2NyeXB0by9oYXNoJyk7XG5iaXRjb3JlLmNyeXB0by5SYW5kb20gPSByZXF1aXJlKCcuL2xpYi9jcnlwdG8vcmFuZG9tJyk7XG5iaXRjb3JlLmNyeXB0by5Qb2ludCA9IHJlcXVpcmUoJy4vbGliL2NyeXB0by9wb2ludCcpO1xuYml0Y29yZS5jcnlwdG8uU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9saWIvY3J5cHRvL3NpZ25hdHVyZScpO1xuYml0Y29yZS5jcnlwdG8uVGFnZ2VkSGFzaCA9IHJlcXVpcmUoJy4vbGliL2NyeXB0by90YWdnZWRoYXNoJyk7XG5cbi8vIGVuY29kaW5nXG5iaXRjb3JlLmVuY29kaW5nID0ge307XG5iaXRjb3JlLmVuY29kaW5nLkJhc2U1OCA9IHJlcXVpcmUoJy4vbGliL2VuY29kaW5nL2Jhc2U1OCcpO1xuYml0Y29yZS5lbmNvZGluZy5CYXNlNThDaGVjayA9IHJlcXVpcmUoJy4vbGliL2VuY29kaW5nL2Jhc2U1OGNoZWNrJyk7XG5iaXRjb3JlLmVuY29kaW5nLkJ1ZmZlclJlYWRlciA9IHJlcXVpcmUoJy4vbGliL2VuY29kaW5nL2J1ZmZlcnJlYWRlcicpO1xuYml0Y29yZS5lbmNvZGluZy5CdWZmZXJXcml0ZXIgPSByZXF1aXJlKCcuL2xpYi9lbmNvZGluZy9idWZmZXJ3cml0ZXInKTtcbmJpdGNvcmUuZW5jb2RpbmcuVmFyaW50ID0gcmVxdWlyZSgnLi9saWIvZW5jb2RpbmcvdmFyaW50Jyk7XG5cbi8vIHV0aWxpdGllc1xuYml0Y29yZS51dGlsID0ge307XG5iaXRjb3JlLnV0aWwuYnVmZmVyID0gcmVxdWlyZSgnLi9saWIvdXRpbC9idWZmZXInKTtcbmJpdGNvcmUudXRpbC5qcyA9IHJlcXVpcmUoJy4vbGliL3V0aWwvanMnKTtcbmJpdGNvcmUudXRpbC5wcmVjb25kaXRpb25zID0gcmVxdWlyZSgnLi9saWIvdXRpbC9wcmVjb25kaXRpb25zJyk7XG5cbi8vIGVycm9ycyB0aHJvd24gYnkgdGhlIGxpYnJhcnlcbmJpdGNvcmUuZXJyb3JzID0gcmVxdWlyZSgnLi9saWIvZXJyb3JzJyk7XG5cbi8vIG1haW4gYml0Y29pbiBsaWJyYXJ5XG5iaXRjb3JlLkFkZHJlc3MgPSByZXF1aXJlKCcuL2xpYi9hZGRyZXNzJyk7XG5iaXRjb3JlLkJsb2NrID0gcmVxdWlyZSgnLi9saWIvYmxvY2snKTtcbmJpdGNvcmUuTWVya2xlQmxvY2sgPSByZXF1aXJlKCcuL2xpYi9ibG9jay9tZXJrbGVibG9jaycpO1xuYml0Y29yZS5CbG9ja0hlYWRlciA9IHJlcXVpcmUoJy4vbGliL2Jsb2NrL2Jsb2NraGVhZGVyJyk7XG5iaXRjb3JlLkhEUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4vbGliL2hkcHJpdmF0ZWtleS5qcycpO1xuYml0Y29yZS5IRFB1YmxpY0tleSA9IHJlcXVpcmUoJy4vbGliL2hkcHVibGlja2V5LmpzJyk7XG5iaXRjb3JlLk1lc3NhZ2UgPSByZXF1aXJlKCcuL2xpYi9tZXNzYWdlJyk7XG5iaXRjb3JlLk5ldHdvcmtzID0gcmVxdWlyZSgnLi9saWIvbmV0d29ya3MnKTtcbmJpdGNvcmUuT3Bjb2RlID0gcmVxdWlyZSgnLi9saWIvb3Bjb2RlJyk7XG5iaXRjb3JlLlByaXZhdGVLZXkgPSByZXF1aXJlKCcuL2xpYi9wcml2YXRla2V5Jyk7XG5iaXRjb3JlLlB1YmxpY0tleSA9IHJlcXVpcmUoJy4vbGliL3B1YmxpY2tleScpO1xuYml0Y29yZS5TY3JpcHQgPSByZXF1aXJlKCcuL2xpYi9zY3JpcHQnKTtcbmJpdGNvcmUuVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL2xpYi90cmFuc2FjdGlvbicpO1xuYml0Y29yZS5VUkkgPSByZXF1aXJlKCcuL2xpYi91cmknKTtcbmJpdGNvcmUuVW5pdCA9IHJlcXVpcmUoJy4vbGliL3VuaXQnKTtcblxuLy8gZGVwZW5kZW5jaWVzLCBzdWJqZWN0IHRvIGNoYW5nZVxuYml0Y29yZS5kZXBzID0ge307XG5iaXRjb3JlLmRlcHMuYm5qcyA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5iaXRjb3JlLmRlcHMuYnM1OCA9IHJlcXVpcmUoJ2JzNTgnKTtcbmJpdGNvcmUuZGVwcy5CdWZmZXIgPSBCdWZmZXI7XG5iaXRjb3JlLmRlcHMuZWxsaXB0aWMgPSByZXF1aXJlKCdlbGxpcHRpYycpO1xuYml0Y29yZS5kZXBzLl8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuLy8gSW50ZXJuYWwgdXNhZ2UsIGV4cG9zZWQgZm9yIHRlc3RpbmcvYWR2YW5jZWQgdHdlYWtpbmdcbmJpdGNvcmUuVHJhbnNhY3Rpb24uc2lnaGFzaCA9IHJlcXVpcmUoJy4vbGliL3RyYW5zYWN0aW9uL3NpZ2hhc2gnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/address.js":
/*!*************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/address.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ./util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar Base58Check = __webpack_require__(/*! ./encoding/base58check */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/base58check.js\");\nvar Bech32 = __webpack_require__(/*! ./encoding/bech32 */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bech32.js\");\nvar Networks = __webpack_require__(/*! ./networks */ \"(ssr)/./node_modules/bitcore-lib/lib/networks.js\");\nvar Hash = __webpack_require__(/*! ./crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar JSUtil = __webpack_require__(/*! ./util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar PublicKey = __webpack_require__(/*! ./publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\n\n/**\n * Instantiate an address from an address String or Buffer, a public key or script hash Buffer,\n * or an instance of {@link PublicKey} or {@link Script}.\n *\n * This is an immutable class, and if the first parameter provided to this constructor is an\n * `Address` instance, the same argument will be returned.\n *\n * An address has two key properties: `network` and `type`. The type is one of\n * `Address.PayToPublicKeyHash` (value is the `'pubkeyhash'` string),\n * `Address.PayToScriptHash` (the string `'scripthash'`),\n * `Address.PayToWitnessPublicKeyHash` (the string `'witnesspubkeyhash'`),\n * or `Address.PayToWitnessScriptHash` (the string `'witnessscripthash'`).\n * The network is an instance of {@link Network}.\n * You can quickly check whether an address is of a given kind by using the methods\n * `isPayToPublicKeyHash`, `isPayToScriptHash`, `isPayToWitnessPublicKeyHash`,\n * and `isPayToWitnessScriptHash`.\n *\n * @example\n * ```javascript\n * // validate that an input field is valid\n * var error = Address.getValidationError(input, 'testnet');\n * if (!error) {\n *   var address = Address(input, 'testnet');\n * } else {\n *   // invalid network or checksum (typo?)\n *   var message = error.messsage;\n * }\n *\n * // get an address from a public key\n * var address = Address(publicKey, 'testnet').toString();\n * ```\n *\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'scripthash', 'pubkeyhash', witnessscripthash, 'witnesspubkeyhash', or 'taproot'\n * @param {string=} multisigType - The type of multisig: 'scripthash' or 'witnessscripthash'\n * @returns {Address} A new valid and frozen instance of an Address\n * @constructor\n */\nfunction Address(data, network, type, multisigType) {\n  /* jshint maxcomplexity: 12 */\n  /* jshint maxstatements: 20 */\n\n  if (!(this instanceof Address)) {\n    return new Address(data, network, type);\n  }\n\n  if (_.isArray(data) && _.isNumber(network)) {\n    return Address.createMultisig(data, network, type, false, multisigType);\n  }\n\n  if (data instanceof Address) {\n    // Immutable instance\n    return data;\n  }\n\n  $.checkArgument(data, 'First argument is required, please include address data.', 'guide/address.html');\n\n  if (network && !Networks.get(network)) {\n    throw new TypeError('Second argument must be \"livenet\" or \"testnet\".');\n  }\n\n  if (type && (\n    type !== Address.PayToPublicKeyHash\n    && type !== Address.PayToScriptHash\n    && type !== Address.PayToWitnessPublicKeyHash\n    && type !== Address.PayToWitnessScriptHash\n    && type !== Address.PayToTaproot)) {\n    throw new TypeError('Third argument must be \"pubkeyhash\", \"scripthash\", \"witnesspubkeyhash\", \"witnessscripthash\", or \"taproot\".');\n  }\n\n  var info = this._classifyArguments(data, network, type);\n\n  // set defaults if not set\n  info.network = info.network || Networks.get(network) || Networks.defaultNetwork;\n  info.type = info.type || type || Address.PayToPublicKeyHash;\n\n  JSUtil.defineImmutable(this, {\n    hashBuffer: info.hashBuffer,\n    network: info.network,\n    type: info.type\n  });\n\n  return this;\n}\n\n/**\n * Internal function used to split different kinds of arguments of the constructor\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Object} An \"info\" object with \"type\", \"network\", and \"hashBuffer\"\n */\nAddress.prototype._classifyArguments = function(data, network, type) {\n  /* jshint maxcomplexity: 10 */\n  // transform and validate input data\n  if ((data instanceof Buffer || data instanceof Uint8Array) && (data.length === 20 || data.length === 32)) {\n    return Address._transformHash(data, network, type);\n  } else if ((data instanceof Buffer || data instanceof Uint8Array) && data.length >= 21) {\n    return Address._transformBuffer(data, network, type);\n  } else if (data instanceof PublicKey) {\n    return Address._transformPublicKey(data, network, type);\n  } else if (data instanceof Script) {\n    return Address._transformScript(data, network);\n  } else if (typeof(data) === 'string') {\n    return Address._transformString(data, network, type);\n  } else if (_.isObject(data)) {\n    return Address._transformObject(data);\n  } else {\n    throw new TypeError('First argument is an unrecognized data format.');\n  }\n};\n\n/** @static */\nAddress.PayToPublicKeyHash = 'pubkeyhash';\n/** @static */\nAddress.PayToScriptHash = 'scripthash';\n/** @static */\nAddress.PayToWitnessPublicKeyHash = 'witnesspubkeyhash';\n/** @static */\nAddress.PayToWitnessScriptHash = 'witnessscripthash';\n/** @static */\nAddress.PayToTaproot = 'taproot';\n\n/**\n * @param {Buffer} hash - An instance of a hash Buffer\n * @param {string} type - either 'pubkeyhash', 'scripthash', 'witnesspubkeyhash', or 'witnessscripthash'\n * @param {Network=} network - the name of the network associated\n * @returns {Object} An object with keys: hashBuffer\n * @private\n */\nAddress._transformHash = function(hash, network, type) {\n  var info = {};\n  if (!(hash instanceof Buffer) && !(hash instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n  if (hash.length !== 20 && hash.length !== 32) {\n    throw new TypeError('Address hashbuffers must be either 20 or 32 bytes.');\n  }\n  info.hashBuffer = hash;\n  info.network = Networks.get(network) || Networks.defaultNetwork;\n  info.type = type;\n  return info;\n};\n\n/**\n * Deserializes an address serialized through `Address#toObject()`\n * @param {Object} data\n * @param {string} data.hash - the hash that this address encodes\n * @param {string} data.type - either 'pubkeyhash', 'scripthash', 'witnesspubkeyhash', or 'witnessscripthash'\n * @param {Network=} data.network - the name of the network associated\n * @return {Address}\n */\nAddress._transformObject = function(data) {\n  $.checkArgument(data.hash || data.hashBuffer, 'Must provide a `hash` or `hashBuffer` property');\n  $.checkArgument(data.type, 'Must provide a `type` property');\n  return {\n    hashBuffer: data.hash ? Buffer.from(data.hash, 'hex') : data.hashBuffer,\n    network: Networks.get(data.network) || Networks.defaultNetwork,\n    type: data.type\n  };\n};\n\n/**\n * Internal function to discover the network and type based on the first data byte\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @returns {Object} An object with keys: network and type\n * @private\n */\nAddress._classifyFromVersion = function(buffer) {\n  var version = {};\n\n  if (buffer.length > 21) {\n    var info = Bech32.decode(buffer.toString('utf8'));\n    if (info.version !== 0 && info.version !== 1) { // v1 == taproot\n      throw new TypeError('Only witness v0 and v1 addresses are supported.');\n    }\n\n    if (info.version === 0) {\n      if (info.data.length === 20) {\n        version.type = Address.PayToWitnessPublicKeyHash;\n      } else if (info.data.length === 32) {\n        version.type = Address.PayToWitnessScriptHash;\n      } else {\n        throw new TypeError('Witness data must be either 20 or 32 bytes.')\n      }\n    } else if (info.version === 1) {\n      if (info.data.length === 32) {\n        version.type = Address.PayToTaproot;\n      } else {\n        throw new TypeError('Witness data must be 32 bytes for v1');\n      }\n    } else {\n    }\n    version.network = Networks.get(info.prefix, 'bech32prefix');\n  } else {\n\n    var pubkeyhashNetwork = Networks.get(buffer[0], 'pubkeyhash');\n    var scripthashNetwork = Networks.get(buffer[0], 'scripthash');\n\n    if (pubkeyhashNetwork) {\n      version.network = pubkeyhashNetwork;\n      version.type = Address.PayToPublicKeyHash;\n    } else if (scripthashNetwork) {\n      version.network = scripthashNetwork;\n      version.type = Address.PayToScriptHash;\n    }\n  }\n\n  return version;\n};\n\n/**\n * Internal function to transform a bitcoin address buffer\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @param {string=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash', 'scripthash', 'witnesspubkeyhash', or 'witnessscripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\nAddress._transformBuffer = function(buffer, network, type) {\n  /* jshint maxcomplexity: 9 */\n  var info = {};\n  if (!(buffer instanceof Buffer) && !(buffer instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n\n  if (buffer.length < 21) {\n    throw new TypeError('Address buffer is incorrect length.');\n  }\n\n  var networkObj = Networks.get(network);\n  var bufferVersion = Address._classifyFromVersion(buffer);\n\n  if (network && !networkObj) {\n    throw new TypeError('Unknown network');\n  }\n\n  if (!bufferVersion.network || (networkObj && networkObj.xpubkey !== bufferVersion.network.xpubkey)) {\n    throw new TypeError('Address has mismatched network type.');\n  }\n\n  if (!bufferVersion.type || (type && type !== bufferVersion.type)) {\n    throw new TypeError('Address has mismatched type.');\n  }\n\n  if (buffer.length > 21) {\n    info.hashBuffer = Bech32.decode(buffer.toString('utf8')).data;\n  } else {\n    info.hashBuffer = buffer.slice(1);\n  }\n  info.network = networkObj || bufferVersion.network;\n  info.type = bufferVersion.type;\n  return info;\n};\n\n/**\n * Internal function to transform a {@link PublicKey}\n *\n * @param {PublicKey} pubkey - An instance of PublicKey\n * @param {string} type - Either 'pubkeyhash', 'witnesspubkeyhash', 'scripthash', or 'taproot'\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\nAddress._transformPublicKey = function(pubkey, network, type) {\n  var info = {};\n  if (!(pubkey instanceof PublicKey)) {\n    throw new TypeError('Address must be an instance of PublicKey.');\n  }\n  if (type && type !== Address.PayToScriptHash && type !== Address.PayToWitnessPublicKeyHash && type !== Address.PayToPublicKeyHash && type !== Address.PayToTaproot) {\n    throw new TypeError('Type must be either pubkeyhash, witnesspubkeyhash, scripthash, or taproot to transform public key.');\n  }\n  if (!pubkey.compressed && (type === Address.PayToScriptHash || type === Address.PayToWitnessPublicKeyHash)) {\n    throw new TypeError('Witness addresses must use compressed public keys.');\n  }\n  if (type === Address.PayToScriptHash) {\n    info.hashBuffer = Hash.sha256ripemd160(Script.buildWitnessV0Out(pubkey).toBuffer());\n  } else if (type === Address.PayToTaproot) {\n    info.hashBuffer = pubkey.createTapTweak().tweakedPubKey;\n  } else {\n    info.hashBuffer = Hash.sha256ripemd160(pubkey.toBuffer());\n  }\n  info.type = type || Address.PayToPublicKeyHash;\n  return info;\n};\n\n/**\n * Internal function to transform a {@link Script} into a `info` object.\n *\n * @param {Script} script - An instance of Script\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\nAddress._transformScript = function(script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n  var info = script.getAddressInfo(network);\n  if (!info) {\n    throw new errors.Script.CantDeriveAddress(script);\n  }\n  return info;\n};\n\n/**\n * Creates a P2SH address from a set of public keys and a threshold.\n *\n * The addresses will be sorted lexicographically, as that is the trend in bitcoin.\n * To create an address from unsorted public keys, use the {@link Script#buildMultisigOut}\n * interface.\n *\n * @param {Array} publicKeys - a set of public keys to create an address\n * @param {number} threshold - the number of signatures needed to release the funds\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {boolean=} nestedWitness - if the address uses a nested p2sh witness\n * @param {string} type - Either 'scripthash' or 'witnessscripthash'. If nestedWitness is set, then this is ignored\n * @return {Address}\n */\nAddress.createMultisig = function(publicKeys, threshold, network, nestedWitness, type) {\n  network = network || publicKeys[0].network || Networks.defaultNetwork;\n  if (type && type !== Address.PayToScriptHash && type !== Address.PayToWitnessScriptHash) {\n    throw new TypeError('Type must be either scripthash or witnessscripthash to create multisig.');\n  }\n  if (nestedWitness || type === Address.PayToWitnessScriptHash) {\n    publicKeys = _.map(publicKeys, PublicKey);\n    for (var i = 0; i < publicKeys.length; i++) {\n      if (!publicKeys[i].compressed) {\n        throw new TypeError('Witness addresses must use compressed public keys.');\n      }\n    }\n  }\n  var redeemScript = Script.buildMultisigOut(publicKeys, threshold);\n  if (nestedWitness) {\n    return Address.payingTo(Script.buildWitnessMultisigOutFromScript(redeemScript), network);\n  }\n  return Address.payingTo(redeemScript, network, type);\n};\n\n/**\n * Internal function to transform a bitcoin address string\n *\n * @param {string} data\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash', 'scripthash', 'witnesspubkeyhash', or 'witnessscripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\nAddress._transformString = function(data, network, type) {\n  if (typeof(data) !== 'string') {\n    throw new TypeError('data parameter supplied is not a string.');\n  }\n\n  if(data.length > 100) {\n    throw new TypeError('address string is too long');\n  }\n\n  if (network && !Networks.get(network)) {\n    throw new TypeError('Unknown network');\n  }\n\n  data = data.trim();\n\n  try {\n    var info = Address._transformBuffer(Buffer.from(data, 'utf8'), network, type);\n    return info;\n  } catch (e) {\n    if (type === Address.PayToWitnessPublicKeyHash || type === Address.PayToWitnessScriptHash || type === Address.PayToTaproot) {\n      throw e;\n    }\n  }\n\n  var addressBuffer = Base58Check.decode(data);\n  var info = Address._transformBuffer(addressBuffer, network, type);\n  return info;\n};\n\n/**\n * Instantiate an address from a PublicKey instance\n *\n * @param {PublicKey} data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - Either 'pubkeyhash', 'witnesspubkeyhash', or 'scripthash'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromPublicKey = function(data, network, type) {\n  var info = Address._transformPublicKey(data, network, type);\n  network = network || Networks.defaultNetwork;\n  return new Address(info.hashBuffer, network, info.type);\n};\n\n/**\n * Instantiate an address from a ripemd160 public key hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromPublicKeyHash = function(hash, network) {\n  var info = Address._transformHash(hash);\n  return new Address(info.hashBuffer, network, Address.PayToPublicKeyHash);\n};\n\n/**\n * Instantiate an address from a ripemd160 script hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - Either 'scripthash' or 'witnessscripthash'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromScriptHash = function(hash, network, type) {\n  $.checkArgument(hash, 'hash parameter is required');\n  var info = Address._transformHash(hash);\n  if (type === Address.PayToWitnessScriptHash && hash.length !== 32) {\n      throw new TypeError('Address hashbuffer must be exactly 32 bytes for v0 witness script hash.');\n  }\n  var type = type || Address.PayToScriptHash;\n  return new Address(info.hashBuffer, network, type);\n};\n\n/**\n * Builds a p2sh address paying to script. This will hash the script and\n * use that to create the address.\n * If you want to extract an address associated with a script instead,\n * see {{Address#fromScript}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - Either 'scripthash' or 'witnessscripthash'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.payingTo = function(script, network, type) {\n  $.checkArgument(script, 'script is required');\n  $.checkArgument(script instanceof Script, 'script must be instance of Script');\n  var hash;\n  if (type === Address.PayToWitnessScriptHash) {\n    hash = Hash.sha256(script.toBuffer());\n  } else {\n    hash = Hash.sha256ripemd160(script.toBuffer());\n  }\n  var type = type || Address.PayToScriptHash;\n  return Address.fromScriptHash(hash, network, type);\n};\n\n/**\n * Extract address from a Script. The script must be of one\n * of the following types: p2pkh input, p2pkh output, p2sh input\n * or p2sh output.\n * This will analyze the script and extract address information from it.\n * If you want to transform any script to a p2sh Address paying\n * to that script's hash instead, use {{Address#payingTo}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromScript = function(script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n  var info = Address._transformScript(script, network);\n  return new Address(info.hashBuffer, network, info.type);\n};\n\n/**\n * Instantiate an address from a buffer of the address\n *\n * @param {Buffer} buffer - An instance of buffer of the address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromBuffer = function(buffer, network, type) {\n  var info = Address._transformBuffer(buffer, network, type);\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n\n/**\n * Instantiate an address from an address string\n *\n * @param {string} str - An string of the bitcoin address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromString = function(str, network, type) {\n  var info = Address._transformString(str, network, type);\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n\n/**\n * Instantiate an address from an Object\n *\n * @param {string} json - An JSON string or Object with keys: hash, network and type\n * @returns {Address} A new valid instance of an Address\n */\nAddress.fromObject = function fromObject(obj) {\n  $.checkState(\n    JSUtil.isHexa(obj.hash),\n    'Unexpected hash property, \"' + obj.hash + '\", expected to be hex.'\n  );\n  var hashBuffer = Buffer.from(obj.hash, 'hex');\n  return new Address(hashBuffer, obj.network, obj.type);\n};\n\n/**\n * Will return a validation error if exists\n *\n * @example\n * ```javascript\n * // a network mismatch error\n * var error = Address.getValidationError('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'testnet');\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {null|Error} The corresponding error message\n */\nAddress.getValidationError = function(data, network, type) {\n  var error;\n  try {\n    /* jshint nonew: false */\n    new Address(data, network, type);\n  } catch (e) {\n    error = e;\n  }\n  return error;\n};\n\n/**\n * Will return a boolean if an address is valid\n *\n * @example\n * ```javascript\n * assert(Address.isValid('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'livenet'));\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {boolean} The corresponding error message\n */\nAddress.isValid = function(data, network, type) {\n  return !Address.getValidationError(data, network, type);\n};\n\n/**\n * Returns true if an address is of pay to public key hash type\n * @return boolean\n */\nAddress.prototype.isPayToPublicKeyHash = function() {\n  return this.type === Address.PayToPublicKeyHash;\n};\n\n/**\n * Returns true if an address is of pay to script hash type\n * @return boolean\n */\nAddress.prototype.isPayToScriptHash = function() {\n  return this.type === Address.PayToScriptHash;\n};\n\n/**\n * Returns true if an address is of pay to witness public key hash type\n * @return boolean\n */\nAddress.prototype.isPayToWitnessPublicKeyHash = function() {\n  return this.type === Address.PayToWitnessPublicKeyHash;\n};\n\n/**\n * Returns true if an address is of pay to witness script hash type\n * @return boolean\n */\nAddress.prototype.isPayToWitnessScriptHash = function() {\n  return this.type === Address.PayToWitnessScriptHash;\n};\n\n/**\n * Returns true if an address is of pay to Taproot script hash type\n * @returns {boolean}\n */\nAddress.prototype.isPayToTaproot = function() {\n  return this.type === Address.PayToTaproot;\n}\n\n/**\n * Will return a buffer representation of the address\n *\n * @returns {Buffer} Bitcoin address buffer\n */\nAddress.prototype.toBuffer = function() {\n  if (this.isPayToWitnessPublicKeyHash() || this.isPayToWitnessScriptHash()) {\n    return Buffer.from(this.toString(), 'utf8')\n  }\n  var version = Buffer.from([this.network[this.type]]);\n  return Buffer.concat([version, this.hashBuffer]);\n};\n\n/**\n * @returns {Object} A plain object with the address information\n */\nAddress.prototype.toObject = Address.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hashBuffer.toString('hex'),\n    type: this.type,\n    network: this.network.toString()\n  };\n};\n\n/**\n * Will return a the string representation of the address\n *\n * @returns {string} Bitcoin address\n */\nAddress.prototype.toString = function() {\n  if (this.isPayToWitnessPublicKeyHash() || this.isPayToWitnessScriptHash() || this.isPayToTaproot()) {\n    let prefix = this.network.bech32prefix;\n    let version = 0;\n    let encoding = Bech32.encodings.BECH32;\n    if (this.isPayToTaproot()) {\n      version = 1;\n      encoding = Bech32.encodings.BECH32M;\n    }\n    return Bech32.encode(prefix, version, this.hashBuffer, encoding);\n  }\n  return Base58Check.encode(this.toBuffer());\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Bitcoin address\n */\nAddress.prototype.inspect = function() {\n  return '<Address: ' + this.toString() + ', type: ' + this.type + ', network: ' + this.network + '>';\n};\n\nmodule.exports = Address;\n\nvar Script = __webpack_require__(/*! ./script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/block/block.js":
/*!*****************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/block/block.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar BlockHeader = __webpack_require__(/*! ./blockheader */ \"(ssr)/./node_modules/bitcore-lib/lib/block/blockheader.js\");\nvar BN = __webpack_require__(/*! ../crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar BufferReader = __webpack_require__(/*! ../encoding/bufferreader */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\");\nvar BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar Hash = __webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar Transaction = __webpack_require__(/*! ../transaction */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/index.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\n/**\n * Instantiate a Block from a Buffer, JSON object, or Object with\n * the properties of the Block\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {Block}\n * @constructor\n */\nfunction Block(arg) {\n  if (!(this instanceof Block)) {\n    return new Block(arg);\n  }\n  _.extend(this, Block._from(arg));\n  return this;\n}\n\n// https://github.com/bitcoin/bitcoin/blob/b5fa132329f0377d787a4a21c1686609c2bfaece/src/primitives/block.h#L14\nBlock.MAX_BLOCK_SIZE = 1000000;\n\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\nBlock._from = function _from(arg) {\n  var info = {};\n  if (BufferUtil.isBuffer(arg)) {\n    info = Block._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = Block._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for Block');\n  }\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {Object} - An object representing block data\n * @private\n */\nBlock._fromObject = function _fromObject(data) {\n  var transactions = [];\n  data.transactions.forEach(function(tx) {\n    if (tx instanceof Transaction) {\n      transactions.push(tx);\n    } else {\n      transactions.push(Transaction().fromObject(tx));\n    }\n  });\n  var info = {\n    header: BlockHeader.fromObject(data.header),\n    transactions: transactions\n  };\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {Block} - An instance of block\n */\nBlock.fromObject = function fromObject(obj) {\n  var info = Block._fromObject(obj);\n  return new Block(info);\n};\n\n/**\n * @param {BufferReader} - Block data\n * @returns {Object} - An object representing the block data\n * @private\n */\nBlock._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  $.checkState(!br.finished(), 'No block data received');\n  info.header = BlockHeader.fromBufferReader(br);\n  var transactions = br.readVarintNum();\n  info.transactions = [];\n  for (var i = 0; i < transactions; i++) {\n    info.transactions.push(Transaction().fromBufferReader(br));\n  }\n  return info;\n};\n\n/**\n * @param {BufferReader} - A buffer reader of the block\n * @returns {Block} - An instance of block\n */\nBlock.fromBufferReader = function fromBufferReader(br) {\n  $.checkArgument(br, 'br is required');\n  var info = Block._fromBufferReader(br);\n  return new Block(info);\n};\n\n/**\n * @param {Buffer} - A buffer of the block\n * @returns {Block} - An instance of block\n */\nBlock.fromBuffer = function fromBuffer(buf) {\n  return Block.fromBufferReader(new BufferReader(buf));\n};\n\n/**\n * @param {string} - str - A hex encoded string of the block\n * @returns {Block} - A hex encoded string of the block\n */\nBlock.fromString = function fromString(str) {\n  var buf = Buffer.from(str, 'hex');\n  return Block.fromBuffer(buf);\n};\n\n/**\n * @param {Binary} - Raw block binary data or buffer\n * @returns {Block} - An instance of block\n */\nBlock.fromRawBlock = function fromRawBlock(data) {\n  if (!BufferUtil.isBuffer(data)) {\n    data = Buffer.from(data, 'binary');\n  }\n  var br = BufferReader(data);\n  br.pos = Block.Values.START_OF_BLOCK;\n  var info = Block._fromBufferReader(br);\n  return new Block(info);\n};\n\n/**\n * @returns {Object} - A plain object with the block properties\n */\nBlock.prototype.toObject = Block.prototype.toJSON = function toObject() {\n  var transactions = [];\n  this.transactions.forEach(function(tx) {\n    transactions.push(tx.toObject());\n  });\n  return {\n    header: this.header.toObject(),\n    transactions: transactions\n  };\n};\n\n/**\n * @returns {Buffer} - A buffer of the block\n */\nBlock.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n\n/**\n * @returns {string} - A hex encoded string of the block\n */\nBlock.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * @param {BufferWriter} - An existing instance of BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the Block\n */\nBlock.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n  bw.write(this.header.toBuffer());\n  bw.writeVarintNum(this.transactions.length);\n  for (var i = 0; i < this.transactions.length; i++) {\n    this.transactions[i].toBufferWriter(bw);\n  }\n  return bw;\n};\n\n/**\n * Will iterate through each transaction and return an array of hashes\n * @returns {Array} - An array with transaction hashes\n */\nBlock.prototype.getTransactionHashes = function getTransactionHashes() {\n  var hashes = [];\n  if (this.transactions.length === 0) {\n    return [Block.Values.NULL_HASH];\n  }\n  for (var t = 0; t < this.transactions.length; t++) {\n    hashes.push(this.transactions[t]._getHash());\n  }\n  return hashes;\n};\n\n/**\n * Will build a merkle tree of all the transactions, ultimately arriving at\n * a single point, the merkle root.\n * @link https://en.bitcoin.it/wiki/Protocol_specification#Merkle_Trees\n * @returns {Array} - An array with each level of the tree after the other.\n */\nBlock.prototype.getMerkleTree = function getMerkleTree() {\n\n  var tree = this.getTransactionHashes();\n\n  var j = 0;\n  for (var size = this.transactions.length; size > 1; size = Math.floor((size + 1) / 2)) {\n    for (var i = 0; i < size; i += 2) {\n      var i2 = Math.min(i + 1, size - 1);\n      var buf = Buffer.concat([tree[j + i], tree[j + i2]]);\n      tree.push(Hash.sha256sha256(buf));\n    }\n    j += size;\n  }\n\n  return tree;\n};\n\n/**\n * Calculates the merkleRoot from the transactions.\n * @returns {Buffer} - A buffer of the merkle root hash\n */\nBlock.prototype.getMerkleRoot = function getMerkleRoot() {\n  var tree = this.getMerkleTree();\n  return tree[tree.length - 1];\n};\n\n/**\n * Verifies that the transactions in the block match the header merkle root\n * @returns {Boolean} - If the merkle roots match\n */\nBlock.prototype.validMerkleRoot = function validMerkleRoot() {\n\n  var h = new BN(this.header.merkleRoot.toString('hex'), 'hex');\n  var c = new BN(this.getMerkleRoot().toString('hex'), 'hex');\n\n  if (h.cmp(c) !== 0) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\nBlock.prototype._getHash = function() {\n  return this.header._getHash();\n};\n\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function() {\n    if (!this._id) {\n      this._id = this.header.id;\n    }\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(Block.prototype, 'id', idProperty);\nObject.defineProperty(Block.prototype, 'hash', idProperty);\n\n/**\n * @returns {string} - A string formatted for the console\n */\nBlock.prototype.inspect = function inspect() {\n  return '<Block ' + this.id + '>';\n};\n\nBlock.Values = {\n  START_OF_BLOCK: 8, // Start of block in raw block data\n  NULL_HASH: Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\n\nmodule.exports = Block;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/block/block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/block/blockheader.js":
/*!***********************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/block/blockheader.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar BN = __webpack_require__(/*! ../crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar BufferReader = __webpack_require__(/*! ../encoding/bufferreader */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\");\nvar BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar Hash = __webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar JSUtil = __webpack_require__(/*! ../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nvar GENESIS_BITS = 0x1d00ffff;\n\n/**\n * Instantiate a BlockHeader from a Buffer, JSON object, or Object with\n * the properties of the BlockHeader\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {BlockHeader} - An instance of block header\n * @constructor\n */\nvar BlockHeader = function BlockHeader(arg) {\n  if (!(this instanceof BlockHeader)) {\n    return new BlockHeader(arg);\n  }\n  var info = BlockHeader._from(arg);\n  this.version = info.version;\n  this.prevHash = info.prevHash;\n  this.merkleRoot = info.merkleRoot;\n  this.time = info.time;\n  this.timestamp = info.time;\n  this.bits = info.bits;\n  this.nonce = info.nonce;\n\n  if (info.hash) {\n    $.checkState(\n      this.hash === info.hash,\n      'Argument object hash property does not match block hash.'\n    );\n  }\n\n  return this;\n};\n\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block header data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\nBlockHeader._from = function _from(arg) {\n  var info = {};\n  if (BufferUtil.isBuffer(arg)) {\n    info = BlockHeader._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = BlockHeader._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for BlockHeader');\n  }\n  return info;\n};\n\n/**\n * @param {Object} - A JSON string\n * @returns {Object} - An object representing block header data\n * @private\n */\nBlockHeader._fromObject = function _fromObject(data) {\n  $.checkArgument(data, 'data is required');\n  var prevHash = data.prevHash;\n  var merkleRoot = data.merkleRoot;\n  if (_.isString(data.prevHash)) {\n    prevHash = BufferUtil.reverse(Buffer.from(data.prevHash, 'hex'));\n  }\n  if (_.isString(data.merkleRoot)) {\n    merkleRoot = BufferUtil.reverse(Buffer.from(data.merkleRoot, 'hex'));\n  }\n  var info = {\n    hash: data.hash,\n    version: data.version,\n    prevHash: prevHash,\n    merkleRoot: merkleRoot,\n    time: data.time,\n    timestamp: data.time,\n    bits: data.bits,\n    nonce: data.nonce\n  };\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromObject = function fromObject(obj) {\n  var info = BlockHeader._fromObject(obj);\n  return new BlockHeader(info);\n};\n\n/**\n * @param {Binary} - Raw block binary data or buffer\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromRawBlock = function fromRawBlock(data) {\n  if (!BufferUtil.isBuffer(data)) {\n    data = Buffer.from(data, 'binary');\n  }\n  var br = BufferReader(data);\n  br.pos = BlockHeader.Constants.START_OF_HEADER;\n  var info = BlockHeader._fromBufferReader(br);\n  return new BlockHeader(info);\n};\n\n/**\n * @param {Buffer} - A buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromBuffer = function fromBuffer(buf) {\n  var info = BlockHeader._fromBufferReader(BufferReader(buf));\n  return new BlockHeader(info);\n};\n\n/**\n * @param {string} - A hex encoded buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromString = function fromString(str) {\n  var buf = Buffer.from(str, 'hex');\n  return BlockHeader.fromBuffer(buf);\n};\n\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {Object} - An object representing block header data\n * @private\n */\nBlockHeader._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  info.version = br.readInt32LE();\n  info.prevHash = br.read(32);\n  info.merkleRoot = br.read(32);\n  info.time = br.readUInt32LE();\n  info.bits = br.readUInt32LE();\n  info.nonce = br.readUInt32LE();\n  return info;\n};\n\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromBufferReader = function fromBufferReader(br) {\n  var info = BlockHeader._fromBufferReader(br);\n  return new BlockHeader(info);\n};\n\n/**\n * @returns {Object} - A plain object of the BlockHeader\n */\nBlockHeader.prototype.toObject = BlockHeader.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hash,\n    version: this.version,\n    prevHash: BufferUtil.reverse(this.prevHash).toString('hex'),\n    merkleRoot: BufferUtil.reverse(this.merkleRoot).toString('hex'),\n    time: this.time,\n    bits: this.bits,\n    nonce: this.nonce\n  };\n};\n\n/**\n * @returns {Buffer} - A Buffer of the BlockHeader\n */\nBlockHeader.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n\n/**\n * @returns {string} - A hex encoded string of the BlockHeader\n */\nBlockHeader.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * @param {BufferWriter} - An existing instance BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the BlockHeader\n */\nBlockHeader.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n  bw.writeInt32LE(this.version);\n  bw.write(this.prevHash);\n  bw.write(this.merkleRoot);\n  bw.writeUInt32LE(this.time);\n  bw.writeUInt32LE(this.bits);\n  bw.writeUInt32LE(this.nonce);\n  return bw;\n};\n\n/**\n * Returns the target difficulty for this block\n * @param {Number} bits\n * @returns {BN} An instance of BN with the decoded difficulty bits\n */\nBlockHeader.prototype.getTargetDifficulty = function getTargetDifficulty(bits) {\n  bits = bits || this.bits;\n\n  var target = new BN(bits & 0xffffff);\n  var mov = 8 * ((bits >>> 24) - 3);\n  while (mov-- > 0) {\n    target = target.mul(new BN(2));\n  }\n  return target;\n};\n\n/**\n * @link https://en.bitcoin.it/wiki/Difficulty\n * @return {Number}\n */\nBlockHeader.prototype.getDifficulty = function getDifficulty() {\n  var difficulty1TargetBN = this.getTargetDifficulty(GENESIS_BITS).mul(new BN(Math.pow(10, 8)));\n  var currentTargetBN = this.getTargetDifficulty();\n\n  var difficultyString = difficulty1TargetBN.div(currentTargetBN).toString(10);\n  var decimalPos = difficultyString.length - 8;\n  difficultyString = difficultyString.slice(0, decimalPos) + '.' + difficultyString.slice(decimalPos);\n\n  return parseFloat(difficultyString);\n};\n\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\nBlockHeader.prototype._getHash = function hash() {\n  var buf = this.toBuffer();\n  return Hash.sha256sha256(buf);\n};\n\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function() {\n    if (!this._id) {\n      this._id = BufferReader(this._getHash()).readReverse().toString('hex');\n    }\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(BlockHeader.prototype, 'id', idProperty);\nObject.defineProperty(BlockHeader.prototype, 'hash', idProperty);\n\n/**\n * @returns {Boolean} - If timestamp is not too far in the future\n */\nBlockHeader.prototype.validTimestamp = function validTimestamp() {\n  var currentTime = Math.round(new Date().getTime() / 1000);\n  if (this.time > currentTime + BlockHeader.Constants.MAX_TIME_OFFSET) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns {Boolean} - If the proof-of-work hash satisfies the target difficulty\n */\nBlockHeader.prototype.validProofOfWork = function validProofOfWork() {\n  var pow = new BN(this.id, 'hex');\n  var target = this.getTargetDifficulty();\n\n  if (pow.cmp(target) > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns {string} - A string formatted for the console\n */\nBlockHeader.prototype.inspect = function inspect() {\n  return '<BlockHeader ' + this.id + '>';\n};\n\nBlockHeader.Constants = {\n  START_OF_HEADER: 8, // Start buffer position in raw block data\n  MAX_TIME_OFFSET: 2 * 60 * 60, // The max a timestamp can be in the future\n  LARGEST_HASH: new BN('10000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\n\nmodule.exports = BlockHeader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/block/blockheader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/block/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/block/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./block */ \"(ssr)/./node_modules/bitcore-lib/lib/block/block.js\");\n\nmodule.exports.BlockHeader = __webpack_require__(/*! ./blockheader */ \"(ssr)/./node_modules/bitcore-lib/lib/block/blockheader.js\");\nmodule.exports.MerkleBlock = __webpack_require__(/*! ./merkleblock */ \"(ssr)/./node_modules/bitcore-lib/lib/block/merkleblock.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2Jsb2NrL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDBHQUFtQzs7QUFFbkMsa0lBQXFEO0FBQ3JELGtJQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL2xpYi9ibG9jay9pbmRleC5qcz83ZjhmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ibG9jaycpO1xuXG5tb2R1bGUuZXhwb3J0cy5CbG9ja0hlYWRlciA9IHJlcXVpcmUoJy4vYmxvY2toZWFkZXInKTtcbm1vZHVsZS5leHBvcnRzLk1lcmtsZUJsb2NrID0gcmVxdWlyZSgnLi9tZXJrbGVibG9jaycpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/block/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/block/merkleblock.js":
/*!***********************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/block/merkleblock.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar BlockHeader = __webpack_require__(/*! ./blockheader */ \"(ssr)/./node_modules/bitcore-lib/lib/block/blockheader.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar BufferReader = __webpack_require__(/*! ../encoding/bufferreader */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\");\nvar BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar Hash = __webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar JSUtil = __webpack_require__(/*! ../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar Transaction = __webpack_require__(/*! ../transaction */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/index.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\n/**\n * Instantiate a MerkleBlock from a Buffer, JSON object, or Object with\n * the properties of the Block\n *\n * @param {*} - A Buffer, JSON string, or Object representing a MerkleBlock\n * @returns {MerkleBlock}\n * @constructor\n */\nfunction MerkleBlock(arg) {\n  /* jshint maxstatements: 18 */\n\n  if (!(this instanceof MerkleBlock)) {\n    return new MerkleBlock(arg);\n  }\n\n  var info = {};\n  if (BufferUtil.isBuffer(arg)) {\n    info = MerkleBlock._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    var header;\n    if(arg.header instanceof BlockHeader) {\n      header = arg.header;\n    } else {\n      header = BlockHeader.fromObject(arg.header);\n    }\n    info = {\n      /**\n       * @name MerkleBlock#header\n       * @type {BlockHeader}\n       */\n      header: header,\n      /**\n       * @name MerkleBlock#numTransactions\n       * @type {Number}\n       */\n      numTransactions: arg.numTransactions,\n      /**\n       * @name MerkleBlock#hashes\n       * @type {String[]}\n       */\n      hashes: arg.hashes,\n      /**\n       * @name MerkleBlock#flags\n       * @type {Number[]}\n       */\n      flags: arg.flags\n    };\n  } else {\n    throw new TypeError('Unrecognized argument for MerkleBlock');\n  }\n  _.extend(this,info);\n  this._flagBitsUsed = 0;\n  this._hashesUsed = 0;\n\n  return this;\n}\n\n/**\n * @param {Buffer} - MerkleBlock data in a Buffer object\n * @returns {MerkleBlock} - A MerkleBlock object\n */\nMerkleBlock.fromBuffer = function fromBuffer(buf) {\n  return MerkleBlock.fromBufferReader(BufferReader(buf));\n};\n\n/**\n * @param {BufferReader} - MerkleBlock data in a BufferReader object\n * @returns {MerkleBlock} - A MerkleBlock object\n */\nMerkleBlock.fromBufferReader = function fromBufferReader(br) {\n  return new MerkleBlock(MerkleBlock._fromBufferReader(br));\n};\n\n/**\n * @returns {Buffer} - A buffer of the block\n */\nMerkleBlock.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n\n/**\n * @param {BufferWriter} - An existing instance of BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the MerkleBlock\n */\nMerkleBlock.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n  bw.write(this.header.toBuffer());\n  bw.writeUInt32LE(this.numTransactions);\n  bw.writeVarintNum(this.hashes.length);\n  for (var i = 0; i < this.hashes.length; i++) {\n    bw.write(Buffer.from(this.hashes[i], 'hex'));\n  }\n  bw.writeVarintNum(this.flags.length);\n  for (i = 0; i < this.flags.length; i++) {\n    bw.writeUInt8(this.flags[i]);\n  }\n  return bw;\n};\n\n/**\n * @returns {Object} - A plain object with the MerkleBlock properties\n */\nMerkleBlock.prototype.toObject = MerkleBlock.prototype.toJSON = function toObject() {\n  return {\n    header: this.header.toObject(),\n    numTransactions: this.numTransactions,\n    hashes: this.hashes,\n    flags: this.flags\n  };\n};\n\n/**\n * Verify that the MerkleBlock is valid\n * @returns {Boolean} - True/False whether this MerkleBlock is Valid\n */\nMerkleBlock.prototype.validMerkleTree = function validMerkleTree() {\n  $.checkState(_.isArray(this.flags), 'MerkleBlock flags is not an array');\n  $.checkState(_.isArray(this.hashes), 'MerkleBlock hashes is not an array');\n\n  // Can't have more hashes than numTransactions\n  if(this.hashes.length > this.numTransactions) {\n    return false;\n  }\n\n  // Can't have more flag bits than num hashes\n  if(this.flags.length * 8 < this.hashes.length) {\n    return false;\n  }\n\n  var height = this._calcTreeHeight();\n  var opts = { hashesUsed: 0, flagBitsUsed: 0 };\n  var root = this._traverseMerkleTree(height, 0, opts);\n  if(opts.hashesUsed !== this.hashes.length) {\n    return false;\n  }\n  return BufferUtil.equals(root, this.header.merkleRoot);\n};\n\n/**\n * Return a list of all the txs hash that match the filter\n * @returns {Array} - txs hash that match the filter\n */\nMerkleBlock.prototype.filterdTxsHash = function filterdTxsHash() {\n  $.checkState(_.isArray(this.flags), 'MerkleBlock flags is not an array');\n  $.checkState(_.isArray(this.hashes), 'MerkleBlock hashes is not an array');\n\n  // Can't have more hashes than numTransactions\n  if(this.hashes.length > this.numTransactions) {\n    throw new errors.MerkleBlock.InvalidMerkleTree();\n  }\n\n  // Can't have more flag bits than num hashes\n  if(this.flags.length * 8 < this.hashes.length) {\n    throw new errors.MerkleBlock.InvalidMerkleTree();\n  }\n\n  // If there is only one hash the filter do not match any txs in the block\n  if(this.hashes.length === 1) {\n    return [];\n  };\n\n  var height = this._calcTreeHeight();\n  var opts = { hashesUsed: 0, flagBitsUsed: 0 };\n  var txs = this._traverseMerkleTree(height, 0, opts, true);\n  if(opts.hashesUsed !== this.hashes.length) {\n    throw new errors.MerkleBlock.InvalidMerkleTree();\n  }\n  return txs;\n};\n\n/**\n * Traverse a the tree in this MerkleBlock, validating it along the way\n * Modeled after Bitcoin Core merkleblock.cpp TraverseAndExtract()\n * @param {Number} - depth - Current height\n * @param {Number} - pos - Current position in the tree\n * @param {Object} - opts - Object with values that need to be mutated throughout the traversal\n * @param {Boolean} - checkForTxs - if true return opts.txs else return the Merkle Hash\n * @param {Number} - opts.flagBitsUsed - Number of flag bits used, should start at 0\n * @param {Number} - opts.hashesUsed - Number of hashes used, should start at 0\n * @param {Array} - opts.txs - Will finish populated by transactions found during traversal that match the filter\n * @returns {Buffer|null} - Buffer containing the Merkle Hash for that height\n * @returns {Array} - transactions found during traversal that match the filter\n * @private\n */\nMerkleBlock.prototype._traverseMerkleTree = function traverseMerkleTree(depth, pos, opts, checkForTxs) {\n  /* jshint maxcomplexity:  12*/\n  /* jshint maxstatements: 20 */\n\n  opts = opts || {};\n  opts.txs = opts.txs || [];\n  opts.flagBitsUsed = opts.flagBitsUsed || 0;\n  opts.hashesUsed = opts.hashesUsed || 0;\n  var checkForTxs = checkForTxs || false;\n\n  if(opts.flagBitsUsed > this.flags.length * 8) {\n    return null;\n  }\n  var isParentOfMatch = (this.flags[opts.flagBitsUsed >> 3] >>> (opts.flagBitsUsed++ & 7)) & 1;\n  if(depth === 0 || !isParentOfMatch) {\n    if(opts.hashesUsed >= this.hashes.length) {\n      return null;\n    }\n    var hash = this.hashes[opts.hashesUsed++];\n    if(depth === 0 && isParentOfMatch) {\n      opts.txs.push(hash);\n    }\n    return Buffer.from(hash, 'hex');\n  } else {\n    var left = this._traverseMerkleTree(depth-1, pos*2, opts);\n    var right = left;\n    if(pos*2+1 < this._calcTreeWidth(depth-1)) {\n      right = this._traverseMerkleTree(depth-1, pos*2+1, opts);\n    }\n    if (checkForTxs){\n      return opts.txs;\n    } else {\n      return Hash.sha256sha256(new Buffer.concat([left, right]));\n    };\n  }\n};\n\n/** Calculates the width of a merkle tree at a given height.\n *  Modeled after Bitcoin Core merkleblock.h CalcTreeWidth()\n * @param {Number} - Height at which we want the tree width\n * @returns {Number} - Width of the tree at a given height\n * @private\n */\nMerkleBlock.prototype._calcTreeWidth = function calcTreeWidth(height) {\n  return (this.numTransactions + (1 << height) - 1) >> height;\n};\n\n/** Calculates the height of the merkle tree in this MerkleBlock\n * @param {Number} - Height at which we want the tree width\n * @returns {Number} - Height of the merkle tree in this MerkleBlock\n * @private\n */\nMerkleBlock.prototype._calcTreeHeight = function calcTreeHeight() {\n  var height = 0;\n  while (this._calcTreeWidth(height) > 1) {\n    height++;\n  }\n  return height;\n};\n\n/**\n * @param {Transaction|String} - Transaction or Transaction ID Hash\n * @returns {Boolean} - return true/false if this MerkleBlock has the TX or not\n * @private\n */\nMerkleBlock.prototype.hasTransaction = function hasTransaction(tx) {\n  $.checkArgument(!_.isUndefined(tx), 'tx cannot be undefined');\n  $.checkArgument(tx instanceof Transaction || typeof tx === 'string',\n      'Invalid tx given, tx must be a \"string\" or \"Transaction\"');\n\n  var hash = tx;\n  if(tx instanceof Transaction) {\n    // We need to reverse the id hash for the lookup\n    hash = BufferUtil.reverse(Buffer.from(tx.id, 'hex')).toString('hex');\n  }\n\n  var txs = [];\n  var height = this._calcTreeHeight();\n  this._traverseMerkleTree(height, 0, { txs: txs });\n  return txs.indexOf(hash) !== -1;\n};\n\n/**\n * @param {Buffer} - MerkleBlock data\n * @returns {Object} - An Object representing merkleblock data\n * @private\n */\nMerkleBlock._fromBufferReader = function _fromBufferReader(br) {\n  $.checkState(!br.finished(), 'No merkleblock data received');\n  var info = {};\n  info.header = BlockHeader.fromBufferReader(br);\n  info.numTransactions = br.readUInt32LE();\n  var numHashes = br.readVarintNum();\n  info.hashes = [];\n  for (var i = 0; i < numHashes; i++) {\n    info.hashes.push(br.read(32).toString('hex'));\n  }\n  var numFlags = br.readVarintNum();\n  info.flags = [];\n  for (i = 0; i < numFlags; i++) {\n    info.flags.push(br.readUInt8());\n  }\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {Block} - An instance of block\n */\nMerkleBlock.fromObject = function fromObject(obj) {\n  return new MerkleBlock(obj);\n};\n\nmodule.exports = MerkleBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/block/merkleblock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js":
/*!***************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/crypto/bn.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bitcore-lib/node_modules/bn.js/lib/bn.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\nvar reversebuf = function(buf) {\n  var buf2 = Buffer.alloc(buf.length);\n  for (var i = 0; i < buf.length; i++) {\n    buf2[i] = buf[buf.length - 1 - i];\n  }\n  return buf2;\n};\n\nBN.Zero = new BN(0);\nBN.One = new BN(1);\nBN.Minus1 = new BN(-1);\n\nBN.fromNumber = function(n) {\n  $.checkArgument(_.isNumber(n));\n  return new BN(n);\n};\n\nBN.fromString = function(str, base) {\n  $.checkArgument(_.isString(str));\n  return new BN(str, base);\n};\n\nBN.fromBuffer = function(buf, opts) {\n  if (typeof opts !== 'undefined' && opts.endian === 'little') {\n    buf = reversebuf(buf);\n  }\n  var hex = buf.toString('hex');\n  var bn = new BN(hex, 16);\n  return bn;\n};\n\n/**\n * Instantiate a BigNumber from a \"signed magnitude buffer\"\n * (a buffer where the most significant bit represents the sign (0 = positive, -1 = negative))\n */\nBN.fromSM = function(buf, opts) {\n  var ret;\n  if (buf.length === 0) {\n    return BN.fromBuffer(Buffer.from([0]));\n  }\n\n  var endian = 'big';\n  if (opts) {\n    endian = opts.endian;\n  }\n  if (endian === 'little') {\n    buf = reversebuf(buf);\n  }\n\n  if (buf[0] & 0x80) {\n    buf[0] = buf[0] & 0x7f;\n    ret = BN.fromBuffer(buf);\n    ret.neg().copy(ret);\n  } else {\n    ret = BN.fromBuffer(buf);\n  }\n  return ret;\n};\n\n\nBN.prototype.toNumber = function() {\n  return parseInt(this.toString(10), 10);\n};\n\nBN.prototype.toBuffer = function(opts) {\n  var buf, hex;\n  if (opts && opts.size) {\n    hex = this.toString(16, 2);\n    var natlen = hex.length / 2;\n    buf = Buffer.from(hex, 'hex');\n\n    if (natlen === opts.size) {\n      buf = buf;\n    } else if (natlen > opts.size) {\n      buf = BN.trim(buf, natlen);\n    } else if (natlen < opts.size) {\n      buf = BN.pad(buf, natlen, opts.size);\n    }\n  } else {\n    hex = this.toString(16, 2);\n    buf = Buffer.from(hex, 'hex');\n  }\n\n  if (typeof opts !== 'undefined' && opts.endian === 'little') {\n    buf = reversebuf(buf);\n  }\n\n  return buf;\n};\n\nBN.prototype.toSMBigEndian = function() {\n  var buf;\n  if (this.cmp(BN.Zero) === -1) {\n    buf = this.neg().toBuffer();\n    if (buf[0] & 0x80) {\n      buf = Buffer.concat([Buffer.from([0x80]), buf]);\n    } else {\n      buf[0] = buf[0] | 0x80;\n    }\n  } else {\n    buf = this.toBuffer();\n    if (buf[0] & 0x80) {\n      buf = Buffer.concat([Buffer.from([0x00]), buf]);\n    }\n  }\n\n  if (buf.length === 1 & buf[0] === 0) {\n    buf = Buffer.from([]);\n  }\n  return buf;\n};\n\nBN.prototype.toSM = function(opts) {\n  var endian = opts ? opts.endian : 'big';\n  var buf = this.toSMBigEndian();\n\n  if (endian === 'little') {\n    buf = reversebuf(buf);\n  }\n  return buf;\n};\n\n/**\n * Create a BN from a \"ScriptNum\":\n * This is analogous to the constructor for CScriptNum in bitcoind. Many ops in\n * bitcoind's script interpreter use CScriptNum, which is not really a proper\n * bignum. Instead, an error is thrown if trying to input a number bigger than\n * 4 bytes. We copy that behavior here. A third argument, `size`, is provided to\n * extend the hard limit of 4 bytes, as some usages require more than 4 bytes.\n */\nBN.fromScriptNumBuffer = function(buf, fRequireMinimal, size) {\n  var nMaxNumSize = size || 4;\n  $.checkArgument(buf.length <= nMaxNumSize, new Error('script number overflow'));\n  if (fRequireMinimal && buf.length > 0) {\n    // Check that the number is encoded with the minimum possible\n    // number of bytes.\n    //\n    // If the most-significant-byte - excluding the sign bit - is zero\n    // then we're not minimal. Note how this test also rejects the\n    // negative-zero encoding, 0x80.\n    if ((buf[buf.length - 1] & 0x7f) === 0) {\n      // One exception: if there's more than one byte and the most\n      // significant bit of the second-most-significant-byte is set\n      // it would conflict with the sign bit. An example of this case\n      // is +-255, which encode to 0xff00 and 0xff80 respectively.\n      // (big-endian).\n      if (buf.length <= 1 || (buf[buf.length - 2] & 0x80) === 0) {\n        throw new Error('non-minimally encoded script number');\n      }\n    }\n  }\n  return BN.fromSM(buf, {\n    endian: 'little'\n  });\n};\n\n/**\n * The corollary to the above, with the notable exception that we do not throw\n * an error if the output is larger than four bytes. (Which can happen if\n * performing a numerical operation that results in an overflow to more than 4\n * bytes).\n */\nBN.prototype.toScriptNumBuffer = function() {\n  return this.toSM({\n    endian: 'little'\n  });\n};\n\nBN.trim = function(buf, natlen) {\n  return buf.slice(natlen - buf.length, buf.length);\n};\n\nBN.pad = function(buf, natlen, size) {\n  var rbuf = Buffer.alloc(size);\n  for (var i = 0; i < buf.length; i++) {\n    rbuf[rbuf.length - 1 - i] = buf[buf.length - 1 - i];\n  }\n  for (i = 0; i < size - natlen; i++) {\n    rbuf[i] = 0;\n  }\n  return rbuf;\n};\n\nmodule.exports = BN;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/crypto/ecdsa.js":
/*!******************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/crypto/ecdsa.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar BN = __webpack_require__(/*! ./bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar Point = __webpack_require__(/*! ./point */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/point.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar PublicKey = __webpack_require__(/*! ../publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\nvar Random = __webpack_require__(/*! ./random */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/random.js\");\nvar Hash = __webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nvar ECDSA = function ECDSA(obj) {\n  if (!(this instanceof ECDSA)) {\n    return new ECDSA(obj);\n  }\n  if (obj) {\n    this.set(obj);\n  }\n};\n\n/* jshint maxcomplexity: 9 */\nECDSA.prototype.set = function(obj) {\n  this.hashbuf = obj.hashbuf || this.hashbuf;\n  this.endian = obj.endian || this.endian; //the endianness of hashbuf\n  this.privkey = obj.privkey || this.privkey;\n  this.pubkey = obj.pubkey || (this.privkey ? this.privkey.publicKey : this.pubkey);\n  this.sig = obj.sig || this.sig;\n  this.k = obj.k || this.k;\n  this.verified = obj.verified || this.verified;\n  return this;\n};\n\nECDSA.prototype.privkey2pubkey = function() {\n  this.pubkey = this.privkey.toPublicKey();\n};\n\nECDSA.prototype.calci = function() {\n  for (var i = 0; i < 4; i++) {\n    this.sig.i = i;\n    var Qprime;\n    try {\n      Qprime = this.toPublicKey();\n    } catch (e) {\n      console.error(e);\n      continue;\n    }\n\n    if (Qprime.point.eq(this.pubkey.point)) {\n      this.sig.compressed = this.pubkey.compressed;\n      return this;\n    }\n  }\n\n  this.sig.i = undefined;\n  throw new Error('Unable to find valid recovery factor');\n};\n\nECDSA.fromString = function(str) {\n  var obj = JSON.parse(str);\n  return new ECDSA(obj);\n};\n\nECDSA.prototype.randomK = function() {\n  var N = Point.getN();\n  var k;\n  do {\n    k = BN.fromBuffer(Random.getRandomBuffer(32));\n  } while (!(k.lt(N) && k.gt(BN.Zero)));\n  this.k = k;\n  return this;\n};\n\n\n// https://tools.ietf.org/html/rfc6979#section-3.2\nECDSA.prototype.deterministicK = function(badrs) {\n  /* jshint maxstatements: 25 */\n  // if r or s were invalid when this function was used in signing,\n  // we do not want to actually compute r, s here for efficiency, so,\n  // we can increment badrs. explained at end of RFC 6979 section 3.2\n  if (_.isUndefined(badrs)) {\n    badrs = 0;\n  }\n  var v = Buffer.alloc(32);\n  v.fill(0x01);\n  var k = Buffer.alloc(32);\n  k.fill(0x00);\n  var x = this.privkey.bn.toBuffer({\n    size: 32\n  });\n  var hashbuf = this.endian === 'little' ? BufferUtil.reverse(this.hashbuf) : this.hashbuf\n  k = Hash.sha256hmac(Buffer.concat([v, Buffer.from([0x00]), x, hashbuf]), k);\n  v = Hash.sha256hmac(v, k);\n  k = Hash.sha256hmac(Buffer.concat([v, Buffer.from([0x01]), x, hashbuf]), k);\n  v = Hash.sha256hmac(v, k);\n  v = Hash.sha256hmac(v, k);\n  var T = BN.fromBuffer(v);\n  var N = Point.getN();\n\n  // also explained in 3.2, we must ensure T is in the proper range (0, N)\n  for (var i = 0; i < badrs || !(T.lt(N) && T.gt(BN.Zero)); i++) {\n    k = Hash.sha256hmac(Buffer.concat([v, Buffer.from([0x00])]), k);\n    v = Hash.sha256hmac(v, k);\n    v = Hash.sha256hmac(v, k);\n    T = BN.fromBuffer(v);\n  }\n\n  this.k = T;\n  return this;\n};\n\n// Information about public key recovery:\n// https://bitcointalk.org/index.php?topic=6430.0\n// http://stackoverflow.com/questions/19665491/how-do-i-get-an-ecdsa-public-key-from-just-a-bitcoin-signature-sec1-4-1-6-k\nECDSA.prototype.toPublicKey = function() {\n  /* jshint maxstatements: 25 */\n  var i = this.sig.i;\n  $.checkArgument(i === 0 || i === 1 || i === 2 || i === 3, new Error('i must be equal to 0, 1, 2, or 3'));\n\n  var e = BN.fromBuffer(this.hashbuf);\n  var r = this.sig.r;\n  var s = this.sig.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = i & 1;\n\n  // The more significant bit specifies whether we should use the\n  // first or second candidate key.\n  var isSecondKey = i >> 1;\n\n  var n = Point.getN();\n  var G = Point.getG();\n\n  // 1.1 Let x = r + jn\n  var x = isSecondKey ? r.add(n) : r;\n  var R = Point.fromX(isYOdd, x);\n\n  // 1.4 Check that nR is at infinity\n  var nR = R.mul(n);\n\n  if (!nR.isInfinity()) {\n    throw new Error('nR is not a valid curve point');\n  }\n\n  // Compute -e from e\n  var eNeg = e.neg().umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR - eG)\n  // Q = r^-1 (sR + -eG)\n  var rInv = r.invm(n);\n\n  //var Q = R.multiplyTwo(s, G, eNeg).mul(rInv);\n  var Q = R.mul(s).add(G.mul(eNeg)).mul(rInv);\n\n  var pubkey = PublicKey.fromPoint(Q, this.sig.compressed);\n\n  return pubkey;\n};\n\nECDSA.prototype.sigError = function() {\n  /* jshint maxstatements: 25 */\n  if (!BufferUtil.isBuffer(this.hashbuf) || this.hashbuf.length !== 32) {\n    return 'hashbuf must be a 32 byte buffer';\n  }\n\n  var r = this.sig.r;\n  var s = this.sig.s;\n  if (!(r.gt(BN.Zero) && r.lt(Point.getN())) || !(s.gt(BN.Zero) && s.lt(Point.getN()))) {\n    return 'r and s not in range';\n  }\n\n  var e = BN.fromBuffer(this.hashbuf, this.endian ? {\n    endian: this.endian\n  } : undefined);\n  var n = Point.getN();\n  var sinv = s.invm(n);\n  var u1 = sinv.mul(e).umod(n);\n  var u2 = sinv.mul(r).umod(n);\n\n  var p = Point.getG().mulAdd(u1, this.pubkey.point, u2);\n  if (p.isInfinity()) {\n    return 'p is infinity';\n  }\n\n  if (p.getX().umod(n).cmp(r) !== 0) {\n    return 'Invalid signature';\n  } else {\n    return false;\n  }\n};\n\nECDSA.toLowS = function(s) {\n  //enforce low s\n  //see BIP 62, \"low S values in signatures\"\n  if (s.gt(BN.fromBuffer(Buffer.from('7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0', 'hex')))) {\n    s = Point.getN().sub(s);\n  }\n  return s;\n};\n\nECDSA.prototype._findSignature = function(d, e) {\n  var N = Point.getN();\n  var G = Point.getG();\n  // try different values of k until r, s are valid\n  var badrs = 0;\n  var k, Q, r, s;\n  do {\n    if (!this.k || badrs > 0) {\n      this.deterministicK(badrs);\n    }\n    badrs++;\n    k = this.k;\n    Q = G.mul(k);\n    r = Q.x.umod(N);\n    s = k.invm(N).mul(e.add(d.mul(r))).umod(N);\n  } while (r.cmp(BN.Zero) <= 0 || s.cmp(BN.Zero) <= 0);\n\n  s = ECDSA.toLowS(s);\n  return {\n    s: s,\n    r: r\n  };\n\n};\n\nECDSA.prototype.sign = function() {\n  var hashbuf = this.hashbuf;\n  var privkey = this.privkey;\n  var d = privkey.bn;\n\n  $.checkState(hashbuf && privkey && d, new Error('invalid parameters'));\n  $.checkState(BufferUtil.isBuffer(hashbuf) && hashbuf.length === 32, new Error('hashbuf must be a 32 byte buffer'));\n\n  var e = BN.fromBuffer(hashbuf, this.endian ? {\n    endian: this.endian\n  } : undefined);\n\n  var obj = this._findSignature(d, e);\n  obj.compressed = this.pubkey.compressed;\n\n  this.sig = new Signature(obj);\n  return this;\n};\n\nECDSA.prototype.signRandomK = function() {\n  this.randomK();\n  return this.sign();\n};\n\nECDSA.prototype.toString = function() {\n  var obj = {};\n  if (this.hashbuf) {\n    obj.hashbuf = this.hashbuf.toString('hex');\n  }\n  if (this.privkey) {\n    obj.privkey = this.privkey.toString();\n  }\n  if (this.pubkey) {\n    obj.pubkey = this.pubkey.toString();\n  }\n  if (this.sig) {\n    obj.sig = this.sig.toString();\n  }\n  if (this.k) {\n    obj.k = this.k.toString();\n  }\n  return JSON.stringify(obj);\n};\n\nECDSA.prototype.verify = function() {\n  if (!this.sigError()) {\n    this.verified = true;\n  } else {\n    this.verified = false;\n  }\n  return this;\n};\n\nECDSA.sign = function(hashbuf, privkey, endian) {\n  return ECDSA().set({\n    hashbuf: hashbuf,\n    endian: endian,\n    privkey: privkey\n  }).sign().sig;\n};\n\nECDSA.verify = function(hashbuf, sig, pubkey, endian) {\n  return ECDSA().set({\n    hashbuf: hashbuf,\n    endian: endian,\n    sig: sig,\n    pubkey: pubkey\n  }).verify().verified;\n};\n\nmodule.exports = ECDSA;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/crypto/ecdsa.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js":
/*!*****************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/crypto/hash.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nvar Hash = module.exports;\n\nHash.sha1 = function(buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf));\n  return crypto.createHash('sha1').update(buf).digest();\n};\n\nHash.sha1.blocksize = 512;\n\nHash.sha256 = function(buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf));\n  return crypto.createHash('sha256').update(buf).digest();\n};\n\nHash.sha256.blocksize = 512;\n\nHash.sha256sha256 = function(buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf));\n  return Hash.sha256(Hash.sha256(buf));\n};\n\nHash.ripemd160 = function(buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf));\n  return crypto.createHash('ripemd160').update(buf).digest();\n};\n\nHash.sha256ripemd160 = function(buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf));\n  return Hash.ripemd160(Hash.sha256(buf));\n};\n\nHash.sha512 = function(buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf));\n  return crypto.createHash('sha512').update(buf).digest();\n};\n\nHash.sha512.blocksize = 1024;\n\nHash.hmac = function(hashf, data, key) {\n  //http://en.wikipedia.org/wiki/Hash-based_message_authentication_code\n  //http://tools.ietf.org/html/rfc4868#section-2\n  $.checkArgument(BufferUtil.isBuffer(data));\n  $.checkArgument(BufferUtil.isBuffer(key));\n  $.checkArgument(hashf.blocksize);\n\n  var blocksize = hashf.blocksize / 8;\n\n  if (key.length > blocksize) {\n    key = hashf(key);\n  } else if (key < blocksize) {\n    var fill = Buffer.alloc(blocksize);\n    fill.fill(0);\n    key.copy(fill);\n    key = fill;\n  }\n\n  var o_key = Buffer.alloc(blocksize);\n  o_key.fill(0x5c);\n\n  var i_key = Buffer.alloc(blocksize);\n  i_key.fill(0x36);\n\n  var o_key_pad = Buffer.alloc(blocksize);\n  var i_key_pad = Buffer.alloc(blocksize);\n  for (var i = 0; i < blocksize; i++) {\n    o_key_pad[i] = o_key[i] ^ key[i];\n    i_key_pad[i] = i_key[i] ^ key[i];\n  }\n\n  return hashf(Buffer.concat([o_key_pad, hashf(Buffer.concat([i_key_pad, data]))]));\n};\n\nHash.sha256hmac = function(data, key) {\n  return Hash.hmac(Hash.sha256, data, key);\n};\n\nHash.sha512hmac = function(data, key) {\n  return Hash.hmac(Hash.sha512, data, key);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2NyeXB0by9oYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGFBQWEsbUJBQU8sQ0FBQyxzQkFBUTtBQUM3QixpQkFBaUIsbUJBQU8sQ0FBQywyRUFBZ0I7QUFDekMsUUFBUSxtQkFBTyxDQUFDLHlGQUF1Qjs7QUFFdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixlQUFlO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvY3J5cHRvL2hhc2guanM/MmJiNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbnZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbC9idWZmZXInKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vdXRpbC9wcmVjb25kaXRpb25zJyk7XG5cbnZhciBIYXNoID0gbW9kdWxlLmV4cG9ydHM7XG5cbkhhc2guc2hhMSA9IGZ1bmN0aW9uKGJ1Zikge1xuICAkLmNoZWNrQXJndW1lbnQoQnVmZmVyVXRpbC5pc0J1ZmZlcihidWYpKTtcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKGJ1ZikuZGlnZXN0KCk7XG59O1xuXG5IYXNoLnNoYTEuYmxvY2tzaXplID0gNTEyO1xuXG5IYXNoLnNoYTI1NiA9IGZ1bmN0aW9uKGJ1Zikge1xuICAkLmNoZWNrQXJndW1lbnQoQnVmZmVyVXRpbC5pc0J1ZmZlcihidWYpKTtcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYnVmKS5kaWdlc3QoKTtcbn07XG5cbkhhc2guc2hhMjU2LmJsb2Nrc2l6ZSA9IDUxMjtcblxuSGFzaC5zaGEyNTZzaGEyNTYgPSBmdW5jdGlvbihidWYpIHtcbiAgJC5jaGVja0FyZ3VtZW50KEJ1ZmZlclV0aWwuaXNCdWZmZXIoYnVmKSk7XG4gIHJldHVybiBIYXNoLnNoYTI1NihIYXNoLnNoYTI1NihidWYpKTtcbn07XG5cbkhhc2gucmlwZW1kMTYwID0gZnVuY3Rpb24oYnVmKSB7XG4gICQuY2hlY2tBcmd1bWVudChCdWZmZXJVdGlsLmlzQnVmZmVyKGJ1ZikpO1xuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3JpcGVtZDE2MCcpLnVwZGF0ZShidWYpLmRpZ2VzdCgpO1xufTtcblxuSGFzaC5zaGEyNTZyaXBlbWQxNjAgPSBmdW5jdGlvbihidWYpIHtcbiAgJC5jaGVja0FyZ3VtZW50KEJ1ZmZlclV0aWwuaXNCdWZmZXIoYnVmKSk7XG4gIHJldHVybiBIYXNoLnJpcGVtZDE2MChIYXNoLnNoYTI1NihidWYpKTtcbn07XG5cbkhhc2guc2hhNTEyID0gZnVuY3Rpb24oYnVmKSB7XG4gICQuY2hlY2tBcmd1bWVudChCdWZmZXJVdGlsLmlzQnVmZmVyKGJ1ZikpO1xuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTUxMicpLnVwZGF0ZShidWYpLmRpZ2VzdCgpO1xufTtcblxuSGFzaC5zaGE1MTIuYmxvY2tzaXplID0gMTAyNDtcblxuSGFzaC5obWFjID0gZnVuY3Rpb24oaGFzaGYsIGRhdGEsIGtleSkge1xuICAvL2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGFzaC1iYXNlZF9tZXNzYWdlX2F1dGhlbnRpY2F0aW9uX2NvZGVcbiAgLy9odHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0ODY4I3NlY3Rpb24tMlxuICAkLmNoZWNrQXJndW1lbnQoQnVmZmVyVXRpbC5pc0J1ZmZlcihkYXRhKSk7XG4gICQuY2hlY2tBcmd1bWVudChCdWZmZXJVdGlsLmlzQnVmZmVyKGtleSkpO1xuICAkLmNoZWNrQXJndW1lbnQoaGFzaGYuYmxvY2tzaXplKTtcblxuICB2YXIgYmxvY2tzaXplID0gaGFzaGYuYmxvY2tzaXplIC8gODtcblxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGhhc2hmKGtleSk7XG4gIH0gZWxzZSBpZiAoa2V5IDwgYmxvY2tzaXplKSB7XG4gICAgdmFyIGZpbGwgPSBCdWZmZXIuYWxsb2MoYmxvY2tzaXplKTtcbiAgICBmaWxsLmZpbGwoMCk7XG4gICAga2V5LmNvcHkoZmlsbCk7XG4gICAga2V5ID0gZmlsbDtcbiAgfVxuXG4gIHZhciBvX2tleSA9IEJ1ZmZlci5hbGxvYyhibG9ja3NpemUpO1xuICBvX2tleS5maWxsKDB4NWMpO1xuXG4gIHZhciBpX2tleSA9IEJ1ZmZlci5hbGxvYyhibG9ja3NpemUpO1xuICBpX2tleS5maWxsKDB4MzYpO1xuXG4gIHZhciBvX2tleV9wYWQgPSBCdWZmZXIuYWxsb2MoYmxvY2tzaXplKTtcbiAgdmFyIGlfa2V5X3BhZCA9IEJ1ZmZlci5hbGxvYyhibG9ja3NpemUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgb19rZXlfcGFkW2ldID0gb19rZXlbaV0gXiBrZXlbaV07XG4gICAgaV9rZXlfcGFkW2ldID0gaV9rZXlbaV0gXiBrZXlbaV07XG4gIH1cblxuICByZXR1cm4gaGFzaGYoQnVmZmVyLmNvbmNhdChbb19rZXlfcGFkLCBoYXNoZihCdWZmZXIuY29uY2F0KFtpX2tleV9wYWQsIGRhdGFdKSldKSk7XG59O1xuXG5IYXNoLnNoYTI1NmhtYWMgPSBmdW5jdGlvbihkYXRhLCBrZXkpIHtcbiAgcmV0dXJuIEhhc2guaG1hYyhIYXNoLnNoYTI1NiwgZGF0YSwga2V5KTtcbn07XG5cbkhhc2guc2hhNTEyaG1hYyA9IGZ1bmN0aW9uKGRhdGEsIGtleSkge1xuICByZXR1cm4gSGFzaC5obWFjKEhhc2guc2hhNTEyLCBkYXRhLCBrZXkpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/crypto/point.js":
/*!******************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/crypto/point.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar BN = __webpack_require__(/*! ./bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\n\nvar EC = (__webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\").ec);\nvar ec = new EC('secp256k1');\nvar ecPoint = ec.curve.point.bind(ec.curve);\nvar ecPointFromX = ec.curve.pointFromX.bind(ec.curve);\n\n/**\n *\n * Instantiate a valid secp256k1 Point from the X and Y coordinates.\n *\n * @param {BN|String} x - The X coordinate\n * @param {BN|String} y - The Y coordinate\n * @link https://github.com/indutny/elliptic\n * @augments elliptic.curve.point\n * @throws {Error} A validation error if exists\n * @returns {Point} An instance of Point\n * @constructor\n */\nvar Point = function Point(x, y, isRed) {\n  try {\n    var point = ecPoint(x, y, isRed);\n  } catch (e) {\n    throw new Error('Invalid Point');\n  }\n  point.validate();\n  return point;\n};\n\nPoint.prototype = Object.getPrototypeOf(ec.curve.point());\n\n/**\n *\n * Instantiate a valid secp256k1 Point from only the X coordinate\n *\n * @param {boolean} odd - If the Y coordinate is odd\n * @param {BN|String} x - The X coordinate\n * @throws {Error} A validation error if exists\n * @returns {Point} An instance of Point\n */\nPoint.fromX = function fromX(odd, x){\n  try {\n    var point = ecPointFromX(x, odd);\n  } catch (e) {\n    throw new Error('Invalid X');\n  }\n  point.validate();\n  return point;\n};\n\n/**\n *\n * Will return a secp256k1 ECDSA base point.\n *\n * @link https://en.bitcoin.it/wiki/Secp256k1\n * @returns {Point} An instance of the base point.\n */\nPoint.getG = function getG() {\n  return ec.curve.g;\n};\n\n/**\n *\n * Will return the max of range of valid private keys as governed by the secp256k1 ECDSA standard.\n * (A.K.A curve order)\n * @link https://en.bitcoin.it/wiki/Private_key#Range_of_valid_ECDSA_private_keys\n * @returns {BN} A BN instance of the number of points on the curve\n */\nPoint.getN = function getN() {\n  return new BN(ec.curve.n.toArray());\n};\n\n/**\n * Secp256k1 field size\n * @returns {BN} A BN instance of the field size\n */\nPoint.getP = function() {\n  return ec.curve.p.clone();\n};\n\nPoint.prototype._getX = Point.prototype.getX;\n\n/**\n *\n * Will return the X coordinate of the Point\n *\n * @returns {BN} A BN instance of the X coordinate\n */\nPoint.prototype.getX = function getX() {\n  return new BN(this._getX().toArray());\n};\n\nPoint.prototype._getY = Point.prototype.getY;\n\n/**\n *\n * Will return the Y coordinate of the Point\n *\n * @returns {BN} A BN instance of the Y coordinate\n */\nPoint.prototype.getY = function getY() {\n  return new BN(this._getY().toArray());\n};\n\n/**\n *\n * Will determine if the point is valid\n *\n * @link https://www.iacr.org/archive/pkc2003/25670211/25670211.pdf\n * @param {Point} An instance of Point\n * @throws {Error} A validation error if exists\n * @returns {Point} An instance of the same Point\n */\nPoint.prototype.validate = function validate() {\n\n  if (this.isInfinity()){\n    throw new Error('Point cannot be equal to Infinity');\n  }\n\n  var p2;\n  try {\n    p2 = ecPointFromX(this.getX(), this.getY().isOdd());\n  } catch (e) {\n    throw new Error('Point does not lie on the curve');\n  }\n\n  if (p2.y.cmp(this.y) !== 0) {\n    throw new Error('Invalid y value for curve.');\n  }\n\n\n  //todo: needs test case\n  if (!(this.mul(Point.getN()).isInfinity())) {\n    throw new Error('Point times N must be infinity');\n  }\n\n  return this;\n\n};\n\nPoint.pointToCompressed = function pointToCompressed(point) {\n  var xbuf = point.getX().toBuffer({size: 32});\n  var ybuf = point.getY().toBuffer({size: 32});\n\n  var prefix;\n  var odd = ybuf[ybuf.length - 1] % 2;\n  if (odd) {\n    prefix = Buffer.from([0x03]);\n  } else {\n    prefix = Buffer.from([0x02]);\n  }\n  return BufferUtil.concat([prefix, xbuf]);\n};\n\n\nPoint.prototype.liftX = function() {\n  const fieldSize = Point.getP();\n  const zero = new BN(0);\n  const one = new BN(1);\n  const two = new BN(2);\n  const three = new BN(3);\n  const four = new BN(4);\n  const seven = new BN(7);\n  const red = BN.red('k256');\n\n  const c = this.x.pow(three).add(seven).mod(fieldSize);\n  const y = c.toRed(red).redPow(fieldSize.add(one).div(four)).mod(fieldSize);\n  \n  if (!c.eq(y.pow(two).mod(fieldSize))) {\n    throw new Error('liftX failed');\n  }\n  \n  const pointX = this.x.red ? this.x.fromRed() : this.x;\n  const pointY = y.mod(two).eq(zero) ? y.fromRed() : fieldSize.sub(y)\n  return new Point(pointX, pointY, true);\n};\n\nmodule.exports = Point;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2NyeXB0by9wb2ludC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTLG1CQUFPLENBQUMsK0RBQU07QUFDdkIsaUJBQWlCLG1CQUFPLENBQUMsMkVBQWdCOztBQUV6QyxTQUFTLHlGQUFzQjtBQUMvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFdBQVc7QUFDdEIsWUFBWSxPQUFPO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsSUFBSTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxJQUFJO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxJQUFJO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxJQUFJO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0Esb0NBQW9DLFNBQVM7QUFDN0Msb0NBQW9DLFNBQVM7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL2xpYi9jcnlwdG8vcG9pbnQuanM/ZmU1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJy4vYm4nKTtcbnZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbC9idWZmZXInKTtcblxudmFyIEVDID0gcmVxdWlyZSgnZWxsaXB0aWMnKS5lYztcbnZhciBlYyA9IG5ldyBFQygnc2VjcDI1NmsxJyk7XG52YXIgZWNQb2ludCA9IGVjLmN1cnZlLnBvaW50LmJpbmQoZWMuY3VydmUpO1xudmFyIGVjUG9pbnRGcm9tWCA9IGVjLmN1cnZlLnBvaW50RnJvbVguYmluZChlYy5jdXJ2ZSk7XG5cbi8qKlxuICpcbiAqIEluc3RhbnRpYXRlIGEgdmFsaWQgc2VjcDI1NmsxIFBvaW50IGZyb20gdGhlIFggYW5kIFkgY29vcmRpbmF0ZXMuXG4gKlxuICogQHBhcmFtIHtCTnxTdHJpbmd9IHggLSBUaGUgWCBjb29yZGluYXRlXG4gKiBAcGFyYW0ge0JOfFN0cmluZ30geSAtIFRoZSBZIGNvb3JkaW5hdGVcbiAqIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2VsbGlwdGljXG4gKiBAYXVnbWVudHMgZWxsaXB0aWMuY3VydmUucG9pbnRcbiAqIEB0aHJvd3Mge0Vycm9yfSBBIHZhbGlkYXRpb24gZXJyb3IgaWYgZXhpc3RzXG4gKiBAcmV0dXJucyB7UG9pbnR9IEFuIGluc3RhbmNlIG9mIFBvaW50XG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFBvaW50ID0gZnVuY3Rpb24gUG9pbnQoeCwgeSwgaXNSZWQpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcG9pbnQgPSBlY1BvaW50KHgsIHksIGlzUmVkKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBQb2ludCcpO1xuICB9XG4gIHBvaW50LnZhbGlkYXRlKCk7XG4gIHJldHVybiBwb2ludDtcbn07XG5cblBvaW50LnByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihlYy5jdXJ2ZS5wb2ludCgpKTtcblxuLyoqXG4gKlxuICogSW5zdGFudGlhdGUgYSB2YWxpZCBzZWNwMjU2azEgUG9pbnQgZnJvbSBvbmx5IHRoZSBYIGNvb3JkaW5hdGVcbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9kZCAtIElmIHRoZSBZIGNvb3JkaW5hdGUgaXMgb2RkXG4gKiBAcGFyYW0ge0JOfFN0cmluZ30geCAtIFRoZSBYIGNvb3JkaW5hdGVcbiAqIEB0aHJvd3Mge0Vycm9yfSBBIHZhbGlkYXRpb24gZXJyb3IgaWYgZXhpc3RzXG4gKiBAcmV0dXJucyB7UG9pbnR9IEFuIGluc3RhbmNlIG9mIFBvaW50XG4gKi9cblBvaW50LmZyb21YID0gZnVuY3Rpb24gZnJvbVgob2RkLCB4KXtcbiAgdHJ5IHtcbiAgICB2YXIgcG9pbnQgPSBlY1BvaW50RnJvbVgoeCwgb2RkKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBYJyk7XG4gIH1cbiAgcG9pbnQudmFsaWRhdGUoKTtcbiAgcmV0dXJuIHBvaW50O1xufTtcblxuLyoqXG4gKlxuICogV2lsbCByZXR1cm4gYSBzZWNwMjU2azEgRUNEU0EgYmFzZSBwb2ludC5cbiAqXG4gKiBAbGluayBodHRwczovL2VuLmJpdGNvaW4uaXQvd2lraS9TZWNwMjU2azFcbiAqIEByZXR1cm5zIHtQb2ludH0gQW4gaW5zdGFuY2Ugb2YgdGhlIGJhc2UgcG9pbnQuXG4gKi9cblBvaW50LmdldEcgPSBmdW5jdGlvbiBnZXRHKCkge1xuICByZXR1cm4gZWMuY3VydmUuZztcbn07XG5cbi8qKlxuICpcbiAqIFdpbGwgcmV0dXJuIHRoZSBtYXggb2YgcmFuZ2Ugb2YgdmFsaWQgcHJpdmF0ZSBrZXlzIGFzIGdvdmVybmVkIGJ5IHRoZSBzZWNwMjU2azEgRUNEU0Egc3RhbmRhcmQuXG4gKiAoQS5LLkEgY3VydmUgb3JkZXIpXG4gKiBAbGluayBodHRwczovL2VuLmJpdGNvaW4uaXQvd2lraS9Qcml2YXRlX2tleSNSYW5nZV9vZl92YWxpZF9FQ0RTQV9wcml2YXRlX2tleXNcbiAqIEByZXR1cm5zIHtCTn0gQSBCTiBpbnN0YW5jZSBvZiB0aGUgbnVtYmVyIG9mIHBvaW50cyBvbiB0aGUgY3VydmVcbiAqL1xuUG9pbnQuZ2V0TiA9IGZ1bmN0aW9uIGdldE4oKSB7XG4gIHJldHVybiBuZXcgQk4oZWMuY3VydmUubi50b0FycmF5KCkpO1xufTtcblxuLyoqXG4gKiBTZWNwMjU2azEgZmllbGQgc2l6ZVxuICogQHJldHVybnMge0JOfSBBIEJOIGluc3RhbmNlIG9mIHRoZSBmaWVsZCBzaXplXG4gKi9cblBvaW50LmdldFAgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGVjLmN1cnZlLnAuY2xvbmUoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZ2V0WCA9IFBvaW50LnByb3RvdHlwZS5nZXRYO1xuXG4vKipcbiAqXG4gKiBXaWxsIHJldHVybiB0aGUgWCBjb29yZGluYXRlIG9mIHRoZSBQb2ludFxuICpcbiAqIEByZXR1cm5zIHtCTn0gQSBCTiBpbnN0YW5jZSBvZiB0aGUgWCBjb29yZGluYXRlXG4gKi9cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgcmV0dXJuIG5ldyBCTih0aGlzLl9nZXRYKCkudG9BcnJheSgpKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZ2V0WSA9IFBvaW50LnByb3RvdHlwZS5nZXRZO1xuXG4vKipcbiAqXG4gKiBXaWxsIHJldHVybiB0aGUgWSBjb29yZGluYXRlIG9mIHRoZSBQb2ludFxuICpcbiAqIEByZXR1cm5zIHtCTn0gQSBCTiBpbnN0YW5jZSBvZiB0aGUgWSBjb29yZGluYXRlXG4gKi9cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgcmV0dXJuIG5ldyBCTih0aGlzLl9nZXRZKCkudG9BcnJheSgpKTtcbn07XG5cbi8qKlxuICpcbiAqIFdpbGwgZGV0ZXJtaW5lIGlmIHRoZSBwb2ludCBpcyB2YWxpZFxuICpcbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmlhY3Iub3JnL2FyY2hpdmUvcGtjMjAwMy8yNTY3MDIxMS8yNTY3MDIxMS5wZGZcbiAqIEBwYXJhbSB7UG9pbnR9IEFuIGluc3RhbmNlIG9mIFBvaW50XG4gKiBAdGhyb3dzIHtFcnJvcn0gQSB2YWxpZGF0aW9uIGVycm9yIGlmIGV4aXN0c1xuICogQHJldHVybnMge1BvaW50fSBBbiBpbnN0YW5jZSBvZiB0aGUgc2FtZSBQb2ludFxuICovXG5Qb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcblxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpe1xuICAgIHRocm93IG5ldyBFcnJvcignUG9pbnQgY2Fubm90IGJlIGVxdWFsIHRvIEluZmluaXR5Jyk7XG4gIH1cblxuICB2YXIgcDI7XG4gIHRyeSB7XG4gICAgcDIgPSBlY1BvaW50RnJvbVgodGhpcy5nZXRYKCksIHRoaXMuZ2V0WSgpLmlzT2RkKCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQb2ludCBkb2VzIG5vdCBsaWUgb24gdGhlIGN1cnZlJyk7XG4gIH1cblxuICBpZiAocDIueS5jbXAodGhpcy55KSAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB5IHZhbHVlIGZvciBjdXJ2ZS4nKTtcbiAgfVxuXG5cbiAgLy90b2RvOiBuZWVkcyB0ZXN0IGNhc2VcbiAgaWYgKCEodGhpcy5tdWwoUG9pbnQuZ2V0TigpKS5pc0luZmluaXR5KCkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQb2ludCB0aW1lcyBOIG11c3QgYmUgaW5maW5pdHknKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xuXG59O1xuXG5Qb2ludC5wb2ludFRvQ29tcHJlc3NlZCA9IGZ1bmN0aW9uIHBvaW50VG9Db21wcmVzc2VkKHBvaW50KSB7XG4gIHZhciB4YnVmID0gcG9pbnQuZ2V0WCgpLnRvQnVmZmVyKHtzaXplOiAzMn0pO1xuICB2YXIgeWJ1ZiA9IHBvaW50LmdldFkoKS50b0J1ZmZlcih7c2l6ZTogMzJ9KTtcblxuICB2YXIgcHJlZml4O1xuICB2YXIgb2RkID0geWJ1Zlt5YnVmLmxlbmd0aCAtIDFdICUgMjtcbiAgaWYgKG9kZCkge1xuICAgIHByZWZpeCA9IEJ1ZmZlci5mcm9tKFsweDAzXSk7XG4gIH0gZWxzZSB7XG4gICAgcHJlZml4ID0gQnVmZmVyLmZyb20oWzB4MDJdKTtcbiAgfVxuICByZXR1cm4gQnVmZmVyVXRpbC5jb25jYXQoW3ByZWZpeCwgeGJ1Zl0pO1xufTtcblxuXG5Qb2ludC5wcm90b3R5cGUubGlmdFggPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZmllbGRTaXplID0gUG9pbnQuZ2V0UCgpO1xuICBjb25zdCB6ZXJvID0gbmV3IEJOKDApO1xuICBjb25zdCBvbmUgPSBuZXcgQk4oMSk7XG4gIGNvbnN0IHR3byA9IG5ldyBCTigyKTtcbiAgY29uc3QgdGhyZWUgPSBuZXcgQk4oMyk7XG4gIGNvbnN0IGZvdXIgPSBuZXcgQk4oNCk7XG4gIGNvbnN0IHNldmVuID0gbmV3IEJOKDcpO1xuICBjb25zdCByZWQgPSBCTi5yZWQoJ2syNTYnKTtcblxuICBjb25zdCBjID0gdGhpcy54LnBvdyh0aHJlZSkuYWRkKHNldmVuKS5tb2QoZmllbGRTaXplKTtcbiAgY29uc3QgeSA9IGMudG9SZWQocmVkKS5yZWRQb3coZmllbGRTaXplLmFkZChvbmUpLmRpdihmb3VyKSkubW9kKGZpZWxkU2l6ZSk7XG4gIFxuICBpZiAoIWMuZXEoeS5wb3codHdvKS5tb2QoZmllbGRTaXplKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2xpZnRYIGZhaWxlZCcpO1xuICB9XG4gIFxuICBjb25zdCBwb2ludFggPSB0aGlzLngucmVkID8gdGhpcy54LmZyb21SZWQoKSA6IHRoaXMueDtcbiAgY29uc3QgcG9pbnRZID0geS5tb2QodHdvKS5lcSh6ZXJvKSA/IHkuZnJvbVJlZCgpIDogZmllbGRTaXplLnN1Yih5KVxuICByZXR1cm4gbmV3IFBvaW50KHBvaW50WCwgcG9pbnRZLCB0cnVlKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/crypto/point.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/crypto/random.js":
/*!*******************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/crypto/random.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction Random() {\n}\n\n/* secure random bytes that sometimes throws an error due to lack of entropy */\nRandom.getRandomBuffer = function(size) {\n  if (false)\n    {}\n  else\n    return Random.getRandomBufferNode(size);\n};\n\nRandom.getRandomBufferNode = function(size) {\n  var crypto = __webpack_require__(/*! crypto */ \"crypto\");\n  return crypto.randomBytes(size);\n};\n\nRandom.getRandomBufferBrowser = function(size) {\n  if (!window.crypto && !window.msCrypto)\n    throw new Error('window.crypto not available');\n\n  if (window.crypto && window.crypto.getRandomValues)\n    var crypto = window.crypto;\n  else if (window.msCrypto && window.msCrypto.getRandomValues) //internet explorer\n    var crypto = window.msCrypto;\n  else\n    throw new Error('window.crypto.getRandomValues not available');\n\n  var bbuf = new Uint8Array(size);\n  crypto.getRandomValues(bbuf);\n  var buf = Buffer.from(bbuf);\n\n  return buf;\n};\n\n/* insecure random bytes, but it never fails */\nRandom.getPseudoRandomBuffer = function(size) {\n  var b32 = 0x100000000;\n  var b = Buffer.alloc(size);\n  var r;\n\n  for (var i = 0; i <= size; i++) {\n    var j = Math.floor(i / 4);\n    var k = i - j * 4;\n    if (k === 0) {\n      r = Math.random() * b32;\n      b[i] = r & 0xff;\n    } else {\n      b[i] = (r = r >>> 8) & 0xff;\n    }\n  }\n\n  return b;\n};\n\nmodule.exports = Random;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2NyeXB0by9yYW5kb20uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTSxLQUFlO0FBQ3JCLElBQUksRUFBMkM7QUFDL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHNCQUFRO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixXQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvY3J5cHRvL3JhbmRvbS5qcz84Zjk2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gUmFuZG9tKCkge1xufVxuXG4vKiBzZWN1cmUgcmFuZG9tIGJ5dGVzIHRoYXQgc29tZXRpbWVzIHRocm93cyBhbiBlcnJvciBkdWUgdG8gbGFjayBvZiBlbnRyb3B5ICovXG5SYW5kb20uZ2V0UmFuZG9tQnVmZmVyID0gZnVuY3Rpb24oc2l6ZSkge1xuICBpZiAocHJvY2Vzcy5icm93c2VyKVxuICAgIHJldHVybiBSYW5kb20uZ2V0UmFuZG9tQnVmZmVyQnJvd3NlcihzaXplKTtcbiAgZWxzZVxuICAgIHJldHVybiBSYW5kb20uZ2V0UmFuZG9tQnVmZmVyTm9kZShzaXplKTtcbn07XG5cblJhbmRvbS5nZXRSYW5kb21CdWZmZXJOb2RlID0gZnVuY3Rpb24oc2l6ZSkge1xuICB2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoc2l6ZSk7XG59O1xuXG5SYW5kb20uZ2V0UmFuZG9tQnVmZmVyQnJvd3NlciA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgaWYgKCF3aW5kb3cuY3J5cHRvICYmICF3aW5kb3cubXNDcnlwdG8pXG4gICAgdGhyb3cgbmV3IEVycm9yKCd3aW5kb3cuY3J5cHRvIG5vdCBhdmFpbGFibGUnKTtcblxuICBpZiAod2luZG93LmNyeXB0byAmJiB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcylcbiAgICB2YXIgY3J5cHRvID0gd2luZG93LmNyeXB0bztcbiAgZWxzZSBpZiAod2luZG93Lm1zQ3J5cHRvICYmIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIC8vaW50ZXJuZXQgZXhwbG9yZXJcbiAgICB2YXIgY3J5cHRvID0gd2luZG93Lm1zQ3J5cHRvO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKCd3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyBub3QgYXZhaWxhYmxlJyk7XG5cbiAgdmFyIGJidWYgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhiYnVmKTtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJidWYpO1xuXG4gIHJldHVybiBidWY7XG59O1xuXG4vKiBpbnNlY3VyZSByYW5kb20gYnl0ZXMsIGJ1dCBpdCBuZXZlciBmYWlscyAqL1xuUmFuZG9tLmdldFBzZXVkb1JhbmRvbUJ1ZmZlciA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdmFyIGIzMiA9IDB4MTAwMDAwMDAwO1xuICB2YXIgYiA9IEJ1ZmZlci5hbGxvYyhzaXplKTtcbiAgdmFyIHI7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gc2l6ZTsgaSsrKSB7XG4gICAgdmFyIGogPSBNYXRoLmZsb29yKGkgLyA0KTtcbiAgICB2YXIgayA9IGkgLSBqICogNDtcbiAgICBpZiAoayA9PT0gMCkge1xuICAgICAgciA9IE1hdGgucmFuZG9tKCkgKiBiMzI7XG4gICAgICBiW2ldID0gciAmIDB4ZmY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJbaV0gPSAociA9IHIgPj4+IDgpICYgMHhmZjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmFuZG9tO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/crypto/random.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/crypto/schnorr.js":
/*!********************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/crypto/schnorr.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nconst JS = __webpack_require__(/*! ../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nconst BN = __webpack_require__(/*! ./bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nconst Point = __webpack_require__(/*! ./point */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/point.js\");\nconst TaggedHash = __webpack_require__(/*! ./taggedhash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js\");\n\nconst Schnorr = function Schnorr() {\n  if (!(this instanceof Schnorr)) {\n    return new Schnorr();\n  }\n  return this;\n};\n\nSchnorr.prototype.set = function() {};\n\n/**\n * Create a schnorr signature\n * @param {PrivateKey|Buffer|BN} privateKey\n * @param {String|Buffer} message Hex string or buffer\n * @param {String|Buffer} aux Hex string or buffer\n * @returns {Buffer}\n * @link https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#Default_Signing\n */\nSchnorr.sign = function(privateKey, message, aux) {\n  privateKey = Buffer.isBuffer(privateKey) ? privateKey : privateKey.toBuffer();\n  if (privateKey.length !== 32) {\n    throw new Error('Private key should be 32 bytes for schnorr signatures');\n  }\n\n  if (typeof message === 'string') {\n    $.checkArgument(JS.isHexaString(message), 'Schnorr message string is not hex');\n    message = Buffer.from(message, 'hex')\n  }\n  $.checkArgument($.isType(message, 'Buffer'), 'Schnorr message must be a hex string or buffer');\n\n  if (!aux) {\n    aux = crypto.randomBytes(32);\n  }\n  if (typeof aux === 'string') {\n    $.checkArgument(JS.isHexaString(aux), 'Schnorr aux string is not hex');\n    aux = Buffer.from(aux, 'hex')\n  }\n  $.checkArgument($.isType(aux, 'Buffer'), 'Schnorr aux must be a hex string or buffer');\n\n  const G = Point.getG();\n  const n = Point.getN();\n\n  const dPrime = new BN(privateKey);\n  if (dPrime.eqn(0) || dPrime.gte(n)) {\n    throw new Error('Invalid private key for schnorr signing');\n  }\n  const P = G.mul(dPrime);\n  const Pbuf = Buffer.from(P.encodeCompressed().slice(1)); // slice(1) removes the encoding prefix byte\n  const d = P.y.isEven() ? dPrime : n.sub(dPrime);\n  const t = d.xor(new BN(new TaggedHash('BIP0340/aux', aux).finalize()));\n  const rand = new TaggedHash('BIP0340/nonce', Buffer.concat([t.toBuffer(), Pbuf, message])).finalize();\n  const kPrime = new BN(rand).mod(n);\n  if (kPrime.eqn(0)) {\n    throw new Error('Error creating schnorr signature');\n  }\n  const R = G.mul(kPrime);\n  const Rbuf = Buffer.from(R.encodeCompressed().slice(1)); // slice(1) removes the encoding prefix byte\n  const k = R.y.isEven() ? kPrime : n.sub(kPrime);\n  const e = new BN(new TaggedHash('BIP0340/challenge', Buffer.concat([Rbuf, Pbuf, message])).finalize()).mod(n);\n  const sig = Buffer.concat([Rbuf, k.add(e.mul(d)).mod(n).toBuffer()]);\n\n  if (!Schnorr.verify(Pbuf, message, sig)) {\n    throw new Error('Error creating schnorr signature. Verification failed');\n  }\n  return sig;\n};\n\n\n/**\n * Verify a schnorr signature\n * @param {PublicKey|Buffer} publicKey \n * @param {String|Buffer} message Hex string or buffer\n * @param {String|Signature|Buffer} signature Hex string, Signature instance, or buffer\n * @returns {Boolean}\n * @link https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#Verification\n */\nSchnorr.verify = function(publicKey, message, signature) {\n  if ($.isType(publicKey, 'PublicKey')) {\n    publicKey = publicKey.point.x.toBuffer();\n  }\n  if (publicKey.length !== 32) {\n    throw new Error('Public key should be 32 bytes for schnorr signatures');\n  }\n\n  if (typeof message === 'string') {\n    $.checkArgument(JS.isHexaString(message), 'Schnorr message string is not hex');\n    message = Buffer.from(message, 'hex');\n  }\n  if (message.length !== 32) {\n    throw new Error('Message should be a 32 byte buffer');\n  }\n\n  if (typeof signature === 'string') {\n    $.checkArgument(JS.isHexaString(signature), 'Schnorr signature string is not hex');\n    signature = Buffer.from(signature, 'hex');\n  }\n  if (typeof signature.toBuffer === 'function') {\n    signature = signature.toBuffer();\n    if (signature.length === 65) {\n      signature = signature.slice(0, 64); // remove the sighashType byte\n    }\n  }\n  if (signature.length !== 64) {\n    throw new Error('Signature should be a 64 byte buffer. Got ' + signature.length + ' bytes');\n  }\n\n  try {\n    const p = Point.getP();\n    const n = Point.getN();\n\n    const P = Point.fromX(false, publicKey).liftX();\n    const r = new BN(signature.slice(0, 32));\n    const s = new BN(signature.slice(32, 64));\n    if (r.gte(p) || s.gte(n)) {\n      return false;\n    }\n    const e = getE(r, P, message);\n    const G = Point.getG();\n    const R = G.mul(s).add(P.mul(e).neg());\n    if (R.inf || !R.y.isEven() || !R.x.eq(r)) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/* Utility function used in Verify() */\nconst getE = function(r, P, message) {\n  const n = Point.getN();\n  const hash = new TaggedHash('BIP0340/challenge', Buffer.concat([r.toBuffer({ size: 32 }), P.x.toBuffer({ size: 32 }), message])).finalize();\n  return new BN(hash).mod(n);\n};\n\nmodule.exports = Schnorr;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/crypto/schnorr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js":
/*!**********************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/crypto/signature.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar BN = __webpack_require__(/*! ./bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar JSUtil = __webpack_require__(/*! ../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\n\nvar Signature = function Signature(r, s, isSchnorr) {\n  if (!(this instanceof Signature)) {\n    return new Signature(r, s, isSchnorr);\n  }\n  if (r instanceof BN) {\n    this.set({\n      r: r,\n      s: s,\n      isSchnorr: isSchnorr\n    });\n  } else if (r) {\n    var obj = r;\n    this.set(obj);\n  }\n};\n\n/* jshint maxcomplexity: 7 */\nSignature.prototype.set = function(obj) {\n  this.r = obj.r || this.r || undefined;\n  this.s = obj.s || this.s || undefined;\n\n  // public key recovery parameter in range [0, 3]\n  this.i = typeof obj.i === 'undefined' ? this.i : obj.i;\n  // whether the recovered pubkey is compressed\n  this.compressed = typeof obj.compressed === 'undefined' ? this.compressed : obj.compressed;\n  this.isSchnorr = typeof obj.isSchnorr === 'undefined' ? this.isSchnorr : obj.isSchnorr;\n  this.nhashtype = obj.nhashtype || this.nhashtype || undefined;\n  return this;\n};\n\nSignature.fromCompact = function(buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf), 'Argument is expected to be a Buffer');\n\n  var sig = new Signature();\n\n  var compressed = true;\n  var i = buf.slice(0, 1)[0] - 27 - 4;\n  if (i < 0) {\n    compressed = false;\n    i = i + 4;\n  }\n\n  var b2 = buf.slice(1, 33);\n  var b3 = buf.slice(33, 65);\n\n  $.checkArgument(i === 0 || i === 1 || i === 2 || i === 3, new Error('i must be 0, 1, 2, or 3'));\n  $.checkArgument(b2.length === 32, new Error('r must be 32 bytes'));\n  $.checkArgument(b3.length === 32, new Error('s must be 32 bytes'));\n\n  sig.compressed = compressed;\n  sig.i = i;\n  sig.r = BN.fromBuffer(b2);\n  sig.s = BN.fromBuffer(b3);\n\n  return sig;\n};\n\nSignature.fromDER = Signature.fromBuffer = function(buf, strict) {\n  var sig = new Signature();\n\n  // Schnorr Signatures use 65 byte for in tx r [len] 32 , s [len] 32, nhashtype\n  // NOTE: this check is not very reliable. You should use .fromSchnorr directly if you know it's a schnorr sig.\n  if((buf.length === 64 || buf.length === 65) && buf[0] != 0x30) {\n    return Signature.fromSchnorr(buf);\n  }\n  \n  $.checkArgument(!(buf.length === 64 && buf[0] === 0x30), new Error('64 DER (ecdsa) signatures not allowed'));\n  \n  var obj = Signature.parseDER(buf, strict);\n\n  sig.r = obj.r;\n  sig.s = obj.s;\n\n  return sig;\n};\n\n// The format used in a tx\nSignature.fromTxFormat = function(buf) {\n  var nhashtype = buf.readUInt8(buf.length - 1);\n  var derbuf = buf.slice(0, buf.length - 1);\n  var sig = new Signature.fromDER(derbuf, false);\n  sig.nhashtype = nhashtype;\n  return sig;\n};\n\nSignature.fromString = function(str) {\n  var buf = Buffer.from(str, 'hex');\n  return Signature.fromDER(buf);\n};\n\n\n/**\n * In order to mimic the non-strict DER encoding of OpenSSL, set strict = false.\n */\nSignature.parseDER = function(buf, strict) {\n  $.checkArgument(BufferUtil.isBuffer(buf), new Error('DER formatted signature should be a buffer'));\n  if (_.isUndefined(strict)) {\n    strict = true;\n  }\n\n  var header = buf[0];\n  $.checkArgument(header === 0x30, new Error('Header byte should be 0x30'));\n\n  var length = buf[1];\n  var buflength = buf.slice(2).length;\n  $.checkArgument(!strict || length === buflength, new Error('Length byte should length of what follows'));\n\n  length = length < buflength ? length : buflength;\n\n  var rheader = buf[2 + 0];\n  $.checkArgument(rheader === 0x02, new Error('Integer byte for r should be 0x02'));\n\n  var rlength = buf[2 + 1];\n  var rbuf = buf.slice(2 + 2, 2 + 2 + rlength);\n  var r = BN.fromBuffer(rbuf);\n  var rneg = buf[2 + 1 + 1] === 0x00 ? true : false;\n  $.checkArgument(rlength === rbuf.length, new Error('Length of r incorrect'));\n\n  var sheader = buf[2 + 2 + rlength + 0];\n  $.checkArgument(sheader === 0x02, new Error('Integer byte for s should be 0x02'));\n\n  var slength = buf[2 + 2 + rlength + 1];\n  var sbuf = buf.slice(2 + 2 + rlength + 2, 2 + 2 + rlength + 2 + slength);\n  var s = BN.fromBuffer(sbuf);\n  var sneg = buf[2 + 2 + rlength + 2 + 2] === 0x00 ? true : false;\n  $.checkArgument(slength === sbuf.length, new Error('Length of s incorrect'));\n\n  var sumlength = 2 + 2 + rlength + 2 + slength;\n  $.checkArgument(length === sumlength - 2, new Error('Length of signature incorrect'));\n\n  var obj = {\n    header: header,\n    length: length,\n    rheader: rheader,\n    rlength: rlength,\n    rneg: rneg,\n    rbuf: rbuf,\n    r: r,\n    sheader: sheader,\n    slength: slength,\n    sneg: sneg,\n    sbuf: sbuf,\n    s: s\n  };\n\n  return obj;\n};\n\n\nSignature.prototype.toCompact = function(i, compressed) {\n  i = typeof i === 'number' ? i : this.i;\n  compressed = typeof compressed === 'boolean' ? compressed : this.compressed;\n\n  if (!(i === 0 || i === 1 || i === 2 || i === 3)) {\n    throw new Error('i must be equal to 0, 1, 2, or 3');\n  }\n\n  var val = i + 27 + 4;\n  if (compressed === false) {\n    val = val - 4;\n  }\n  var b1 = Buffer.from([val]);\n  var b2 = this.r.toBuffer({\n    size: 32\n  });\n  var b3 = this.s.toBuffer({\n    size: 32\n  });\n  return Buffer.concat([b1, b2, b3]);\n};\n\n/**\n * Returns either a DER encoded buffer or a Schnorr encoded buffer if isSchnor == true\n */\nSignature.prototype.toBuffer = Signature.prototype.toDER = function() {\n  if(this.isSchnorr) {\n    const hashTypeBuf = !this.nhashtype || this.nhashtype === Signature.SIGHASH_DEFAULT ? Buffer.alloc(0) : Buffer.from([this.nhashtype]);\n    return Buffer.concat([this.r.toBuffer({ size: 32 }), this.s.toBuffer({ size: 32 }), hashTypeBuf]);\n  }\n\n  var rnbuf = this.r.toBuffer();\n  var snbuf = this.s.toBuffer();\n\n  var rneg = rnbuf[0] & 0x80 ? true : false;\n  var sneg = snbuf[0] & 0x80 ? true : false;\n\n  var rbuf = rneg ? Buffer.concat([Buffer.from([0x00]), rnbuf]) : rnbuf;\n  var sbuf = sneg ? Buffer.concat([Buffer.from([0x00]), snbuf]) : snbuf;\n\n  var rlength = rbuf.length;\n  var slength = sbuf.length;\n  var length = 2 + rlength + 2 + slength;\n  var rheader = 0x02;\n  var sheader = 0x02;\n  var header = 0x30;\n\n  var der = Buffer.concat([Buffer.from([header, length, rheader, rlength]), rbuf, Buffer.from([sheader, slength]), sbuf]);\n  return der;\n};\n\nSignature.prototype.toString = function() {\n  var buf = this.toDER();\n  return buf.toString('hex');\n};\n\n/**\n * This function is translated from bitcoind's IsDERSignature and is used in\n * the script interpreter.  This \"DER\" format actually includes an extra byte,\n * the nhashtype, at the end. It is really the tx format, not DER format.\n *\n * A canonical signature exists of: [30] [total len] [02] [len R] [R] [02] [len S] [S] [hashtype]\n * Where R and S are not negative (their first byte has its highest bit not set), and not\n * excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,\n * in which case a single 0 byte is necessary and even required).\n *\n * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n */\nSignature.isTxDER = function(buf) {\n  if (buf.length < 9) {\n    //  Non-canonical signature: too short\n    return false;\n  }\n  if (buf.length > 73) {\n    // Non-canonical signature: too long\n    return false;\n  }\n  if (buf[0] !== 0x30) {\n    //  Non-canonical signature: wrong type\n    return false;\n  }\n  if (buf[1] !== buf.length - 3) {\n    //  Non-canonical signature: wrong length marker\n    return false;\n  }\n  var nLenR = buf[3];\n  if (5 + nLenR >= buf.length) {\n    //  Non-canonical signature: S length misplaced\n    return false;\n  }\n  var nLenS = buf[5 + nLenR];\n  if ((nLenR + nLenS + 7) !== buf.length) {\n    //  Non-canonical signature: R+S length mismatch\n    return false;\n  }\n\n  var R = buf.slice(4);\n  if (buf[4 - 2] !== 0x02) {\n    //  Non-canonical signature: R value type mismatch\n    return false;\n  }\n  if (nLenR === 0) {\n    //  Non-canonical signature: R length is zero\n    return false;\n  }\n  if (R[0] & 0x80) {\n    //  Non-canonical signature: R value negative\n    return false;\n  }\n  if (nLenR > 1 && (R[0] === 0x00) && !(R[1] & 0x80)) {\n    //  Non-canonical signature: R value excessively padded\n    return false;\n  }\n\n  var S = buf.slice(6 + nLenR);\n  if (buf[6 + nLenR - 2] !== 0x02) {\n    //  Non-canonical signature: S value type mismatch\n    return false;\n  }\n  if (nLenS === 0) {\n    //  Non-canonical signature: S length is zero\n    return false;\n  }\n  if (S[0] & 0x80) {\n    //  Non-canonical signature: S value negative\n    return false;\n  }\n  if (nLenS > 1 && (S[0] === 0x00) && !(S[1] & 0x80)) {\n    //  Non-canonical signature: S value excessively padded\n    return false;\n  }\n  return true;\n};\n\n/**\n * Compares to bitcoind's IsLowDERSignature\n * See also ECDSA signature algorithm which enforces this.\n * See also BIP 62, \"low S values in signatures\"\n */\nSignature.prototype.hasLowS = function() {\n  if (this.s.lt(new BN(1)) ||\n    this.s.gt(new BN('7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0', 'hex'))) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns true if the nhashtype is exactly equal to one of the standard options or combinations thereof.\n * Translated from bitcoind's IsDefinedHashtypeSignature\n */\nSignature.prototype.hasDefinedHashtype = function() {\n  if (!JSUtil.isNaturalNumber(this.nhashtype)) {\n    return false;\n  }\n  // accept with or without Signature.SIGHASH_ANYONECANPAY by ignoring the bit\n  var temp = this.nhashtype & ~Signature.SIGHASH_ANYONECANPAY;\n  if (temp < Signature.SIGHASH_ALL || temp > Signature.SIGHASH_SINGLE) {\n    return false;\n  }\n  return true;\n};\n\nSignature.prototype.toTxFormat = function() {\n  var derbuf = this.toDER();\n  var buf = Buffer.alloc(1);\n  buf.writeUInt8(this.nhashtype, 0);\n  return Buffer.concat([derbuf, buf]);\n};\n\n/**\n * Creates a Signature instance from a Schnorr sig\n * @param {Buffer} buf Schnorr signature buffer\n * @returns {Signature}\n */\nSignature.fromSchnorr = function(buf) {\n  $.checkArgument(Buffer.isBuffer(buf), 'Schnorr signature argument must be a buffer');\n  $.checkArgument(buf.length === 64 || buf.length === 65, 'Schnorr signatures must be 64 or 65 bytes');\n\n  const sig = new Signature();\n  let r = buf.slice(0,32);\n  let s = buf.slice(32, 64);\n  if (buf.length === 65) {\n    sig.nhashtype = buf[buf.length - 1];\n    $.checkState(sig.nhashtype !== Signature.SIGHASH_DEFAULT, new Error('invalid hashtype'));\n  } else {\n    sig.nhashtype = Signature.SIGHASH_DEFAULT;\n  }\n  sig.r = BN.fromBuffer(r);\n  sig.s = BN.fromBuffer(s);\n  sig.isSchnorr = true;\n  return sig;\n};\n\nSignature.SIGHASH_DEFAULT       = 0x00; //!< Taproot only; implied when sighash byte is missing, and equivalent to SIGHASH_ALL\nSignature.SIGHASH_ALL           = 0x01;\nSignature.SIGHASH_NONE          = 0x02;\nSignature.SIGHASH_SINGLE        = 0x03;\nSignature.SIGHASH_ANYONECANPAY  = 0x80;\n\nSignature.SIGHASH_OUTPUT_MASK = 3;\nSignature.SIGHASH_INPUT_MASK  = 128; // 0x80,\n\nSignature.Version = {};\nSignature.Version.BASE       = 0;\nSignature.Version.WITNESS_V0 = 1;\nSignature.Version.TAPROOT    = 2;\nSignature.Version.TAPSCRIPT  = 3;\n\nmodule.exports = Signature;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2NyeXB0by9zaWduYXR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsU0FBUyxtQkFBTyxDQUFDLCtEQUFNO0FBQ3ZCLFFBQVEsbUJBQU8sQ0FBQyxxREFBUTtBQUN4QixRQUFRLG1CQUFPLENBQUMseUZBQXVCO0FBQ3ZDLGlCQUFpQixtQkFBTyxDQUFDLDJFQUFnQjtBQUN6QyxhQUFhLG1CQUFPLENBQUMsbUVBQVk7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxVQUFVLHFCQUFxQixVQUFVO0FBQ3JGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdDQUF3QyxtQkFBbUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvY3J5cHRvL3NpZ25hdHVyZS5qcz8yOGEzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnLi9ibicpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vdXRpbC9wcmVjb25kaXRpb25zJyk7XG52YXIgQnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwvYnVmZmVyJyk7XG52YXIgSlNVdGlsID0gcmVxdWlyZSgnLi4vdXRpbC9qcycpO1xuXG52YXIgU2lnbmF0dXJlID0gZnVuY3Rpb24gU2lnbmF0dXJlKHIsIHMsIGlzU2Nobm9ycikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2lnbmF0dXJlKSkge1xuICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHIsIHMsIGlzU2Nobm9ycik7XG4gIH1cbiAgaWYgKHIgaW5zdGFuY2VvZiBCTikge1xuICAgIHRoaXMuc2V0KHtcbiAgICAgIHI6IHIsXG4gICAgICBzOiBzLFxuICAgICAgaXNTY2hub3JyOiBpc1NjaG5vcnJcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChyKSB7XG4gICAgdmFyIG9iaiA9IHI7XG4gICAgdGhpcy5zZXQob2JqKTtcbiAgfVxufTtcblxuLyoganNoaW50IG1heGNvbXBsZXhpdHk6IDcgKi9cblNpZ25hdHVyZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24ob2JqKSB7XG4gIHRoaXMuciA9IG9iai5yIHx8IHRoaXMuciB8fCB1bmRlZmluZWQ7XG4gIHRoaXMucyA9IG9iai5zIHx8IHRoaXMucyB8fCB1bmRlZmluZWQ7XG5cbiAgLy8gcHVibGljIGtleSByZWNvdmVyeSBwYXJhbWV0ZXIgaW4gcmFuZ2UgWzAsIDNdXG4gIHRoaXMuaSA9IHR5cGVvZiBvYmouaSA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLmkgOiBvYmouaTtcbiAgLy8gd2hldGhlciB0aGUgcmVjb3ZlcmVkIHB1YmtleSBpcyBjb21wcmVzc2VkXG4gIHRoaXMuY29tcHJlc3NlZCA9IHR5cGVvZiBvYmouY29tcHJlc3NlZCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLmNvbXByZXNzZWQgOiBvYmouY29tcHJlc3NlZDtcbiAgdGhpcy5pc1NjaG5vcnIgPSB0eXBlb2Ygb2JqLmlzU2Nobm9yciA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLmlzU2Nobm9yciA6IG9iai5pc1NjaG5vcnI7XG4gIHRoaXMubmhhc2h0eXBlID0gb2JqLm5oYXNodHlwZSB8fCB0aGlzLm5oYXNodHlwZSB8fCB1bmRlZmluZWQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuU2lnbmF0dXJlLmZyb21Db21wYWN0ID0gZnVuY3Rpb24oYnVmKSB7XG4gICQuY2hlY2tBcmd1bWVudChCdWZmZXJVdGlsLmlzQnVmZmVyKGJ1ZiksICdBcmd1bWVudCBpcyBleHBlY3RlZCB0byBiZSBhIEJ1ZmZlcicpO1xuXG4gIHZhciBzaWcgPSBuZXcgU2lnbmF0dXJlKCk7XG5cbiAgdmFyIGNvbXByZXNzZWQgPSB0cnVlO1xuICB2YXIgaSA9IGJ1Zi5zbGljZSgwLCAxKVswXSAtIDI3IC0gNDtcbiAgaWYgKGkgPCAwKSB7XG4gICAgY29tcHJlc3NlZCA9IGZhbHNlO1xuICAgIGkgPSBpICsgNDtcbiAgfVxuXG4gIHZhciBiMiA9IGJ1Zi5zbGljZSgxLCAzMyk7XG4gIHZhciBiMyA9IGJ1Zi5zbGljZSgzMywgNjUpO1xuXG4gICQuY2hlY2tBcmd1bWVudChpID09PSAwIHx8IGkgPT09IDEgfHwgaSA9PT0gMiB8fCBpID09PSAzLCBuZXcgRXJyb3IoJ2kgbXVzdCBiZSAwLCAxLCAyLCBvciAzJykpO1xuICAkLmNoZWNrQXJndW1lbnQoYjIubGVuZ3RoID09PSAzMiwgbmV3IEVycm9yKCdyIG11c3QgYmUgMzIgYnl0ZXMnKSk7XG4gICQuY2hlY2tBcmd1bWVudChiMy5sZW5ndGggPT09IDMyLCBuZXcgRXJyb3IoJ3MgbXVzdCBiZSAzMiBieXRlcycpKTtcblxuICBzaWcuY29tcHJlc3NlZCA9IGNvbXByZXNzZWQ7XG4gIHNpZy5pID0gaTtcbiAgc2lnLnIgPSBCTi5mcm9tQnVmZmVyKGIyKTtcbiAgc2lnLnMgPSBCTi5mcm9tQnVmZmVyKGIzKTtcblxuICByZXR1cm4gc2lnO1xufTtcblxuU2lnbmF0dXJlLmZyb21ERVIgPSBTaWduYXR1cmUuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uKGJ1Ziwgc3RyaWN0KSB7XG4gIHZhciBzaWcgPSBuZXcgU2lnbmF0dXJlKCk7XG5cbiAgLy8gU2Nobm9yciBTaWduYXR1cmVzIHVzZSA2NSBieXRlIGZvciBpbiB0eCByIFtsZW5dIDMyICwgcyBbbGVuXSAzMiwgbmhhc2h0eXBlXG4gIC8vIE5PVEU6IHRoaXMgY2hlY2sgaXMgbm90IHZlcnkgcmVsaWFibGUuIFlvdSBzaG91bGQgdXNlIC5mcm9tU2Nobm9yciBkaXJlY3RseSBpZiB5b3Uga25vdyBpdCdzIGEgc2Nobm9yciBzaWcuXG4gIGlmKChidWYubGVuZ3RoID09PSA2NCB8fCBidWYubGVuZ3RoID09PSA2NSkgJiYgYnVmWzBdICE9IDB4MzApIHtcbiAgICByZXR1cm4gU2lnbmF0dXJlLmZyb21TY2hub3JyKGJ1Zik7XG4gIH1cbiAgXG4gICQuY2hlY2tBcmd1bWVudCghKGJ1Zi5sZW5ndGggPT09IDY0ICYmIGJ1ZlswXSA9PT0gMHgzMCksIG5ldyBFcnJvcignNjQgREVSIChlY2RzYSkgc2lnbmF0dXJlcyBub3QgYWxsb3dlZCcpKTtcbiAgXG4gIHZhciBvYmogPSBTaWduYXR1cmUucGFyc2VERVIoYnVmLCBzdHJpY3QpO1xuXG4gIHNpZy5yID0gb2JqLnI7XG4gIHNpZy5zID0gb2JqLnM7XG5cbiAgcmV0dXJuIHNpZztcbn07XG5cbi8vIFRoZSBmb3JtYXQgdXNlZCBpbiBhIHR4XG5TaWduYXR1cmUuZnJvbVR4Rm9ybWF0ID0gZnVuY3Rpb24oYnVmKSB7XG4gIHZhciBuaGFzaHR5cGUgPSBidWYucmVhZFVJbnQ4KGJ1Zi5sZW5ndGggLSAxKTtcbiAgdmFyIGRlcmJ1ZiA9IGJ1Zi5zbGljZSgwLCBidWYubGVuZ3RoIC0gMSk7XG4gIHZhciBzaWcgPSBuZXcgU2lnbmF0dXJlLmZyb21ERVIoZGVyYnVmLCBmYWxzZSk7XG4gIHNpZy5uaGFzaHR5cGUgPSBuaGFzaHR5cGU7XG4gIHJldHVybiBzaWc7XG59O1xuXG5TaWduYXR1cmUuZnJvbVN0cmluZyA9IGZ1bmN0aW9uKHN0cikge1xuICB2YXIgYnVmID0gQnVmZmVyLmZyb20oc3RyLCAnaGV4Jyk7XG4gIHJldHVybiBTaWduYXR1cmUuZnJvbURFUihidWYpO1xufTtcblxuXG4vKipcbiAqIEluIG9yZGVyIHRvIG1pbWljIHRoZSBub24tc3RyaWN0IERFUiBlbmNvZGluZyBvZiBPcGVuU1NMLCBzZXQgc3RyaWN0ID0gZmFsc2UuXG4gKi9cblNpZ25hdHVyZS5wYXJzZURFUiA9IGZ1bmN0aW9uKGJ1Ziwgc3RyaWN0KSB7XG4gICQuY2hlY2tBcmd1bWVudChCdWZmZXJVdGlsLmlzQnVmZmVyKGJ1ZiksIG5ldyBFcnJvcignREVSIGZvcm1hdHRlZCBzaWduYXR1cmUgc2hvdWxkIGJlIGEgYnVmZmVyJykpO1xuICBpZiAoXy5pc1VuZGVmaW5lZChzdHJpY3QpKSB7XG4gICAgc3RyaWN0ID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBoZWFkZXIgPSBidWZbMF07XG4gICQuY2hlY2tBcmd1bWVudChoZWFkZXIgPT09IDB4MzAsIG5ldyBFcnJvcignSGVhZGVyIGJ5dGUgc2hvdWxkIGJlIDB4MzAnKSk7XG5cbiAgdmFyIGxlbmd0aCA9IGJ1ZlsxXTtcbiAgdmFyIGJ1Zmxlbmd0aCA9IGJ1Zi5zbGljZSgyKS5sZW5ndGg7XG4gICQuY2hlY2tBcmd1bWVudCghc3RyaWN0IHx8IGxlbmd0aCA9PT0gYnVmbGVuZ3RoLCBuZXcgRXJyb3IoJ0xlbmd0aCBieXRlIHNob3VsZCBsZW5ndGggb2Ygd2hhdCBmb2xsb3dzJykpO1xuXG4gIGxlbmd0aCA9IGxlbmd0aCA8IGJ1Zmxlbmd0aCA/IGxlbmd0aCA6IGJ1Zmxlbmd0aDtcblxuICB2YXIgcmhlYWRlciA9IGJ1ZlsyICsgMF07XG4gICQuY2hlY2tBcmd1bWVudChyaGVhZGVyID09PSAweDAyLCBuZXcgRXJyb3IoJ0ludGVnZXIgYnl0ZSBmb3IgciBzaG91bGQgYmUgMHgwMicpKTtcblxuICB2YXIgcmxlbmd0aCA9IGJ1ZlsyICsgMV07XG4gIHZhciByYnVmID0gYnVmLnNsaWNlKDIgKyAyLCAyICsgMiArIHJsZW5ndGgpO1xuICB2YXIgciA9IEJOLmZyb21CdWZmZXIocmJ1Zik7XG4gIHZhciBybmVnID0gYnVmWzIgKyAxICsgMV0gPT09IDB4MDAgPyB0cnVlIDogZmFsc2U7XG4gICQuY2hlY2tBcmd1bWVudChybGVuZ3RoID09PSByYnVmLmxlbmd0aCwgbmV3IEVycm9yKCdMZW5ndGggb2YgciBpbmNvcnJlY3QnKSk7XG5cbiAgdmFyIHNoZWFkZXIgPSBidWZbMiArIDIgKyBybGVuZ3RoICsgMF07XG4gICQuY2hlY2tBcmd1bWVudChzaGVhZGVyID09PSAweDAyLCBuZXcgRXJyb3IoJ0ludGVnZXIgYnl0ZSBmb3IgcyBzaG91bGQgYmUgMHgwMicpKTtcblxuICB2YXIgc2xlbmd0aCA9IGJ1ZlsyICsgMiArIHJsZW5ndGggKyAxXTtcbiAgdmFyIHNidWYgPSBidWYuc2xpY2UoMiArIDIgKyBybGVuZ3RoICsgMiwgMiArIDIgKyBybGVuZ3RoICsgMiArIHNsZW5ndGgpO1xuICB2YXIgcyA9IEJOLmZyb21CdWZmZXIoc2J1Zik7XG4gIHZhciBzbmVnID0gYnVmWzIgKyAyICsgcmxlbmd0aCArIDIgKyAyXSA9PT0gMHgwMCA/IHRydWUgOiBmYWxzZTtcbiAgJC5jaGVja0FyZ3VtZW50KHNsZW5ndGggPT09IHNidWYubGVuZ3RoLCBuZXcgRXJyb3IoJ0xlbmd0aCBvZiBzIGluY29ycmVjdCcpKTtcblxuICB2YXIgc3VtbGVuZ3RoID0gMiArIDIgKyBybGVuZ3RoICsgMiArIHNsZW5ndGg7XG4gICQuY2hlY2tBcmd1bWVudChsZW5ndGggPT09IHN1bWxlbmd0aCAtIDIsIG5ldyBFcnJvcignTGVuZ3RoIG9mIHNpZ25hdHVyZSBpbmNvcnJlY3QnKSk7XG5cbiAgdmFyIG9iaiA9IHtcbiAgICBoZWFkZXI6IGhlYWRlcixcbiAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICByaGVhZGVyOiByaGVhZGVyLFxuICAgIHJsZW5ndGg6IHJsZW5ndGgsXG4gICAgcm5lZzogcm5lZyxcbiAgICByYnVmOiByYnVmLFxuICAgIHI6IHIsXG4gICAgc2hlYWRlcjogc2hlYWRlcixcbiAgICBzbGVuZ3RoOiBzbGVuZ3RoLFxuICAgIHNuZWc6IHNuZWcsXG4gICAgc2J1Zjogc2J1ZixcbiAgICBzOiBzXG4gIH07XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0NvbXBhY3QgPSBmdW5jdGlvbihpLCBjb21wcmVzc2VkKSB7XG4gIGkgPSB0eXBlb2YgaSA9PT0gJ251bWJlcicgPyBpIDogdGhpcy5pO1xuICBjb21wcmVzc2VkID0gdHlwZW9mIGNvbXByZXNzZWQgPT09ICdib29sZWFuJyA/IGNvbXByZXNzZWQgOiB0aGlzLmNvbXByZXNzZWQ7XG5cbiAgaWYgKCEoaSA9PT0gMCB8fCBpID09PSAxIHx8IGkgPT09IDIgfHwgaSA9PT0gMykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2kgbXVzdCBiZSBlcXVhbCB0byAwLCAxLCAyLCBvciAzJyk7XG4gIH1cblxuICB2YXIgdmFsID0gaSArIDI3ICsgNDtcbiAgaWYgKGNvbXByZXNzZWQgPT09IGZhbHNlKSB7XG4gICAgdmFsID0gdmFsIC0gNDtcbiAgfVxuICB2YXIgYjEgPSBCdWZmZXIuZnJvbShbdmFsXSk7XG4gIHZhciBiMiA9IHRoaXMuci50b0J1ZmZlcih7XG4gICAgc2l6ZTogMzJcbiAgfSk7XG4gIHZhciBiMyA9IHRoaXMucy50b0J1ZmZlcih7XG4gICAgc2l6ZTogMzJcbiAgfSk7XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KFtiMSwgYjIsIGIzXSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZWl0aGVyIGEgREVSIGVuY29kZWQgYnVmZmVyIG9yIGEgU2Nobm9yciBlbmNvZGVkIGJ1ZmZlciBpZiBpc1NjaG5vciA9PSB0cnVlXG4gKi9cblNpZ25hdHVyZS5wcm90b3R5cGUudG9CdWZmZXIgPSBTaWduYXR1cmUucHJvdG90eXBlLnRvREVSID0gZnVuY3Rpb24oKSB7XG4gIGlmKHRoaXMuaXNTY2hub3JyKSB7XG4gICAgY29uc3QgaGFzaFR5cGVCdWYgPSAhdGhpcy5uaGFzaHR5cGUgfHwgdGhpcy5uaGFzaHR5cGUgPT09IFNpZ25hdHVyZS5TSUdIQVNIX0RFRkFVTFQgPyBCdWZmZXIuYWxsb2MoMCkgOiBCdWZmZXIuZnJvbShbdGhpcy5uaGFzaHR5cGVdKTtcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbdGhpcy5yLnRvQnVmZmVyKHsgc2l6ZTogMzIgfSksIHRoaXMucy50b0J1ZmZlcih7IHNpemU6IDMyIH0pLCBoYXNoVHlwZUJ1Zl0pO1xuICB9XG5cbiAgdmFyIHJuYnVmID0gdGhpcy5yLnRvQnVmZmVyKCk7XG4gIHZhciBzbmJ1ZiA9IHRoaXMucy50b0J1ZmZlcigpO1xuXG4gIHZhciBybmVnID0gcm5idWZbMF0gJiAweDgwID8gdHJ1ZSA6IGZhbHNlO1xuICB2YXIgc25lZyA9IHNuYnVmWzBdICYgMHg4MCA/IHRydWUgOiBmYWxzZTtcblxuICB2YXIgcmJ1ZiA9IHJuZWcgPyBCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbMHgwMF0pLCBybmJ1Zl0pIDogcm5idWY7XG4gIHZhciBzYnVmID0gc25lZyA/IEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKFsweDAwXSksIHNuYnVmXSkgOiBzbmJ1ZjtcblxuICB2YXIgcmxlbmd0aCA9IHJidWYubGVuZ3RoO1xuICB2YXIgc2xlbmd0aCA9IHNidWYubGVuZ3RoO1xuICB2YXIgbGVuZ3RoID0gMiArIHJsZW5ndGggKyAyICsgc2xlbmd0aDtcbiAgdmFyIHJoZWFkZXIgPSAweDAyO1xuICB2YXIgc2hlYWRlciA9IDB4MDI7XG4gIHZhciBoZWFkZXIgPSAweDMwO1xuXG4gIHZhciBkZXIgPSBCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbaGVhZGVyLCBsZW5ndGgsIHJoZWFkZXIsIHJsZW5ndGhdKSwgcmJ1ZiwgQnVmZmVyLmZyb20oW3NoZWFkZXIsIHNsZW5ndGhdKSwgc2J1Zl0pO1xuICByZXR1cm4gZGVyO1xufTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYnVmID0gdGhpcy50b0RFUigpO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdoZXgnKTtcbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyB0cmFuc2xhdGVkIGZyb20gYml0Y29pbmQncyBJc0RFUlNpZ25hdHVyZSBhbmQgaXMgdXNlZCBpblxuICogdGhlIHNjcmlwdCBpbnRlcnByZXRlci4gIFRoaXMgXCJERVJcIiBmb3JtYXQgYWN0dWFsbHkgaW5jbHVkZXMgYW4gZXh0cmEgYnl0ZSxcbiAqIHRoZSBuaGFzaHR5cGUsIGF0IHRoZSBlbmQuIEl0IGlzIHJlYWxseSB0aGUgdHggZm9ybWF0LCBub3QgREVSIGZvcm1hdC5cbiAqXG4gKiBBIGNhbm9uaWNhbCBzaWduYXR1cmUgZXhpc3RzIG9mOiBbMzBdIFt0b3RhbCBsZW5dIFswMl0gW2xlbiBSXSBbUl0gWzAyXSBbbGVuIFNdIFtTXSBbaGFzaHR5cGVdXG4gKiBXaGVyZSBSIGFuZCBTIGFyZSBub3QgbmVnYXRpdmUgKHRoZWlyIGZpcnN0IGJ5dGUgaGFzIGl0cyBoaWdoZXN0IGJpdCBub3Qgc2V0KSwgYW5kIG5vdFxuICogZXhjZXNzaXZlbHkgcGFkZGVkIChkbyBub3Qgc3RhcnQgd2l0aCBhIDAgYnl0ZSwgdW5sZXNzIGFuIG90aGVyd2lzZSBuZWdhdGl2ZSBudW1iZXIgZm9sbG93cyxcbiAqIGluIHdoaWNoIGNhc2UgYSBzaW5nbGUgMCBieXRlIGlzIG5lY2Vzc2FyeSBhbmQgZXZlbiByZXF1aXJlZCkuXG4gKlxuICogU2VlIGh0dHBzOi8vYml0Y29pbnRhbGsub3JnL2luZGV4LnBocD90b3BpYz04MzkyLm1zZzEyNzYyMyNtc2cxMjc2MjNcbiAqL1xuU2lnbmF0dXJlLmlzVHhERVIgPSBmdW5jdGlvbihidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPCA5KSB7XG4gICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiB0b28gc2hvcnRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGJ1Zi5sZW5ndGggPiA3Mykge1xuICAgIC8vIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiB0b28gbG9uZ1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYnVmWzBdICE9PSAweDMwKSB7XG4gICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiB3cm9uZyB0eXBlXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChidWZbMV0gIT09IGJ1Zi5sZW5ndGggLSAzKSB7XG4gICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiB3cm9uZyBsZW5ndGggbWFya2VyXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBuTGVuUiA9IGJ1ZlszXTtcbiAgaWYgKDUgKyBuTGVuUiA+PSBidWYubGVuZ3RoKSB7XG4gICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBTIGxlbmd0aCBtaXNwbGFjZWRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIG5MZW5TID0gYnVmWzUgKyBuTGVuUl07XG4gIGlmICgobkxlblIgKyBuTGVuUyArIDcpICE9PSBidWYubGVuZ3RoKSB7XG4gICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBSK1MgbGVuZ3RoIG1pc21hdGNoXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIFIgPSBidWYuc2xpY2UoNCk7XG4gIGlmIChidWZbNCAtIDJdICE9PSAweDAyKSB7XG4gICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBSIHZhbHVlIHR5cGUgbWlzbWF0Y2hcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG5MZW5SID09PSAwKSB7XG4gICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBSIGxlbmd0aCBpcyB6ZXJvXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChSWzBdICYgMHg4MCkge1xuICAgIC8vICBOb24tY2Fub25pY2FsIHNpZ25hdHVyZTogUiB2YWx1ZSBuZWdhdGl2ZVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAobkxlblIgPiAxICYmIChSWzBdID09PSAweDAwKSAmJiAhKFJbMV0gJiAweDgwKSkge1xuICAgIC8vICBOb24tY2Fub25pY2FsIHNpZ25hdHVyZTogUiB2YWx1ZSBleGNlc3NpdmVseSBwYWRkZWRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgUyA9IGJ1Zi5zbGljZSg2ICsgbkxlblIpO1xuICBpZiAoYnVmWzYgKyBuTGVuUiAtIDJdICE9PSAweDAyKSB7XG4gICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBTIHZhbHVlIHR5cGUgbWlzbWF0Y2hcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG5MZW5TID09PSAwKSB7XG4gICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBTIGxlbmd0aCBpcyB6ZXJvXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChTWzBdICYgMHg4MCkge1xuICAgIC8vICBOb24tY2Fub25pY2FsIHNpZ25hdHVyZTogUyB2YWx1ZSBuZWdhdGl2ZVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAobkxlblMgPiAxICYmIChTWzBdID09PSAweDAwKSAmJiAhKFNbMV0gJiAweDgwKSkge1xuICAgIC8vICBOb24tY2Fub25pY2FsIHNpZ25hdHVyZTogUyB2YWx1ZSBleGNlc3NpdmVseSBwYWRkZWRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIENvbXBhcmVzIHRvIGJpdGNvaW5kJ3MgSXNMb3dERVJTaWduYXR1cmVcbiAqIFNlZSBhbHNvIEVDRFNBIHNpZ25hdHVyZSBhbGdvcml0aG0gd2hpY2ggZW5mb3JjZXMgdGhpcy5cbiAqIFNlZSBhbHNvIEJJUCA2MiwgXCJsb3cgUyB2YWx1ZXMgaW4gc2lnbmF0dXJlc1wiXG4gKi9cblNpZ25hdHVyZS5wcm90b3R5cGUuaGFzTG93UyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5zLmx0KG5ldyBCTigxKSkgfHxcbiAgICB0aGlzLnMuZ3QobmV3IEJOKCc3RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjVENTc2RTczNTdBNDUwMURERkU5MkY0NjY4MUIyMEEwJywgJ2hleCcpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgbmhhc2h0eXBlIGlzIGV4YWN0bHkgZXF1YWwgdG8gb25lIG9mIHRoZSBzdGFuZGFyZCBvcHRpb25zIG9yIGNvbWJpbmF0aW9ucyB0aGVyZW9mLlxuICogVHJhbnNsYXRlZCBmcm9tIGJpdGNvaW5kJ3MgSXNEZWZpbmVkSGFzaHR5cGVTaWduYXR1cmVcbiAqL1xuU2lnbmF0dXJlLnByb3RvdHlwZS5oYXNEZWZpbmVkSGFzaHR5cGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCFKU1V0aWwuaXNOYXR1cmFsTnVtYmVyKHRoaXMubmhhc2h0eXBlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBhY2NlcHQgd2l0aCBvciB3aXRob3V0IFNpZ25hdHVyZS5TSUdIQVNIX0FOWU9ORUNBTlBBWSBieSBpZ25vcmluZyB0aGUgYml0XG4gIHZhciB0ZW1wID0gdGhpcy5uaGFzaHR5cGUgJiB+U2lnbmF0dXJlLlNJR0hBU0hfQU5ZT05FQ0FOUEFZO1xuICBpZiAodGVtcCA8IFNpZ25hdHVyZS5TSUdIQVNIX0FMTCB8fCB0ZW1wID4gU2lnbmF0dXJlLlNJR0hBU0hfU0lOR0xFKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b1R4Rm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkZXJidWYgPSB0aGlzLnRvREVSKCk7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2MoMSk7XG4gIGJ1Zi53cml0ZVVJbnQ4KHRoaXMubmhhc2h0eXBlLCAwKTtcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW2RlcmJ1ZiwgYnVmXSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBTaWduYXR1cmUgaW5zdGFuY2UgZnJvbSBhIFNjaG5vcnIgc2lnXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmIFNjaG5vcnIgc2lnbmF0dXJlIGJ1ZmZlclxuICogQHJldHVybnMge1NpZ25hdHVyZX1cbiAqL1xuU2lnbmF0dXJlLmZyb21TY2hub3JyID0gZnVuY3Rpb24oYnVmKSB7XG4gICQuY2hlY2tBcmd1bWVudChCdWZmZXIuaXNCdWZmZXIoYnVmKSwgJ1NjaG5vcnIgc2lnbmF0dXJlIGFyZ3VtZW50IG11c3QgYmUgYSBidWZmZXInKTtcbiAgJC5jaGVja0FyZ3VtZW50KGJ1Zi5sZW5ndGggPT09IDY0IHx8IGJ1Zi5sZW5ndGggPT09IDY1LCAnU2Nobm9yciBzaWduYXR1cmVzIG11c3QgYmUgNjQgb3IgNjUgYnl0ZXMnKTtcblxuICBjb25zdCBzaWcgPSBuZXcgU2lnbmF0dXJlKCk7XG4gIGxldCByID0gYnVmLnNsaWNlKDAsMzIpO1xuICBsZXQgcyA9IGJ1Zi5zbGljZSgzMiwgNjQpO1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gNjUpIHtcbiAgICBzaWcubmhhc2h0eXBlID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAkLmNoZWNrU3RhdGUoc2lnLm5oYXNodHlwZSAhPT0gU2lnbmF0dXJlLlNJR0hBU0hfREVGQVVMVCwgbmV3IEVycm9yKCdpbnZhbGlkIGhhc2h0eXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHNpZy5uaGFzaHR5cGUgPSBTaWduYXR1cmUuU0lHSEFTSF9ERUZBVUxUO1xuICB9XG4gIHNpZy5yID0gQk4uZnJvbUJ1ZmZlcihyKTtcbiAgc2lnLnMgPSBCTi5mcm9tQnVmZmVyKHMpO1xuICBzaWcuaXNTY2hub3JyID0gdHJ1ZTtcbiAgcmV0dXJuIHNpZztcbn07XG5cblNpZ25hdHVyZS5TSUdIQVNIX0RFRkFVTFQgICAgICAgPSAweDAwOyAvLyE8IFRhcHJvb3Qgb25seTsgaW1wbGllZCB3aGVuIHNpZ2hhc2ggYnl0ZSBpcyBtaXNzaW5nLCBhbmQgZXF1aXZhbGVudCB0byBTSUdIQVNIX0FMTFxuU2lnbmF0dXJlLlNJR0hBU0hfQUxMICAgICAgICAgICA9IDB4MDE7XG5TaWduYXR1cmUuU0lHSEFTSF9OT05FICAgICAgICAgID0gMHgwMjtcblNpZ25hdHVyZS5TSUdIQVNIX1NJTkdMRSAgICAgICAgPSAweDAzO1xuU2lnbmF0dXJlLlNJR0hBU0hfQU5ZT05FQ0FOUEFZICA9IDB4ODA7XG5cblNpZ25hdHVyZS5TSUdIQVNIX09VVFBVVF9NQVNLID0gMztcblNpZ25hdHVyZS5TSUdIQVNIX0lOUFVUX01BU0sgID0gMTI4OyAvLyAweDgwLFxuXG5TaWduYXR1cmUuVmVyc2lvbiA9IHt9O1xuU2lnbmF0dXJlLlZlcnNpb24uQkFTRSAgICAgICA9IDA7XG5TaWduYXR1cmUuVmVyc2lvbi5XSVRORVNTX1YwID0gMTtcblNpZ25hdHVyZS5WZXJzaW9uLlRBUFJPT1QgICAgPSAyO1xuU2lnbmF0dXJlLlZlcnNpb24uVEFQU0NSSVBUICA9IDM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js":
/*!***********************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/crypto/taggedhash.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Hash = __webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nconst BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nconst inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/bitcore-lib/node_modules/inherits/inherits.js\");\n\n/**\n * Creates a tag hash to ensure uniqueness of a message between purposes.\n * For example, if there's a potential for a collision of messages between\n *   multiple purposes, a tag can be added to guard against such collisions.\n * @link https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#Design (see 'Tagged Hashes')\n * @param {String} tag The tag to prevent message collisions. Should uniquely reflect the purpose of the message.\n * @param {Buffer|String} message (optional)\n * @param {String} messageEncoding (default: 'hex') If `message` is a string, provide the encoding\n * @returns {TaggedHash} Instance of a BufferWriter with the written tag and `finalize` method\n */\nfunction TaggedHash(tag, message, messageEncoding = 'hex') {\n  if (!(this instanceof TaggedHash)) {\n    return new TaggedHash(tag, message, messageEncoding);\n  }\n  BufferWriter.apply(this);\n  tag = Buffer.from(tag);\n\n  const taghash = Hash.sha256(tag);\n  this.write(taghash);\n  this.write(taghash);\n  if (message) {\n    message = Buffer.isBuffer(message) ? message : Buffer.from(message, messageEncoding);\n    this.write(message);\n  }\n  return this;\n};\n\ninherits(TaggedHash, BufferWriter);\n\n/**\n * Returns a 32-byte SHA256 hash of the double tagged hashes concat'd with the message\n * as defined by BIP-340: SHA256(SHA256(tag), SHA256(tag), message)\n * @returns {Buffer}\n */\nTaggedHash.prototype.finalize = function() {\n  return Buffer.from(Hash.sha256(this.toBuffer()));\n};\n\n/**\n * Commonly used tags\n */\nObject.defineProperties(TaggedHash, {\n  TAPSIGHASH: { get: () => new TaggedHash('TapSighash') },\n  TAPLEAF:    { get: () => new TaggedHash('TapLeaf') },\n  TAPBRANCH:  { get: () => new TaggedHash('TapBranch') }\n});\n\nmodule.exports = TaggedHash;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2NyeXB0by90YWdnZWRoYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyxtRUFBUTtBQUM3QixxQkFBcUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDdkQsaUJBQWlCLG1CQUFPLENBQUMsb0ZBQVU7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixhQUFhLFlBQVk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5Q0FBeUM7QUFDekQsZ0JBQWdCLHNDQUFzQztBQUN0RCxnQkFBZ0I7QUFDaEIsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL2xpYi9jcnlwdG8vdGFnZ2VkaGFzaC5qcz9hYWI1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKTtcbmNvbnN0IEJ1ZmZlcldyaXRlciA9IHJlcXVpcmUoJy4uL2VuY29kaW5nL2J1ZmZlcndyaXRlcicpO1xuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0YWcgaGFzaCB0byBlbnN1cmUgdW5pcXVlbmVzcyBvZiBhIG1lc3NhZ2UgYmV0d2VlbiBwdXJwb3Nlcy5cbiAqIEZvciBleGFtcGxlLCBpZiB0aGVyZSdzIGEgcG90ZW50aWFsIGZvciBhIGNvbGxpc2lvbiBvZiBtZXNzYWdlcyBiZXR3ZWVuXG4gKiAgIG11bHRpcGxlIHB1cnBvc2VzLCBhIHRhZyBjYW4gYmUgYWRkZWQgdG8gZ3VhcmQgYWdhaW5zdCBzdWNoIGNvbGxpc2lvbnMuXG4gKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMzQwLm1lZGlhd2lraSNEZXNpZ24gKHNlZSAnVGFnZ2VkIEhhc2hlcycpXG4gKiBAcGFyYW0ge1N0cmluZ30gdGFnIFRoZSB0YWcgdG8gcHJldmVudCBtZXNzYWdlIGNvbGxpc2lvbnMuIFNob3VsZCB1bmlxdWVseSByZWZsZWN0IHRoZSBwdXJwb3NlIG9mIHRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtCdWZmZXJ8U3RyaW5nfSBtZXNzYWdlIChvcHRpb25hbClcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlRW5jb2RpbmcgKGRlZmF1bHQ6ICdoZXgnKSBJZiBgbWVzc2FnZWAgaXMgYSBzdHJpbmcsIHByb3ZpZGUgdGhlIGVuY29kaW5nXG4gKiBAcmV0dXJucyB7VGFnZ2VkSGFzaH0gSW5zdGFuY2Ugb2YgYSBCdWZmZXJXcml0ZXIgd2l0aCB0aGUgd3JpdHRlbiB0YWcgYW5kIGBmaW5hbGl6ZWAgbWV0aG9kXG4gKi9cbmZ1bmN0aW9uIFRhZ2dlZEhhc2godGFnLCBtZXNzYWdlLCBtZXNzYWdlRW5jb2RpbmcgPSAnaGV4Jykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVGFnZ2VkSGFzaCkpIHtcbiAgICByZXR1cm4gbmV3IFRhZ2dlZEhhc2godGFnLCBtZXNzYWdlLCBtZXNzYWdlRW5jb2RpbmcpO1xuICB9XG4gIEJ1ZmZlcldyaXRlci5hcHBseSh0aGlzKTtcbiAgdGFnID0gQnVmZmVyLmZyb20odGFnKTtcblxuICBjb25zdCB0YWdoYXNoID0gSGFzaC5zaGEyNTYodGFnKTtcbiAgdGhpcy53cml0ZSh0YWdoYXNoKTtcbiAgdGhpcy53cml0ZSh0YWdoYXNoKTtcbiAgaWYgKG1lc3NhZ2UpIHtcbiAgICBtZXNzYWdlID0gQnVmZmVyLmlzQnVmZmVyKG1lc3NhZ2UpID8gbWVzc2FnZSA6IEJ1ZmZlci5mcm9tKG1lc3NhZ2UsIG1lc3NhZ2VFbmNvZGluZyk7XG4gICAgdGhpcy53cml0ZShtZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmluaGVyaXRzKFRhZ2dlZEhhc2gsIEJ1ZmZlcldyaXRlcik7XG5cbi8qKlxuICogUmV0dXJucyBhIDMyLWJ5dGUgU0hBMjU2IGhhc2ggb2YgdGhlIGRvdWJsZSB0YWdnZWQgaGFzaGVzIGNvbmNhdCdkIHdpdGggdGhlIG1lc3NhZ2VcbiAqIGFzIGRlZmluZWQgYnkgQklQLTM0MDogU0hBMjU2KFNIQTI1Nih0YWcpLCBTSEEyNTYodGFnKSwgbWVzc2FnZSlcbiAqIEByZXR1cm5zIHtCdWZmZXJ9XG4gKi9cblRhZ2dlZEhhc2gucHJvdG90eXBlLmZpbmFsaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShIYXNoLnNoYTI1Nih0aGlzLnRvQnVmZmVyKCkpKTtcbn07XG5cbi8qKlxuICogQ29tbW9ubHkgdXNlZCB0YWdzXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFRhZ2dlZEhhc2gsIHtcbiAgVEFQU0lHSEFTSDogeyBnZXQ6ICgpID0+IG5ldyBUYWdnZWRIYXNoKCdUYXBTaWdoYXNoJykgfSxcbiAgVEFQTEVBRjogICAgeyBnZXQ6ICgpID0+IG5ldyBUYWdnZWRIYXNoKCdUYXBMZWFmJykgfSxcbiAgVEFQQlJBTkNIOiAgeyBnZXQ6ICgpID0+IG5ldyBUYWdnZWRIYXNoKCdUYXBCcmFuY2gnKSB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWdnZWRIYXNoOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/encoding/base58.js":
/*!*********************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/encoding/base58.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar bs58 = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bitcore-lib/node_modules/bs58/index.js\");\nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\n\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'.split('');\n\nvar Base58 = function Base58(obj) {\n  /* jshint maxcomplexity: 8 */\n  if (!(this instanceof Base58)) {\n    return new Base58(obj);\n  }\n  if (Buffer.isBuffer(obj)) {\n    var buf = obj;\n    this.fromBuffer(buf);\n  } else if (typeof obj === 'string') {\n    var str = obj;\n    this.fromString(str);\n  } else if (obj) {\n    this.set(obj);\n  }\n};\n\nBase58.validCharacters = function validCharacters(chars) {\n  if (buffer.Buffer.isBuffer(chars)) {\n    chars = chars.toString();\n  }\n  return _.every(_.map(chars, function(char) { return _.includes(ALPHABET, char); }));\n};\n\nBase58.prototype.set = function(obj) {\n  this.buf = obj.buf || this.buf || undefined;\n  return this;\n};\n\nBase58.encode = function(buf) {\n  if (!buffer.Buffer.isBuffer(buf)) {\n    throw new Error('Input should be a buffer');\n  }\n  return bs58.encode(buf);\n};\n\nBase58.decode = function(str) {\n  if (typeof str !== 'string') {\n    throw new Error('Input should be a string');\n  }\n  return Buffer.from(bs58.decode(str));\n};\n\nBase58.prototype.fromBuffer = function(buf) {\n  this.buf = buf;\n  return this;\n};\n\nBase58.prototype.fromString = function(str) {\n  var buf = Base58.decode(str);\n  this.buf = buf;\n  return this;\n};\n\nBase58.prototype.toBuffer = function() {\n  return this.buf;\n};\n\nBase58.prototype.toString = function() {\n  return Base58.encode(this.buf);\n};\n\nmodule.exports = Base58;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2VuY29kaW5nL2Jhc2U1OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixRQUFRLG1CQUFPLENBQUMscURBQVE7QUFDeEIsV0FBVyxtQkFBTyxDQUFDLHlFQUFNO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyxzQkFBUTs7QUFFN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxvQ0FBb0M7QUFDbkY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvZW5jb2RpbmcvYmFzZTU4LmpzP2E2MjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIGJzNTggPSByZXF1aXJlKCdiczU4Jyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJyk7XG5cbnZhciBBTFBIQUJFVCA9ICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6Jy5zcGxpdCgnJyk7XG5cbnZhciBCYXNlNTggPSBmdW5jdGlvbiBCYXNlNTgob2JqKSB7XG4gIC8qIGpzaGludCBtYXhjb21wbGV4aXR5OiA4ICovXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCYXNlNTgpKSB7XG4gICAgcmV0dXJuIG5ldyBCYXNlNTgob2JqKTtcbiAgfVxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgYnVmID0gb2JqO1xuICAgIHRoaXMuZnJvbUJ1ZmZlcihidWYpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHN0ciA9IG9iajtcbiAgICB0aGlzLmZyb21TdHJpbmcoc3RyKTtcbiAgfSBlbHNlIGlmIChvYmopIHtcbiAgICB0aGlzLnNldChvYmopO1xuICB9XG59O1xuXG5CYXNlNTgudmFsaWRDaGFyYWN0ZXJzID0gZnVuY3Rpb24gdmFsaWRDaGFyYWN0ZXJzKGNoYXJzKSB7XG4gIGlmIChidWZmZXIuQnVmZmVyLmlzQnVmZmVyKGNoYXJzKSkge1xuICAgIGNoYXJzID0gY2hhcnMudG9TdHJpbmcoKTtcbiAgfVxuICByZXR1cm4gXy5ldmVyeShfLm1hcChjaGFycywgZnVuY3Rpb24oY2hhcikgeyByZXR1cm4gXy5pbmNsdWRlcyhBTFBIQUJFVCwgY2hhcik7IH0pKTtcbn07XG5cbkJhc2U1OC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24ob2JqKSB7XG4gIHRoaXMuYnVmID0gb2JqLmJ1ZiB8fCB0aGlzLmJ1ZiB8fCB1bmRlZmluZWQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuQmFzZTU4LmVuY29kZSA9IGZ1bmN0aW9uKGJ1Zikge1xuICBpZiAoIWJ1ZmZlci5CdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgc2hvdWxkIGJlIGEgYnVmZmVyJyk7XG4gIH1cbiAgcmV0dXJuIGJzNTguZW5jb2RlKGJ1Zik7XG59O1xuXG5CYXNlNTguZGVjb2RlID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgc2hvdWxkIGJlIGEgc3RyaW5nJyk7XG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJzNTguZGVjb2RlKHN0cikpO1xufTtcblxuQmFzZTU4LnByb3RvdHlwZS5mcm9tQnVmZmVyID0gZnVuY3Rpb24oYnVmKSB7XG4gIHRoaXMuYnVmID0gYnVmO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJhc2U1OC5wcm90b3R5cGUuZnJvbVN0cmluZyA9IGZ1bmN0aW9uKHN0cikge1xuICB2YXIgYnVmID0gQmFzZTU4LmRlY29kZShzdHIpO1xuICB0aGlzLmJ1ZiA9IGJ1ZjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlNTgucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmJ1Zjtcbn07XG5cbkJhc2U1OC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEJhc2U1OC5lbmNvZGUodGhpcy5idWYpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlNTg7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/encoding/base58.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/encoding/base58check.js":
/*!**************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/encoding/base58check.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar Base58 = __webpack_require__(/*! ./base58 */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/base58.js\");\nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar sha256sha256 = (__webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\").sha256sha256);\n\nvar Base58Check = function Base58Check(obj) {\n  if (!(this instanceof Base58Check))\n    return new Base58Check(obj);\n  if (Buffer.isBuffer(obj)) {\n    var buf = obj;\n    this.fromBuffer(buf);\n  } else if (typeof obj === 'string') {\n    var str = obj;\n    this.fromString(str);\n  } else if (obj) {\n    this.set(obj);\n  }\n};\n\nBase58Check.prototype.set = function(obj) {\n  this.buf = obj.buf || this.buf || undefined;\n  return this;\n};\n\nBase58Check.validChecksum = function validChecksum(data, checksum) {\n  if (_.isString(data)) {\n    data = Buffer.from(Base58.decode(data));\n  }\n  if (_.isString(checksum)) {\n    checksum =  Buffer.from(Base58.decode(checksum));\n  }\n  if (!checksum) {\n    checksum = data.slice(-4);\n    data = data.slice(0, -4);\n  }\n  return Base58Check.checksum(data).toString('hex') === checksum.toString('hex');\n};\n\nBase58Check.decode = function(s) {\n  if (typeof s !== 'string')\n    throw new Error('Input must be a string');\n\n  var buf = Buffer.from(Base58.decode(s));\n\n  if (buf.length < 4)\n    throw new Error(\"Input string too short\");\n\n  var data = buf.slice(0, -4);\n  var csum = buf.slice(-4);\n\n  var hash = sha256sha256(data);\n  var hash4 = hash.slice(0, 4);\n\n  if (csum.toString('hex') !== hash4.toString('hex'))\n    throw new Error(\"Checksum mismatch\");\n\n  return data;\n};\n\nBase58Check.checksum = function(buffer) {\n  return sha256sha256(buffer).slice(0, 4);\n};\n\nBase58Check.encode = function(buf) {\n  if (!Buffer.isBuffer(buf))\n    throw new Error('Input must be a buffer');\n  var checkedBuf = Buffer.alloc(buf.length + 4);\n  var hash = Base58Check.checksum(buf);\n  buf.copy(checkedBuf);\n  hash.copy(checkedBuf, buf.length);\n  return Base58.encode(checkedBuf);\n};\n\nBase58Check.prototype.fromBuffer = function(buf) {\n  this.buf = buf;\n  return this;\n};\n\nBase58Check.prototype.fromString = function(str) {\n  var buf = Base58Check.decode(str);\n  this.buf = buf;\n  return this;\n};\n\nBase58Check.prototype.toBuffer = function() {\n  return this.buf;\n};\n\nBase58Check.prototype.toString = function() {\n  return Base58Check.encode(this.buf);\n};\n\nmodule.exports = Base58Check;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2VuY29kaW5nL2Jhc2U1OGNoZWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFFBQVEsbUJBQU8sQ0FBQyxxREFBUTtBQUN4QixhQUFhLG1CQUFPLENBQUMseUVBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLHNCQUFRO0FBQzdCLG1CQUFtQiwrR0FBc0M7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2VuY29kaW5nL2Jhc2U1OGNoZWNrLmpzPzE5YzEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIEJhc2U1OCA9IHJlcXVpcmUoJy4vYmFzZTU4Jyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJyk7XG52YXIgc2hhMjU2c2hhMjU2ID0gcmVxdWlyZSgnLi4vY3J5cHRvL2hhc2gnKS5zaGEyNTZzaGEyNTY7XG5cbnZhciBCYXNlNThDaGVjayA9IGZ1bmN0aW9uIEJhc2U1OENoZWNrKG9iaikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQmFzZTU4Q2hlY2spKVxuICAgIHJldHVybiBuZXcgQmFzZTU4Q2hlY2sob2JqKTtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGJ1ZiA9IG9iajtcbiAgICB0aGlzLmZyb21CdWZmZXIoYnVmKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzdHIgPSBvYmo7XG4gICAgdGhpcy5mcm9tU3RyaW5nKHN0cik7XG4gIH0gZWxzZSBpZiAob2JqKSB7XG4gICAgdGhpcy5zZXQob2JqKTtcbiAgfVxufTtcblxuQmFzZTU4Q2hlY2sucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG9iaikge1xuICB0aGlzLmJ1ZiA9IG9iai5idWYgfHwgdGhpcy5idWYgfHwgdW5kZWZpbmVkO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJhc2U1OENoZWNrLnZhbGlkQ2hlY2tzdW0gPSBmdW5jdGlvbiB2YWxpZENoZWNrc3VtKGRhdGEsIGNoZWNrc3VtKSB7XG4gIGlmIChfLmlzU3RyaW5nKGRhdGEpKSB7XG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKEJhc2U1OC5kZWNvZGUoZGF0YSkpO1xuICB9XG4gIGlmIChfLmlzU3RyaW5nKGNoZWNrc3VtKSkge1xuICAgIGNoZWNrc3VtID0gIEJ1ZmZlci5mcm9tKEJhc2U1OC5kZWNvZGUoY2hlY2tzdW0pKTtcbiAgfVxuICBpZiAoIWNoZWNrc3VtKSB7XG4gICAgY2hlY2tzdW0gPSBkYXRhLnNsaWNlKC00KTtcbiAgICBkYXRhID0gZGF0YS5zbGljZSgwLCAtNCk7XG4gIH1cbiAgcmV0dXJuIEJhc2U1OENoZWNrLmNoZWNrc3VtKGRhdGEpLnRvU3RyaW5nKCdoZXgnKSA9PT0gY2hlY2tzdW0udG9TdHJpbmcoJ2hleCcpO1xufTtcblxuQmFzZTU4Q2hlY2suZGVjb2RlID0gZnVuY3Rpb24ocykge1xuICBpZiAodHlwZW9mIHMgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgbXVzdCBiZSBhIHN0cmluZycpO1xuXG4gIHZhciBidWYgPSBCdWZmZXIuZnJvbShCYXNlNTguZGVjb2RlKHMpKTtcblxuICBpZiAoYnVmLmxlbmd0aCA8IDQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgc3RyaW5nIHRvbyBzaG9ydFwiKTtcblxuICB2YXIgZGF0YSA9IGJ1Zi5zbGljZSgwLCAtNCk7XG4gIHZhciBjc3VtID0gYnVmLnNsaWNlKC00KTtcblxuICB2YXIgaGFzaCA9IHNoYTI1NnNoYTI1NihkYXRhKTtcbiAgdmFyIGhhc2g0ID0gaGFzaC5zbGljZSgwLCA0KTtcblxuICBpZiAoY3N1bS50b1N0cmluZygnaGV4JykgIT09IGhhc2g0LnRvU3RyaW5nKCdoZXgnKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGVja3N1bSBtaXNtYXRjaFwiKTtcblxuICByZXR1cm4gZGF0YTtcbn07XG5cbkJhc2U1OENoZWNrLmNoZWNrc3VtID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHJldHVybiBzaGEyNTZzaGEyNTYoYnVmZmVyKS5zbGljZSgwLCA0KTtcbn07XG5cbkJhc2U1OENoZWNrLmVuY29kZSA9IGZ1bmN0aW9uKGJ1Zikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKVxuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgbXVzdCBiZSBhIGJ1ZmZlcicpO1xuICB2YXIgY2hlY2tlZEJ1ZiA9IEJ1ZmZlci5hbGxvYyhidWYubGVuZ3RoICsgNCk7XG4gIHZhciBoYXNoID0gQmFzZTU4Q2hlY2suY2hlY2tzdW0oYnVmKTtcbiAgYnVmLmNvcHkoY2hlY2tlZEJ1Zik7XG4gIGhhc2guY29weShjaGVja2VkQnVmLCBidWYubGVuZ3RoKTtcbiAgcmV0dXJuIEJhc2U1OC5lbmNvZGUoY2hlY2tlZEJ1Zik7XG59O1xuXG5CYXNlNThDaGVjay5wcm90b3R5cGUuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uKGJ1Zikge1xuICB0aGlzLmJ1ZiA9IGJ1ZjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlNThDaGVjay5wcm90b3R5cGUuZnJvbVN0cmluZyA9IGZ1bmN0aW9uKHN0cikge1xuICB2YXIgYnVmID0gQmFzZTU4Q2hlY2suZGVjb2RlKHN0cik7XG4gIHRoaXMuYnVmID0gYnVmO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJhc2U1OENoZWNrLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5idWY7XG59O1xuXG5CYXNlNThDaGVjay5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEJhc2U1OENoZWNrLmVuY29kZSh0aGlzLmJ1Zik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2U1OENoZWNrO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/encoding/base58check.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/encoding/bech32.js":
/*!*********************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/encoding/bech32.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bech32 = __webpack_require__(/*! bech32 */ \"(ssr)/./node_modules/bech32/dist/index.js\");\n\n/**\n * Decode bech32/bech32m string\n * @param {String} str String to decode\n * @returns {Object} Decoded string info\n */\nvar decode = function(str) {\n  if (typeof str !== 'string') {\n    throw new Error('Input should be a string');\n  }\n\n  var decoded;\n  let fromWords = bech32.bech32.fromWords;\n  let encoding = encodings.BECH32;\n  try {\n    decoded = bech32.bech32.decode(str);\n  } catch (e) {\n    if (e.message.indexOf('Invalid checksum') > -1) {\n      decoded = bech32.bech32m.decode(str);\n      encoding = encodings.BECH32M;\n      fromWords = bech32.bech32m.fromWords;\n    } else {\n      throw e;\n    }\n  }\n\n  const version = decoded.words[0];\n  if (version >= 1 && encoding !== encodings.BECH32M) {\n    throw new Error('Version 1+ witness address must use Bech32m checksum');\n  }\n\n  return {\n    prefix: decoded.prefix,\n    data: Buffer.from(fromWords(decoded.words.slice(1))),\n    version\n  };\n};\n\n/**\n * Encode using BECH32 encoding\n * @param {String} prefix bech32 prefix\n * @param {Number} version\n * @param {String|Buffer} data \n * @param {String|Number} encoding (optional, default=bech32) Valid encodings are 'bech32', 'bech32m', 0, and 1.\n * @returns {String} encoded string\n */\nvar encode = function(prefix, version, data, encoding) {\n\tif (typeof prefix !== 'string') {\n\t\tthrow new Error('Prefix should be a string');\n\t}\n\tif (typeof version !== 'number') {\n\t\tthrow new Error('version should be a number');\n\t}\n  // convert string to number\n  if (encoding && typeof encoding == 'string') {\n    encoding = encodings[encoding.toUpperCase()] || -1; // fallback to -1 so it throws invalid encoding below\n  }\n  if (encoding && !(encoding == encodings.BECH32 || encoding == encodings.BECH32M)) {\n    throw new Error('Invalid encoding specified');\n  }\n  \n  let b32Variety = encoding == encodings.BECH32M ? bech32.bech32m : bech32.bech32;\n  let words = b32Variety.toWords(data);\n\n  words.unshift(version);\n\treturn b32Variety.encode(prefix, words);\n}\n\nconst encodings = {\n  BECH32: 1,\n  BECH32M: 2\n}\n\nmodule.exports = { decode: decode, encode: encode, encodings };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2VuY29kaW5nL2JlY2gzMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMseURBQVE7O0FBRTdCO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZUFBZTtBQUMxQixXQUFXLGVBQWU7QUFDMUIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvZW5jb2RpbmcvYmVjaDMyLmpzPzY2NmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmVjaDMyID0gcmVxdWlyZSgnYmVjaDMyJyk7XG5cbi8qKlxuICogRGVjb2RlIGJlY2gzMi9iZWNoMzJtIHN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBTdHJpbmcgdG8gZGVjb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBEZWNvZGVkIHN0cmluZyBpbmZvXG4gKi9cbnZhciBkZWNvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBzaG91bGQgYmUgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIHZhciBkZWNvZGVkO1xuICBsZXQgZnJvbVdvcmRzID0gYmVjaDMyLmJlY2gzMi5mcm9tV29yZHM7XG4gIGxldCBlbmNvZGluZyA9IGVuY29kaW5ncy5CRUNIMzI7XG4gIHRyeSB7XG4gICAgZGVjb2RlZCA9IGJlY2gzMi5iZWNoMzIuZGVjb2RlKHN0cik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZS5tZXNzYWdlLmluZGV4T2YoJ0ludmFsaWQgY2hlY2tzdW0nKSA+IC0xKSB7XG4gICAgICBkZWNvZGVkID0gYmVjaDMyLmJlY2gzMm0uZGVjb2RlKHN0cik7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5ncy5CRUNIMzJNO1xuICAgICAgZnJvbVdvcmRzID0gYmVjaDMyLmJlY2gzMm0uZnJvbVdvcmRzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHZlcnNpb24gPSBkZWNvZGVkLndvcmRzWzBdO1xuICBpZiAodmVyc2lvbiA+PSAxICYmIGVuY29kaW5nICE9PSBlbmNvZGluZ3MuQkVDSDMyTSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVmVyc2lvbiAxKyB3aXRuZXNzIGFkZHJlc3MgbXVzdCB1c2UgQmVjaDMybSBjaGVja3N1bScpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcmVmaXg6IGRlY29kZWQucHJlZml4LFxuICAgIGRhdGE6IEJ1ZmZlci5mcm9tKGZyb21Xb3JkcyhkZWNvZGVkLndvcmRzLnNsaWNlKDEpKSksXG4gICAgdmVyc2lvblxuICB9O1xufTtcblxuLyoqXG4gKiBFbmNvZGUgdXNpbmcgQkVDSDMyIGVuY29kaW5nXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4IGJlY2gzMiBwcmVmaXhcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uXG4gKiBAcGFyYW0ge1N0cmluZ3xCdWZmZXJ9IGRhdGEgXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGVuY29kaW5nIChvcHRpb25hbCwgZGVmYXVsdD1iZWNoMzIpIFZhbGlkIGVuY29kaW5ncyBhcmUgJ2JlY2gzMicsICdiZWNoMzJtJywgMCwgYW5kIDEuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBlbmNvZGVkIHN0cmluZ1xuICovXG52YXIgZW5jb2RlID0gZnVuY3Rpb24ocHJlZml4LCB2ZXJzaW9uLCBkYXRhLCBlbmNvZGluZykge1xuXHRpZiAodHlwZW9mIHByZWZpeCAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1ByZWZpeCBzaG91bGQgYmUgYSBzdHJpbmcnKTtcblx0fVxuXHRpZiAodHlwZW9mIHZlcnNpb24gIT09ICdudW1iZXInKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCd2ZXJzaW9uIHNob3VsZCBiZSBhIG51bWJlcicpO1xuXHR9XG4gIC8vIGNvbnZlcnQgc3RyaW5nIHRvIG51bWJlclxuICBpZiAoZW5jb2RpbmcgJiYgdHlwZW9mIGVuY29kaW5nID09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBlbmNvZGluZ3NbZW5jb2RpbmcudG9VcHBlckNhc2UoKV0gfHwgLTE7IC8vIGZhbGxiYWNrIHRvIC0xIHNvIGl0IHRocm93cyBpbnZhbGlkIGVuY29kaW5nIGJlbG93XG4gIH1cbiAgaWYgKGVuY29kaW5nICYmICEoZW5jb2RpbmcgPT0gZW5jb2RpbmdzLkJFQ0gzMiB8fCBlbmNvZGluZyA9PSBlbmNvZGluZ3MuQkVDSDMyTSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZW5jb2Rpbmcgc3BlY2lmaWVkJyk7XG4gIH1cbiAgXG4gIGxldCBiMzJWYXJpZXR5ID0gZW5jb2RpbmcgPT0gZW5jb2RpbmdzLkJFQ0gzMk0gPyBiZWNoMzIuYmVjaDMybSA6IGJlY2gzMi5iZWNoMzI7XG4gIGxldCB3b3JkcyA9IGIzMlZhcmlldHkudG9Xb3JkcyhkYXRhKTtcblxuICB3b3Jkcy51bnNoaWZ0KHZlcnNpb24pO1xuXHRyZXR1cm4gYjMyVmFyaWV0eS5lbmNvZGUocHJlZml4LCB3b3Jkcyk7XG59XG5cbmNvbnN0IGVuY29kaW5ncyA9IHtcbiAgQkVDSDMyOiAxLFxuICBCRUNIMzJNOiAyXG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBkZWNvZGU6IGRlY29kZSwgZW5jb2RlOiBlbmNvZGUsIGVuY29kaW5ncyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/encoding/bech32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js":
/*!***************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/encoding/bufferreader.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar BN = __webpack_require__(/*! ../crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\n\nvar BufferReader = function BufferReader(buf) {\n  if (!(this instanceof BufferReader)) {\n    return new BufferReader(buf);\n  }\n  if (_.isUndefined(buf)) {\n    return;\n  }\n  if (Buffer.isBuffer(buf)) {\n    this.set({\n      buf: buf\n    });\n  } else if (_.isString(buf)) {\n    this.set({\n      buf: Buffer.from(buf, 'hex'),\n    });\n  } else if (_.isObject(buf)) {\n    var obj = buf;\n    this.set(obj);\n  } else {\n    throw new TypeError('Unrecognized argument for BufferReader');\n  }\n};\n\nBufferReader.prototype.set = function(obj) {\n  this.buf = obj.buf || this.buf || undefined;\n  this.pos = obj.pos || this.pos || 0;\n  return this;\n};\n\nBufferReader.prototype.eof = function() {\n  if(this.buf) {\n    return this.pos >= this.buf.length;\n  } else {\n    return true;\n  }\n};\n\nBufferReader.prototype.finished = BufferReader.prototype.eof;\n\nBufferReader.prototype.read = function(len) {\n  $.checkArgument(!_.isUndefined(len), 'Must specify a length');\n  var buf = this.buf.slice(this.pos, this.pos + len);\n  this.pos = this.pos + len;\n  return buf;\n};\n\nBufferReader.prototype.readAll = function() {\n  var buf = this.buf.slice(this.pos, this.buf.length);\n  this.pos = this.buf.length;\n  return buf;\n};\n\nBufferReader.prototype.readUInt8 = function() {\n  var val = this.buf.readUInt8(this.pos);\n  this.pos = this.pos + 1;\n  return val;\n};\n\nBufferReader.prototype.readUInt16BE = function() {\n  var val = this.buf.readUInt16BE(this.pos);\n  this.pos = this.pos + 2;\n  return val;\n};\n\nBufferReader.prototype.readUInt16LE = function() {\n  var val = this.buf.readUInt16LE(this.pos);\n  this.pos = this.pos + 2;\n  return val;\n};\n\nBufferReader.prototype.readUInt32BE = function() {\n  var val = this.buf.readUInt32BE(this.pos);\n  this.pos = this.pos + 4;\n  return val;\n};\n\nBufferReader.prototype.readUInt32LE = function() {\n  var val = this.buf.readUInt32LE(this.pos);\n  this.pos = this.pos + 4;\n  return val;\n};\n\nBufferReader.prototype.readInt32LE = function() {\n  var val = this.buf.readInt32LE(this.pos);\n  this.pos = this.pos + 4;\n  return val;\n};\n\nBufferReader.prototype.readUInt64BEBN = function() {\n  var buf = this.buf.slice(this.pos, this.pos + 8);\n  var bn = BN.fromBuffer(buf);\n  this.pos = this.pos + 8;\n  return bn;\n};\n\nBufferReader.prototype.readUInt64LEBN = function() {\n  var second = this.buf.readUInt32LE(this.pos);\n  var first = this.buf.readUInt32LE(this.pos + 4);\n  var combined = (first * 0x100000000) + second;\n  // Instantiating an instance of BN with a number is faster than with an\n  // array or string. However, the maximum safe number for a double precision\n  // floating point is 2 ^ 52 - 1 (0x1fffffffffffff), thus we can safely use\n  // non-floating point numbers less than this amount (52 bits). And in the case\n  // that the number is larger, we can instatiate an instance of BN by passing\n  // an array from the buffer (slower) and specifying the endianness.\n  var bn;\n  if (combined <= 0x1fffffffffffff) {\n    bn = new BN(combined);\n  } else {\n    var data = Array.prototype.slice.call(this.buf, this.pos, this.pos + 8);\n    bn = new BN(data, 10, 'le');\n  }\n  this.pos = this.pos + 8;\n  return bn;\n};\n\nBufferReader.prototype.readVarintNum = function() {\n  var first = this.readUInt8();\n  switch (first) {\n    case 0xFD:\n      return this.readUInt16LE();\n    case 0xFE:\n      return this.readUInt32LE();\n    case 0xFF:\n      var bn = this.readUInt64LEBN();\n      var n = bn.toNumber();\n      if (n <= Math.pow(2, 53)) {\n        return n;\n      } else {\n        throw new Error('number too large to retain precision - use readVarintBN');\n      }\n      break;\n    default:\n      return first;\n  }\n};\n\n/**\n * reads a length prepended buffer\n */\nBufferReader.prototype.readVarLengthBuffer = function() {\n  var len = this.readVarintNum();\n  var buf = this.read(len);\n  $.checkState(buf.length === len, 'Invalid length while reading varlength buffer. ' +\n    'Expected to read: ' + len + ' and read ' + buf.length);\n  return buf;\n};\n\nBufferReader.prototype.readVarintBuf = function() {\n  var first = this.buf.readUInt8(this.pos);\n  switch (first) {\n    case 0xFD:\n      return this.read(1 + 2);\n    case 0xFE:\n      return this.read(1 + 4);\n    case 0xFF:\n      return this.read(1 + 8);\n    default:\n      return this.read(1);\n  }\n};\n\nBufferReader.prototype.readVarintBN = function() {\n  var first = this.readUInt8();\n  switch (first) {\n    case 0xFD:\n      return new BN(this.readUInt16LE());\n    case 0xFE:\n      return new BN(this.readUInt32LE());\n    case 0xFF:\n      return this.readUInt64LEBN();\n    default:\n      return new BN(first);\n  }\n};\n\nBufferReader.prototype.reverse = function() {\n  var buf = Buffer.alloc(this.buf.length);\n  for (var i = 0; i < buf.length; i++) {\n    buf[i] = this.buf[this.buf.length - 1 - i];\n  }\n  this.buf = buf;\n  return this;\n};\n\nBufferReader.prototype.readReverse = function(len) {\n  if (_.isUndefined(len)) {\n    len = this.buf.length;\n  }\n  var buf = this.buf.slice(this.pos, this.pos + len);\n  this.pos = this.pos + len;\n  return BufferUtil.reverse(buf);\n};\n\nmodule.exports = BufferReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js":
/*!***************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/encoding/bufferwriter.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar assert = __webpack_require__(/*! assert */ \"assert\");\n\nvar BufferWriter = function BufferWriter(obj) {\n  if (!(this instanceof BufferWriter))\n    return new BufferWriter(obj);\n  this.bufLen = 0;\n  if (obj)\n    this.set(obj);\n  else\n    this.bufs = [];\n};\n\nBufferWriter.prototype.set = function(obj) {\n  this.bufs = obj.bufs || this.bufs || [];\n  this.bufLen = this.bufs.reduce(function(prev, buf){ return prev + buf.length; }, 0);\n  return this;\n};\n\nBufferWriter.prototype.toBuffer = function() {\n  return this.concat();\n};\n\nBufferWriter.prototype.concat = function() {\n  return Buffer.concat(this.bufs, this.bufLen);\n};\n\nBufferWriter.prototype.write = function(buf) {\n  assert(bufferUtil.isBuffer(buf));\n  this.bufs.push(buf);\n  this.bufLen += buf.length;\n  return this;\n};\n\nBufferWriter.prototype.writeReverse = function(buf) {\n  assert(bufferUtil.isBuffer(buf));\n  this.bufs.push(bufferUtil.reverse(buf));\n  this.bufLen += buf.length;\n  return this;\n};\n\nBufferWriter.prototype.writeUInt8 = function(n) {\n  if (n < 0) {\n    n = n >>> 0; // Convert signed int to unsigned int\n  }\n  var buf = Buffer.alloc(1);\n  buf.writeUInt8(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt16BE = function(n) {\n  if (n < 0) {\n    n = n >>> 0; // Convert signed int to unsigned int\n  }\n  var buf = Buffer.alloc(2);\n  buf.writeUInt16BE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt16LE = function(n) {\n  if (n < 0) {\n    n = n >>> 0; // Convert signed int to unsigned int\n  }\n  var buf = Buffer.alloc(2);\n  buf.writeUInt16LE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt32BE = function(n) {\n  if (n < 0) {\n    n = n >>> 0; // Convert signed int to unsigned int\n  }\n  var buf = Buffer.alloc(4);\n  buf.writeUInt32BE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeInt32LE = function(n) {\n  var buf = Buffer.alloc(4);\n  buf.writeInt32LE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt32LE = function(n) {\n  if (n < 0) {\n    n = n >>> 0; // Convert signed int to unsigned int\n  }\n  var buf = Buffer.alloc(4);\n  buf.writeUInt32LE(n, 0);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt64BEBN = function(bn) {\n  var buf = bn.toBuffer({size: 8});\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeUInt64LEBN = function(bn) {\n  var buf = bn.toBuffer({size: 8});\n  this.writeReverse(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeVarintNum = function(n) {\n  var buf = BufferWriter.varintBufNum(n);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.prototype.writeVarintBN = function(bn) {\n  var buf = BufferWriter.varintBufBN(bn);\n  this.write(buf);\n  return this;\n};\n\nBufferWriter.varintBufNum = function(n) {\n  var buf = undefined;\n  if (n < 253) {\n    buf = Buffer.alloc(1);\n    buf.writeUInt8(n, 0);\n  } else if (n < 0x10000) {\n    buf = Buffer.alloc(1 + 2);\n    buf.writeUInt8(253, 0);\n    buf.writeUInt16LE(n, 1);\n  } else if (n < 0x100000000) {\n    buf = Buffer.alloc(1 + 4);\n    buf.writeUInt8(254, 0);\n    buf.writeUInt32LE(n, 1);\n  } else {\n    buf = Buffer.alloc(1 + 8);\n    buf.writeUInt8(255, 0);\n    buf.writeInt32LE(n & -1, 1);\n    buf.writeUInt32LE(Math.floor(n / 0x100000000), 5);\n  }\n  return buf;\n};\n\nBufferWriter.varintBufBN = function(bn) {\n  var buf = undefined;\n  var n = bn.toNumber();\n  if (n < 253) {\n    buf = Buffer.alloc(1);\n    buf.writeUInt8(n, 0);\n  } else if (n < 0x10000) {\n    buf = Buffer.alloc(1 + 2);\n    buf.writeUInt8(253, 0);\n    buf.writeUInt16LE(n, 1);\n  } else if (n < 0x100000000) {\n    buf = Buffer.alloc(1 + 4);\n    buf.writeUInt8(254, 0);\n    buf.writeUInt32LE(n, 1);\n  } else {\n    var bw = new BufferWriter();\n    bw.writeUInt8(255);\n    bw.writeUInt64LEBN(bn);\n    var buf = bw.concat();\n  }\n  return buf;\n};\n\nmodule.exports = BufferWriter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2VuY29kaW5nL2J1ZmZlcndyaXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpQkFBaUIsbUJBQU8sQ0FBQywyRUFBZ0I7QUFDekMsYUFBYSxtQkFBTyxDQUFDLHNCQUFROztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNEQUFzRCwyQkFBMkI7QUFDakY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLFFBQVE7QUFDakM7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLFFBQVE7QUFDakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvZW5jb2RpbmcvYnVmZmVyd3JpdGVyLmpzPzA2NTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwvYnVmZmVyJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5cbnZhciBCdWZmZXJXcml0ZXIgPSBmdW5jdGlvbiBCdWZmZXJXcml0ZXIob2JqKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXJXcml0ZXIpKVxuICAgIHJldHVybiBuZXcgQnVmZmVyV3JpdGVyKG9iaik7XG4gIHRoaXMuYnVmTGVuID0gMDtcbiAgaWYgKG9iailcbiAgICB0aGlzLnNldChvYmopO1xuICBlbHNlXG4gICAgdGhpcy5idWZzID0gW107XG59O1xuXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG9iaikge1xuICB0aGlzLmJ1ZnMgPSBvYmouYnVmcyB8fCB0aGlzLmJ1ZnMgfHwgW107XG4gIHRoaXMuYnVmTGVuID0gdGhpcy5idWZzLnJlZHVjZShmdW5jdGlvbihwcmV2LCBidWYpeyByZXR1cm4gcHJldiArIGJ1Zi5sZW5ndGg7IH0sIDApO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY29uY2F0KCk7XG59O1xuXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZnMsIHRoaXMuYnVmTGVuKTtcbn07XG5cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWYpIHtcbiAgYXNzZXJ0KGJ1ZmZlclV0aWwuaXNCdWZmZXIoYnVmKSk7XG4gIHRoaXMuYnVmcy5wdXNoKGJ1Zik7XG4gIHRoaXMuYnVmTGVuICs9IGJ1Zi5sZW5ndGg7XG4gIHJldHVybiB0aGlzO1xufTtcblxuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS53cml0ZVJldmVyc2UgPSBmdW5jdGlvbihidWYpIHtcbiAgYXNzZXJ0KGJ1ZmZlclV0aWwuaXNCdWZmZXIoYnVmKSk7XG4gIHRoaXMuYnVmcy5wdXNoKGJ1ZmZlclV0aWwucmV2ZXJzZShidWYpKTtcbiAgdGhpcy5idWZMZW4gKz0gYnVmLmxlbmd0aDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbihuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIG4gPSBuID4+PiAwOyAvLyBDb252ZXJ0IHNpZ25lZCBpbnQgdG8gdW5zaWduZWQgaW50XG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYygxKTtcbiAgYnVmLndyaXRlVUludDgobiwgMCk7XG4gIHRoaXMud3JpdGUoYnVmKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbihuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIG4gPSBuID4+PiAwOyAvLyBDb252ZXJ0IHNpZ25lZCBpbnQgdG8gdW5zaWduZWQgaW50XG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgYnVmLndyaXRlVUludDE2QkUobiwgMCk7XG4gIHRoaXMud3JpdGUoYnVmKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbihuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIG4gPSBuID4+PiAwOyAvLyBDb252ZXJ0IHNpZ25lZCBpbnQgdG8gdW5zaWduZWQgaW50XG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgYnVmLndyaXRlVUludDE2TEUobiwgMCk7XG4gIHRoaXMud3JpdGUoYnVmKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbihuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIG4gPSBuID4+PiAwOyAvLyBDb252ZXJ0IHNpZ25lZCBpbnQgdG8gdW5zaWduZWQgaW50XG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgYnVmLndyaXRlVUludDMyQkUobiwgMCk7XG4gIHRoaXMud3JpdGUoYnVmKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uKG4pIHtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgYnVmLndyaXRlSW50MzJMRShuLCAwKTtcbiAgdGhpcy53cml0ZShidWYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgbiA9IG4gPj4+IDA7IC8vIENvbnZlcnQgc2lnbmVkIGludCB0byB1bnNpZ25lZCBpbnRcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKDQpO1xuICBidWYud3JpdGVVSW50MzJMRShuLCAwKTtcbiAgdGhpcy53cml0ZShidWYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUud3JpdGVVSW50NjRCRUJOID0gZnVuY3Rpb24oYm4pIHtcbiAgdmFyIGJ1ZiA9IGJuLnRvQnVmZmVyKHtzaXplOiA4fSk7XG4gIHRoaXMud3JpdGUoYnVmKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLndyaXRlVUludDY0TEVCTiA9IGZ1bmN0aW9uKGJuKSB7XG4gIHZhciBidWYgPSBibi50b0J1ZmZlcih7c2l6ZTogOH0pO1xuICB0aGlzLndyaXRlUmV2ZXJzZShidWYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUud3JpdGVWYXJpbnROdW0gPSBmdW5jdGlvbihuKSB7XG4gIHZhciBidWYgPSBCdWZmZXJXcml0ZXIudmFyaW50QnVmTnVtKG4pO1xuICB0aGlzLndyaXRlKGJ1Zik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS53cml0ZVZhcmludEJOID0gZnVuY3Rpb24oYm4pIHtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlcldyaXRlci52YXJpbnRCdWZCTihibik7XG4gIHRoaXMud3JpdGUoYnVmKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWZmZXJXcml0ZXIudmFyaW50QnVmTnVtID0gZnVuY3Rpb24obikge1xuICB2YXIgYnVmID0gdW5kZWZpbmVkO1xuICBpZiAobiA8IDI1Mykge1xuICAgIGJ1ZiA9IEJ1ZmZlci5hbGxvYygxKTtcbiAgICBidWYud3JpdGVVSW50OChuLCAwKTtcbiAgfSBlbHNlIGlmIChuIDwgMHgxMDAwMCkge1xuICAgIGJ1ZiA9IEJ1ZmZlci5hbGxvYygxICsgMik7XG4gICAgYnVmLndyaXRlVUludDgoMjUzLCAwKTtcbiAgICBidWYud3JpdGVVSW50MTZMRShuLCAxKTtcbiAgfSBlbHNlIGlmIChuIDwgMHgxMDAwMDAwMDApIHtcbiAgICBidWYgPSBCdWZmZXIuYWxsb2MoMSArIDQpO1xuICAgIGJ1Zi53cml0ZVVJbnQ4KDI1NCwgMCk7XG4gICAgYnVmLndyaXRlVUludDMyTEUobiwgMSk7XG4gIH0gZWxzZSB7XG4gICAgYnVmID0gQnVmZmVyLmFsbG9jKDEgKyA4KTtcbiAgICBidWYud3JpdGVVSW50OCgyNTUsIDApO1xuICAgIGJ1Zi53cml0ZUludDMyTEUobiAmIC0xLCAxKTtcbiAgICBidWYud3JpdGVVSW50MzJMRShNYXRoLmZsb29yKG4gLyAweDEwMDAwMDAwMCksIDUpO1xuICB9XG4gIHJldHVybiBidWY7XG59O1xuXG5CdWZmZXJXcml0ZXIudmFyaW50QnVmQk4gPSBmdW5jdGlvbihibikge1xuICB2YXIgYnVmID0gdW5kZWZpbmVkO1xuICB2YXIgbiA9IGJuLnRvTnVtYmVyKCk7XG4gIGlmIChuIDwgMjUzKSB7XG4gICAgYnVmID0gQnVmZmVyLmFsbG9jKDEpO1xuICAgIGJ1Zi53cml0ZVVJbnQ4KG4sIDApO1xuICB9IGVsc2UgaWYgKG4gPCAweDEwMDAwKSB7XG4gICAgYnVmID0gQnVmZmVyLmFsbG9jKDEgKyAyKTtcbiAgICBidWYud3JpdGVVSW50OCgyNTMsIDApO1xuICAgIGJ1Zi53cml0ZVVJbnQxNkxFKG4sIDEpO1xuICB9IGVsc2UgaWYgKG4gPCAweDEwMDAwMDAwMCkge1xuICAgIGJ1ZiA9IEJ1ZmZlci5hbGxvYygxICsgNCk7XG4gICAgYnVmLndyaXRlVUludDgoMjU0LCAwKTtcbiAgICBidWYud3JpdGVVSW50MzJMRShuLCAxKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYncgPSBuZXcgQnVmZmVyV3JpdGVyKCk7XG4gICAgYncud3JpdGVVSW50OCgyNTUpO1xuICAgIGJ3LndyaXRlVUludDY0TEVCTihibik7XG4gICAgdmFyIGJ1ZiA9IGJ3LmNvbmNhdCgpO1xuICB9XG4gIHJldHVybiBidWY7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlcldyaXRlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/encoding/varint.js":
/*!*********************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/encoding/varint.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar BufferWriter = __webpack_require__(/*! ./bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar BufferReader = __webpack_require__(/*! ./bufferreader */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\");\nvar BN = __webpack_require__(/*! ../crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\n\nvar Varint = function Varint(buf) {\n  if (!(this instanceof Varint))\n    return new Varint(buf);\n  if (Buffer.isBuffer(buf)) {\n    this.buf = buf;\n  } else if (typeof buf === 'number') {\n    var num = buf;\n    this.fromNumber(num);\n  } else if (buf instanceof BN) {\n    var bn = buf;\n    this.fromBN(bn);\n  } else if (buf) {\n    var obj = buf;\n    this.set(obj);\n  }\n};\n\nVarint.prototype.set = function(obj) {\n  this.buf = obj.buf || this.buf;\n  return this;\n};\n\nVarint.prototype.fromString = function(str) {\n  this.set({\n    buf: Buffer.from(str, 'hex')\n  });\n  return this;\n};\n\nVarint.prototype.toString = function() {\n  return this.buf.toString('hex');\n};\n\nVarint.prototype.fromBuffer = function(buf) {\n  this.buf = buf;\n  return this;\n};\n\nVarint.prototype.fromBufferReader = function(br) {\n  this.buf = br.readVarintBuf();\n  return this;\n};\n\nVarint.prototype.fromBN = function(bn) {\n  this.buf = BufferWriter().writeVarintBN(bn).concat();\n  return this;\n};\n\nVarint.prototype.fromNumber = function(num) {\n  this.buf = BufferWriter().writeVarintNum(num).concat();\n  return this;\n};\n\nVarint.prototype.toBuffer = function() {\n  return this.buf;\n};\n\nVarint.prototype.toBN = function() {\n  return BufferReader(this.buf).readVarintBN();\n};\n\nVarint.prototype.toNumber = function() {\n  return BufferReader(this.buf).readVarintNum();\n};\n\nmodule.exports = Varint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2VuY29kaW5nL3ZhcmludC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixtQkFBbUIsbUJBQU8sQ0FBQyxxRkFBZ0I7QUFDM0MsbUJBQW1CLG1CQUFPLENBQUMscUZBQWdCO0FBQzNDLFNBQVMsbUJBQU8sQ0FBQyx1RUFBYzs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2VuY29kaW5nL3ZhcmludC5qcz8yYzAzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEJ1ZmZlcldyaXRlciA9IHJlcXVpcmUoJy4vYnVmZmVyd3JpdGVyJyk7XG52YXIgQnVmZmVyUmVhZGVyID0gcmVxdWlyZSgnLi9idWZmZXJyZWFkZXInKTtcbnZhciBCTiA9IHJlcXVpcmUoJy4uL2NyeXB0by9ibicpO1xuXG52YXIgVmFyaW50ID0gZnVuY3Rpb24gVmFyaW50KGJ1Zikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVmFyaW50KSlcbiAgICByZXR1cm4gbmV3IFZhcmludChidWYpO1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICB0aGlzLmJ1ZiA9IGJ1ZjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYnVmID09PSAnbnVtYmVyJykge1xuICAgIHZhciBudW0gPSBidWY7XG4gICAgdGhpcy5mcm9tTnVtYmVyKG51bSk7XG4gIH0gZWxzZSBpZiAoYnVmIGluc3RhbmNlb2YgQk4pIHtcbiAgICB2YXIgYm4gPSBidWY7XG4gICAgdGhpcy5mcm9tQk4oYm4pO1xuICB9IGVsc2UgaWYgKGJ1Zikge1xuICAgIHZhciBvYmogPSBidWY7XG4gICAgdGhpcy5zZXQob2JqKTtcbiAgfVxufTtcblxuVmFyaW50LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihvYmopIHtcbiAgdGhpcy5idWYgPSBvYmouYnVmIHx8IHRoaXMuYnVmO1xuICByZXR1cm4gdGhpcztcbn07XG5cblZhcmludC5wcm90b3R5cGUuZnJvbVN0cmluZyA9IGZ1bmN0aW9uKHN0cikge1xuICB0aGlzLnNldCh7XG4gICAgYnVmOiBCdWZmZXIuZnJvbShzdHIsICdoZXgnKVxuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5WYXJpbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmJ1Zi50b1N0cmluZygnaGV4Jyk7XG59O1xuXG5WYXJpbnQucHJvdG90eXBlLmZyb21CdWZmZXIgPSBmdW5jdGlvbihidWYpIHtcbiAgdGhpcy5idWYgPSBidWY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuVmFyaW50LnByb3RvdHlwZS5mcm9tQnVmZmVyUmVhZGVyID0gZnVuY3Rpb24oYnIpIHtcbiAgdGhpcy5idWYgPSBici5yZWFkVmFyaW50QnVmKCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuVmFyaW50LnByb3RvdHlwZS5mcm9tQk4gPSBmdW5jdGlvbihibikge1xuICB0aGlzLmJ1ZiA9IEJ1ZmZlcldyaXRlcigpLndyaXRlVmFyaW50Qk4oYm4pLmNvbmNhdCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblZhcmludC5wcm90b3R5cGUuZnJvbU51bWJlciA9IGZ1bmN0aW9uKG51bSkge1xuICB0aGlzLmJ1ZiA9IEJ1ZmZlcldyaXRlcigpLndyaXRlVmFyaW50TnVtKG51bSkuY29uY2F0KCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuVmFyaW50LnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5idWY7XG59O1xuXG5WYXJpbnQucHJvdG90eXBlLnRvQk4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEJ1ZmZlclJlYWRlcih0aGlzLmJ1ZikucmVhZFZhcmludEJOKCk7XG59O1xuXG5WYXJpbnQucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBCdWZmZXJSZWFkZXIodGhpcy5idWYpLnJlYWRWYXJpbnROdW0oKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVmFyaW50O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/encoding/varint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/errors/index.js":
/*!******************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/errors/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\nfunction format(message, args) {\n  return message\n    .replace('{0}', args[0])\n    .replace('{1}', args[1])\n    .replace('{2}', args[2]);\n}\nvar traverseNode = function(parent, errorDefinition) {\n  var NodeError = function() {\n    if (_.isString(errorDefinition.message)) {\n      this.message = format(errorDefinition.message, arguments);\n    } else if (_.isFunction(errorDefinition.message)) {\n      this.message = errorDefinition.message.apply(null, arguments);\n    } else {\n      throw new Error('Invalid error definition for ' + errorDefinition.name);\n    }\n    this.stack = this.message + '\\n' + (new Error()).stack;\n  };\n  NodeError.prototype = Object.create(parent.prototype);\n  NodeError.prototype.name = parent.prototype.name + errorDefinition.name;\n  parent[errorDefinition.name] = NodeError;\n  if (errorDefinition.errors) {\n    childDefinitions(NodeError, errorDefinition.errors);\n  }\n  return NodeError;\n};\n\n/* jshint latedef: false */\nvar childDefinitions = function(parent, childDefinitions) {\n  _.each(childDefinitions, function(childDefinition) {\n    traverseNode(parent, childDefinition);\n  });\n};\n/* jshint latedef: true */\n\nvar traverseRoot = function(parent, errorsDefinition) {\n  childDefinitions(parent, errorsDefinition);\n  return parent;\n};\n\n\nvar bitcore = {};\nbitcore.Error = function() {\n  this.message = 'Internal error';\n  this.stack = this.message + '\\n' + (new Error()).stack;\n};\nbitcore.Error.prototype = Object.create(Error.prototype);\nbitcore.Error.prototype.name = 'bitcore.Error';\n\n\nvar data = __webpack_require__(/*! ./spec */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/spec.js\");\ntraverseRoot(bitcore.Error, data);\n\nmodule.exports = bitcore.Error;\n\nmodule.exports.extend = function(spec) {\n  return traverseNode(bitcore.Error, spec);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2Vycm9ycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixRQUFRLG1CQUFPLENBQUMscURBQVE7O0FBRXhCO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsV0FBVyxtQkFBTyxDQUFDLG1FQUFRO0FBQzNCOztBQUVBOztBQUVBLHFCQUFxQjtBQUNyQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL2Vycm9ycy9pbmRleC5qcz84Mzc5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuZnVuY3Rpb24gZm9ybWF0KG1lc3NhZ2UsIGFyZ3MpIHtcbiAgcmV0dXJuIG1lc3NhZ2VcbiAgICAucmVwbGFjZSgnezB9JywgYXJnc1swXSlcbiAgICAucmVwbGFjZSgnezF9JywgYXJnc1sxXSlcbiAgICAucmVwbGFjZSgnezJ9JywgYXJnc1syXSk7XG59XG52YXIgdHJhdmVyc2VOb2RlID0gZnVuY3Rpb24ocGFyZW50LCBlcnJvckRlZmluaXRpb24pIHtcbiAgdmFyIE5vZGVFcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChfLmlzU3RyaW5nKGVycm9yRGVmaW5pdGlvbi5tZXNzYWdlKSkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gZm9ybWF0KGVycm9yRGVmaW5pdGlvbi5tZXNzYWdlLCBhcmd1bWVudHMpO1xuICAgIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKGVycm9yRGVmaW5pdGlvbi5tZXNzYWdlKSkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JEZWZpbml0aW9uLm1lc3NhZ2UuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVycm9yIGRlZmluaXRpb24gZm9yICcgKyBlcnJvckRlZmluaXRpb24ubmFtZSk7XG4gICAgfVxuICAgIHRoaXMuc3RhY2sgPSB0aGlzLm1lc3NhZ2UgKyAnXFxuJyArIChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH07XG4gIE5vZGVFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBOb2RlRXJyb3IucHJvdG90eXBlLm5hbWUgPSBwYXJlbnQucHJvdG90eXBlLm5hbWUgKyBlcnJvckRlZmluaXRpb24ubmFtZTtcbiAgcGFyZW50W2Vycm9yRGVmaW5pdGlvbi5uYW1lXSA9IE5vZGVFcnJvcjtcbiAgaWYgKGVycm9yRGVmaW5pdGlvbi5lcnJvcnMpIHtcbiAgICBjaGlsZERlZmluaXRpb25zKE5vZGVFcnJvciwgZXJyb3JEZWZpbml0aW9uLmVycm9ycyk7XG4gIH1cbiAgcmV0dXJuIE5vZGVFcnJvcjtcbn07XG5cbi8qIGpzaGludCBsYXRlZGVmOiBmYWxzZSAqL1xudmFyIGNoaWxkRGVmaW5pdGlvbnMgPSBmdW5jdGlvbihwYXJlbnQsIGNoaWxkRGVmaW5pdGlvbnMpIHtcbiAgXy5lYWNoKGNoaWxkRGVmaW5pdGlvbnMsIGZ1bmN0aW9uKGNoaWxkRGVmaW5pdGlvbikge1xuICAgIHRyYXZlcnNlTm9kZShwYXJlbnQsIGNoaWxkRGVmaW5pdGlvbik7XG4gIH0pO1xufTtcbi8qIGpzaGludCBsYXRlZGVmOiB0cnVlICovXG5cbnZhciB0cmF2ZXJzZVJvb3QgPSBmdW5jdGlvbihwYXJlbnQsIGVycm9yc0RlZmluaXRpb24pIHtcbiAgY2hpbGREZWZpbml0aW9ucyhwYXJlbnQsIGVycm9yc0RlZmluaXRpb24pO1xuICByZXR1cm4gcGFyZW50O1xufTtcblxuXG52YXIgYml0Y29yZSA9IHt9O1xuYml0Y29yZS5FcnJvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnSW50ZXJuYWwgZXJyb3InO1xuICB0aGlzLnN0YWNrID0gdGhpcy5tZXNzYWdlICsgJ1xcbicgKyAobmV3IEVycm9yKCkpLnN0YWNrO1xufTtcbmJpdGNvcmUuRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuYml0Y29yZS5FcnJvci5wcm90b3R5cGUubmFtZSA9ICdiaXRjb3JlLkVycm9yJztcblxuXG52YXIgZGF0YSA9IHJlcXVpcmUoJy4vc3BlYycpO1xudHJhdmVyc2VSb290KGJpdGNvcmUuRXJyb3IsIGRhdGEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpdGNvcmUuRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzLmV4dGVuZCA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgcmV0dXJuIHRyYXZlcnNlTm9kZShiaXRjb3JlLkVycm9yLCBzcGVjKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/errors/spec.js":
/*!*****************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/errors/spec.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar docsURL = 'http://bitcore.io/';\n\nmodule.exports = [{\n  name: 'InvalidB58Char',\n  message: 'Invalid Base58 character: {0} in {1}'\n}, {\n  name: 'InvalidB58Checksum',\n  message: 'Invalid Base58 checksum for {0}'\n}, {\n  name: 'InvalidNetwork',\n  message: 'Invalid version for network: got {0}'\n}, {\n  name: 'InvalidState',\n  message: 'Invalid state: {0}'\n}, {\n  name: 'NotImplemented',\n  message: 'Function {0} was not implemented yet'\n}, {\n  name: 'InvalidNetworkArgument',\n  message: 'Invalid network: must be \"livenet\" or \"testnet\", got {0}'\n}, {\n  name: 'InvalidArgument',\n  message: function() {\n    return 'Invalid Argument' + (arguments[0] ? (': ' + arguments[0]) : '') +\n      (arguments[1] ? (' Documentation: ' + docsURL + arguments[1]) : '');\n  }\n}, {\n  name: 'AbstractMethodInvoked',\n  message: 'Abstract Method Invocation: {0}'\n}, {\n  name: 'InvalidArgumentType',\n  message: function() {\n    return 'Invalid Argument for ' + arguments[2] + ', expected ' + arguments[1] + ' but got ' + typeof arguments[0];\n  }\n}, {\n  name: 'Unit',\n  message: 'Internal Error on Unit {0}',\n  errors: [{\n    'name': 'UnknownCode',\n    'message': 'Unrecognized unit code: {0}'\n  }, {\n    'name': 'InvalidRate',\n    'message': 'Invalid exchange rate: {0}'\n  }]\n}, {\n  name: 'MerkleBlock',\n  message: 'Internal Error on MerkleBlock {0}',\n  errors: [{\n    'name': 'InvalidMerkleTree',\n    'message': 'This MerkleBlock contain an invalid Merkle Tree'\n  }]\n}, {\n  name: 'Transaction',\n  message: 'Internal Error on Transaction {0}',\n  errors: [{\n    name: 'Input',\n    message: 'Internal Error on Input {0}',\n    errors: [{\n      name: 'MissingScript',\n      message: 'Need a script to create an input'\n    }, {\n      name: 'UnsupportedScript',\n      message: 'Unsupported input script type: {0}'\n    }, {\n      name: 'MissingPreviousOutput',\n      message: 'No previous output information.'\n    }, {\n      name: 'BlockHeightOutOfRange',\n      message: 'Block Height can only be between 0 and 65535'\n    } , {\n      name: 'LockTimeRange',\n      message: 'Seconds needs to be more that 0 and less that 33553920'\n    }\n    ]\n  }, {\n    name: 'NeedMoreInfo',\n    message: '{0}'\n  }, {\n    name: 'InvalidSorting',\n    message: 'The sorting function provided did not return the change output as one of the array elements'\n  }, {\n    name: 'InvalidOutputAmountSum',\n    message: '{0}'\n  }, {\n    name: 'MissingSignatures',\n    message: 'Some inputs have not been fully signed'\n  }, {\n    name: 'InvalidIndex',\n    message: 'Invalid index: {0} is not between 0, {1}'\n  }, {\n    name: 'UnableToVerifySignature',\n    message: 'Unable to verify signature: {0}'\n  }, {\n    name: 'DustOutputs',\n    message: 'Dust amount detected in one output'\n  }, {\n    name: 'InvalidSatoshis',\n    message: 'Output satoshis are invalid',\n  }, {\n    name: 'FeeError',\n    message: 'Internal Error on Fee {0}',\n    errors: [{\n      name: 'TooSmall',\n      message: 'Fee is too small: {0}',\n    }, {\n      name: 'TooLarge',\n      message: 'Fee is too large: {0}',\n    }, {\n      name: 'Different',\n      message: 'Unspent value is different from specified fee: {0}',\n    }]\n  }, {\n    name: 'ChangeAddressMissing',\n    message: 'Change address is missing'\n  }, {\n    name: 'BlockHeightTooHigh',\n    message: 'Block Height can be at most 2^32 -1'\n  }, {\n    name: 'NLockTimeOutOfRange',\n    message: 'Block Height can only be between 0 and 499 999 999'\n  }, {\n    name: 'LockTimeTooEarly',\n    message: 'Lock Time can\\'t be earlier than UNIX date 500 000 000'\n  }]\n}, {\n  name: 'Script',\n  message: 'Internal Error on Script {0}',\n  errors: [{\n    name: 'UnrecognizedAddress',\n    message: 'Expected argument {0} to be an address'\n  }, {\n    name: 'CantDeriveAddress',\n    message: 'Can\\'t derive address associated with script {0}, needs to be p2pkh in, p2pkh out, p2sh in, or p2sh out.'\n  }, {\n    name: 'InvalidBuffer',\n    message: 'Invalid script buffer: can\\'t parse valid script from given buffer {0}'\n  }]\n}, {\n  name: 'HDPrivateKey',\n  message: 'Internal Error on HDPrivateKey {0}',\n  errors: [{\n    name: 'InvalidDerivationArgument',\n    message: 'Invalid derivation argument {0}, expected string, or number and boolean'\n  }, {\n    name: 'InvalidEntropyArgument',\n    message: 'Invalid entropy: must be an hexa string or binary buffer, got {0}',\n    errors: [{\n      name: 'TooMuchEntropy',\n      message: 'Invalid entropy: more than 512 bits is non standard, got \"{0}\"'\n    }, {\n      name: 'NotEnoughEntropy',\n      message: 'Invalid entropy: at least 128 bits needed, got \"{0}\"'\n    }]\n  }, {\n    name: 'InvalidLength',\n    message: 'Invalid length for xprivkey string in {0}'\n  }, {\n    name: 'InvalidPath',\n    message: 'Invalid derivation path: {0}'\n  }, {\n    name: 'UnrecognizedArgument',\n    message: 'Invalid argument: creating a HDPrivateKey requires a string, buffer, json or object, got \"{0}\"'\n  }]\n}, {\n  name: 'HDPublicKey',\n  message: 'Internal Error on HDPublicKey {0}',\n  errors: [{\n    name: 'ArgumentIsPrivateExtended',\n    message: 'Argument is an extended private key: {0}'\n  }, {\n    name: 'InvalidDerivationArgument',\n    message: 'Invalid derivation argument: got {0}'\n  }, {\n    name: 'InvalidLength',\n    message: 'Invalid length for xpubkey: got \"{0}\"'\n  }, {\n    name: 'InvalidPath',\n    message: 'Invalid derivation path, it should look like: \"m/1/100\", got \"{0}\"'\n  }, {\n    name: 'InvalidIndexCantDeriveHardened',\n    message: 'Invalid argument: creating a hardened path requires an HDPrivateKey'\n  }, {\n    name: 'MustSupplyArgument',\n    message: 'Must supply an argument to create a HDPublicKey'\n  }, {\n    name: 'UnrecognizedArgument',\n    message: 'Invalid argument for creation, must be string, json, buffer, or object'\n  }]\n}];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/errors/spec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/hdprivatekey.js":
/*!******************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/hdprivatekey.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ./util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nvar BN = __webpack_require__(/*! ./crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar Base58 = __webpack_require__(/*! ./encoding/base58 */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/base58.js\");\nvar Base58Check = __webpack_require__(/*! ./encoding/base58check */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/base58check.js\");\nvar Hash = __webpack_require__(/*! ./crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar Network = __webpack_require__(/*! ./networks */ \"(ssr)/./node_modules/bitcore-lib/lib/networks.js\");\nvar Point = __webpack_require__(/*! ./crypto/point */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/point.js\");\nvar PrivateKey = __webpack_require__(/*! ./privatekey */ \"(ssr)/./node_modules/bitcore-lib/lib/privatekey.js\");\nvar Random = __webpack_require__(/*! ./crypto/random */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/random.js\");\n\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar hdErrors = errors.HDPrivateKey;\nvar BufferUtil = __webpack_require__(/*! ./util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar JSUtil = __webpack_require__(/*! ./util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\n\nvar MINIMUM_ENTROPY_BITS = 128;\nvar BITS_TO_BYTES = 1 / 8;\nvar MAXIMUM_ENTROPY_BITS = 512;\n\n\n/**\n * Represents an instance of an hierarchically derived private key.\n *\n * More info on https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n *\n * @constructor\n * @param {string|Buffer|Object} arg\n */\nfunction HDPrivateKey(arg) {\n  /* jshint maxcomplexity: 10 */\n  if (arg instanceof HDPrivateKey) {\n    return arg;\n  }\n  if (!(this instanceof HDPrivateKey)) {\n    return new HDPrivateKey(arg);\n  }\n  if (!arg) {\n    return this._generateRandomly();\n  }\n\n  if (Network.get(arg)) {\n    return this._generateRandomly(arg);\n  } else if (_.isString(arg) || BufferUtil.isBuffer(arg)) {\n    if (HDPrivateKey.isValidSerialized(arg)) {\n      this._buildFromSerialized(arg);\n    } else if (JSUtil.isValidJSON(arg)) {\n      this._buildFromJSON(arg);\n    } else if (BufferUtil.isBuffer(arg) && HDPrivateKey.isValidSerialized(arg.toString())) {\n      this._buildFromSerialized(arg.toString());\n    } else {\n      throw HDPrivateKey.getSerializedError(arg);\n    }\n  } else if (_.isObject(arg)) {\n    this._buildFromObject(arg);\n  } else {\n    throw new hdErrors.UnrecognizedArgument(arg);\n  }\n}\n\n/**\n * Verifies that a given path is valid.\n *\n * @param {string|number} arg\n * @param {boolean?} hardened\n * @return {boolean}\n */\nHDPrivateKey.isValidPath = function(arg, hardened) {\n  if (_.isString(arg)) {\n    var indexes = HDPrivateKey._getDerivationIndexes(arg);\n    return indexes !== null && _.every(indexes, HDPrivateKey.isValidPath);\n  }\n\n  if (_.isNumber(arg)) {\n    if (arg < HDPrivateKey.Hardened && hardened === true) {\n      arg += HDPrivateKey.Hardened;\n    }\n    return arg >= 0 && arg < HDPrivateKey.MaxIndex;\n  }\n\n  return false;\n};\n\n/**\n * Internal function that splits a string path into a derivation index array.\n * It will return null if the string path is malformed.\n * It does not validate if indexes are in bounds.\n *\n * @param {string} path\n * @return {Array}\n */\nHDPrivateKey._getDerivationIndexes = function(path) {\n  var steps = path.split('/');\n\n  // Special cases:\n  if (_.includes(HDPrivateKey.RootElementAlias, path)) {\n    return [];\n  }\n\n  if (!_.includes(HDPrivateKey.RootElementAlias, steps[0])) {\n    return null;\n  }\n\n  var indexes = steps.slice(1).map(function(step) {\n    var isHardened = step.slice(-1) === '\\'';\n    if (isHardened) {\n      step = step.slice(0, -1);\n    }\n    if (!step || step[0] === '-') {\n      return NaN;\n    }\n    var index = +step; // cast to number\n    if (isHardened) {\n      index += HDPrivateKey.Hardened;\n    }\n\n    return index;\n  });\n\n  return _.some(indexes, isNaN) ? null : indexes;\n};\n\n/**\n * WARNING: This method is deprecated. Use deriveChild or deriveNonCompliantChild instead. This is not BIP32 compliant\n *\n *\n * Get a derived child based on a string or number.\n *\n * If the first argument is a string, it's parsed as the full path of\n * derivation. Valid values for this argument include \"m\" (which returns the\n * same private key), \"m/0/1/40/2'/1000\", where the ' quote means a hardened\n * derivation.\n *\n * If the first argument is a number, the child with that index will be\n * derived. If the second argument is truthy, the hardened version will be\n * derived. See the example usage for clarification.\n *\n * @example\n * ```javascript\n * var parent = new HDPrivateKey('xprv...');\n * var child_0_1_2h = parent.derive(0).derive(1).derive(2, true);\n * var copy_of_child_0_1_2h = parent.derive(\"m/0/1/2'\");\n * assert(child_0_1_2h.xprivkey === copy_of_child_0_1_2h);\n * ```\n *\n * @param {string|number} arg\n * @param {boolean?} hardened\n */\nHDPrivateKey.prototype.derive = function(arg, hardened) {\n  return this.deriveNonCompliantChild(arg, hardened);\n};\n\n/**\n * WARNING: This method will not be officially supported until v1.0.0.\n *\n *\n * Get a derived child based on a string or number.\n *\n * If the first argument is a string, it's parsed as the full path of\n * derivation. Valid values for this argument include \"m\" (which returns the\n * same private key), \"m/0/1/40/2'/1000\", where the ' quote means a hardened\n * derivation.\n *\n * If the first argument is a number, the child with that index will be\n * derived. If the second argument is truthy, the hardened version will be\n * derived. See the example usage for clarification.\n *\n * WARNING: The `nonCompliant` option should NOT be used, except for older implementation\n * that used a derivation strategy that used a non-zero padded private key.\n *\n * @example\n * ```javascript\n * var parent = new HDPrivateKey('xprv...');\n * var child_0_1_2h = parent.deriveChild(0).deriveChild(1).deriveChild(2, true);\n * var copy_of_child_0_1_2h = parent.deriveChild(\"m/0/1/2'\");\n * assert(child_0_1_2h.xprivkey === copy_of_child_0_1_2h);\n * ```\n *\n * @param {string|number} arg\n * @param {boolean?} hardened\n */\nHDPrivateKey.prototype.deriveChild = function(arg, hardened) {\n  if (_.isNumber(arg)) {\n    return this._deriveWithNumber(arg, hardened);\n  } else if (_.isString(arg)) {\n    return this._deriveFromString(arg);\n  } else {\n    throw new hdErrors.InvalidDerivationArgument(arg);\n  }\n};\n\n/**\n * WARNING: This method will not be officially supported until v1.0.0\n *\n *\n * WARNING: If this is a new implementation you should NOT use this method, you should be using\n * `derive` instead.\n *\n * This method is explicitly for use and compatibility with an implementation that\n * was not compliant with BIP32 regarding the derivation algorithm. The private key\n * must be 32 bytes hashing, and this implementation will use the non-zero padded\n * serialization of a private key, such that it's still possible to derive the privateKey\n * to recover those funds.\n *\n * @param {string|number} arg\n * @param {boolean?} hardened\n */\nHDPrivateKey.prototype.deriveNonCompliantChild = function(arg, hardened) {\n  if (_.isNumber(arg)) {\n    return this._deriveWithNumber(arg, hardened, true);\n  } else if (_.isString(arg)) {\n    return this._deriveFromString(arg, true);\n  } else {\n    throw new hdErrors.InvalidDerivationArgument(arg);\n  }\n};\n\nHDPrivateKey.prototype._deriveWithNumber = function(index, hardened, nonCompliant) {\n  /* jshint maxstatements: 20 */\n  /* jshint maxcomplexity: 10 */\n  if (!HDPrivateKey.isValidPath(index, hardened)) {\n    throw new hdErrors.InvalidPath(index);\n  }\n\n  hardened = index >= HDPrivateKey.Hardened ? true : hardened;\n  if (index < HDPrivateKey.Hardened && hardened === true) {\n    index += HDPrivateKey.Hardened;\n  }\n\n  var indexBuffer = BufferUtil.integerAsBuffer(index);\n  var data;\n  if (hardened && nonCompliant) {\n    // The private key serialization in this case will not be exactly 32 bytes and can be\n    // any value less, and the value is not zero-padded.\n    var nonZeroPadded = this.privateKey.bn.toBuffer();\n    data = BufferUtil.concat([Buffer.from([0]), nonZeroPadded, indexBuffer]);\n  } else if (hardened) {\n    // This will use a 32 byte zero padded serialization of the private key\n    var privateKeyBuffer = this.privateKey.bn.toBuffer({size: 32});\n    assert(privateKeyBuffer.length === 32, 'length of private key buffer is expected to be 32 bytes');\n    data = BufferUtil.concat([Buffer.from([0]), privateKeyBuffer, indexBuffer]);\n  } else {\n    data = BufferUtil.concat([this.publicKey.toBuffer(), indexBuffer]);\n  }\n  var hash = Hash.sha512hmac(data, this._buffers.chainCode);\n  var leftPart = BN.fromBuffer(hash.slice(0, 32), {\n    size: 32\n  });\n  var chainCode = hash.slice(32, 64);\n\n  var privateKey = leftPart.add(this.privateKey.toBigNumber()).umod(Point.getN()).toBuffer({\n    size: 32\n  });\n\n  if (!PrivateKey.isValid(privateKey)) {\n    // Index at this point is already hardened, we can pass null as the hardened arg\n    return this._deriveWithNumber(index + 1, null, nonCompliant);\n  }\n\n  var derived = new HDPrivateKey({\n    network: this.network,\n    depth: this.depth + 1,\n    parentFingerPrint: this.fingerPrint,\n    childIndex: index,\n    chainCode: chainCode,\n    privateKey: privateKey\n  });\n\n  return derived;\n};\n\nHDPrivateKey.prototype._deriveFromString = function(path, nonCompliant) {\n  if (!HDPrivateKey.isValidPath(path)) {\n    throw new hdErrors.InvalidPath(path);\n  }\n\n  var indexes = HDPrivateKey._getDerivationIndexes(path);\n  var derived = indexes.reduce(function(prev, index) {\n    return prev._deriveWithNumber(index, null, nonCompliant);\n  }, this);\n\n  return derived;\n};\n\n/**\n * Verifies that a given serialized private key in base58 with checksum format\n * is valid.\n *\n * @param {string|Buffer} data - the serialized private key\n * @param {string|Network=} network - optional, if present, checks that the\n *     network provided matches the network serialized.\n * @return {boolean}\n */\nHDPrivateKey.isValidSerialized = function(data, network) {\n  return !HDPrivateKey.getSerializedError(data, network);\n};\n\n/**\n * Checks what's the error that causes the validation of a serialized private key\n * in base58 with checksum to fail.\n *\n * @param {string|Buffer} data - the serialized private key\n * @param {string|Network=} network - optional, if present, checks that the\n *     network provided matches the network serialized.\n * @return {errors.InvalidArgument|null}\n */\nHDPrivateKey.getSerializedError = function(data, network) {\n  /* jshint maxcomplexity: 10 */\n  if (!(_.isString(data) || BufferUtil.isBuffer(data))) {\n    return new hdErrors.UnrecognizedArgument('Expected string or buffer');\n  }\n  if (!Base58.validCharacters(data)) {\n    return new errors.InvalidB58Char('(unknown)', data);\n  }\n  try {\n    data = Base58Check.decode(data);\n  } catch (e) {\n    return new errors.InvalidB58Checksum(data);\n  }\n  if (data.length !== HDPrivateKey.DataLength) {\n    return new hdErrors.InvalidLength(data);\n  }\n  if (!_.isUndefined(network)) {\n    var error = HDPrivateKey._validateNetwork(data, network);\n    if (error) {\n      return error;\n    }\n  }\n  return null;\n};\n\nHDPrivateKey._validateNetwork = function(data, networkArg) {\n  var network = Network.get(networkArg);\n  if (!network) {\n    return new errors.InvalidNetworkArgument(networkArg);\n  }\n  var version = data.slice(0, 4);\n  if (BufferUtil.integerFromBuffer(version) !== network.xprivkey) {\n    return new errors.InvalidNetwork(version);\n  }\n  return null;\n};\n\nHDPrivateKey.fromString = function(arg) {\n  $.checkArgument(_.isString(arg), 'No valid string was provided');\n  return new HDPrivateKey(arg);\n};\n\nHDPrivateKey.fromObject = function(arg) {\n  $.checkArgument(_.isObject(arg), 'No valid argument was provided');\n  return new HDPrivateKey(arg);\n};\n\nHDPrivateKey.prototype._buildFromJSON = function(arg) {\n  return this._buildFromObject(JSON.parse(arg));\n};\n\nHDPrivateKey.prototype._buildFromObject = function(arg) {\n  /* jshint maxcomplexity: 12 */\n  // TODO: Type validation\n  var buffers = {\n    version: arg.network ? BufferUtil.integerAsBuffer(Network.get(arg.network).xprivkey) : arg.version,\n    depth: _.isNumber(arg.depth) ? BufferUtil.integerAsSingleByteBuffer(arg.depth) : arg.depth,\n    parentFingerPrint: _.isNumber(arg.parentFingerPrint) ? BufferUtil.integerAsBuffer(arg.parentFingerPrint) : arg.parentFingerPrint,\n    childIndex: _.isNumber(arg.childIndex) ? BufferUtil.integerAsBuffer(arg.childIndex) : arg.childIndex,\n    chainCode: _.isString(arg.chainCode) ? Buffer.from(arg.chainCode,'hex') : arg.chainCode,\n    privateKey: (_.isString(arg.privateKey) && JSUtil.isHexa(arg.privateKey)) ? Buffer.from(arg.privateKey,'hex') : arg.privateKey,\n    checksum: arg.checksum ? (arg.checksum.length ? arg.checksum : BufferUtil.integerAsBuffer(arg.checksum)) : undefined\n  };\n  return this._buildFromBuffers(buffers);\n};\n\nHDPrivateKey.prototype._buildFromSerialized = function(arg) {\n  var decoded = Base58Check.decode(arg);\n  var buffers = {\n    version: decoded.slice(HDPrivateKey.VersionStart, HDPrivateKey.VersionEnd),\n    depth: decoded.slice(HDPrivateKey.DepthStart, HDPrivateKey.DepthEnd),\n    parentFingerPrint: decoded.slice(HDPrivateKey.ParentFingerPrintStart,\n      HDPrivateKey.ParentFingerPrintEnd),\n    childIndex: decoded.slice(HDPrivateKey.ChildIndexStart, HDPrivateKey.ChildIndexEnd),\n    chainCode: decoded.slice(HDPrivateKey.ChainCodeStart, HDPrivateKey.ChainCodeEnd),\n    privateKey: decoded.slice(HDPrivateKey.PrivateKeyStart, HDPrivateKey.PrivateKeyEnd),\n    checksum: decoded.slice(HDPrivateKey.ChecksumStart, HDPrivateKey.ChecksumEnd),\n    xprivkey: arg\n  };\n  return this._buildFromBuffers(buffers);\n};\n\nHDPrivateKey.prototype._generateRandomly = function(network) {\n  return HDPrivateKey.fromSeed(Random.getRandomBuffer(64), network);\n};\n\n/**\n * Generate a private key from a seed, as described in BIP32\n *\n * @param {string|Buffer} hexa\n * @param {*} network\n * @return HDPrivateKey\n */\nHDPrivateKey.fromSeed = function(hexa, network) {\n  /* jshint maxcomplexity: 8 */\n  if (JSUtil.isHexaString(hexa)) {\n    hexa = Buffer.from(hexa, 'hex');\n  }\n  if (!Buffer.isBuffer(hexa)) {\n    throw new hdErrors.InvalidEntropyArgument(hexa);\n  }\n  if (hexa.length < MINIMUM_ENTROPY_BITS * BITS_TO_BYTES) {\n    throw new hdErrors.InvalidEntropyArgument.NotEnoughEntropy(hexa);\n  }\n  if (hexa.length > MAXIMUM_ENTROPY_BITS * BITS_TO_BYTES) {\n    throw new hdErrors.InvalidEntropyArgument.TooMuchEntropy(hexa);\n  }\n  var hash = Hash.sha512hmac(hexa, Buffer.from('Bitcoin seed'));\n\n  return new HDPrivateKey({\n    network: Network.get(network) || Network.defaultNetwork,\n    depth: 0,\n    parentFingerPrint: 0,\n    childIndex: 0,\n    privateKey: hash.slice(0, 32),\n    chainCode: hash.slice(32, 64)\n  });\n};\n\n\n\nHDPrivateKey.prototype._calcHDPublicKey = function() {\n  if (!this._hdPublicKey) {\n    var HDPublicKey = __webpack_require__(/*! ./hdpublickey */ \"(ssr)/./node_modules/bitcore-lib/lib/hdpublickey.js\");\n    this._hdPublicKey = new HDPublicKey(this);\n  }\n};\n\n/**\n * Receives a object with buffers in all the properties and populates the\n * internal structure\n *\n * @param {Object} arg\n * @param {buffer.Buffer} arg.version\n * @param {buffer.Buffer} arg.depth\n * @param {buffer.Buffer} arg.parentFingerPrint\n * @param {buffer.Buffer} arg.childIndex\n * @param {buffer.Buffer} arg.chainCode\n * @param {buffer.Buffer} arg.privateKey\n * @param {buffer.Buffer} arg.checksum\n * @param {string=} arg.xprivkey - if set, don't recalculate the base58\n *      representation\n * @return {HDPrivateKey} this\n */\nHDPrivateKey.prototype._buildFromBuffers = function(arg) {\n  /* jshint maxcomplexity: 8 */\n  /* jshint maxstatements: 20 */\n\n  HDPrivateKey._validateBufferArguments(arg);\n\n  JSUtil.defineImmutable(this, {\n    _buffers: arg\n  });\n\n  var sequence = [\n    arg.version, arg.depth, arg.parentFingerPrint, arg.childIndex, arg.chainCode,\n    BufferUtil.emptyBuffer(1), arg.privateKey\n  ];\n  var concat = buffer.Buffer.concat(sequence);\n  if (!arg.checksum || !arg.checksum.length) {\n    arg.checksum = Base58Check.checksum(concat);\n  } else {\n    if (arg.checksum.toString() !== Base58Check.checksum(concat).toString()) {\n      throw new errors.InvalidB58Checksum(concat);\n    }\n  }\n\n  var network = Network.get(BufferUtil.integerFromBuffer(arg.version));\n  var xprivkey;\n  xprivkey = Base58Check.encode(buffer.Buffer.concat(sequence));\n  arg.xprivkey = Buffer.from(xprivkey);\n\n  var privateKey = new PrivateKey(BN.fromBuffer(arg.privateKey), network);\n  var publicKey = privateKey.toPublicKey();\n  var size = HDPrivateKey.ParentFingerPrintSize;\n  var fingerPrint = Hash.sha256ripemd160(publicKey.toBuffer()).slice(0, size);\n\n  JSUtil.defineImmutable(this, {\n    xprivkey: xprivkey,\n    network: network,\n    depth: BufferUtil.integerFromSingleByteBuffer(arg.depth),\n    privateKey: privateKey,\n    publicKey: publicKey,\n    fingerPrint: fingerPrint\n  });\n\n  this._hdPublicKey = null;\n\n  Object.defineProperty(this, 'hdPublicKey', {\n    configurable: false,\n    enumerable: true,\n    get: function() {\n      this._calcHDPublicKey();\n      return this._hdPublicKey;\n    }\n  });\n  Object.defineProperty(this, 'xpubkey', {\n    configurable: false,\n    enumerable: true,\n    get: function() {\n      this._calcHDPublicKey();\n      return this._hdPublicKey.xpubkey;\n    }\n  });\n  return this;\n};\n\nHDPrivateKey._validateBufferArguments = function(arg) {\n  var checkBuffer = function(name, size) {\n    var buff = arg[name];\n    assert(BufferUtil.isBuffer(buff), name + ' argument is not a buffer');\n    assert(\n      buff.length === size,\n      name + ' has not the expected size: found ' + buff.length + ', expected ' + size\n    );\n  };\n  checkBuffer('version', HDPrivateKey.VersionSize);\n  checkBuffer('depth', HDPrivateKey.DepthSize);\n  checkBuffer('parentFingerPrint', HDPrivateKey.ParentFingerPrintSize);\n  checkBuffer('childIndex', HDPrivateKey.ChildIndexSize);\n  checkBuffer('chainCode', HDPrivateKey.ChainCodeSize);\n  checkBuffer('privateKey', HDPrivateKey.PrivateKeySize);\n  if (arg.checksum && arg.checksum.length) {\n    checkBuffer('checksum', HDPrivateKey.CheckSumSize);\n  }\n};\n\n/**\n * Returns the string representation of this private key (a string starting\n * with \"xprv...\"\n *\n * @return string\n */\nHDPrivateKey.prototype.toString = function() {\n  return this.xprivkey;\n};\n\n/**\n * Returns the console representation of this extended private key.\n * @return string\n */\nHDPrivateKey.prototype.inspect = function() {\n  return '<HDPrivateKey: ' + this.xprivkey + '>';\n};\n\n/**\n * Returns a plain object with a representation of this private key.\n *\n * Fields include:<ul>\n * <li> network: either 'livenet' or 'testnet'\n * <li> depth: a number ranging from 0 to 255\n * <li> fingerPrint: a number ranging from 0 to 2^32-1, taken from the hash of the\n * <li>     associated public key\n * <li> parentFingerPrint: a number ranging from 0 to 2^32-1, taken from the hash\n * <li>     of this parent's associated public key or zero.\n * <li> childIndex: the index from which this child was derived (or zero)\n * <li> chainCode: an hexa string representing a number used in the derivation\n * <li> privateKey: the private key associated, in hexa representation\n * <li> xprivkey: the representation of this extended private key in checksum\n * <li>     base58 format\n * <li> checksum: the base58 checksum of xprivkey\n * </ul>\n *  @return {Object}\n */\nHDPrivateKey.prototype.toObject = HDPrivateKey.prototype.toJSON = function toObject() {\n  return {\n    network: Network.get(BufferUtil.integerFromBuffer(this._buffers.version), 'xprivkey').name,\n    depth: BufferUtil.integerFromSingleByteBuffer(this._buffers.depth),\n    fingerPrint: BufferUtil.integerFromBuffer(this.fingerPrint),\n    parentFingerPrint: BufferUtil.integerFromBuffer(this._buffers.parentFingerPrint),\n    childIndex: BufferUtil.integerFromBuffer(this._buffers.childIndex),\n    chainCode: BufferUtil.bufferToHex(this._buffers.chainCode),\n    privateKey: this.privateKey.toBuffer().toString('hex'),\n    checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),\n    xprivkey: this.xprivkey\n  };\n};\n\n/**\n * Build a HDPrivateKey from a buffer\n *\n * @param {Buffer} arg\n * @return {HDPrivateKey}\n */\nHDPrivateKey.fromBuffer = function(arg) {\n  return new HDPrivateKey(arg.toString());\n};\n\n/**\n * Returns a buffer representation of the HDPrivateKey\n *\n * @return {string}\n */\nHDPrivateKey.prototype.toBuffer = function() {\n  return BufferUtil.copy(this._buffers.xprivkey);\n};\n\nHDPrivateKey.DefaultDepth = 0;\nHDPrivateKey.DefaultFingerprint = 0;\nHDPrivateKey.DefaultChildIndex = 0;\nHDPrivateKey.Hardened = 0x80000000;\nHDPrivateKey.MaxIndex = 2 * HDPrivateKey.Hardened;\n\nHDPrivateKey.RootElementAlias = ['m', 'M', 'm\\'', 'M\\''];\n\nHDPrivateKey.VersionSize = 4;\nHDPrivateKey.DepthSize = 1;\nHDPrivateKey.ParentFingerPrintSize = 4;\nHDPrivateKey.ChildIndexSize = 4;\nHDPrivateKey.ChainCodeSize = 32;\nHDPrivateKey.PrivateKeySize = 32;\nHDPrivateKey.CheckSumSize = 4;\n\nHDPrivateKey.DataLength = 78;\nHDPrivateKey.SerializedByteSize = 82;\n\nHDPrivateKey.VersionStart = 0;\nHDPrivateKey.VersionEnd = HDPrivateKey.VersionStart + HDPrivateKey.VersionSize;\nHDPrivateKey.DepthStart = HDPrivateKey.VersionEnd;\nHDPrivateKey.DepthEnd = HDPrivateKey.DepthStart + HDPrivateKey.DepthSize;\nHDPrivateKey.ParentFingerPrintStart = HDPrivateKey.DepthEnd;\nHDPrivateKey.ParentFingerPrintEnd = HDPrivateKey.ParentFingerPrintStart + HDPrivateKey.ParentFingerPrintSize;\nHDPrivateKey.ChildIndexStart = HDPrivateKey.ParentFingerPrintEnd;\nHDPrivateKey.ChildIndexEnd = HDPrivateKey.ChildIndexStart + HDPrivateKey.ChildIndexSize;\nHDPrivateKey.ChainCodeStart = HDPrivateKey.ChildIndexEnd;\nHDPrivateKey.ChainCodeEnd = HDPrivateKey.ChainCodeStart + HDPrivateKey.ChainCodeSize;\nHDPrivateKey.PrivateKeyStart = HDPrivateKey.ChainCodeEnd + 1;\nHDPrivateKey.PrivateKeyEnd = HDPrivateKey.PrivateKeyStart + HDPrivateKey.PrivateKeySize;\nHDPrivateKey.ChecksumStart = HDPrivateKey.PrivateKeyEnd;\nHDPrivateKey.ChecksumEnd = HDPrivateKey.ChecksumStart + HDPrivateKey.CheckSumSize;\n\nassert(HDPrivateKey.ChecksumEnd === HDPrivateKey.SerializedByteSize);\n\nmodule.exports = HDPrivateKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/hdprivatekey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/hdpublickey.js":
/*!*****************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/hdpublickey.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ./util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nvar BN = __webpack_require__(/*! ./crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar Base58 = __webpack_require__(/*! ./encoding/base58 */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/base58.js\");\nvar Base58Check = __webpack_require__(/*! ./encoding/base58check */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/base58check.js\");\nvar Hash = __webpack_require__(/*! ./crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar HDPrivateKey = __webpack_require__(/*! ./hdprivatekey */ \"(ssr)/./node_modules/bitcore-lib/lib/hdprivatekey.js\");\nvar Network = __webpack_require__(/*! ./networks */ \"(ssr)/./node_modules/bitcore-lib/lib/networks.js\");\nvar Point = __webpack_require__(/*! ./crypto/point */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/point.js\");\nvar PublicKey = __webpack_require__(/*! ./publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\n\nvar bitcoreErrors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar errors = bitcoreErrors;\nvar hdErrors = bitcoreErrors.HDPublicKey;\nvar assert = __webpack_require__(/*! assert */ \"assert\");\n\nvar JSUtil = __webpack_require__(/*! ./util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar BufferUtil = __webpack_require__(/*! ./util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\n\n/**\n * The representation of an hierarchically derived public key.\n *\n * See https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n *\n * @constructor\n * @param {Object|string|Buffer} arg\n */\nfunction HDPublicKey(arg) {\n  /* jshint maxcomplexity: 12 */\n  /* jshint maxstatements: 20 */\n  if (arg instanceof HDPublicKey) {\n    return arg;\n  }\n  if (!(this instanceof HDPublicKey)) {\n    return new HDPublicKey(arg);\n  }\n  if (arg) {\n    if (_.isString(arg) || BufferUtil.isBuffer(arg)) {\n      var error = HDPublicKey.getSerializedError(arg);\n      if (!error) {\n        return this._buildFromSerialized(arg);\n      } else if (BufferUtil.isBuffer(arg) && !HDPublicKey.getSerializedError(arg.toString())) {\n        return this._buildFromSerialized(arg.toString());\n      } else {\n        if (error instanceof hdErrors.ArgumentIsPrivateExtended) {\n          return new HDPrivateKey(arg).hdPublicKey;\n        }\n        throw error;\n      }\n    } else {\n      if (_.isObject(arg)) {\n        if (arg instanceof HDPrivateKey) {\n          return this._buildFromPrivate(arg);\n        } else {\n          return this._buildFromObject(arg);\n        }\n      } else {\n        throw new hdErrors.UnrecognizedArgument(arg);\n      }\n    }\n  } else {\n    throw new hdErrors.MustSupplyArgument();\n  }\n}\n\n/**\n * Verifies that a given path is valid.\n *\n * @param {string|number} arg\n * @return {boolean}\n */\nHDPublicKey.isValidPath = function(arg) {\n  if (_.isString(arg)) {\n    var indexes = HDPrivateKey._getDerivationIndexes(arg);\n    return indexes !== null && _.every(indexes, HDPublicKey.isValidPath);\n  }\n\n  if (_.isNumber(arg)) {\n    return arg >= 0 && arg < HDPublicKey.Hardened;\n  }\n\n  return false;\n};\n\n/**\n * WARNING: This method is deprecated. Use deriveChild instead.\n *\n *\n * Get a derivated child based on a string or number.\n *\n * If the first argument is a string, it's parsed as the full path of\n * derivation. Valid values for this argument include \"m\" (which returns the\n * same public key), \"m/0/1/40/2/1000\".\n *\n * Note that hardened keys can't be derived from a public extended key.\n *\n * If the first argument is a number, the child with that index will be\n * derived. See the example usage for clarification.\n *\n * @example\n * ```javascript\n * var parent = new HDPublicKey('xpub...');\n * var child_0_1_2 = parent.derive(0).derive(1).derive(2);\n * var copy_of_child_0_1_2 = parent.derive(\"m/0/1/2\");\n * assert(child_0_1_2.xprivkey === copy_of_child_0_1_2);\n * ```\n *\n * @param {string|number} arg\n */\nHDPublicKey.prototype.derive = function(arg, hardened) {\n  return this.deriveChild(arg, hardened);\n};\n\n/**\n * WARNING: This method will not be officially supported until v1.0.0.\n *\n *\n * Get a derivated child based on a string or number.\n *\n * If the first argument is a string, it's parsed as the full path of\n * derivation. Valid values for this argument include \"m\" (which returns the\n * same public key), \"m/0/1/40/2/1000\".\n *\n * Note that hardened keys can't be derived from a public extended key.\n *\n * If the first argument is a number, the child with that index will be\n * derived. See the example usage for clarification.\n *\n * @example\n * ```javascript\n * var parent = new HDPublicKey('xpub...');\n * var child_0_1_2 = parent.deriveChild(0).deriveChild(1).deriveChild(2);\n * var copy_of_child_0_1_2 = parent.deriveChild(\"m/0/1/2\");\n * assert(child_0_1_2.xprivkey === copy_of_child_0_1_2);\n * ```\n *\n * @param {string|number} arg\n */\nHDPublicKey.prototype.deriveChild = function(arg, hardened) {\n  if (_.isNumber(arg)) {\n    return this._deriveWithNumber(arg, hardened);\n  } else if (_.isString(arg)) {\n    return this._deriveFromString(arg);\n  } else {\n    throw new hdErrors.InvalidDerivationArgument(arg);\n  }\n};\n\nHDPublicKey.prototype._deriveWithNumber = function(index, hardened) {\n  if (index >= HDPublicKey.Hardened || hardened) {\n    throw new hdErrors.InvalidIndexCantDeriveHardened();\n  }\n  if (index < 0) {\n    throw new hdErrors.InvalidPath(index);\n  }\n\n  var indexBuffer = BufferUtil.integerAsBuffer(index);\n  var data = BufferUtil.concat([this.publicKey.toBuffer(), indexBuffer]);\n  var hash = Hash.sha512hmac(data, this._buffers.chainCode);\n  var leftPart = BN.fromBuffer(hash.slice(0, 32), {size: 32});\n  var chainCode = hash.slice(32, 64);\n\n  var publicKey;\n  try {\n    publicKey = PublicKey.fromPoint(Point.getG().mul(leftPart).add(this.publicKey.point));\n  } catch (e) {\n    return this._deriveWithNumber(index + 1);\n  }\n\n  var derived = new HDPublicKey({\n    network: this.network,\n    depth: this.depth + 1,\n    parentFingerPrint: this.fingerPrint,\n    childIndex: index,\n    chainCode: chainCode,\n    publicKey: publicKey\n  });\n\n  return derived;\n};\n\nHDPublicKey.prototype._deriveFromString = function(path) {\n  /* jshint maxcomplexity: 8 */\n  if (_.includes(path, \"'\")) {\n    throw new hdErrors.InvalidIndexCantDeriveHardened();\n  } else if (!HDPublicKey.isValidPath(path)) {\n    throw new hdErrors.InvalidPath(path);\n  }\n\n  var indexes = HDPrivateKey._getDerivationIndexes(path);\n  var derived = indexes.reduce(function(prev, index) {\n    return prev._deriveWithNumber(index);\n  }, this);\n\n  return derived;\n};\n\n/**\n * Verifies that a given serialized public key in base58 with checksum format\n * is valid.\n *\n * @param {string|Buffer} data - the serialized public key\n * @param {string|Network=} network - optional, if present, checks that the\n *     network provided matches the network serialized.\n * @return {boolean}\n */\nHDPublicKey.isValidSerialized = function(data, network) {\n  return _.isNull(HDPublicKey.getSerializedError(data, network));\n};\n\n/**\n * Checks what's the error that causes the validation of a serialized public key\n * in base58 with checksum to fail.\n *\n * @param {string|Buffer} data - the serialized public key\n * @param {string|Network=} network - optional, if present, checks that the\n *     network provided matches the network serialized.\n * @return {errors|null}\n */\nHDPublicKey.getSerializedError = function(data, network) {\n  /* jshint maxcomplexity: 10 */\n  /* jshint maxstatements: 20 */\n  if (!(_.isString(data) || BufferUtil.isBuffer(data))) {\n    return new hdErrors.UnrecognizedArgument('expected buffer or string');\n  }\n  if (!Base58.validCharacters(data)) {\n    return new errors.InvalidB58Char('(unknown)', data);\n  }\n  try {\n    data = Base58Check.decode(data);\n  } catch (e) {\n    return new errors.InvalidB58Checksum(data);\n  }\n  if (data.length !== HDPublicKey.DataSize) {\n    return new hdErrors.InvalidLength(data);\n  }\n  if (!_.isUndefined(network)) {\n    var error = HDPublicKey._validateNetwork(data, network);\n    if (error) {\n      return error;\n    }\n  }\n  var version = BufferUtil.integerFromBuffer(data.slice(0, 4));\n  if (version === Network.livenet.xprivkey || version === Network.testnet.xprivkey ) {\n    return new hdErrors.ArgumentIsPrivateExtended();\n  }\n  return null;\n};\n\nHDPublicKey._validateNetwork = function(data, networkArg) {\n  var network = Network.get(networkArg);\n  if (!network) {\n    return new errors.InvalidNetworkArgument(networkArg);\n  }\n  var version = data.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd);\n  if (BufferUtil.integerFromBuffer(version) !== network.xpubkey) {\n    return new errors.InvalidNetwork(version);\n  }\n  return null;\n};\n\nHDPublicKey.prototype._buildFromPrivate = function (arg) {\n  var args = _.clone(arg._buffers);\n  var point = Point.getG().mul(BN.fromBuffer(args.privateKey));\n  args.publicKey = Point.pointToCompressed(point);\n  args.version = BufferUtil.integerAsBuffer(Network.get(BufferUtil.integerFromBuffer(args.version)).xpubkey);\n  args.privateKey = undefined;\n  args.checksum = undefined;\n  args.xprivkey = undefined;\n  return this._buildFromBuffers(args);\n};\n\nHDPublicKey.prototype._buildFromObject = function(arg) {\n  /* jshint maxcomplexity: 10 */\n  // TODO: Type validation\n  var buffers = {\n    version: arg.network ? BufferUtil.integerAsBuffer(Network.get(arg.network).xpubkey) : arg.version,\n    depth: _.isNumber(arg.depth) ? BufferUtil.integerAsSingleByteBuffer(arg.depth) : arg.depth,\n    parentFingerPrint: _.isNumber(arg.parentFingerPrint) ? BufferUtil.integerAsBuffer(arg.parentFingerPrint) : arg.parentFingerPrint,\n    childIndex: _.isNumber(arg.childIndex) ? BufferUtil.integerAsBuffer(arg.childIndex) : arg.childIndex,\n    chainCode: _.isString(arg.chainCode) ? Buffer.from(arg.chainCode,'hex') : arg.chainCode,\n    publicKey: _.isString(arg.publicKey) ? Buffer.from(arg.publicKey,'hex') :\n      BufferUtil.isBuffer(arg.publicKey) ? arg.publicKey : arg.publicKey.toBuffer(),\n    checksum: _.isNumber(arg.checksum) ? BufferUtil.integerAsBuffer(arg.checksum) : arg.checksum\n  };\n  return this._buildFromBuffers(buffers);\n};\n\nHDPublicKey.prototype._buildFromSerialized = function(arg) {\n  var decoded = Base58Check.decode(arg);\n  var buffers = {\n    version: decoded.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd),\n    depth: decoded.slice(HDPublicKey.DepthStart, HDPublicKey.DepthEnd),\n    parentFingerPrint: decoded.slice(HDPublicKey.ParentFingerPrintStart,\n                                     HDPublicKey.ParentFingerPrintEnd),\n    childIndex: decoded.slice(HDPublicKey.ChildIndexStart, HDPublicKey.ChildIndexEnd),\n    chainCode: decoded.slice(HDPublicKey.ChainCodeStart, HDPublicKey.ChainCodeEnd),\n    publicKey: decoded.slice(HDPublicKey.PublicKeyStart, HDPublicKey.PublicKeyEnd),\n    checksum: decoded.slice(HDPublicKey.ChecksumStart, HDPublicKey.ChecksumEnd),\n    xpubkey: arg\n  };\n  return this._buildFromBuffers(buffers);\n};\n\n/**\n * Receives a object with buffers in all the properties and populates the\n * internal structure\n *\n * @param {Object} arg\n * @param {buffer.Buffer} arg.version\n * @param {buffer.Buffer} arg.depth\n * @param {buffer.Buffer} arg.parentFingerPrint\n * @param {buffer.Buffer} arg.childIndex\n * @param {buffer.Buffer} arg.chainCode\n * @param {buffer.Buffer} arg.publicKey\n * @param {buffer.Buffer} arg.checksum\n * @param {string=} arg.xpubkey - if set, don't recalculate the base58\n *      representation\n * @return {HDPublicKey} this\n */\nHDPublicKey.prototype._buildFromBuffers = function(arg) {\n  /* jshint maxcomplexity: 8 */\n  /* jshint maxstatements: 20 */\n\n  HDPublicKey._validateBufferArguments(arg);\n\n  JSUtil.defineImmutable(this, {\n    _buffers: arg\n  });\n\n  var sequence = [\n    arg.version, arg.depth, arg.parentFingerPrint, arg.childIndex, arg.chainCode,\n    arg.publicKey\n  ];\n  var concat = BufferUtil.concat(sequence);\n  var checksum = Base58Check.checksum(concat);\n  if (!arg.checksum || !arg.checksum.length) {\n    arg.checksum = checksum;\n  } else {\n    if (arg.checksum.toString('hex') !== checksum.toString('hex')) {\n      throw new errors.InvalidB58Checksum(concat, checksum);\n    }\n  }\n  var network = Network.get(BufferUtil.integerFromBuffer(arg.version));\n\n  var xpubkey;\n  xpubkey = Base58Check.encode(BufferUtil.concat(sequence));\n  arg.xpubkey = Buffer.from(xpubkey);\n\n  var publicKey = new PublicKey(arg.publicKey, {network: network});\n  var size = HDPublicKey.ParentFingerPrintSize;\n  var fingerPrint = Hash.sha256ripemd160(publicKey.toBuffer()).slice(0, size);\n\n  JSUtil.defineImmutable(this, {\n    xpubkey: xpubkey,\n    network: network,\n    depth: BufferUtil.integerFromSingleByteBuffer(arg.depth),\n    publicKey: publicKey,\n    fingerPrint: fingerPrint\n  });\n\n  return this;\n};\n\nHDPublicKey._validateBufferArguments = function(arg) {\n  var checkBuffer = function(name, size) {\n    var buff = arg[name];\n    assert(BufferUtil.isBuffer(buff), name + ' argument is not a buffer, it\\'s ' + typeof buff);\n    assert(\n      buff.length === size,\n      name + ' has not the expected size: found ' + buff.length + ', expected ' + size\n    );\n  };\n  checkBuffer('version', HDPublicKey.VersionSize);\n  checkBuffer('depth', HDPublicKey.DepthSize);\n  checkBuffer('parentFingerPrint', HDPublicKey.ParentFingerPrintSize);\n  checkBuffer('childIndex', HDPublicKey.ChildIndexSize);\n  checkBuffer('chainCode', HDPublicKey.ChainCodeSize);\n  checkBuffer('publicKey', HDPublicKey.PublicKeySize);\n  if (arg.checksum && arg.checksum.length) {\n    checkBuffer('checksum', HDPublicKey.CheckSumSize);\n  }\n};\n\nHDPublicKey.fromString = function(arg) {\n  $.checkArgument(_.isString(arg), 'No valid string was provided');\n  return new HDPublicKey(arg);\n};\n\nHDPublicKey.fromObject = function(arg) {\n  $.checkArgument(_.isObject(arg), 'No valid argument was provided');\n  return new HDPublicKey(arg);\n};\n\n/**\n * Returns the base58 checked representation of the public key\n * @return {string} a string starting with \"xpub...\" in livenet\n */\nHDPublicKey.prototype.toString = function() {\n  return this.xpubkey;\n};\n\n/**\n * Returns the console representation of this extended public key.\n * @return string\n */\nHDPublicKey.prototype.inspect = function() {\n  return '<HDPublicKey: ' + this.xpubkey + '>';\n};\n\n/**\n * Returns a plain JavaScript object with information to reconstruct a key.\n *\n * Fields are: <ul>\n *  <li> network: 'livenet' or 'testnet'\n *  <li> depth: a number from 0 to 255, the depth to the master extended key\n *  <li> fingerPrint: a number of 32 bits taken from the hash of the public key\n *  <li> fingerPrint: a number of 32 bits taken from the hash of this key's\n *  <li>     parent's public key\n *  <li> childIndex: index with which this key was derived\n *  <li> chainCode: string in hexa encoding used for derivation\n *  <li> publicKey: string, hexa encoded, in compressed key format\n *  <li> checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),\n *  <li> xpubkey: the string with the base58 representation of this extended key\n *  <li> checksum: the base58 checksum of xpubkey\n * </ul>\n */\nHDPublicKey.prototype.toObject = HDPublicKey.prototype.toJSON = function toObject() {\n  return {\n    network: Network.get(BufferUtil.integerFromBuffer(this._buffers.version)).name,\n    depth: BufferUtil.integerFromSingleByteBuffer(this._buffers.depth),\n    fingerPrint: BufferUtil.integerFromBuffer(this.fingerPrint),\n    parentFingerPrint: BufferUtil.integerFromBuffer(this._buffers.parentFingerPrint),\n    childIndex: BufferUtil.integerFromBuffer(this._buffers.childIndex),\n    chainCode: BufferUtil.bufferToHex(this._buffers.chainCode),\n    publicKey: this.publicKey.toString(),\n    checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),\n    xpubkey: this.xpubkey\n  };\n};\n\n/**\n * Create a HDPublicKey from a buffer argument\n *\n * @param {Buffer} arg\n * @return {HDPublicKey}\n */\nHDPublicKey.fromBuffer = function(arg) {\n  return new HDPublicKey(arg);\n};\n\n/**\n * Return a buffer representation of the xpubkey\n *\n * @return {Buffer}\n */\nHDPublicKey.prototype.toBuffer = function() {\n  return BufferUtil.copy(this._buffers.xpubkey);\n};\n\nHDPublicKey.Hardened = 0x80000000;\nHDPublicKey.RootElementAlias = ['m', 'M'];\n\nHDPublicKey.VersionSize = 4;\nHDPublicKey.DepthSize = 1;\nHDPublicKey.ParentFingerPrintSize = 4;\nHDPublicKey.ChildIndexSize = 4;\nHDPublicKey.ChainCodeSize = 32;\nHDPublicKey.PublicKeySize = 33;\nHDPublicKey.CheckSumSize = 4;\n\nHDPublicKey.DataSize = 78;\nHDPublicKey.SerializedByteSize = 82;\n\nHDPublicKey.VersionStart           = 0;\nHDPublicKey.VersionEnd             = HDPublicKey.VersionStart + HDPublicKey.VersionSize;\nHDPublicKey.DepthStart             = HDPublicKey.VersionEnd;\nHDPublicKey.DepthEnd               = HDPublicKey.DepthStart + HDPublicKey.DepthSize;\nHDPublicKey.ParentFingerPrintStart = HDPublicKey.DepthEnd;\nHDPublicKey.ParentFingerPrintEnd   = HDPublicKey.ParentFingerPrintStart + HDPublicKey.ParentFingerPrintSize;\nHDPublicKey.ChildIndexStart        = HDPublicKey.ParentFingerPrintEnd;\nHDPublicKey.ChildIndexEnd          = HDPublicKey.ChildIndexStart + HDPublicKey.ChildIndexSize;\nHDPublicKey.ChainCodeStart         = HDPublicKey.ChildIndexEnd;\nHDPublicKey.ChainCodeEnd           = HDPublicKey.ChainCodeStart + HDPublicKey.ChainCodeSize;\nHDPublicKey.PublicKeyStart         = HDPublicKey.ChainCodeEnd;\nHDPublicKey.PublicKeyEnd           = HDPublicKey.PublicKeyStart + HDPublicKey.PublicKeySize;\nHDPublicKey.ChecksumStart          = HDPublicKey.PublicKeyEnd;\nHDPublicKey.ChecksumEnd            = HDPublicKey.ChecksumStart + HDPublicKey.CheckSumSize;\n\nassert(HDPublicKey.PublicKeyEnd === HDPublicKey.DataSize);\nassert(HDPublicKey.ChecksumEnd === HDPublicKey.SerializedByteSize);\n\nmodule.exports = HDPublicKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/hdpublickey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/message.js":
/*!*************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/message.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar PrivateKey = __webpack_require__(/*! ./privatekey */ \"(ssr)/./node_modules/bitcore-lib/lib/privatekey.js\");\nvar PublicKey = __webpack_require__(/*! ./publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\nvar Address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\nvar BufferWriter = __webpack_require__(/*! ./encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar ECDSA = __webpack_require__(/*! ./crypto/ecdsa */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/ecdsa.js\");\nvar Signature = __webpack_require__(/*! ./crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar sha256sha256 = (__webpack_require__(/*! ./crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\").sha256sha256);\nvar JSUtil = __webpack_require__(/*! ./util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar $ = __webpack_require__(/*! ./util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nfunction Message(message) {\n  if (!(this instanceof Message)) {\n    return new Message(message);\n  }\n  $.checkArgument(_.isString(message), 'First argument should be a string');\n  this.message = message;\n\n  return this;\n}\n\nMessage.MAGIC_BYTES = Buffer.from('Bitcoin Signed Message:\\n');\n\nMessage.prototype.magicHash = function magicHash() {\n  var prefix1 = BufferWriter.varintBufNum(Message.MAGIC_BYTES.length);\n  var messageBuffer = Buffer.from(this.message);\n  var prefix2 = BufferWriter.varintBufNum(messageBuffer.length);\n  var buf = Buffer.concat([prefix1, Message.MAGIC_BYTES, prefix2, messageBuffer]);\n  var hash = sha256sha256(buf);\n  return hash;\n};\n\nMessage.prototype._sign = function _sign(privateKey) {\n  $.checkArgument(privateKey instanceof PrivateKey, 'First argument should be an instance of PrivateKey');\n  var hash = this.magicHash();\n  var ecdsa = new ECDSA();\n  ecdsa.hashbuf = hash;\n  ecdsa.privkey = privateKey;\n  ecdsa.pubkey = privateKey.toPublicKey();\n  ecdsa.signRandomK();\n  ecdsa.calci();\n  return ecdsa.sig;\n};\n\n/**\n * Will sign a message with a given bitcoin private key.\n *\n * @param {PrivateKey} privateKey - An instance of PrivateKey\n * @returns {String} A base64 encoded compact signature\n */\nMessage.prototype.sign = function sign(privateKey) {\n  var signature = this._sign(privateKey);\n  return signature.toCompact().toString('base64');\n};\n\nMessage.prototype._verify = function _verify(publicKey, signature) {\n  $.checkArgument(publicKey instanceof PublicKey, 'First argument should be an instance of PublicKey');\n  $.checkArgument(signature instanceof Signature, 'Second argument should be an instance of Signature');\n  var hash = this.magicHash();\n  var verified = ECDSA.verify(hash, signature, publicKey);\n  if (!verified) {\n    this.error = 'The signature was invalid';\n  }\n  return verified;\n};\n\n/**\n * Will return a boolean of the signature is valid for a given bitcoin address.\n * If it isn't the specific reason is accessible via the \"error\" member.\n *\n * @param {Address|String} bitcoinAddress - A bitcoin address\n * @param {String} signatureString - A base64 encoded compact signature\n * @returns {Boolean}\n */\nMessage.prototype.verify = function verify(bitcoinAddress, signatureString) {\n  $.checkArgument(bitcoinAddress);\n  $.checkArgument(signatureString && _.isString(signatureString));\n\n  if (_.isString(bitcoinAddress)) {\n    bitcoinAddress = Address.fromString(bitcoinAddress);\n  }\n  var signature = Signature.fromCompact(Buffer.from(signatureString, 'base64'));\n\n  // recover the public key\n  var ecdsa = new ECDSA();\n  ecdsa.hashbuf = this.magicHash();\n  ecdsa.sig = signature;\n  var publicKey = ecdsa.toPublicKey();\n\n  var signatureAddress = Address.fromPublicKey(publicKey, bitcoinAddress.network);\n\n  // check that the recovered address and specified address match\n  if (bitcoinAddress.toString() !== signatureAddress.toString()) {\n    this.error = 'The signature did not match the message digest';\n    return false;\n  }\n\n  return this._verify(publicKey, signature);\n};\n\n/**\n * Will return a public key string if the provided signature and the message digest is correct\n * If it isn't the specific reason is accessible via the \"error\" member.\n *\n * @param {Address|String} bitcoinAddress - A bitcoin address\n * @param {String} signatureString - A base64 encoded compact signature\n * @returns {String}\n */\nMessage.prototype.recoverPublicKey = function recoverPublicKey(bitcoinAddress, signatureString) {\n  $.checkArgument(bitcoinAddress);\n  $.checkArgument(signatureString && _.isString(signatureString));\n\n  if (_.isString(bitcoinAddress)) {\n    bitcoinAddress = Address.fromString(bitcoinAddress);\n  }\n  var signature = Signature.fromCompact(Buffer.from(signatureString, 'base64'));\n\n  // recover the public key\n  var ecdsa = new ECDSA();\n  ecdsa.hashbuf = this.magicHash();\n  ecdsa.sig = signature;\n  var publicKey = ecdsa.toPublicKey();\n\n  var signatureAddress = Address.fromPublicKey(publicKey, bitcoinAddress.network);\n\n  // check that the recovered address and specified address match\n  if (bitcoinAddress.toString() !== signatureAddress.toString()) {\n    this.error = 'The signature did not match the message digest';\n  }\n\n  return publicKey.toString();\n};\n\n/**\n * Instantiate a message from a message string\n *\n * @param {String} str - A string of the message\n * @returns {Message} A new instance of a Message\n */\nMessage.fromString = function(str) {\n  return new Message(str);\n};\n\n/**\n * Instantiate a message from JSON\n *\n * @param {String} json - An JSON string or Object with keys: message\n * @returns {Message} A new instance of a Message\n */\nMessage.fromJSON = function fromJSON(json) {\n  if (JSUtil.isValidJSON(json)) {\n    json = JSON.parse(json);\n  }\n  return new Message(json.message);\n};\n\n/**\n * @returns {Object} A plain object with the message information\n */\nMessage.prototype.toObject = function toObject() {\n  return {\n    message: this.message\n  };\n};\n\n/**\n * @returns {String} A JSON representation of the message information\n */\nMessage.prototype.toJSON = function toJSON() {\n  return JSON.stringify(this.toObject());\n};\n\n/**\n * Will return a the string representation of the message\n *\n * @returns {String} Message\n */\nMessage.prototype.toString = function() {\n  return this.message;\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {String} Message\n */\nMessage.prototype.inspect = function() {\n  return '<Message: ' + this.toString() + '>';\n};\n\nmodule.exports = Message;\n\nvar Script = __webpack_require__(/*! ./script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/networks.js":
/*!**************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/networks.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar BufferUtil = __webpack_require__(/*! ./util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar JSUtil = __webpack_require__(/*! ./util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar networks = [];\nvar networkMaps = {};\n\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n  if (keys) {\n    if (!Array.isArray(keys)) {\n      keys = [keys];\n    }\n    for (const index in networks) {\n      if (keys.some(key => networks[index][key] === arg)) {\n        return networks[index];\n      }\n    }\n    return undefined;\n  }\n  if (networkMaps[arg] && networkMaps[arg].length >= 1) {\n    return networkMaps[arg][0];\n  } else {\n    return networkMaps[arg];\n  }\n}\n\n/**\n * @function\n * @member Networks#is\n * Returns true if the string is the network name or alias\n * @param {string} str - A string to check\n * @return boolean\n */\nfunction is(str) {\n  return this.name == str || this.alias == str;\n}\n\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {string} data.bech32prefix - The native segwit prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Array}  data.variants - An array of variants\n * @param {string} data.variants.name - The name of the variant\n * @param {Number} data.variants.networkMagic - The network magic number\n * @param {Number} data.variants.port - The network port\n * @param {Array}  data.variants.dnsSeeds - An array of dns seeds\n * @return Network\n */\nfunction addNetwork(data) {\n  var network = new Network();\n\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    is: data.is,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    bech32prefix: data.bech32prefix,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n\n  for (const value of Object.values(network)) {\n    if (value != null && typeof value !== 'object') {\n      if (!networkMaps[value]) {\n        networkMaps[value] = [];\n      }\n      networkMaps[value].push(network);\n    }\n  };\n\n  networks.push(network);\n\n  for (const variant of data.variants || []) {\n    addNetwork({\n      ...data,\n      variants: undefined,\n      ...variant,\n    });\n  }\n\n  return network;\n}\n\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\nfunction removeNetwork(network) {\n  if (typeof network !== 'object') {\n    network = get(network);\n  }\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n  for (var key in networkMaps) {\n    if (networkMaps[key].length) {\n      const index = networkMaps[key].indexOf(network);\n      if (index >= 0) {\n        networkMaps[key].splice(index, 1);\n      }\n      if (networkMaps[key].length === 0) {\n        delete networkMaps[key];\n      }\n    } else if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  is,\n  pubkeyhash: 0x00,\n  privatekey: 0x80,\n  scripthash: 0x05,\n  bech32prefix: 'bc',\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xf9beb4d9,\n  port: 8333,\n  dnsSeeds: [\n    'seed.bitcoin.sipa.be',\n    'dnsseed.bluematt.me',\n    'dnsseed.bitcoin.dashjr.org',\n    'seed.bitcoinstats.com',\n    'seed.bitnodes.io',\n    'bitseed.xf2.org'\n  ]\n});\n\n/**\n * @instance\n * @member Networks#livenet\n */\nvar livenet = get('livenet');\n\naddNetwork({\n  name: 'testnet',\n  alias: 'testnet',\n  is,\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  bech32prefix: 'tb',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  variants: [{\n    name: 'testnet3',\n    networkMagic: 0x0b110907,\n    port: 18333,\n    dnsSeeds: [\n      'testnet-seed.bitcoin.petertodd.org',\n      'testnet-seed.bluematt.me',\n      'testnet-seed.alexykot.me',\n      'testnet-seed.bitcoin.schildbach.de'\n    ]\n  }, {\n    name: 'signet',\n    networkMagic: 0x0a03cf40,\n    port: 38332,\n    dnsSeeds: [\n      '178.128.221.177',\n      '103.16.128.63',\n      '153.126.143.201',\n      '192.241.163.142'\n    ]\n  }]\n});\n\n/**\n * @instance\n * @member Networks#testnet\n */\nvar testnet = get('testnet');\nvar testnet3 = get('testnet3');\nvar signet = get('signet');\n\naddNetwork({\n  name: 'regtest',\n  alias: 'dev',\n  is,\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  bech32prefix: 'bcrt',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xfabfb5da,\n  port: 18444,\n  dnsSeeds: []\n});\n\n/**\n * @instance\n * @member Networks#regtest\n */\nvar regtest = get('regtest');\n\n/**\n * @function\n * @deprecated\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n\n/**\n * @function\n * @deprecated\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n\n/**\n * @namespace Networks\n */\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  testnet3: testnet3,\n  signet: signet,\n  regtest: regtest,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/networks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/opcode.js":
/*!************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/opcode.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ./util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar BufferUtil = __webpack_require__(/*! ./util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar JSUtil = __webpack_require__(/*! ./util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\n\nfunction Opcode(num) {\n  if (!(this instanceof Opcode)) {\n    return new Opcode(num);\n  }\n\n  var value;\n\n  if (_.isNumber(num)) {\n    value = num;\n  } else if (_.isString(num)) {\n    value = Opcode.map[num];\n  } else {\n    throw new TypeError('Unrecognized num type: \"' + typeof(num) + '\" for Opcode');\n  }\n\n  JSUtil.defineImmutable(this, {\n    num: value\n  });\n\n  return this;\n}\n\nOpcode.fromBuffer = function(buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf));\n  return new Opcode(Number('0x' + buf.toString('hex')));\n};\n\nOpcode.fromNumber = function(num) {\n  $.checkArgument(_.isNumber(num));\n  return new Opcode(num);\n};\n\nOpcode.fromString = function(str) {\n  $.checkArgument(_.isString(str));\n  var value = Opcode.map[str];\n  if (typeof value === 'undefined') {\n    throw new TypeError('Invalid opcodestr');\n  }\n  return new Opcode(value);\n};\n\nOpcode.prototype.toHex = function() {\n  return this.num.toString(16);\n};\n\nOpcode.prototype.toBuffer = function() {\n  return Buffer.from(this.toHex(), 'hex');\n};\n\nOpcode.prototype.toNumber = function() {\n  return this.num;\n};\n\nOpcode.prototype.toString = function() {\n  var str = Opcode.reverseMap[this.num];\n  if (typeof str === 'undefined') {\n    throw new Error('Opcode does not have a string representation');\n  }\n  return str;\n};\n\nOpcode.smallInt = function(n) {\n  $.checkArgument(_.isNumber(n), 'Invalid Argument: n should be number');\n  $.checkArgument(n >= 0 && n <= 16, 'Invalid Argument: n must be between 0 and 16');\n  if (n === 0) {\n    return Opcode('OP_0');\n  }\n  return new Opcode(Opcode.map.OP_1 + n - 1);\n};\n\n/**\n * Converts OP_0 - OP_16 to an int\n * @param {Number} opcode Opcode\n * @returns {Number}\n */\nOpcode.decodeOpN = function(opcode) {\n  if (opcode === Opcode.OP_0) {\n    return 0;\n  }\n  $.checkArgument(opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16, new Error('Invalid opcode: ' + JSON.stringify(opcode)));\n  return opcode - (Opcode.OP_1 - 1);\n};\n\n/**\n * Returns true if given opcode is classified as a \"success\".\n * This was taken from commit https://github.com/bitcoin/bitcoin/commit/72422ce396b8eba7b1a72c171c2f07dae691d1b5\n * @param {Number|String} opcode \n * @returns {Boolean}\n */\nOpcode.isOpSuccess = function(opcode) {\n  if (typeof opcode === 'string' && !parseInt(opcode)) {\n    opcode = Opcode[opcode];\n  }\n  return opcode == 80 || opcode == 98 || (opcode >= 126 && opcode <= 129) ||\n        (opcode >= 131 && opcode <= 134) || (opcode >= 137 && opcode <= 138) ||\n        (opcode >= 141 && opcode <= 142) || (opcode >= 149 && opcode <= 153) ||\n        (opcode >= 187 && opcode <= 254);\n};\n\n\nOpcode.map = {\n  // push value\n  OP_FALSE: 0,\n  OP_0: 0,\n  OP_PUSHDATA1: 76,\n  OP_PUSHDATA2: 77,\n  OP_PUSHDATA4: 78,\n  OP_1NEGATE: 79,\n  OP_RESERVED: 80,\n  OP_TRUE: 81,\n  OP_1: 81,\n  OP_2: 82,\n  OP_3: 83,\n  OP_4: 84,\n  OP_5: 85,\n  OP_6: 86,\n  OP_7: 87,\n  OP_8: 88,\n  OP_9: 89,\n  OP_10: 90,\n  OP_11: 91,\n  OP_12: 92,\n  OP_13: 93,\n  OP_14: 94,\n  OP_15: 95,\n  OP_16: 96,\n\n  // control\n  OP_NOP: 97,\n  OP_VER: 98,\n  OP_IF: 99,\n  OP_NOTIF: 100,\n  OP_VERIF: 101,\n  OP_VERNOTIF: 102,\n  OP_ELSE: 103,\n  OP_ENDIF: 104,\n  OP_VERIFY: 105,\n  OP_RETURN: 106,\n\n  // stack ops\n  OP_TOALTSTACK: 107,\n  OP_FROMALTSTACK: 108,\n  OP_2DROP: 109,\n  OP_2DUP: 110,\n  OP_3DUP: 111,\n  OP_2OVER: 112,\n  OP_2ROT: 113,\n  OP_2SWAP: 114,\n  OP_IFDUP: 115,\n  OP_DEPTH: 116,\n  OP_DROP: 117,\n  OP_DUP: 118,\n  OP_NIP: 119,\n  OP_OVER: 120,\n  OP_PICK: 121,\n  OP_ROLL: 122,\n  OP_ROT: 123,\n  OP_SWAP: 124,\n  OP_TUCK: 125,\n\n  // splice ops\n  OP_CAT: 126,\n  OP_SUBSTR: 127,\n  OP_LEFT: 128,\n  OP_RIGHT: 129,\n  OP_SIZE: 130,\n\n  // bit logic\n  OP_INVERT: 131,\n  OP_AND: 132,\n  OP_OR: 133,\n  OP_XOR: 134,\n  OP_EQUAL: 135,\n  OP_EQUALVERIFY: 136,\n  OP_RESERVED1: 137,\n  OP_RESERVED2: 138,\n\n  // numeric\n  OP_1ADD: 139,\n  OP_1SUB: 140,\n  OP_2MUL: 141,\n  OP_2DIV: 142,\n  OP_NEGATE: 143,\n  OP_ABS: 144,\n  OP_NOT: 145,\n  OP_0NOTEQUAL: 146,\n\n  OP_ADD: 147,\n  OP_SUB: 148,\n  OP_MUL: 149,\n  OP_DIV: 150,\n  OP_MOD: 151,\n  OP_LSHIFT: 152,\n  OP_RSHIFT: 153,\n\n  OP_BOOLAND: 154,\n  OP_BOOLOR: 155,\n  OP_NUMEQUAL: 156,\n  OP_NUMEQUALVERIFY: 157,\n  OP_NUMNOTEQUAL: 158,\n  OP_LESSTHAN: 159,\n  OP_GREATERTHAN: 160,\n  OP_LESSTHANOREQUAL: 161,\n  OP_GREATERTHANOREQUAL: 162,\n  OP_MIN: 163,\n  OP_MAX: 164,\n\n  OP_WITHIN: 165,\n\n  // crypto\n  OP_RIPEMD160: 166,\n  OP_SHA1: 167,\n  OP_SHA256: 168,\n  OP_HASH160: 169,\n  OP_HASH256: 170,\n  OP_CODESEPARATOR: 171,\n  OP_CHECKSIG: 172,\n  OP_CHECKSIGVERIFY: 173,\n  OP_CHECKMULTISIG: 174,\n  OP_CHECKMULTISIGVERIFY: 175,\n\n  OP_CHECKLOCKTIMEVERIFY: 177,\n  OP_CHECKSEQUENCEVERIFY: 178,\n\n  // expansion\n  OP_NOP1: 176,\n  OP_NOP2: 177,\n  OP_NOP3: 178,\n  OP_NOP4: 179,\n  OP_NOP5: 180,\n  OP_NOP6: 181,\n  OP_NOP7: 182,\n  OP_NOP8: 183,\n  OP_NOP9: 184,\n  OP_NOP10: 185,\n\n  // Opcode added by BIP 342 (Tapscript)\n  OP_CHECKSIGADD: 186, // 0xba\n\n  // template matching params\n  OP_PUBKEYHASH: 253,\n  OP_PUBKEY: 254,\n  OP_INVALIDOPCODE: 255\n};\n\nOpcode.reverseMap = [];\n\nfor (var k in Opcode.map) {\n  Opcode.reverseMap[Opcode.map[k]] = k;\n}\n\n// Easier access to opcodes\n_.extend(Opcode, Opcode.map);\n\n/**\n * @returns true if opcode is one of OP_0, OP_1, ..., OP_16\n */\nOpcode.isSmallIntOp = function(opcode) {\n  if (opcode instanceof Opcode) {\n    opcode = opcode.toNumber();\n  }\n  return ((opcode === Opcode.map.OP_0) ||\n    ((opcode >= Opcode.map.OP_1) && (opcode <= Opcode.map.OP_16)));\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Script opcode\n */\nOpcode.prototype.inspect = function() {\n  return '<Opcode: ' + this.toString() + ', hex: '+this.toHex()+', decimal: '+this.num+'>';\n};\n\nmodule.exports = Opcode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/opcode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/privatekey.js":
/*!****************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/privatekey.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar Address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\nvar Base58Check = __webpack_require__(/*! ./encoding/base58check */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/base58check.js\");\nvar BN = __webpack_require__(/*! ./crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar JSUtil = __webpack_require__(/*! ./util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar Networks = __webpack_require__(/*! ./networks */ \"(ssr)/./node_modules/bitcore-lib/lib/networks.js\");\nvar Point = __webpack_require__(/*! ./crypto/point */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/point.js\");\nvar PublicKey = __webpack_require__(/*! ./publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\nvar Random = __webpack_require__(/*! ./crypto/random */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/random.js\");\nvar $ = __webpack_require__(/*! ./util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nconst TaggedHash = __webpack_require__(/*! ./crypto/taggedhash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js\");\n\n/**\n * Instantiate a PrivateKey from a BN, Buffer and WIF.\n *\n * @example\n * ```javascript\n * // generate a new random key\n * var key = PrivateKey();\n *\n * // get the associated address\n * var address = key.toAddress();\n *\n * // encode into wallet export format\n * var exported = key.toWIF();\n *\n * // instantiate from the exported (and saved) private key\n * var imported = PrivateKey.fromWIF(exported);\n * ```\n *\n * @param {string} data - The encoded data in various formats\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\n * @returns {PrivateKey} A new valid instance of an PrivateKey\n * @constructor\n */\nfunction PrivateKey(data, network) {\n  /* jshint maxstatements: 20 */\n  /* jshint maxcomplexity: 8 */\n\n  if (!(this instanceof PrivateKey)) {\n    return new PrivateKey(data, network);\n  }\n  if (data instanceof PrivateKey) {\n    return data;\n  }\n\n  var info = this._classifyArguments(data, network);\n\n  // validation\n  if (!info.bn || info.bn.cmp(new BN(0)) === 0){\n    throw new TypeError('Number can not be equal to zero, undefined, null or false');\n  }\n  if (!info.bn.lt(Point.getN())) {\n    throw new TypeError('Number must be less than N');\n  }\n  if (typeof(info.network) === 'undefined') {\n    throw new TypeError('Must specify the network (\"livenet\" or \"testnet\")');\n  }\n\n  JSUtil.defineImmutable(this, {\n    bn: info.bn,\n    compressed: info.compressed,\n    network: info.network\n  });\n\n  Object.defineProperty(this, 'publicKey', {\n    configurable: false,\n    enumerable: true,\n    get: this.toPublicKey.bind(this)\n  });\n\n  return this;\n\n};\n\n/**\n * Internal helper to instantiate PrivateKey internal `info` object from\n * different kinds of arguments passed to the constructor.\n *\n * @param {*} data\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\n * @return {Object}\n */\nPrivateKey.prototype._classifyArguments = function(data, network) {\n  /* jshint maxcomplexity: 10 */\n  var info = {\n    compressed: true,\n    network: network ? Networks.get(network) : Networks.defaultNetwork\n  };\n\n  // detect type of data\n  if (_.isUndefined(data) || _.isNull(data)){\n    info.bn = PrivateKey._getRandomBN();\n  } else if (data instanceof BN) {\n    info.bn = data;\n  } else if (data instanceof Buffer || data instanceof Uint8Array) {\n    info = PrivateKey._transformBuffer(data, network);\n  } else if (data.bn && data.network){\n    info = PrivateKey._transformObject(data);\n  } else if (!network && Networks.get(data)) {\n    info.bn = PrivateKey._getRandomBN();\n    info.network = Networks.get(data);\n  } else if (typeof(data) === 'string'){\n    if (JSUtil.isHexa(data)) {\n      info.bn = new BN(Buffer.from(data, 'hex'));\n    } else {\n      info = PrivateKey._transformWIF(data, network);\n    }\n  } else {\n    throw new TypeError('First argument is an unrecognized data type.');\n  }\n  return info;\n};\n\n/**\n * Internal function to get a random Big Number (BN)\n *\n * @returns {BN} A new randomly generated BN\n * @private\n */\nPrivateKey._getRandomBN = function(){\n  var condition;\n  var bn;\n  do {\n    var privbuf = Random.getRandomBuffer(32);\n    bn = BN.fromBuffer(privbuf);\n    condition = bn.lt(Point.getN());\n  } while (!condition);\n  return bn;\n};\n\n/**\n * Internal function to transform a WIF Buffer into a private key\n *\n * @param {Buffer} buf - An WIF string\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\n * @returns {Object} An object with keys: bn, network and compressed\n * @private\n */\nPrivateKey._transformBuffer = function(buf, network) {\n\n  var info = {};\n\n  if (buf.length === 32) {\n    return PrivateKey._transformBNBuffer(buf, network);\n  }\n\n  info.network = Networks.get(buf[0], 'privatekey');\n\n  if (!info.network) {\n    throw new Error('Invalid network');\n  }\n\n  if (network && info.network !== Networks.get(network)) {\n    throw new TypeError('Private key network mismatch');\n  }\n\n  if (buf.length === 1 + 32 + 1 && buf[1 + 32 + 1 - 1] === 1) {\n    info.compressed = true;\n  } else if (buf.length === 1 + 32) {\n    info.compressed = false;\n  } else {\n    throw new Error('Length of buffer must be 33 (uncompressed) or 34 (compressed)');\n  }\n\n  info.bn = BN.fromBuffer(buf.slice(1, 32 + 1));\n\n  return info;\n};\n\n/**\n * Internal function to transform a BN buffer into a private key\n *\n * @param {Buffer} buf\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\n * @returns {object} an Object with keys: bn, network, and compressed\n * @private\n */\nPrivateKey._transformBNBuffer = function(buf, network) {\n  var info = {};\n  info.network = Networks.get(network) || Networks.defaultNetwork;\n  info.bn = BN.fromBuffer(buf);\n  info.compressed = false;\n  return info;\n};\n\n/**\n * Internal function to transform a WIF string into a private key\n *\n * @param {string} buf - An WIF string\n * @returns {Object} An object with keys: bn, network and compressed\n * @private\n */\nPrivateKey._transformWIF = function(str, network) {\n  return PrivateKey._transformBuffer(Base58Check.decode(str), network);\n};\n\n/**\n * Instantiate a PrivateKey from a Buffer with the DER or WIF representation\n *\n * @param {Buffer} arg\n * @param {Network} network\n * @return {PrivateKey}\n */\nPrivateKey.fromBuffer = function(arg, network) {\n  return new PrivateKey(arg, network);\n};\n\n/**\n * Internal function to transform a JSON string on plain object into a private key\n * return this.\n *\n * @param {string} json - A JSON string or plain object\n * @returns {Object} An object with keys: bn, network and compressed\n * @private\n */\nPrivateKey._transformObject = function(json) {\n  var bn = new BN(json.bn, 'hex');\n  var network = Networks.get(json.network);\n  return {\n    bn: bn,\n    network: network,\n    compressed: json.compressed\n  };\n};\n\n/**\n * Instantiate a PrivateKey from a WIF string\n *\n * @param {string} str - The WIF encoded private key string\n * @returns {PrivateKey} A new valid instance of PrivateKey\n */\nPrivateKey.fromString = PrivateKey.fromWIF = function(str) {\n  $.checkArgument(_.isString(str), 'First argument is expected to be a string.');\n  return new PrivateKey(str);\n};\n\n/**\n * Instantiate a PrivateKey from a plain JavaScript object\n *\n * @param {Object} obj - The output from privateKey.toObject()\n */\nPrivateKey.fromObject = function(obj) {\n  $.checkArgument(_.isObject(obj), 'First argument is expected to be an object.');\n  return new PrivateKey(obj);\n};\n\n/**\n * Instantiate a PrivateKey from random bytes\n *\n * @param {string=} network - Either \"livenet\" or \"testnet\"\n * @returns {PrivateKey} A new valid instance of PrivateKey\n */\nPrivateKey.fromRandom = function(network) {\n  var bn = PrivateKey._getRandomBN();\n  return new PrivateKey(bn, network);\n};\n\n/**\n * Check if there would be any errors when initializing a PrivateKey\n *\n * @param {string} data - The encoded data in various formats\n * @param {string=} network - Either \"livenet\" or \"testnet\"\n * @returns {null|Error} An error if exists\n */\nPrivateKey.getValidationError = function(data, network) {\n  var error;\n  try {\n    /* jshint nonew: false */\n    new PrivateKey(data, network);\n  } catch (e) {\n    error = e;\n  }\n  return error;\n};\n\n/**\n * Check if the parameters are valid\n *\n * @param {string} data - The encoded data in various formats\n * @param {string=} network - Either \"livenet\" or \"testnet\"\n * @returns {Boolean} If the private key is would be valid\n */\nPrivateKey.isValid = function(data, network){\n  if (!data) {\n    return false;\n  }\n  return !PrivateKey.getValidationError(data, network);\n};\n\n/**\n * Will output the PrivateKey encoded as hex string\n *\n * @returns {string}\n */\nPrivateKey.prototype.toString = function() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * Will output the PrivateKey to a WIF string\n *\n * @returns {string} A WIP representation of the private key\n */\nPrivateKey.prototype.toWIF = function() {\n  var network = this.network;\n  var compressed = this.compressed;\n\n  var buf;\n  if (compressed) {\n    buf = Buffer.concat([Buffer.from([network.privatekey]),\n                         this.bn.toBuffer({size: 32}),\n                         Buffer.from([0x01])]);\n  } else {\n    buf = Buffer.concat([Buffer.from([network.privatekey]),\n                         this.bn.toBuffer({size: 32})]);\n  }\n\n  return Base58Check.encode(buf);\n};\n\n/**\n * Will return the private key as a BN instance\n *\n * @returns {BN} A BN instance of the private key\n */\nPrivateKey.prototype.toBigNumber = function(){\n  return this.bn;\n};\n\n/**\n * Will return the private key as a BN buffer\n *\n * @returns {Buffer} A buffer of the private key\n */\nPrivateKey.prototype.toBuffer = function(){\n  return this.bn.toBuffer({size: 32});\n};\n\n/**\n * WARNING: This method will not be officially supported until v1.0.0.\n *\n *\n * Will return the private key as a BN buffer without leading zero padding\n *\n * @returns {Buffer} A buffer of the private key\n */\nPrivateKey.prototype.toBufferNoPadding = function() {\n  return this.bn.toBuffer();\n};\n\n/**\n * Will return the corresponding public key\n *\n * @returns {PublicKey} A public key generated from the private key\n */\nPrivateKey.prototype.toPublicKey = function(){\n  if (!this._pubkey) {\n    this._pubkey = PublicKey.fromPrivateKey(this);\n  }\n  return this._pubkey;\n};\n\n/**\n * Will return an address for the private key\n * @param {Network=} network - optional parameter specifying\n * @param {string} type - Either 'pubkeyhash', 'witnesspubkeyhash', or 'scripthash'\n * the desired network for the address\n *\n * @returns {Address} An address generated from the private key\n */\nPrivateKey.prototype.toAddress = function(network, type) {\n  var pubkey = this.toPublicKey();\n  return Address.fromPublicKey(pubkey, network || this.network, type);\n};\n\n/**\n * @returns {Object} A plain object representation\n */\nPrivateKey.prototype.toObject = PrivateKey.prototype.toJSON = function toObject() {\n  return {\n    bn: this.bn.toString('hex'),\n    compressed: this.compressed,\n    network: this.network.toString()\n  };\n};\n\n/**\n * Create a tweaked version of this private key\n * @param {Buffer} merkleRoot (optional)\n * @returns {{ tweakedPrivKey: Buffer }}\n */\nPrivateKey.prototype.createTapTweak = function(merkleRoot) {\n  const order = Point.getN();\n  const P = Point.getG().mul(this.bn);\n  const secKey = P.y.isEven() ? this.bn : order.sub(this.bn);\n  const taggedWriter = new TaggedHash('TapTweak');\n  taggedWriter.write(P.x.toBuffer({ size: 32 }));\n\n  if (merkleRoot) {\n    $.checkArgument(Buffer.isBuffer(merkleRoot) && merkleRoot.length === 32, 'merkleRoot must be 32 byte buffer');\n    taggedWriter.write(merkleRoot);\n  }\n  const tweakHash = taggedWriter.finalize();\n\n  $.checkState(BN.fromBuffer(tweakHash).lt(order), 'TapTweak hash failed secp256k1 order check');\n  return {\n    tweakedPrivKey: secKey.add(new BN(tweakHash)).mod(order).toBuffer({ size: 32 })\n  };\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Private key\n */\nPrivateKey.prototype.inspect = function() {\n  var uncompressed = !this.compressed ? ', uncompressed' : '';\n  return '<PrivateKey: ' + this.toString() + ', network: ' + this.network + uncompressed + '>';\n};\n\nmodule.exports = PrivateKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/privatekey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/publickey.js":
/*!***************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/publickey.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar BN = __webpack_require__(/*! ./crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar Point = __webpack_require__(/*! ./crypto/point */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/point.js\");\nvar Hash = __webpack_require__(/*! ./crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar JSUtil = __webpack_require__(/*! ./util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar Network = __webpack_require__(/*! ./networks */ \"(ssr)/./node_modules/bitcore-lib/lib/networks.js\");\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ./util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nconst TaggedHash = __webpack_require__(/*! ./crypto/taggedhash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js\");\n\n/**\n * Instantiate a PublicKey from a {@link PrivateKey}, {@link Point}, `string`, or `Buffer`.\n *\n * There are two internal properties, `network` and `compressed`, that deal with importing\n * a PublicKey from a PrivateKey in WIF format. More details described on {@link PrivateKey}\n *\n * @example\n * ```javascript\n * // instantiate from a private key\n * var key = PublicKey(privateKey, true);\n *\n * // export to as a DER hex encoded string\n * var exported = key.toString();\n *\n * // import the public key\n * var imported = PublicKey.fromString(exported);\n * ```\n *\n * @param {string} data - The encoded data in various formats\n * @param {Object} extra - additional options\n * @param {Network=} extra.network - Which network should the address for this public key be for\n * @param {String=} extra.compressed - If the public key is compressed\n * @returns {PublicKey} A new valid instance of an PublicKey\n * @constructor\n */\nfunction PublicKey(data, extra) {\n\n  if (!(this instanceof PublicKey)) {\n    return new PublicKey(data, extra);\n  }\n\n  $.checkArgument(data, 'First argument is required, please include public key data.');\n\n  if (data instanceof PublicKey) {\n    // Return copy, but as it's an immutable object, return same argument\n    return data;\n  }\n  extra = extra || {};\n\n  var info = this._classifyArgs(data, extra);\n\n  // validation\n  info.point.validate();\n\n  JSUtil.defineImmutable(this, {\n    point: info.point,\n    compressed: info.compressed,\n    network: info.network || Network.defaultNetwork\n  });\n\n  return this;\n};\n\n/**\n * Internal function to differentiate between arguments passed to the constructor\n * @param {*} data\n * @param {Object} extra\n */\nPublicKey.prototype._classifyArgs = function(data, extra) {\n  /* jshint maxcomplexity: 10 */\n  var info = {\n    compressed: _.isUndefined(extra.compressed) || extra.compressed\n  };\n\n  // detect type of data\n  if (data instanceof Point) {\n    info.point = data;\n  } else if (data.x && data.y) {\n    info = PublicKey._transformObject(data);\n  } else if (typeof(data) === 'string') {\n    info = PublicKey._transformDER(Buffer.from(data, 'hex'));\n  } else if (PublicKey._isBuffer(data)) {\n    info = PublicKey._transformDER(data);\n  } else if (PublicKey._isPrivateKey(data)) {\n    info = PublicKey._transformPrivateKey(data);\n  } else {\n    throw new TypeError('First argument is an unrecognized data format.');\n  }\n  if (!info.network) {\n    info.network = _.isUndefined(extra.network) ? undefined : Network.get(extra.network);\n  }\n  return info;\n};\n\n/**\n * Internal function to detect if an object is a {@link PrivateKey}\n *\n * @param {*} param - object to test\n * @returns {boolean}\n * @private\n */\nPublicKey._isPrivateKey = function(param) {\n  var PrivateKey = __webpack_require__(/*! ./privatekey */ \"(ssr)/./node_modules/bitcore-lib/lib/privatekey.js\");\n  return param instanceof PrivateKey;\n};\n\n/**\n * Internal function to detect if an object is a Buffer\n *\n * @param {*} param - object to test\n * @returns {boolean}\n * @private\n */\nPublicKey._isBuffer = function(param) {\n  return (param instanceof Buffer) || (param instanceof Uint8Array);\n};\n\n/**\n * Internal function to transform a private key into a public key point\n *\n * @param {PrivateKey} privkey - An instance of PrivateKey\n * @returns {Object} An object with keys: point and compressed\n * @private\n */\nPublicKey._transformPrivateKey = function(privkey) {\n  $.checkArgument(PublicKey._isPrivateKey(privkey), 'Must be an instance of PrivateKey');\n  var info = {};\n  info.point = Point.getG().mul(privkey.bn);\n  info.compressed = privkey.compressed;\n  info.network = privkey.network;\n  return info;\n};\n\n/**\n * Internal function to transform DER into a public key point\n *\n * @param {Buffer} buf - An hex encoded buffer\n * @param {bool=} strict - if set to false, will loosen some conditions\n * @returns {Object} An object with keys: point and compressed\n * @private\n */\nPublicKey._transformDER = function(buf, strict) {\n  /* jshint maxstatements: 30 */\n  /* jshint maxcomplexity: 12 */\n  $.checkArgument(PublicKey._isBuffer(buf), 'Must be a hex buffer of DER encoded public key');\n  var info = {};\n\n  strict = _.isUndefined(strict) ? true : strict;\n\n  var x;\n  var y;\n  var xbuf;\n  var ybuf;\n\n  if (buf[0] === 0x04 || (!strict && (buf[0] === 0x06 || buf[0] === 0x07))) {\n    xbuf = buf.slice(1, 33);\n    ybuf = buf.slice(33, 65);\n    if (xbuf.length !== 32 || ybuf.length !== 32 || buf.length !== 65) {\n      throw new TypeError('Length of x and y must be 32 bytes');\n    }\n    x = new BN(xbuf);\n    y = new BN(ybuf);\n    info.point = new Point(x, y);\n    info.compressed = false;\n  } else if (buf[0] === 0x03) {\n    xbuf = buf.slice(1);\n    x = new BN(xbuf);\n    info = PublicKey._transformX(true, x);\n    info.compressed = true;\n  } else if (buf[0] === 0x02) {\n    xbuf = buf.slice(1);\n    x = new BN(xbuf);\n    info = PublicKey._transformX(false, x);\n    info.compressed = true;\n  } else {\n    throw new TypeError('Invalid DER format public key');\n  }\n  return info;\n};\n\n/**\n * Internal function to transform X into a public key point\n *\n * @param {Boolean} odd - If the point is above or below the x axis\n * @param {Point} x - The x point\n * @returns {Object} An object with keys: point and compressed\n * @private\n */\nPublicKey._transformX = function(odd, x) {\n  $.checkArgument(typeof odd === 'boolean', 'Must specify whether y is odd or not (true or false)');\n  var info = {};\n  info.point = Point.fromX(odd, x);\n  return info;\n};\n\n/**\n * Internal function to transform a JSON into a public key point\n *\n * @param {String|Object} json - a JSON string or plain object\n * @returns {Object} An object with keys: point and compressed\n * @private\n */\nPublicKey._transformObject = function(json) {\n  var x = new BN(json.x, 'hex');\n  var y = new BN(json.y, 'hex');\n  var point = new Point(x, y);\n  return new PublicKey(point, {\n    compressed: json.compressed\n  });\n};\n\n/**\n * Instantiate a PublicKey from a PrivateKey\n *\n * @param {PrivateKey} privkey - An instance of PrivateKey\n * @returns {PublicKey} A new valid instance of PublicKey\n */\nPublicKey.fromPrivateKey = function(privkey) {\n  $.checkArgument(PublicKey._isPrivateKey(privkey), 'Must be an instance of PrivateKey');\n  var info = PublicKey._transformPrivateKey(privkey);\n  return new PublicKey(info.point, {\n    compressed: info.compressed,\n    network: info.network\n  });\n};\n\n/**\n * Instantiate a PublicKey from a Buffer\n * @param {Buffer} buf A DER buffer (33+ bytes) or a 32 byte X-only coordinate (taproot only)\n * @param {Boolean} strict (optional; Only applies to DER format) If set to false, will loosen some conditions\n * @returns {PublicKey}\n */\nPublicKey.fromBuffer = function(buf, strict) {\n  $.checkArgument(PublicKey._isBuffer(buf), 'Must be a hex buffer of DER encoded public key or 32 byte X coordinate (taproot)');\n  if (buf.length === 32) {\n    return PublicKey.fromX(false, buf);\n  }\n  return PublicKey.fromDER(buf, strict);\n}\n\n/**\n * Instantiate a PublicKey from a DER buffer\n * @param {Buffer} buf - A DER hex buffer\n * @param {bool=} strict - if set to false, will loosen some conditions\n * @returns {PublicKey} A new valid instance of PublicKey\n */\nPublicKey.fromDER = function(buf, strict) {\n  $.checkArgument(PublicKey._isBuffer(buf), 'Must be a hex buffer of DER encoded public key');\n  var info = PublicKey._transformDER(buf, strict);\n  return new PublicKey(info.point, {\n    compressed: info.compressed\n  });\n};\n\n/**\n * Instantiate a PublicKey from a Point\n *\n * @param {Point} point - A Point instance\n * @param {boolean=} compressed - whether to store this public key as compressed format\n * @returns {PublicKey} A new valid instance of PublicKey\n */\nPublicKey.fromPoint = function(point, compressed) {\n  $.checkArgument(point instanceof Point, 'First argument must be an instance of Point.');\n  return new PublicKey(point, {\n    compressed: compressed\n  });\n};\n\n/**\n * Instantiate a PublicKey from a DER hex encoded string\n *\n * @param {string} str - A DER hex string\n * @param {String=} encoding - The type of string encoding\n * @returns {PublicKey} A new valid instance of PublicKey\n */\nPublicKey.fromString = function(str, encoding) {\n  var buf = Buffer.from(str, encoding || 'hex');\n  var info = PublicKey._transformDER(buf);\n  return new PublicKey(info.point, {\n    compressed: info.compressed\n  });\n};\n\n/**\n * Instantiate a PublicKey from an X Point\n *\n * @param {Boolean} odd - If the point is above or below the x axis\n * @param {Point} x - The x point\n * @returns {PublicKey} A new valid instance of PublicKey\n */\nPublicKey.fromX = function(odd, x) {\n  var info = PublicKey._transformX(odd, x);\n  return new PublicKey(info.point, {\n    compressed: info.compressed\n  });\n};\n\n/**\n * PublicKey instance from a Taproot (32-byte) public key\n * @param {String|Buffer} hexBuf \n * @returns {PublicKey}\n */\nPublicKey.fromTaproot = function(hexBuf) {\n  if (typeof hexBuf === 'string' && JSUtil.isHexaString(hexBuf)) {\n    hexBuf = Buffer.from(hexBuf, 'hex');\n  }\n  $.checkArgument(Buffer.isBuffer(hexBuf), 'hexBuf must be a hex string or buffer');\n  $.checkArgument(hexBuf.length === 32, 'Taproot public keys must be 32 bytes');\n  return new PublicKey.fromX(false, hexBuf);\n}\n\n/**\n * Verifies if the input is a valid Taproot public key\n * @param {String|Buffer} hexBuf \n * @returns {Boolean}\n */\nPublicKey.isValidTaproot = function(hexBuf) {\n  try {\n    return !!PublicKey.fromTaproot(hexBuf);\n  } catch (e) {\n    return false;\n  }\n};\n\n\n/**\n * Get the TapTweak tagged hash of this pub key and the merkleRoot\n * @param {Buffer} merkleRoot (optional)\n * @returns {Buffer}\n */\nPublicKey.prototype.computeTapTweakHash = function(merkleRoot) {\n  const taggedWriter = new TaggedHash('TapTweak');\n  taggedWriter.write(this.point.x.toBuffer({ size: 32 }));\n\n  //  If !merkleRoot, then we have no scripts. The actual tweak does not matter, but \n  //  follow BIP341 here to allow for reproducible tweaking.\n\n  if (merkleRoot) {\n    $.checkArgument(Buffer.isBuffer(merkleRoot) && merkleRoot.length === 32, 'merkleRoot must be 32 byte buffer');\n    taggedWriter.write(merkleRoot);\n  }\n  const tweakHash = taggedWriter.finalize();\n  \n  const order = Point.getN();\n  $.checkState(BN.fromBuffer(tweakHash).lt(order), 'TapTweak hash failed secp256k1 order check');\n  return tweakHash;\n};\n\n\n/**\n * Verify a tweaked public key against this key\n * @param {PublicKey|Buffer} p Tweaked pub key\n * @param {Buffer} merkleRoot (optional)\n * @param {Buffer} control \n * @returns {Boolean}\n */\nPublicKey.prototype.checkTapTweak = function(p, merkleRoot, control) {\n  if (Buffer.isBuffer(p)) {\n    p = PublicKey.fromTaproot(p);\n  }\n  const tweak = p.computeTapTweakHash(merkleRoot);\n\n  const P = p.point.liftX();\n  const Q = P.add(this.point.curve.g.mul(BN.fromBuffer(tweak)));\n  \n  return this.point.x.eq(Q.x) && Q.y.mod(new BN(2)).eq(new BN(control[0] & 1));\n};\n\n\n/**\n * Create a tweaked version of this pub key\n * @param {Buffer} merkleRoot (optional)\n * @returns {{ parity: Number, tweakedPubKey: Buffer }}\n */\nPublicKey.prototype.createTapTweak = function(merkleRoot) {\n  $.checkArgument(merkleRoot == null || (Buffer.isBuffer(merkleRoot) && merkleRoot.length === 32), 'merkleRoot must be a 32 byte buffer');\n\n  let t = this.computeTapTweakHash(merkleRoot);\n  t = new BN(t);\n  const Q = this.point.liftX().add(Point.getG().mul(t));\n  const parity = Q.y.isEven() ? 0 : 1;\n  return {\n    parity,\n    tweakedPubKey: Q.x.toBuffer()\n  };\n};\n\n/**\n * Check if there would be any errors when initializing a PublicKey\n *\n * @param {string} data - The encoded data in various formats\n * @returns {null|Error} An error if exists\n */\nPublicKey.getValidationError = function(data) {\n  var error;\n  try {\n    /* jshint nonew: false */\n    new PublicKey(data);\n  } catch (e) {\n    error = e;\n  }\n  return error;\n};\n\n/**\n * Check if the parameters are valid\n *\n * @param {string} data - The encoded data in various formats\n * @returns {Boolean} If the public key would be valid\n */\nPublicKey.isValid = function(data) {\n  return !PublicKey.getValidationError(data);\n};\n\n/**\n * @returns {Object} A plain object of the PublicKey\n */\nPublicKey.prototype.toObject = PublicKey.prototype.toJSON = function toObject() {\n  return {\n    x: this.point.getX().toString('hex', 2),\n    y: this.point.getY().toString('hex', 2),\n    compressed: this.compressed\n  };\n};\n\n/**\n * Will output the PublicKey to a DER Buffer\n *\n * @returns {Buffer} A DER hex encoded buffer\n */\nPublicKey.prototype.toBuffer = PublicKey.prototype.toDER = function() {\n  var x = this.point.getX();\n  var y = this.point.getY();\n\n  var xbuf = x.toBuffer({\n    size: 32\n  });\n  var ybuf = y.toBuffer({\n    size: 32\n  });\n\n  var prefix;\n  if (!this.compressed) {\n    prefix = Buffer.from([0x04]);\n    return Buffer.concat([prefix, xbuf, ybuf]);\n  } else {\n    var odd = ybuf[ybuf.length - 1] % 2;\n    if (odd) {\n      prefix = Buffer.from([0x03]);\n    } else {\n      prefix = Buffer.from([0x02]);\n    }\n    return Buffer.concat([prefix, xbuf]);\n  }\n};\n\n/**\n * Will return a sha256 + ripemd160 hash of the serialized public key\n * @see https://github.com/bitcoin/bitcoin/blob/master/src/pubkey.h#L141\n * @returns {Buffer}\n */\nPublicKey.prototype._getID = function _getID() {\n  return Hash.sha256ripemd160(this.toBuffer());\n};\n\n/**\n * Will return an address for the public key\n *\n * @param {String|Network=} network - Which network should the address be for\n * @param {string} type - Either 'pubkeyhash', 'witnesspubkeyhash', or 'scripthash'\n * @returns {Address} An address generated from the public key\n */\nPublicKey.prototype.toAddress = function(network, type) {\n  var Address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\n  return Address.fromPublicKey(this, network || this.network, type);\n};\n\n/**\n * Will output the PublicKey to a DER encoded hex string\n *\n * @returns {string} A DER hex encoded string\n */\nPublicKey.prototype.toString = function() {\n  return this.toDER().toString('hex');\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Public key\n */\nPublicKey.prototype.inspect = function() {\n  return '<PublicKey: ' + this.toString() +\n    (this.compressed ? '' : ', uncompressed') + '>';\n};\n\n\nmodule.exports = PublicKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/publickey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/script/index.js":
/*!******************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/script/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/script.js\");\n\nmodule.exports.Interpreter = __webpack_require__(/*! ./interpreter */ \"(ssr)/./node_modules/bitcore-lib/lib/script/interpreter.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3NjcmlwdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw2R0FBb0M7O0FBRXBDLG1JQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL2xpYi9zY3JpcHQvaW5kZXguanM/ZGVmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc2NyaXB0Jyk7XG5cbm1vZHVsZS5leHBvcnRzLkludGVycHJldGVyID0gcmVxdWlyZSgnLi9pbnRlcnByZXRlcicpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/script/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/script/interpreter.js":
/*!************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/script/interpreter.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\nconst Script = __webpack_require__(/*! ./script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/script.js\");\nconst Opcode = __webpack_require__(/*! ../opcode */ \"(ssr)/./node_modules/bitcore-lib/lib/opcode.js\");\nconst BN = __webpack_require__(/*! ../crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nconst Hash = __webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nconst Signature = __webpack_require__(/*! ../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nconst PublicKey = __webpack_require__(/*! ../publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\nconst $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nconst SighashWitness = __webpack_require__(/*! ../transaction/sighashwitness */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashwitness.js\");\nconst SighashSchnorr = __webpack_require__(/*! ../transaction/sighashschnorr */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashschnorr.js\");\nconst BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nconst TaggedHash = __webpack_require__(/*! ../crypto/taggedhash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js\");\n\n/**\n * Bitcoin transactions contain scripts. Each input has a script called the\n * scriptSig, and each output has a script called the scriptPubkey. To validate\n * an input, the input's script is concatenated with the referenced output script,\n * and the result is executed. If at the end of execution the stack contains a\n * \"true\" value, then the transaction is valid.\n *\n * The primary way to use this class is via the verify function.\n * e.g., Interpreter().verify( ... );\n */\nvar Interpreter = function Interpreter(obj) {\n  if (!(this instanceof Interpreter)) {\n    return new Interpreter(obj);\n  }\n  if (obj) {\n    this.initialize();\n    this.set(obj);\n  } else {\n    this.initialize();\n  }\n};\n\n\nInterpreter.prototype.verifyWitnessProgram = function(version, program, witness, satoshis, flags, isP2SH) {\n\n  var scriptPubKey = new Script();\n  var stack = [];\n\n  if (version === 0) {\n    if (program.length === Interpreter.WITNESS_V0_SCRIPTHASH_SIZE) {\n      if (witness.length === 0) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY';\n        return false;\n      }\n\n      var scriptPubKeyBuffer = witness[witness.length - 1];\n      scriptPubKey = new Script(scriptPubKeyBuffer);\n      var hash = Hash.sha256(scriptPubKeyBuffer);\n      if (hash.toString('hex') !== program.toString('hex')) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH';\n        return false;\n      }\n\n      stack = witness.slice(0, -1);\n      return this.executeWitnessScript(scriptPubKey, stack, Signature.Version.WITNESS_V0, satoshis, flags);\n    } else if (program.length === Interpreter.WITNESS_V0_KEYHASH_SIZE) {\n      if (witness.length !== 2) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH';\n        return false;\n      }\n\n      scriptPubKey.add(Opcode.OP_DUP);\n      scriptPubKey.add(Opcode.OP_HASH160);\n      scriptPubKey.add(program);\n      scriptPubKey.add(Opcode.OP_EQUALVERIFY);\n      scriptPubKey.add(Opcode.OP_CHECKSIG);\n\n      stack = witness;\n      return this.executeWitnessScript(scriptPubKey, stack, Signature.Version.WITNESS_V0, satoshis, flags);\n    } else {\n      this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH';\n      return false;\n    }\n  } else if (version === 1 && program.length == Interpreter.WITNESS_V1_TAPROOT_SIZE && !isP2SH) {\n    const execdata = { annexPresent: false };\n    // BIP341 Taproot: 32-byte non-P2SH witness v1 program (which encodes a P2C-tweaked pubkey)\n    if (!(flags & Interpreter.SCRIPT_VERIFY_TAPROOT)) {\n      return true;\n    }\n    stack = Array.from(witness);\n    if (stack.length == 0) {\n      this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY';\n      return false;\n    }\n    if (stack.length >= 2 && stack[stack.length - 1].length && stack[stack.length - 1][0] === Script.ANNEX_TAG) {\n      // Drop annex (this is non-standard; see IsWitnessStandard)\n      const annex = stack.pop();\n      const annexWriter = new BufferWriter();\n      annexWriter.writeVarintNum(annex.length);\n      annexWriter.write(annex);\n      execdata.annexHash = Hash.sha256(annexWriter.toBuffer());\n      execdata.annexPresent = true;\n    }\n    execdata.annexInit = true;\n    if (stack.length === 1) {\n      // Key path spending (stack size is 1 after removing optional annex)\n      return this.checkSchnorrSignature(stack[0], program, Signature.Version.TAPROOT, execdata);\n    } else {\n      // Script path spending (stack size is >1 after removing optional annex)\n      const control = stack.pop();\n      const scriptPubKeyBuf = stack.pop();\n\n      if (\n        control.length < Interpreter.TAPROOT_CONTROL_BASE_SIZE  ||\n        control.length > Interpreter.TAPROOT_CONTROL_MAX_SIZE   ||\n        ((control.length - Interpreter.TAPROOT_CONTROL_BASE_SIZE) % Interpreter.TAPROOT_CONTROL_NODE_SIZE) != 0\n      ) {\n        this.errstr = 'SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE';\n        return false;\n      }\n      execdata.tapleafHash = Interpreter.computeTapleafHash(control[0] & Interpreter.TAPROOT_LEAF_MASK, scriptPubKeyBuf);\n      if (!Interpreter.verifyTaprootCommitment(control, program, execdata.tapleafHash)) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH';\n        return false;\n      }\n      execdata.tapleafHashInit = true;\n      if ((control[0] & Interpreter.TAPROOT_LEAF_MASK) === Interpreter.TAPROOT_LEAF_TAPSCRIPT) {\n        // Tapscript (leaf version 0xc0)\n        let witnessSize;\n        {\n          const bw = new BufferWriter();\n          bw.writeVarintNum(witness.length);\n          for (let element of witness) {\n            bw.writeVarintNum(element.length);\n            bw.write(element);\n          }\n          witnessSize = bw.toBuffer().length;\n        }\n\n        try {\n          scriptPubKey = new Script(scriptPubKeyBuf);\n        } catch (err) {\n          // Note how this condition would not be reached if an unknown OP_SUCCESSx was found\n          this.errstr = 'SCRIPT_ERR_BAD_OPCODE';\n          return false;\n        }\n\n        execdata.validationWeightLeft = witnessSize + Script.VALIDATION_WEIGHT_OFFSET;\n        execdata.validationWeightLeftInit = true;\n        return this.executeWitnessScript(scriptPubKey, stack, Signature.Version.TAPSCRIPT, satoshis, flags, execdata);\n      }\n      // If none of the above conditions are met then this must be an upgraded taproot version.\n      if (flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION) {\n        this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION';\n        return false;\n      }\n      // Future softfork compatibility\n      return true;\n    }\n  } else if ((flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)) {\n    this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM';\n    return false;\n  }\n  // Other version/size/p2sh combinations return true for future softfork compatibility\n  return true;\n};\n\n\nInterpreter.prototype.executeWitnessScript = function(scriptPubKey, stack, sigversion, satoshis, flags, execdata) {\n  if (sigversion === Signature.Version.TAPSCRIPT) {\n    for (let chunk of scriptPubKey.chunks) {\n      // New opcodes will be listed here. May use a different sigversion to modify existing opcodes.\n      if (Opcode.isOpSuccess(chunk.opcodenum)) {\n        if (flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS) {\n          this.errstr = 'SCRIPT_ERR_DISCOURAGE_OP_SUCCESS';\n          return false;\n        }\n        return true;\n      }\n    }\n\n    // Tapscript enforces initial stack size limits (altstack is empty here)\n    if (stack.length > Interpreter.MAX_STACK_SIZE) {\n      this.errstr = 'SCRIPT_ERR_STACK_SIZE';\n      return false;\n    }\n  }\n\n  // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n  if (stack.length && stack.some(elem => elem.length > Interpreter.MAX_SCRIPT_ELEMENT_SIZE)) {\n    this.errstr = 'SCRIPT_ERR_PUSH_SIZE';\n    return false;\n  }\n\n  this.initialize();\n\n  this.set({\n    script: scriptPubKey,\n    stack: stack,\n    sigversion: sigversion,\n    satoshis: satoshis,\n    flags: flags,\n    execdata: execdata\n  });\n\n  if (!this.evaluate()) {\n    return false;\n  }\n\n  if (this.stack.length !== 1) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE';\n    return false;\n  }\n\n  var buf = this.stack[this.stack.length - 1];\n  if (!Interpreter.castToBool(buf)) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_STACK';\n    return false;\n  }\n\n  return true;\n};\n\n\n\n/**\n * Verifies a Script by executing it and returns true if it is valid.\n * This function needs to be provided with the scriptSig and the scriptPubkey\n * separately.\n * @param {Script} scriptSig - the script's first part (corresponding to the tx input)\n * @param {Script} scriptPubkey - the script's last part (corresponding to the tx output)\n * @param {Transaction=} tx - the Transaction containing the scriptSig in one input (used\n *    to check signature validity for some opcodes like OP_CHECKSIG)\n * @param {number} nin - index of the transaction input containing the scriptSig verified.\n * @param {number} flags - evaluation flags. See Interpreter.SCRIPT_* constants\n * @param {number} witness - array of witness data\n * @param {number} satoshis - number of satoshis created by this output\n *\n * Translated from bitcoind's VerifyScript\n */\nInterpreter.prototype.verify = function(scriptSig, scriptPubkey, tx, nin, flags, witness, satoshis) {\n\n  var Transaction = __webpack_require__(/*! ../transaction */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/index.js\");\n  if (_.isUndefined(tx)) {\n    tx = new Transaction();\n  }\n  if (_.isUndefined(nin)) {\n    nin = 0;\n  }\n  if (_.isUndefined(flags)) {\n    flags = 0;\n  }\n  if (_.isUndefined(witness)) {\n    witness = null;\n  }\n  if (_.isUndefined(satoshis)) {\n    satoshis = 0;\n  }\n\n  this.set({\n    script: scriptSig,\n    tx: tx,\n    nin: nin,\n    sigversion: Signature.Version.BASE,\n    satoshis: 0,\n    flags: flags\n  });\n  var stackCopy;\n\n  if ((flags & Interpreter.SCRIPT_VERIFY_SIGPUSHONLY) !== 0 && !scriptSig.isPushOnly()) {\n    this.errstr = 'SCRIPT_ERR_SIG_PUSHONLY';\n    return false;\n  }\n\n  // evaluate scriptSig\n  if (!this.evaluate()) {\n    return false;\n  }\n\n  if (flags & Interpreter.SCRIPT_VERIFY_P2SH) {\n    stackCopy = this.stack.slice();\n  }\n\n  var stack = this.stack;\n  this.initialize();\n  this.set({\n    script: scriptPubkey,\n    stack: stack,\n    tx: tx,\n    nin: nin,\n    flags: flags\n  });\n\n  // evaluate scriptPubkey\n  if (!this.evaluate()) {\n    return false;\n  }\n\n  if (this.stack.length === 0) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_NO_RESULT';\n    return false;\n  }\n\n  var buf = this.stack[this.stack.length - 1];\n  if (!Interpreter.castToBool(buf)) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_STACK';\n    return false;\n  }\n\n  var hadWitness = false;\n  if ((flags & Interpreter.SCRIPT_VERIFY_WITNESS)) {\n    var witnessValues = {};\n    if (scriptPubkey.isWitnessProgram(witnessValues)) {\n      hadWitness = true;\n      if (scriptSig.toBuffer().length !== 0) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_MALLEATED';\n        return false;\n      }\n      if (!this.verifyWitnessProgram(witnessValues.version, witnessValues.program, witness, satoshis, this.flags, /* isP2SH */ false)) {\n        return false;\n      }\n    }\n  }\n\n  // Additional validation for spend-to-script-hash transactions:\n  if ((flags & Interpreter.SCRIPT_VERIFY_P2SH) && scriptPubkey.isScriptHashOut()) {\n    // scriptSig must be literals-only or validation fails\n    if (!scriptSig.isPushOnly()) {\n      this.errstr = 'SCRIPT_ERR_SIG_PUSHONLY';\n      return false;\n    }\n\n    // stackCopy cannot be empty here, because if it was the\n    // P2SH  HASH <> EQUAL  scriptPubKey would be evaluated with\n    // an empty stack and the EvalScript above would return false.\n    if (stackCopy.length === 0) {\n      throw new Error('internal error - stack copy empty');\n    }\n\n    var redeemScriptSerialized = stackCopy[stackCopy.length - 1];\n    var redeemScript = Script.fromBuffer(redeemScriptSerialized);\n    stackCopy.pop();\n\n    this.initialize();\n    this.set({\n      script: redeemScript,\n      stack: stackCopy,\n      tx: tx,\n      nin: nin,\n      flags: flags\n    });\n\n    // evaluate redeemScript\n    if (!this.evaluate()) {\n      return false;\n    }\n\n    if (stackCopy.length === 0) {\n      this.errstr = 'SCRIPT_ERR_EVAL_FALSE_NO_P2SH_STACK';\n      return false;\n    }\n\n    if (!Interpreter.castToBool(stackCopy[stackCopy.length - 1])) {\n      this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_P2SH_STACK';\n      return false;\n    }\n    if ((flags & Interpreter.SCRIPT_VERIFY_WITNESS)) {\n      var p2shWitnessValues = {};\n      if (redeemScript.isWitnessProgram(p2shWitnessValues)) {\n        hadWitness = true;\n        var redeemScriptPush = new Script();\n        redeemScriptPush.add(redeemScript.toBuffer());\n        if (scriptSig.toHex() !== redeemScriptPush.toHex()) {\n          this.errstr = 'SCRIPT_ERR_WITNESS_MALLEATED_P2SH';\n          return false;\n        }\n\n        if (!this.verifyWitnessProgram(p2shWitnessValues.version, p2shWitnessValues.program, witness, satoshis, this.flags, /* isP2SH */ true)) {\n          return false;\n        }\n        // Bypass the cleanstack check at the end. The actual stack is obviously not clean\n        // for witness programs.\n        stack = [stack[0]];\n      }\n    }\n  }\n\n  // The CLEANSTACK check is only performed after potential P2SH evaluation,\n  // as the non-P2SH evaluation of a P2SH script will obviously not result in\n  // a clean stack (the P2SH inputs remain). The same holds for witness\n  // evaluation.\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_CLEANSTACK) != 0) {\n      // Disallow CLEANSTACK without P2SH, as otherwise a switch\n      // CLEANSTACK->P2SH+CLEANSTACK would be possible, which is not a\n      // softfork (and P2SH should be one).\n      if (\n        (this.flags & Interpreter.SCRIPT_VERIFY_P2SH)    == 0 ||\n        (this.flags & Interpreter.SCRIPT_VERIFY_WITNESS) == 0\n      ) {\n        throw 'flags & SCRIPT_VERIFY_P2SH';\n      }\n\n      if (stackCopy.length != 1) {\n        this.errstr = 'SCRIPT_ERR_CLEANSTACK';\n        return false;\n      }\n  }\n\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_WITNESS)) {\n    if (!hadWitness && witness.length > 0) {\n      this.errstr = 'SCRIPT_ERR_WITNESS_UNEXPECTED';\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = Interpreter;\n\nInterpreter.prototype.initialize = function(obj) {\n  this.stack = [];\n  this.altstack = [];\n  this.pc = 0;\n  this.satoshis = 0;\n  this.sigversion = Signature.Version.BASE;\n  this.pbegincodehash = 0;\n  this.nOpCount = 0;\n  this.vfExec = [];\n  this.errstr = '';\n  this.flags = 0;\n  this.execdata = {};\n};\n\nInterpreter.prototype.set = function(obj) {\n  this.script = obj.script || this.script;\n  this.tx = obj.tx || this.tx;\n  this.nin = typeof obj.nin === 'undefined' ? this.nin : parseInt(obj.nin);\n  this.stack = obj.stack || this.stack;\n  this.altstack = obj.altstack || this.altstack;\n  this.pc = typeof obj.pc === 'undefined' ? this.pc : obj.pc;\n  this.pbegincodehash = typeof obj.pbegincodehash === 'undefined' ? this.pbegincodehash : obj.pbegincodehash;\n  this.sigversion = typeof obj.sigversion === 'undefined' ? this.sigversion : obj.sigversion;\n  this.satoshis = typeof obj.satoshis === 'undefined' ? this.satoshis : obj.satoshis;\n  this.nOpCount = typeof obj.nOpCount === 'undefined' ? this.nOpCount : obj.nOpCount;\n  this.vfExec = obj.vfExec || this.vfExec;\n  this.errstr = obj.errstr || this.errstr;\n  this.flags = typeof obj.flags === 'undefined' ? this.flags : obj.flags;\n  this.execdata = typeof obj.execdata === 'undefined' ? this.execdata : (obj.execdata || {});\n};\n\nInterpreter.true = Buffer.from([1]);\nInterpreter.false = Buffer.from([]);\n\nInterpreter.MAX_SCRIPT_SIZE = 10000;\nInterpreter.MAX_STACK_SIZE = 1000;\nInterpreter.MAX_SCRIPT_ELEMENT_SIZE = 520;\n\nInterpreter.LOCKTIME_THRESHOLD = 500000000;\nInterpreter.LOCKTIME_THRESHOLD_BN = new BN(Interpreter.LOCKTIME_THRESHOLD);\n\n// flags taken from bitcoind\n// bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104\nInterpreter.SCRIPT_VERIFY_NONE = 0;\n\n// Evaluate P2SH subscripts (softfork safe, BIP16).\nInterpreter.SCRIPT_VERIFY_P2SH = (1 << 0);\n\n// Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.\n// Passing a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) to checksig causes that pubkey to be\n// skipped (not softfork safe: this flag can widen the validity of OP_CHECKSIG OP_NOT).\nInterpreter.SCRIPT_VERIFY_STRICTENC = (1 << 1);\n\n// Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)\nInterpreter.SCRIPT_VERIFY_DERSIG = (1 << 2);\n\n// Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure\n// (softfork safe, BIP62 rule 5).\nInterpreter.SCRIPT_VERIFY_LOW_S = (1 << 3);\n\n// verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).\nInterpreter.SCRIPT_VERIFY_NULLDUMMY = (1 << 4);\n\n// Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).\nInterpreter.SCRIPT_VERIFY_SIGPUSHONLY = (1 << 5);\n\n// Require minimal encodings for all push operations (OP_0... OP_16, OP_1NEGATE where possible, direct\n// pushes up to 75 bytes, OP_PUSHDATA up to 255 bytes, OP_PUSHDATA2 for anything larger). Evaluating\n// any other push causes the script to fail (BIP62 rule 3).\n// In addition, whenever a stack element is interpreted as a number, it must be of minimal length (BIP62 rule 4).\n// (softfork safe)\nInterpreter.SCRIPT_VERIFY_MINIMALDATA = (1 << 6);\n\n// Discourage use of NOPs reserved for upgrades (NOP1-10)\n//\n// Provided so that nodes can avoid accepting or mining transactions\n// containing executed NOP's whose meaning may change after a soft-fork,\n// thus rendering the script invalid; with this flag set executing\n// discouraged NOPs fails the script. This verification flag will never be\n// a mandatory flag applied to scripts in a block. NOPs that are not\n// executed, e.g.  within an unexecuted IF ENDIF block, are *not* rejected.\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = (1 << 7);\n\n\n// Require that only a single stack element remains after evaluation. This\n// changes the success criterion from \"At least one stack element must\n// remain, and when interpreted as a boolean, it must be true\" to \"Exactly\n// one stack element must remain, and when interpreted as a boolean, it must\n// be true\".\n// (softfork safe, BIP62 rule 6)\n// Note: CLEANSTACK should never be used without P2SH or WITNESS.\nInterpreter.SCRIPT_VERIFY_CLEANSTACK = (1 << 8),\n\n// Verify CHECKLOCKTIMEVERIFY\n//\n// See BIP65 for details.\nInterpreter.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1 << 9);\n\n// support CHECKSEQUENCEVERIFY opcode\n//\n// See BIP112 for details\nInterpreter.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1 << 10);\n\n// Support segregated witness\n//\nInterpreter.SCRIPT_VERIFY_WITNESS = (1 << 11);\n\n// Making v1-v16 witness program non-standard\n//\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1 << 12);\n\n\n//\n// Segwit script only: Require the argument of OP_IF/NOTIF to be exactly\n// 0x01 or empty vector\n//\nInterpreter.SCRIPT_VERIFY_MINIMALIF = (1 << 13);\n\n\n// Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n//\nInterpreter.SCRIPT_VERIFY_NULLFAIL = (1 << 14);\n\n// Public keys in scripts must be compressed\n//\nInterpreter.SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1 << 15);\n\n// Do we accept signature using SIGHASH_FORKID\n//\nInterpreter.SCRIPT_ENABLE_SIGHASH_FORKID = (1 << 16);\n\n// Do we accept activate replay protection using a different fork id.\n//\nInterpreter.SCRIPT_ENABLE_REPLAY_PROTECTION = (1 << 17);\n\n// Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n//\nInterpreter.SCRIPT_VERIFY_CONST_SCRIPTCODE = (1 << 16);\n\n// Verify taproot script \n//\nInterpreter.SCRIPT_VERIFY_TAPROOT = (1 << 17);\n\n// Making unknown Taproot leaf versions non-standard\n//\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION = (1 << 18);\n\n// Making unknown OP_SUCCESS non-standard\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS = (1 << 19);\n\n// Making unknown public key versions (in BIP 342 scripts) non-standard\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE = (1 << 20);\n\n\n\n/* Below flags apply in the context of BIP 68*/\n/**\n * If this flag set, CTxIn::nSequence is NOT interpreted as a relative\n * lock-time.\n */\nInterpreter.SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);\n\n/**\n * If CTxIn::nSequence encodes a relative lock-time and this flag is set,\n * the relative lock-time has units of 512 seconds, otherwise it specifies\n * blocks with a granularity of 1.\n */\nInterpreter.SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);\n\n/**\n * If CTxIn::nSequence encodes a relative lock-time, this mask is applied to\n * extract that lock-time from the sequence field.\n */\nInterpreter.SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n\n/** Signature hash sizes */\nInterpreter.WITNESS_V0_SCRIPTHASH_SIZE = 32;\nInterpreter.WITNESS_V0_KEYHASH_SIZE = 20;\nInterpreter.WITNESS_V1_TAPROOT_SIZE = 32;\n\nInterpreter.TAPROOT_LEAF_MASK = 0xfe;\nInterpreter.TAPROOT_LEAF_TAPSCRIPT = 0xc0;\nInterpreter.TAPROOT_CONTROL_BASE_SIZE = 33;\nInterpreter.TAPROOT_CONTROL_NODE_SIZE = 32;\nInterpreter.TAPROOT_CONTROL_MAX_NODE_COUNT = 128;\nInterpreter.TAPROOT_CONTROL_MAX_SIZE = Interpreter.TAPROOT_CONTROL_BASE_SIZE + Interpreter.TAPROOT_CONTROL_NODE_SIZE * Interpreter.TAPROOT_CONTROL_MAX_NODE_COUNT;\n\n// Conceptually, this doesn't really belong with the Interpreter, but I haven't found a better place for it.\nInterpreter.PROTOCOL_VERSION = 70016;\n\nInterpreter.castToBool = function(buf) {\n  for (var i = 0; i < buf.length; i++) {\n    if (buf[i] !== 0) {\n      // can be negative zero\n      if (i === buf.length - 1 && buf[i] === 0x80) {\n        return false;\n      }\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Translated from bitcoind's CheckSignatureEncoding\n */\nInterpreter.prototype.checkSignatureEncoding = function(buf) {\n  var sig;\n\n    // Empty signature. Not strictly DER encoded, but allowed to provide a\n    // compact way to provide an invalid signature for use with CHECK(MULTI)SIG\n    if (buf.length == 0) {\n        return true;\n    }\n\n  if ((this.flags & (Interpreter.SCRIPT_VERIFY_DERSIG | Interpreter.SCRIPT_VERIFY_LOW_S | Interpreter.SCRIPT_VERIFY_STRICTENC)) !== 0 && !Signature.isTxDER(buf)) {\n    this.errstr = 'SCRIPT_ERR_SIG_DER_INVALID_FORMAT';\n    return false;\n  } else if ((this.flags & Interpreter.SCRIPT_VERIFY_LOW_S) !== 0) {\n    sig = Signature.fromTxFormat(buf);\n    if (!sig.hasLowS()) {\n      this.errstr = 'SCRIPT_ERR_SIG_DER_HIGH_S';\n      return false;\n    }\n  } else if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0) {\n    sig = Signature.fromTxFormat(buf);\n    if (!sig.hasDefinedHashtype()) {\n      this.errstr = 'SCRIPT_ERR_SIG_HASHTYPE';\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Translated from bitcoind's CheckPubKeyEncoding\n */\nInterpreter.prototype.checkPubkeyEncoding = function(buf) {\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0 && !PublicKey.isValid(buf)) {\n    this.errstr = 'SCRIPT_ERR_PUBKEYTYPE';\n    return false;\n  }\n\n  // Only compressed keys are accepted in segwit\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_WITNESS_PUBKEYTYPE) != 0 && this.sigversion == Signature.Version.WITNESS_V0 && !PublicKey.fromBuffer(buf).compressed) {\n    this.errstr = 'SCRIPT_ERR_WITNESS_PUBKEYTYPE';\n    return false;\n  }\n\n  return true;\n};\n\n\n/**\n * Verifies ECDSA signature\n * @param {Signature} sig \n * @param {PublicKey} pubkey \n * @param {Number} nin \n * @param {Script} subscript \n * @param {Number} satoshis \n * @returns {Boolean}\n */\nInterpreter.prototype.checkEcdsaSignature = function(sig, pubkey, nin, subscript, satoshis) {\n  var subscriptBuffer = subscript.toBuffer();\n  var scriptCodeWriter = new BufferWriter();\n  scriptCodeWriter.writeVarintNum(subscriptBuffer.length);\n  scriptCodeWriter.write(subscriptBuffer);\n\n  $.checkState(JSUtil.isNaturalNumber(satoshis));\n  var satoshisBuffer = new BufferWriter().writeUInt64LEBN(new BN(satoshis)).toBuffer();\n\n  var verified = SighashWitness.verify(\n    this,\n    sig,\n    pubkey,\n    nin,\n    scriptCodeWriter.toBuffer(),\n    satoshisBuffer\n  );\n  return verified;\n};\n\n\n/**\n * Verifies Schnorr signature\n * @param {Signature|Buffer} sig \n * @param {PublicKey|Buffer} pubkey \n * @param {Number} sigversion \n * @param {Object} execdata \n * @returns {Boolean}\n */\nInterpreter.prototype.checkSchnorrSignature = function(sig, pubkey, sigversion, execdata) {\n  $.checkArgument(sig && Buffer.isBuffer(sig), 'Missing sig');\n  $.checkArgument(pubkey && Buffer.isBuffer(pubkey), 'Missing pubkey');\n  $.checkArgument(sigversion, 'Missing sigversion');\n  $.checkArgument(execdata, 'Missing execdata');\n\n  $.checkArgument(pubkey.length === 32, 'Schnorr signatures have 32-byte public keys. The caller is responsible for enforcing this.');\n  // Note that in Tapscript evaluation, empty signatures are treated specially (invalid signature that does not\n  // abort script execution). This is implemented in EvalChecksigTapscript, which won't invoke\n  // CheckSchnorrSignature in that case. In other contexts, they are invalid like every other signature with\n  // size different from 64 or 65.\n  if (!(sig.length === 64 || sig.length === 65)) {\n    this.errstr = 'SCRIPT_ERR_SCHNORR_SIG_SIZE';\n    return false;\n  }\n\n  if (sig.length === 65 && sig[sig.length - 1] === Signature.SIGHASH_DEFAULT) {\n    this.errstr = 'SCRIPT_ERR_SCHNORR_SIG_HASHTYPE';\n    return false;\n  }\n  sig = Signature.fromSchnorr(sig);\n  const verified = SighashSchnorr.verify(\n    this.tx,\n    sig,\n    pubkey,\n    sigversion,\n    this.nin,\n    execdata\n  );\n  return verified;\n};\n\n\n/**\n * Based on bitcoind's EvalChecksigPreTapscript function\n * bitcoind commit: a0988140b71485ad12c3c3a4a9573f7c21b1eff8\n */\nInterpreter.prototype._evalChecksigPreTapscript = function(bufSig, bufPubkey) {\n  $.checkArgument(\n    this.sigversion === Signature.Version.BASE || this.sigversion === Signature.Version.WITNESS_V0,\n    'sigversion must be base or witness_v0'\n  );\n\n  // Success signifies if the signature is valid.\n  // Result signifies the result of this funciton, which also takes flags into account.\n  const retVal = { success: false, result: false };\n\n  const subscript = new Script().set({\n    chunks: this.script.chunks.slice(this.pbegincodehash)\n  });\n\n  // Drop the signature in pre-segwit scripts but not segwit scripts\n  if (this.sigversion === Signature.Version.BASE) {\n    // Drop the signature, since there's no way for a signature to sign itself\n    const tmpScript = new Script().add(bufSig);\n    let found = subscript.chunks.length;\n    subscript.findAndDelete(tmpScript);\n\n    found = found == subscript.chunks.length + 1; // found if a chunk was removed\n    if (found && (this.flags & Interpreter.SCRIPT_VERIFY_CONST_SCRIPTCODE)) {\n      this.errstr = 'SCRIPT_ERR_SIG_FINDANDDELETE';\n      return retVal;\n    }\n  }\n\n  if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) {\n    return retVal;\n  }\n\n  try {\n    const sig = Signature.fromTxFormat(bufSig);\n    const pubkey = PublicKey.fromBuffer(bufPubkey, false);\n    retVal.success = this.tx.verifySignature(sig, pubkey, this.nin, subscript, this.sigversion, this.satoshis);\n  } catch (e) {\n    //invalid sig or pubkey\n    retVal.success = false;\n  }\n\n  if (!retVal.success && (this.flags & Interpreter.SCRIPT_VERIFY_NULLFAIL) && bufSig.length) {\n    this.errstr = 'SCRIPT_ERR_SIG_NULLFAIL';\n    return retVal;\n  }\n  \n  // If it reaches here, then true\n  retVal.result = true;\n  return retVal;\n};\n\n\n/**\n * Based on bitcoind's EvalChecksigTapscript function\n * bitcoind commit: a0988140b71485ad12c3c3a4a9573f7c21b1eff8\n */\nInterpreter.prototype._evalChecksigTapscript = function(bufSig, bufPubkey) {\n  $.checkArgument(this.sigversion == Signature.Version.TAPSCRIPT, 'this.sigversion must by TAPSCRIPT');\n\n  /*\n    *  The following validation sequence is consensus critical. Please note how --\n    *    upgradable public key versions precede other rules;\n    *    the script execution fails when using empty signature with invalid public key;\n    *    the script execution fails when using non-empty invalid signature.\n    */\n\n  // Success signifies if the signature is valid.\n  // Result signifies the result of this funciton, which also takes flags into account.\n  const retVal = {\n    success: bufSig.length > 0,\n    result: false\n  }\n  if (retVal.success) {\n    // Implement the sigops/witnesssize ratio test.\n    // Passing with an upgradable public key version is also counted.\n    $.checkState(this.execdata.validationWeightLeftInit, 'validationWeightLeftInit is false');\n    this.execdata.validationWeightLeft -= Script.VALIDATION_WEIGHT_PER_SIGOP_PASSED;\n    if (this.execdata.validationWeightLeft < 0) {\n      this.errstr = 'SCRIPT_ERR_TAPSCRIPT_VALIDATION_WEIGHT';\n      return retVal;\n    }\n  }\n  if (bufPubkey.length === 0) {\n    this.errstr = 'SCRIPT_ERR_PUBKEYTYPE';\n    return retVal;\n  } else if (bufPubkey.length == 32) {\n    if (retVal.success && !this.tx.checkSchnorrSignature(bufSig, bufPubkey, this.nin, this.sigversion, this.execdata)) {\n      this.errstr = 'SCRIPT_ERR_SCHNORR_SIG';\n      return retVal;\n    }\n  } else {\n    /*\n      *  New public key version softforks should be defined before this `else` block.\n      *  Generally, the new code should not do anything but failing the script execution. To avoid\n      *  consensus bugs, it should not modify any existing values (including `success`).\n      */\n    if ((this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE) != 0) {\n      this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_PUBKEYTYPE';\n      return retVal;\n    }\n  }\n\n  // If it reaches here, then true\n  retVal.result = true;\n  return retVal;\n}\n\n/**\n * Based on bitcoind's EvalChecksig function\n * bitcoind commit: a0988140b71485ad12c3c3a4a9573f7c21b1eff8\n * @returns {{ success: Boolean, verified: Boolean }}\n */\nInterpreter.prototype._evalCheckSig = function(bufSig, bufPubkey) {\n  switch(this.sigversion) {\n    case Signature.Version.BASE:\n    case Signature.Version.WITNESS_V0:\n      // const verified = this._evalChecksigPreTapscript(bufSig, bufPubkey);\n      // return { success: verified, verified }; // This is to keep the same return format as _evalCheckSigTapscript\n      return this._evalChecksigPreTapscript(bufSig, bufPubkey);\n    case Signature.Version.TAPSCRIPT:\n      return this._evalChecksigTapscript(bufSig, bufPubkey);\n    case Signature.Version.TAPROOT:\n      // Key path spending in Taproot has no script, so this is unreachable.\n      throw new Error('Called evalCheckSig with a TAPROOT sigversion. Check your implementation');\n  }\n};\n\n/**\n * Based on bitcoind's EvalScript function, with the inner loop moved to\n * Interpreter.prototype.step()\n * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104\n */\nInterpreter.prototype.evaluate = function() {\n  // sigversion cannot be TAPROOT here, as it admits no script execution.\n  $.checkArgument(this.sigversion == Signature.Version.BASE || this.sigversion == Signature.Version.WITNESS_V0 || this.sigversion == Signature.Version.TAPSCRIPT, 'invalid sigversion');\n\n  if (\n    (this.sigversion == Signature.Version.BASE || this.sigversion == Signature.Version.WITNESS_V0) &&\n    this.script.toBuffer().length > Interpreter.MAX_SCRIPT_SIZE\n  ) {\n    this.errstr = 'SCRIPT_ERR_SCRIPT_SIZE';\n    return false;\n  }\n\n  try {\n    while (this.pc < this.script.chunks.length) {\n      var fSuccess = this.step();\n      if (!fSuccess) {\n        return false;\n      }\n    }\n  } catch (e) {\n    this.errstr = 'SCRIPT_ERR_UNKNOWN_ERROR: ' + e;\n    return false;\n  }\n\n  if (this.vfExec.length > 0) {\n    this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Checks a locktime parameter with the transaction's locktime.\n * There are two times of nLockTime: lock-by-blockheight and lock-by-blocktime,\n * distinguished by whether nLockTime < LOCKTIME_THRESHOLD = 500000000\n *\n * See the corresponding code on bitcoin core:\n * https://github.com/bitcoin/bitcoin/blob/ffd75adce01a78b3461b3ff05bcc2b530a9ce994/src/script/interpreter.cpp#L1129\n *\n * @param {BN} nLockTime the locktime read from the script\n * @return {boolean} true if the transaction's locktime is less than or equal to\n *                   the transaction's locktime\n */\nInterpreter.prototype.checkLockTime = function(nLockTime) {\n\n  // We want to compare apples to apples, so fail the script\n  // unless the type of nLockTime being tested is the same as\n  // the nLockTime in the transaction.\n  if (!(\n    (this.tx.nLockTime <  Interpreter.LOCKTIME_THRESHOLD && nLockTime.lt(Interpreter.LOCKTIME_THRESHOLD_BN)) ||\n    (this.tx.nLockTime >= Interpreter.LOCKTIME_THRESHOLD && nLockTime.gte(Interpreter.LOCKTIME_THRESHOLD_BN))\n  )) {\n    return false;\n  }\n\n  // Now that we know we're comparing apples-to-apples, the\n  // comparison is a simple numeric one.\n  if (nLockTime.gt(new BN(this.tx.nLockTime))) {\n    return false;\n  }\n\n  // Finally the nLockTime feature can be disabled and thus\n  // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n  // finalized by setting nSequence to maxint. The\n  // transaction would be allowed into the blockchain, making\n  // the opcode ineffective.\n  //\n  // Testing if this vin is not final is sufficient to\n  // prevent this condition. Alternatively we could test all\n  // inputs, but testing just this input minimizes the data\n  // required to prove correct CHECKLOCKTIMEVERIFY execution.\n  if (!this.tx.inputs[this.nin].isFinal()) {\n    return false;\n  }\n\n  return true;\n}\n\n\n/**\n * Checks a sequence parameter with the transaction's sequence.\n * @param {BN} nSequence the sequence read from the script\n * @return {boolean} true if the transaction's sequence is less than or equal to\n *                   the transaction's sequence \n */\nInterpreter.prototype.checkSequence = function(nSequence) {\n\n  // Relative lock times are supported by comparing the passed in operand to\n  // the sequence number of the input.\n  var txToSequence = this.tx.inputs[this.nin].sequenceNumber;\n\n  // Fail if the transaction's version number is not set high enough to\n  // trigger BIP 68 rules.\n  if (this.tx.version < 2) {\n    return false;\n  }\n\n  // Sequence numbers with their most significant bit set are not consensus\n  // constrained. Testing that the transaction's sequence number do not have\n  // this bit set prevents using this property to get around a\n  // CHECKSEQUENCEVERIFY check.\n  if (txToSequence & SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n    return false;\n  }\n\n  // Mask off any bits that do not have consensus-enforced meaning before\n  // doing the integer comparisons\n  var nLockTimeMask =\n      Interpreter.SEQUENCE_LOCKTIME_TYPE_FLAG | Interpreter.SEQUENCE_LOCKTIME_MASK;\n  var txToSequenceMasked = new BN(txToSequence & nLockTimeMask);\n  var nSequenceMasked = nSequence.and(nLockTimeMask);\n\n  // There are two kinds of nSequence: lock-by-blockheight and\n  // lock-by-blocktime, distinguished by whether nSequenceMasked <\n  // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG.\n  //\n  // We want to compare apples to apples, so fail the script unless the type\n  // of nSequenceMasked being tested is the same as the nSequenceMasked in the\n  // transaction.\n  var SEQUENCE_LOCKTIME_TYPE_FLAG_BN = new BN(Interpreter.SEQUENCE_LOCKTIME_TYPE_FLAG);\n  \n  if (!((txToSequenceMasked.lt(SEQUENCE_LOCKTIME_TYPE_FLAG_BN)  &&\n          nSequenceMasked.lt(SEQUENCE_LOCKTIME_TYPE_FLAG_BN)) ||\n        (txToSequenceMasked.gte(SEQUENCE_LOCKTIME_TYPE_FLAG_BN) &&\n          nSequenceMasked.gte(SEQUENCE_LOCKTIME_TYPE_FLAG_BN)))) {\n    return false;\n  }\n\n  // Now that we know we're comparing apples-to-apples, the comparison is a\n  // simple numeric one.\n  return nSequenceMasked.lte(txToSequenceMasked)\n}\n\n\nInterpreter.computeTapleafHash = function(leafVersion, scriptBuf) {\n  const tagWriter = TaggedHash.TAPLEAF;\n  tagWriter.writeUInt8(leafVersion);\n  tagWriter.writeVarintNum(scriptBuf.length);\n  tagWriter.write(scriptBuf);\n  return tagWriter.finalize();\n};\n\n\nInterpreter.computeTaprootMerkleRoot = function(control, tapleafHash) {\n  const pathLen = (control.length - Interpreter.TAPROOT_CONTROL_BASE_SIZE) / Interpreter.TAPROOT_CONTROL_NODE_SIZE;\n  let k = tapleafHash;\n  for (let i = 0; i < pathLen; ++i) {\n    const tagWriter = TaggedHash.TAPBRANCH;\n    const start = Interpreter.TAPROOT_CONTROL_BASE_SIZE + Interpreter.TAPROOT_CONTROL_NODE_SIZE * i;\n    const node = control.slice(start, start + Interpreter.TAPROOT_CONTROL_NODE_SIZE);\n    if (Buffer.compare(k, node) === -1) {\n      tagWriter.write(k);\n      tagWriter.write(node);\n    } else {\n      tagWriter.write(node);\n      tagWriter.write(k);\n    }\n    k = tagWriter.finalize();\n  }\n  return k;\n};\n\n\nInterpreter.verifyTaprootCommitment = function(control, program, tapleafHash) {\n  $.checkArgument(control.length >= Interpreter.TAPROOT_CONTROL_BASE_SIZE, 'control too short');\n  $.checkArgument(program.length >= 32, 'program is too short');\n\n  try {\n    //! The internal pubkey (x-only, so no Y coordinate parity).\n    const p = PublicKey.fromX(false, control.slice(1, Interpreter.TAPROOT_CONTROL_BASE_SIZE));\n    //! The output pubkey (taken from the scriptPubKey).\n    const q = PublicKey.fromX(false, program);\n    // Compute the Merkle root from the leaf and the provided path.\n    const merkleRoot = Interpreter.computeTaprootMerkleRoot(control, tapleafHash);\n    // Verify that the output pubkey matches the tweaked internal pubkey, after correcting for parity.\n    return q.checkTapTweak(p, merkleRoot, control);\n  } catch (err) {\n    return false;\n  }\n};\n\n\n/** \n * Based on the inner loop of bitcoind's EvalScript function\n * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104\n */\nInterpreter.prototype.step = function() {\n  var fRequireMinimal = (this.flags & Interpreter.SCRIPT_VERIFY_MINIMALDATA) !== 0;\n\n  //bool fExec = !count(vfExec.begin(), vfExec.end(), false);\n  var fExec = (this.vfExec.indexOf(false) === -1);\n  var buf, buf1, buf2, spliced, n, x1, x2, bn, bn1, bn2, bufSig, bufPubkey, subscript;\n  var sig, pubkey;\n  var fValue, fSuccess;\n  this.execdata = this.execdata || {};\n  if (!this.execdata.codeseparatorPosInit) {\n    this.execdata.codeseparatorPos = new BN(0xFFFFFFFF);\n    this.execdata.codeseparatorPosInit = true;\n  }\n\n  // Read instruction\n  var chunk = this.script.chunks[this.pc];\n  this.pc++;\n  var opcodenum = chunk.opcodenum;\n  if (_.isUndefined(opcodenum)) {\n    this.errstr = 'SCRIPT_ERR_UNDEFINED_OPCODE';\n    return false;\n  }\n  if (chunk.buf && chunk.buf.length > Interpreter.MAX_SCRIPT_ELEMENT_SIZE) {\n    this.errstr = 'SCRIPT_ERR_PUSH_SIZE';\n    return false;\n  }\n\n  if (this.sigversion === Signature.Version.BASE || this.sigversion === Signature.Version.WITNESS_V0) {\n    // Note how Opcode.OP_RESERVED does not count towards the opcode limit.\n    if (opcodenum > Opcode.OP_16 && ++(this.nOpCount) > 201) {\n      this.errstr = 'SCRIPT_ERR_OP_COUNT';\n      return false;\n    }\n  }\n\n\n  if (opcodenum === Opcode.OP_CAT ||\n    opcodenum === Opcode.OP_SUBSTR ||\n    opcodenum === Opcode.OP_LEFT ||\n    opcodenum === Opcode.OP_RIGHT ||\n    opcodenum === Opcode.OP_INVERT ||\n    opcodenum === Opcode.OP_AND ||\n    opcodenum === Opcode.OP_OR ||\n    opcodenum === Opcode.OP_XOR ||\n    opcodenum === Opcode.OP_2MUL ||\n    opcodenum === Opcode.OP_2DIV ||\n    opcodenum === Opcode.OP_MUL ||\n    opcodenum === Opcode.OP_DIV ||\n    opcodenum === Opcode.OP_MOD ||\n    opcodenum === Opcode.OP_LSHIFT ||\n    opcodenum === Opcode.OP_RSHIFT) {\n    this.errstr = 'SCRIPT_ERR_DISABLED_OPCODE';\n    return false;\n  }\n\n  // With SCRIPT_VERIFY_CONST_SCRIPTCODE, OP_CODESEPARATOR in non-segwit script is rejected even in an unexecuted branch\n  if (opcodenum == Opcode.OP_CODESEPARATOR && this.sigversion === Signature.Version.BASE && (this.flags & Interpreter.SCRIPT_VERIFY_CONST_SCRIPTCODE)) {\n    this.errstr = 'SCRIPT_ERR_OP_CODESEPARATOR';\n    return false;\n  }\n\n  if (fExec && 0 <= opcodenum && opcodenum <= Opcode.OP_PUSHDATA4) {\n    if (fRequireMinimal && !this.script.checkMinimalPush(this.pc - 1)) {\n      this.errstr = 'SCRIPT_ERR_MINIMALDATA';\n      return false;\n    }\n    if (!chunk.buf) {\n      this.stack.push(Interpreter.false);\n    } else if (chunk.len !== chunk.buf.length) {\n      throw new Error('Length of push value not equal to length of data');\n    } else {\n      this.stack.push(chunk.buf);\n    }\n  } else if (fExec || (Opcode.OP_IF <= opcodenum && opcodenum <= Opcode.OP_ENDIF)) {\n    switch (opcodenum) {\n      // Push value\n      case Opcode.OP_1NEGATE:\n      case Opcode.OP_1:\n      case Opcode.OP_2:\n      case Opcode.OP_3:\n      case Opcode.OP_4:\n      case Opcode.OP_5:\n      case Opcode.OP_6:\n      case Opcode.OP_7:\n      case Opcode.OP_8:\n      case Opcode.OP_9:\n      case Opcode.OP_10:\n      case Opcode.OP_11:\n      case Opcode.OP_12:\n      case Opcode.OP_13:\n      case Opcode.OP_14:\n      case Opcode.OP_15:\n      case Opcode.OP_16:\n        {\n          // ( -- value)\n          // ScriptNum bn((int)opcode - (int)(Opcode.OP_1 - 1));\n          n = opcodenum - (Opcode.OP_1 - 1);\n          buf = new BN(n).toScriptNumBuffer();\n          this.stack.push(buf);\n          // The result of these opcodes should always be the minimal way to push the data\n          // they push, so no need for a CheckMinimalPush here.\n        }\n        break;\n\n\n        //\n        // Control\n        //\n      case Opcode.OP_NOP:\n        break;\n\n      case Opcode.OP_NOP2:\n      case Opcode.OP_CHECKLOCKTIMEVERIFY:\n\n        if (!(this.flags & Interpreter.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n          // not enabled; treat as a NOP2\n          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';\n            return false;\n          }\n          break;\n        }\n\n        if (this.stack.length < 1) {\n          this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n          return false;\n        }\n\n        // Note that elsewhere numeric opcodes are limited to\n        // operands in the range -2**31+1 to 2**31-1, however it is\n        // legal for opcodes to produce results exceeding that\n        // range. This limitation is implemented by CScriptNum's\n        // default 4-byte limit.\n        //\n        // If we kept to that limit we'd have a year 2038 problem,\n        // even though the nLockTime field in transactions\n        // themselves is uint32 which only becomes meaningless\n        // after the year 2106.\n        //\n        // Thus as a special case we tell CScriptNum to accept up\n        // to 5-byte bignums, which are good until 2**39-1, well\n        // beyond the 2**32-1 limit of the nLockTime field itself.\n        var nLockTime = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal, 5);\n\n        // In the rare event that the argument may be < 0 due to\n        // some arithmetic being done first, you can always use\n        // 0 MAX CHECKLOCKTIMEVERIFY.\n        if (nLockTime.lt(new BN(0))) {\n          this.errstr = 'SCRIPT_ERR_NEGATIVE_LOCKTIME';\n          return false;\n        }\n\n        // Actually compare the specified lock time with the transaction.\n        if (!this.checkLockTime(nLockTime)) {\n          this.errstr = 'SCRIPT_ERR_UNSATISFIED_LOCKTIME';\n          return false;\n        }\n        break;\n\n      case Opcode.OP_NOP3:\n      case Opcode.OP_CHECKSEQUENCEVERIFY:\n\n        if (!(this.flags & Interpreter.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {\n          // not enabled; treat as a NOP3\n          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';\n            return false;\n          }\n          break;\n        }\n\n        if (this.stack.length < 1) {\n          this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n          return false;\n        }\n\n\n        // nSequence, like nLockTime, is a 32-bit unsigned\n        // integer field. See the comment in CHECKLOCKTIMEVERIFY\n        // regarding 5-byte numeric operands.\n\n        var nSequence = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal, 5);\n\n\n        // In the rare event that the argument may be < 0 due to\n        // some arithmetic being done first, you can always use\n        // 0 MAX CHECKSEQUENCEVERIFY.\n        if (nSequence.lt(new BN(0))) {\n          this.errstr = 'SCRIPT_ERR_NEGATIVE_LOCKTIME';\n          return false;\n        }\n\n        // To provide for future soft-fork extensibility, if the\n        // operand has the disabled lock-time flag set,\n        // CHECKSEQUENCEVERIFY behaves as a NOP.\n        if ((nSequence &\n          Interpreter.SEQUENCE_LOCKTIME_DISABLE_FLAG) != 0) {\n          break;\n        }\n\n        // Actually compare the specified lock time with the transaction.\n        if (!this.checkSequence(nSequence)) {\n          this.errstr = 'SCRIPT_ERR_UNSATISFIED_LOCKTIME';\n          return false;\n        }\n        break;\n\n\n\n      case Opcode.OP_NOP1:\n      case Opcode.OP_NOP4:\n      case Opcode.OP_NOP5:\n      case Opcode.OP_NOP6:\n      case Opcode.OP_NOP7:\n      case Opcode.OP_NOP8:\n      case Opcode.OP_NOP9:\n      case Opcode.OP_NOP10:\n        {\n          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';\n            return false;\n          }\n        }\n        break;\n\n      case Opcode.OP_IF:\n      case Opcode.OP_NOTIF:\n        {\n          // <expression> if [statements] [else [statements]] endif\n          // bool fValue = false;\n          fValue = false;\n          if (fExec) {\n            if (this.stack.length < 1) {\n              this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n              return false;\n            }\n\n            buf = this.stack[this.stack.length - 1];\n\n            // Tapscript requires minimal IF/NOTIF inputs as a consensus rule.\n            if (this.sigversion === Signature.Version.TAPSCRIPT) {\n              // The input argument to the OP_IF and OP_NOTIF opcodes must be either\n              // exactly 0 (the empty vector) or exactly 1 (the one-byte vector with value 1).\n              if (buf.length > 1 || (buf.length === 1 && buf[0] !== 1)) {\n                this.errstr = 'SCRIPT_ERR_TAPSCRIPT_MINIMALIF';\n                return false;\n              }\n            }\n            // Under witness v0 rules it is only a policy rule, enabled through SCRIPT_VERIFY_MINIMALIF.\n            if (this.sigversion === Signature.Version.WITNESS_V0 && (this.flags & Interpreter.SCRIPT_VERIFY_MINIMALIF)) {\n              buf = this.stack[this.stack.length - 1];\n              if (buf.length > 1) {\n                this.errstr = 'SCRIPT_ERR_MINIMALIF';\n                return false;\n              }\n              if (buf.length == 1 && buf[0]!=1) {\n                this.errstr = 'SCRIPT_ERR_MINIMALIF';\n                return false;\n              }\n            }\n            fValue = Interpreter.castToBool(buf);\n            if (opcodenum === Opcode.OP_NOTIF) {\n              fValue = !fValue;\n            }\n            this.stack.pop();\n          }\n          this.vfExec.push(fValue);\n        }\n        break;\n\n      case Opcode.OP_ELSE:\n        {\n          if (this.vfExec.length === 0) {\n            this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n            return false;\n          }\n          this.vfExec[this.vfExec.length - 1] = !this.vfExec[this.vfExec.length - 1];\n        }\n        break;\n\n      case Opcode.OP_ENDIF:\n        {\n          if (this.vfExec.length === 0) {\n            this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n            return false;\n          }\n          this.vfExec.pop();\n        }\n        break;\n\n      case Opcode.OP_VERIFY:\n        {\n          // (true -- ) or\n          // (false -- false) and return\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          fValue = Interpreter.castToBool(buf);\n          if (fValue) {\n            this.stack.pop();\n          } else {\n            this.errstr = 'SCRIPT_ERR_VERIFY';\n            return false;\n          }\n        }\n        break;\n\n      case Opcode.OP_RETURN:\n        {\n          this.errstr = 'SCRIPT_ERR_OP_RETURN';\n          return false;\n        }\n        break;\n\n\n        //\n        // Stack ops\n        //\n      case Opcode.OP_TOALTSTACK:\n        {\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.altstack.push(this.stack.pop());\n        }\n        break;\n\n      case Opcode.OP_FROMALTSTACK:\n        {\n          if (this.altstack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_ALTSTACK_OPERATION';\n            return false;\n          }\n          this.stack.push(this.altstack.pop());\n        }\n        break;\n\n      case Opcode.OP_2DROP:\n        {\n          // (x1 x2 -- )\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.pop();\n          this.stack.pop();\n        }\n        break;\n\n      case Opcode.OP_2DUP:\n        {\n          // (x1 x2 -- x1 x2 x1 x2)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 2];\n          buf2 = this.stack[this.stack.length - 1];\n          this.stack.push(buf1);\n          this.stack.push(buf2);\n        }\n        break;\n\n      case Opcode.OP_3DUP:\n        {\n          // (x1 x2 x3 -- x1 x2 x3 x1 x2 x3)\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 3];\n          buf2 = this.stack[this.stack.length - 2];\n          var buf3 = this.stack[this.stack.length - 1];\n          this.stack.push(buf1);\n          this.stack.push(buf2);\n          this.stack.push(buf3);\n        }\n        break;\n\n      case Opcode.OP_2OVER:\n        {\n          // (x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2)\n          if (this.stack.length < 4) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 4];\n          buf2 = this.stack[this.stack.length - 3];\n          this.stack.push(buf1);\n          this.stack.push(buf2);\n        }\n        break;\n\n      case Opcode.OP_2ROT:\n        {\n          // (x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)\n          if (this.stack.length < 6) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          spliced = this.stack.splice(this.stack.length - 6, 2);\n          this.stack.push(spliced[0]);\n          this.stack.push(spliced[1]);\n        }\n        break;\n\n      case Opcode.OP_2SWAP:\n        {\n          // (x1 x2 x3 x4 -- x3 x4 x1 x2)\n          if (this.stack.length < 4) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          spliced = this.stack.splice(this.stack.length - 4, 2);\n          this.stack.push(spliced[0]);\n          this.stack.push(spliced[1]);\n        }\n        break;\n\n      case Opcode.OP_IFDUP:\n        {\n          // (x - 0 | x x)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          fValue = Interpreter.castToBool(buf);\n          if (fValue) {\n            this.stack.push(buf);\n          }\n        }\n        break;\n\n      case Opcode.OP_DEPTH:\n        {\n          // -- stacksize\n          buf = new BN(this.stack.length).toScriptNumBuffer();\n          this.stack.push(buf);\n        }\n        break;\n\n      case Opcode.OP_DROP:\n        {\n          // (x -- )\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.pop();\n        }\n        break;\n\n      case Opcode.OP_DUP:\n        {\n          // (x -- x x)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.push(this.stack[this.stack.length - 1]);\n        }\n        break;\n\n      case Opcode.OP_NIP:\n        {\n          // (x1 x2 -- x2)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.splice(this.stack.length - 2, 1);\n        }\n        break;\n\n      case Opcode.OP_OVER:\n        {\n          // (x1 x2 -- x1 x2 x1)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.push(this.stack[this.stack.length - 2]);\n        }\n        break;\n\n      case Opcode.OP_PICK:\n      case Opcode.OP_ROLL:\n        {\n          // (xn ... x2 x1 x0 n - xn ... x2 x1 x0 xn)\n          // (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);\n          n = bn.toNumber();\n          this.stack.pop();\n          if (n < 0 || n >= this.stack.length) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - n - 1];\n          if (opcodenum === Opcode.OP_ROLL) {\n            this.stack.splice(this.stack.length - n - 1, 1);\n          }\n          this.stack.push(buf);\n        }\n        break;\n\n      case Opcode.OP_ROT:\n        {\n          // (x1 x2 x3 -- x2 x3 x1)\n          //  x2 x1 x3  after first swap\n          //  x2 x3 x1  after second swap\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          x1 = this.stack[this.stack.length - 3];\n          x2 = this.stack[this.stack.length - 2];\n          var x3 = this.stack[this.stack.length - 1];\n          this.stack[this.stack.length - 3] = x2;\n          this.stack[this.stack.length - 2] = x3;\n          this.stack[this.stack.length - 1] = x1;\n        }\n        break;\n\n      case Opcode.OP_SWAP:\n        {\n          // (x1 x2 -- x2 x1)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          x1 = this.stack[this.stack.length - 2];\n          x2 = this.stack[this.stack.length - 1];\n          this.stack[this.stack.length - 2] = x2;\n          this.stack[this.stack.length - 1] = x1;\n        }\n        break;\n\n      case Opcode.OP_TUCK:\n        {\n          // (x1 x2 -- x2 x1 x2)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.splice(this.stack.length - 2, 0, this.stack[this.stack.length - 1]);\n        }\n        break;\n\n\n      case Opcode.OP_SIZE:\n        {\n          // (in -- in size)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bn = new BN(this.stack[this.stack.length - 1].length);\n          this.stack.push(bn.toScriptNumBuffer());\n        }\n        break;\n\n\n        //\n        // Bitwise logic\n        //\n      case Opcode.OP_EQUAL:\n      case Opcode.OP_EQUALVERIFY:\n        //case Opcode.OP_NOTEQUAL: // use Opcode.OP_NUMNOTEQUAL\n        {\n          // (x1 x2 - bool)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 2];\n          buf2 = this.stack[this.stack.length - 1];\n          var fEqual = buf1.toString('hex') === buf2.toString('hex');\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(fEqual ? Interpreter.true : Interpreter.false);\n          if (opcodenum === Opcode.OP_EQUALVERIFY) {\n            if (fEqual) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_EQUALVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n\n\n        //\n        // Numeric\n        //\n      case Opcode.OP_1ADD:\n      case Opcode.OP_1SUB:\n      case Opcode.OP_NEGATE:\n      case Opcode.OP_ABS:\n      case Opcode.OP_NOT:\n      case Opcode.OP_0NOTEQUAL:\n        {\n          // (in -- out)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);\n          switch (opcodenum) {\n            case Opcode.OP_1ADD:\n              bn = bn.add(BN.One);\n              break;\n            case Opcode.OP_1SUB:\n              bn = bn.sub(BN.One);\n              break;\n            case Opcode.OP_NEGATE:\n              bn = bn.neg();\n              break;\n            case Opcode.OP_ABS:\n              if (bn.cmp(BN.Zero) < 0) {\n                bn = bn.neg();\n              }\n              break;\n            case Opcode.OP_NOT:\n              bn = new BN((bn.cmp(BN.Zero) === 0) + 0);\n              break;\n            case Opcode.OP_0NOTEQUAL:\n              bn = new BN((bn.cmp(BN.Zero) !== 0) + 0);\n              break;\n              //default:      assert(!'invalid opcode'); break; // TODO: does this ever occur?\n          }\n          this.stack.pop();\n          this.stack.push(bn.toScriptNumBuffer());\n        }\n        break;\n\n      case Opcode.OP_ADD:\n      case Opcode.OP_SUB:\n      case Opcode.OP_BOOLAND:\n      case Opcode.OP_BOOLOR:\n      case Opcode.OP_NUMEQUAL:\n      case Opcode.OP_NUMEQUALVERIFY:\n      case Opcode.OP_NUMNOTEQUAL:\n      case Opcode.OP_LESSTHAN:\n      case Opcode.OP_GREATERTHAN:\n      case Opcode.OP_LESSTHANOREQUAL:\n      case Opcode.OP_GREATERTHANOREQUAL:\n      case Opcode.OP_MIN:\n      case Opcode.OP_MAX:\n        {\n          // (x1 x2 -- out)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bn1 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);\n          bn2 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);\n          bn = new BN(0);\n\n          switch (opcodenum) {\n            case Opcode.OP_ADD:\n              bn = bn1.add(bn2);\n              break;\n\n            case Opcode.OP_SUB:\n              bn = bn1.sub(bn2);\n              break;\n\n              // case Opcode.OP_BOOLAND:       bn = (bn1 != bnZero && bn2 != bnZero); break;\n            case Opcode.OP_BOOLAND:\n              bn = new BN(((bn1.cmp(BN.Zero) !== 0) && (bn2.cmp(BN.Zero) !== 0)) + 0);\n              break;\n              // case Opcode.OP_BOOLOR:        bn = (bn1 != bnZero || bn2 != bnZero); break;\n            case Opcode.OP_BOOLOR:\n              bn = new BN(((bn1.cmp(BN.Zero) !== 0) || (bn2.cmp(BN.Zero) !== 0)) + 0);\n              break;\n              // case Opcode.OP_NUMEQUAL:      bn = (bn1 == bn2); break;\n            case Opcode.OP_NUMEQUAL:\n              bn = new BN((bn1.cmp(bn2) === 0) + 0);\n              break;\n              // case Opcode.OP_NUMEQUALVERIFY:    bn = (bn1 == bn2); break;\n            case Opcode.OP_NUMEQUALVERIFY:\n              bn = new BN((bn1.cmp(bn2) === 0) + 0);\n              break;\n              // case Opcode.OP_NUMNOTEQUAL:     bn = (bn1 != bn2); break;\n            case Opcode.OP_NUMNOTEQUAL:\n              bn = new BN((bn1.cmp(bn2) !== 0) + 0);\n              break;\n              // case Opcode.OP_LESSTHAN:      bn = (bn1 < bn2); break;\n            case Opcode.OP_LESSTHAN:\n              bn = new BN((bn1.cmp(bn2) < 0) + 0);\n              break;\n              // case Opcode.OP_GREATERTHAN:     bn = (bn1 > bn2); break;\n            case Opcode.OP_GREATERTHAN:\n              bn = new BN((bn1.cmp(bn2) > 0) + 0);\n              break;\n              // case Opcode.OP_LESSTHANOREQUAL:   bn = (bn1 <= bn2); break;\n            case Opcode.OP_LESSTHANOREQUAL:\n              bn = new BN((bn1.cmp(bn2) <= 0) + 0);\n              break;\n              // case Opcode.OP_GREATERTHANOREQUAL:  bn = (bn1 >= bn2); break;\n            case Opcode.OP_GREATERTHANOREQUAL:\n              bn = new BN((bn1.cmp(bn2) >= 0) + 0);\n              break;\n            case Opcode.OP_MIN:\n              bn = (bn1.cmp(bn2) < 0 ? bn1 : bn2);\n              break;\n            case Opcode.OP_MAX:\n              bn = (bn1.cmp(bn2) > 0 ? bn1 : bn2);\n              break;\n              // default:           assert(!'invalid opcode'); break; //TODO: does this ever occur?\n          }\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(bn.toScriptNumBuffer());\n\n          if (opcodenum === Opcode.OP_NUMEQUALVERIFY) {\n            // if (CastToBool(stacktop(-1)))\n            if (Interpreter.castToBool(this.stack[this.stack.length - 1])) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_NUMEQUALVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n\n      case Opcode.OP_WITHIN:\n        {\n          // (x min max -- out)\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bn1 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 3], fRequireMinimal);\n          bn2 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);\n          var bn3 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);\n          //bool fValue = (bn2 <= bn1 && bn1 < bn3);\n          fValue = (bn2.cmp(bn1) <= 0) && (bn1.cmp(bn3) < 0);\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(fValue ? Interpreter.true : Interpreter.false);\n        }\n        break;\n\n\n        //\n        // Crypto\n        //\n      case Opcode.OP_RIPEMD160:\n      case Opcode.OP_SHA1:\n      case Opcode.OP_SHA256:\n      case Opcode.OP_HASH160:\n      case Opcode.OP_HASH256:\n        {\n          // (in -- hash)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          //valtype vchHash((opcode == Opcode.OP_RIPEMD160 ||\n          //                 opcode == Opcode.OP_SHA1 || opcode == Opcode.OP_HASH160) ? 20 : 32);\n          var bufHash;\n          if (opcodenum === Opcode.OP_RIPEMD160) {\n            bufHash = Hash.ripemd160(buf);\n          } else if (opcodenum === Opcode.OP_SHA1) {\n            bufHash = Hash.sha1(buf);\n          } else if (opcodenum === Opcode.OP_SHA256) {\n            bufHash = Hash.sha256(buf);\n          } else if (opcodenum === Opcode.OP_HASH160) {\n            bufHash = Hash.sha256ripemd160(buf);\n          } else if (opcodenum === Opcode.OP_HASH256) {\n            bufHash = Hash.sha256sha256(buf);\n          }\n          this.stack.pop();\n          this.stack.push(bufHash);\n        }\n        break;\n\n      case Opcode.OP_CODESEPARATOR:\n        {\n          // Hash starts after the code separator\n          this.pbegincodehash = this.pc;\n          this.execdata.codeseparatorPos = this.pc - 1;\n        }\n        break;\n\n      case Opcode.OP_CHECKSIG:\n      case Opcode.OP_CHECKSIGVERIFY:\n        {\n          // (sig pubkey -- bool)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          bufSig = this.stack[this.stack.length - 2];\n          bufPubkey = this.stack[this.stack.length - 1];\n\n          const { success: fSuccess, result } = this._evalCheckSig(bufSig, bufPubkey);\n          if (!result) {\n            return false;\n          }\n\n          this.stack.pop();\n          this.stack.pop();\n\n          // stack.push_back(fSuccess ? vchTrue : vchFalse);\n          this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);\n          if (opcodenum === Opcode.OP_CHECKSIGVERIFY) {\n            if (fSuccess) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_CHECKSIGVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n      case Opcode.OP_CHECKSIGADD:\n        {\n          // OP_CHECKSIGADD is only available in Tapscript\n          if (this.sigversion == Signature.Version.BASE || this.sigversion == Signature.Version.WITNESS_V0) {\n            this.errstr = 'SCRIPT_ERR_BAD_OPCODE';\n            return false;\n          }\n\n          // (sig num pubkey -- num)\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          let sig = this.stack[this.stack.length - 3];\n          let num = this.stack[this.stack.length - 2];\n          let pubkey = this.stack[this.stack.length - 1];\n\n          num = BN.fromScriptNumBuffer(num, fRequireMinimal);\n\n          const { success, result } = this._evalCheckSig(sig, pubkey);\n          if (!result) {\n            return false;\n          }\n\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(num.addn(success ? 1 : 0).toScriptNumBuffer());\n        }\n        break;\n      case Opcode.OP_CHECKMULTISIG:\n      case Opcode.OP_CHECKMULTISIGVERIFY:\n        {\n          // ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)\n\n          var i = 1;\n          if (this.stack.length < i) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          var nKeysCount = BN.fromScriptNumBuffer(this.stack[this.stack.length - i], fRequireMinimal).toNumber();\n          if (nKeysCount < 0 || nKeysCount > 20) {\n            this.errstr = 'SCRIPT_ERR_PUBKEY_COUNT';\n            return false;\n          }\n          this.nOpCount += nKeysCount;\n          if (this.nOpCount > 201) {\n            this.errstr = 'SCRIPT_ERR_OP_COUNT';\n            return false;\n          }\n          // int ikey = ++i;\n          var ikey = ++i;\n          i += nKeysCount;\n\n          // ikey2 is the position of last non-signature item in\n          // the stack. Top stack item = 1. With\n          // SCRIPT_VERIFY_NULLFAIL, this is used for cleanup if\n          // operation fails.\n          var ikey2 = nKeysCount + 2;\n\n          if (this.stack.length < i) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          var nSigsCount = BN.fromScriptNumBuffer(this.stack[this.stack.length - i], fRequireMinimal).toNumber();\n          if (nSigsCount < 0 || nSigsCount > nKeysCount) {\n            this.errstr = 'SCRIPT_ERR_SIG_COUNT';\n            return false;\n          }\n          // int isig = ++i;\n          var isig = ++i;\n          i += nSigsCount;\n          if (this.stack.length < i) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          // Subset of script starting at the most recent codeseparator\n          subscript = new Script().set({\n            chunks: this.script.chunks.slice(this.pbegincodehash)\n          });\n\n          // Drop the signatures, since there's no way for a signature to sign itself\n          for (var k = 0; k < nSigsCount; k++) {\n            bufSig = this.stack[this.stack.length - isig - k];\n            subscript.findAndDelete(new Script().add(bufSig));\n          }\n\n          fSuccess = true;\n          while (fSuccess && nSigsCount > 0) {\n            // valtype& vchSig  = stacktop(-isig);\n            bufSig = this.stack[this.stack.length - isig];\n            // valtype& vchPubKey = stacktop(-ikey);\n            bufPubkey = this.stack[this.stack.length - ikey];\n\n            if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) {\n              return false;\n            }\n\n            var fOk;\n            try {\n              sig = Signature.fromTxFormat(bufSig);\n              pubkey = PublicKey.fromBuffer(bufPubkey, false);\n              fOk = this.tx.verifySignature(sig, pubkey, this.nin, subscript, this.sigversion, this.satoshis, this.execdata);\n            } catch (e) {\n              //invalid sig or pubkey\n              fOk = false;\n            }\n\n            if (fOk) {\n              isig++;\n              nSigsCount--;\n            }\n            ikey++;\n            nKeysCount--;\n\n            // If there are more signatures left than keys left,\n            // then too many signatures have failed\n            if (nSigsCount > nKeysCount) {\n              fSuccess = false;\n            }\n          }\n\n\n          // Clean up stack of actual arguments\n          while (i-- > 1) {\n            if (!fSuccess && (this.flags & Interpreter.SCRIPT_VERIFY_NULLFAIL) &&\n              !ikey2 && this.stack[this.stack.length - 1].length) {\n\n              this.errstr = 'SCRIPT_ERR_NULLFAIL';\n              return false;\n            }\n\n            if (ikey2 > 0) {\n              ikey2--;\n            }\n\n            this.stack.pop();\n          }\n\n          // A bug causes CHECKMULTISIG to consume one extra argument\n          // whose contents were not checked in any way.\n          //\n          // Unfortunately this is a potential source of mutability,\n          // so optionally verify it is exactly equal to zero prior\n          // to removing it from the stack.\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          if ((this.flags & Interpreter.SCRIPT_VERIFY_NULLDUMMY) && this.stack[this.stack.length - 1].length) {\n            this.errstr = 'SCRIPT_ERR_SIG_NULLDUMMY';\n            return false;\n          }\n          this.stack.pop();\n\n          this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);\n\n          if (opcodenum === Opcode.OP_CHECKMULTISIGVERIFY) {\n            if (fSuccess) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_CHECKMULTISIGVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n\n      default:\n        this.errstr = 'SCRIPT_ERR_BAD_OPCODE';\n        return false;\n    }\n  }\n\n  // Size limits\n  if (this.stack.length + this.altstack.length > Interpreter.MAX_STACK_SIZE) {\n    this.errstr = 'SCRIPT_ERR_STACK_SIZE';\n    return false;\n  }\n\n  return true;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/script/interpreter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/script/script.js":
/*!*******************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/script/script.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Address = __webpack_require__(/*! ../address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\nvar BufferReader = __webpack_require__(/*! ../encoding/bufferreader */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\");\nvar BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar Hash = __webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar Opcode = __webpack_require__(/*! ../opcode */ \"(ssr)/./node_modules/bitcore-lib/lib/opcode.js\");\nvar PublicKey = __webpack_require__(/*! ../publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\nvar Signature = __webpack_require__(/*! ../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar Networks = __webpack_require__(/*! ../networks */ \"(ssr)/./node_modules/bitcore-lib/lib/networks.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar JSUtil = __webpack_require__(/*! ../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nconst TaggedHash = __webpack_require__(/*! ../crypto/taggedhash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js\");\n\n/**\n * A bitcoin transaction script. Each transaction's inputs and outputs\n * has a script that is evaluated to validate it's spending.\n *\n * See https://en.bitcoin.it/wiki/Script\n *\n * @constructor\n * @param {Object|string|Buffer=} from optional data to populate script\n */\nvar Script = function Script(from) {\n  if (!(this instanceof Script)) {\n    return new Script(from);\n  }\n  this.chunks = [];\n\n  if (BufferUtil.isBuffer(from)) {\n    return Script.fromBuffer(from);\n  } else if (from instanceof Address) {\n    return Script.fromAddress(from);\n  } else if (from instanceof Script) {\n    return Script.fromBuffer(from.toBuffer());\n  } else if (typeof from === 'string') {\n    return Script.fromString(from);\n  } else if (_.isObject(from) && Array.isArray(from.chunks)) {\n    this.set(from);\n  }\n};\n\n\nScript.prototype.set = function(obj) {\n  $.checkArgument(_.isObject(obj));\n  $.checkArgument(Array.isArray(obj.chunks));\n  this.chunks = obj.chunks;\n  return this;\n};\n\nScript.fromBuffer = function(buffer) {\n  var script = new Script();\n  script.chunks = [];\n\n  var br = new BufferReader(buffer);\n  while (!br.finished()) {\n    try {\n      var opcodenum = br.readUInt8();\n\n      var len, buf;\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        len = opcodenum;\n        script.chunks.push({\n          buf: br.read(len),\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        len = br.readUInt8();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        len = br.readUInt16LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        len = br.readUInt32LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (Opcode.isOpSuccess(opcodenum)) {\n        // OP_SUCCESSx processing overrides everything, including stack element size limits\n        buf = br.readAll();\n        len = buf.length;\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else {\n        script.chunks.push({\n          opcodenum: opcodenum\n        });\n      }\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new errors.Script.InvalidBuffer(buffer.toString('hex'));\n      }\n      throw e;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype.toBuffer = function() {\n  var bw = new BufferWriter();\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    var opcodenum = chunk.opcodenum;\n    bw.writeUInt8(chunk.opcodenum);\n    if (chunk.buf) {\n      if (opcodenum < Opcode.OP_PUSHDATA1) {\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        bw.writeUInt8(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        bw.writeUInt16LE(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        bw.writeUInt32LE(chunk.len);\n        bw.write(chunk.buf);\n      } else {\n        // Could reach here if opcodenum is OP_SUCCESSx (see comment in .fromBuffer)\n        bw.write(chunk.buf);\n      }\n    }\n  }\n\n  return bw.concat();\n};\n\nScript.fromASM = function(str) {\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (opcodenum == null) {\n      var buf = Buffer.from(tokens[i], 'hex');\n      script.chunks.push({\n        buf: buf,\n        len: buf.length,\n        opcodenum: buf.length\n      });\n      i = i + 1;\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      script.chunks.push({\n        buf: Buffer.from(tokens[i + 2], 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.fromHex = function(str) {\n  return new Script(Buffer.from(str, 'hex'));\n};\n\nScript.fromString = function(str) {\n  if (JSUtil.isHexa(str) || str.length === 0) {\n    return new Script(Buffer.from(str, 'hex'));\n  }\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (opcodenum == null) {\n      opcodenum = parseInt(token);\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        script.chunks.push({\n          buf: Buffer.from(tokens[i + 1].slice(2), 'hex'),\n          len: opcodenum,\n          opcodenum: opcodenum\n        });\n        i = i + 2;\n      } else {\n        throw new Error('Invalid script: ' + JSON.stringify(str));\n      }\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      if (tokens[i + 2].slice(0, 2) !== '0x') {\n        throw new Error('Pushdata data must start with 0x');\n      }\n      script.chunks.push({\n        buf: Buffer.from(tokens[i + 2].slice(2), 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.prototype._chunkToString = function(chunk, type) {\n  var opcodenum = chunk.opcodenum;\n  var asm = (type === 'asm');\n  var str = '';\n  if (!chunk.buf) {\n    // no data chunk\n    if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {\n      if (asm) {\n        // A few cases where the opcode name differs from reverseMap\n        // aside from 1 to 16 data pushes.\n        if (opcodenum === 0) {\n          // OP_0 -> 0\n          str = str + ' 0';\n        } else if(opcodenum === 79) {\n          // OP_1NEGATE -> 1\n          str = str + ' -1';\n        } else {\n          str = str + ' ' + Opcode(opcodenum).toString();\n        }\n      } else {\n        str = str + ' ' + Opcode(opcodenum).toString();\n      }\n    } else {\n      var numstr = opcodenum.toString(16);\n      if (numstr.length % 2 !== 0) {\n        numstr = '0' + numstr;\n      }\n      if (asm) {\n        str = str + ' ' + numstr;\n      } else {\n        str = str + ' ' + '0x' + numstr;\n      }\n    }\n  } else {\n    // data chunk\n    if (!asm && opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    }\n    if (chunk.len > 0) {\n      if (asm) {\n        str = str + ' ' + chunk.buf.toString('hex');\n      } else {\n        str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n      }\n    }\n  }\n  return str;\n};\n\nScript.prototype.toASM = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk, 'asm');\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toString = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk);\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toHex = function() {\n  return this.toBuffer().toString('hex');\n};\n\nScript.prototype.inspect = function() {\n  return '<Script: ' + this.toString() + '>';\n};\n\n// script classification methods\n\n/**\n * @returns {boolean} if this is a pay to pubkey hash output script\n */\nScript.prototype.isPublicKeyHashOut = function() {\n  return !!(this.chunks.length === 5 &&\n    this.chunks[0].opcodenum === Opcode.OP_DUP &&\n    this.chunks[1].opcodenum === Opcode.OP_HASH160 &&\n    this.chunks[2].buf &&\n    this.chunks[2].buf.length === 20 &&\n    this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY &&\n    this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);\n};\n\n/**\n * @returns {boolean} if this is a pay to public key hash input script\n */\nScript.prototype.isPublicKeyHashIn = function() {\n  if (this.chunks.length === 2) {\n    var signatureBuf = this.chunks[0].buf;\n    var pubkeyBuf = this.chunks[1].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        signatureBuf[0] === 0x30 &&\n        pubkeyBuf &&\n        pubkeyBuf.length\n       ) {\n      var version = pubkeyBuf[0];\n      if ((version === 0x04 ||\n           version === 0x06 ||\n           version === 0x07) && pubkeyBuf.length === 65) {\n        return true;\n      } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nScript.prototype.getPublicKey = function() {\n  $.checkState(this.isPublicKeyOut(), 'Can\\'t retrieve PublicKey from a non-PK output');\n  return this.chunks[0].buf;\n};\n\nScript.prototype.getPublicKeyHash = function() {\n  if (this.isPublicKeyHashOut()) {\n    return this.chunks[2].buf;\n  } else if (this.isWitnessPublicKeyHashOut()) {\n    return this.chunks[1].buf;\n  } else if (this.isTaproot()) {\n    return this.chunks[1].buf;\n  } else {\n    throw new Error('Can\\'t retrieve PublicKeyHash from a non-PKH output');\n  }\n};\n\n/**\n * @returns {boolean} if this is a public key output script\n */\nScript.prototype.isPublicKeyOut = function() {\n  if (this.chunks.length === 2 &&\n      this.chunks[0].buf &&\n      this.chunks[0].buf.length &&\n      this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {\n    var pubkeyBuf = this.chunks[0].buf;\n    var version = pubkeyBuf[0];\n    var isVersion = false;\n    if ((version === 0x04 ||\n         version === 0x06 ||\n         version === 0x07) && pubkeyBuf.length === 65) {\n      isVersion = true;\n    } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n      isVersion = true;\n    }\n    if (isVersion) {\n      return PublicKey.isValid(pubkeyBuf);\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a pay to public key input script\n */\nScript.prototype.isPublicKeyIn = function() {\n  if (this.chunks.length === 1) {\n    var signatureBuf = this.chunks[0].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        signatureBuf[0] === 0x30) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a p2sh output script\n */\nScript.prototype.isScriptHashOut = function() {\n  var buf = this.toBuffer();\n  return (buf.length === 23 &&\n    buf[0] === Opcode.OP_HASH160 &&\n    buf[1] === 0x14 &&\n    buf[buf.length - 1] === Opcode.OP_EQUAL);\n};\n\n/**\n * @returns {boolean} if this is a p2wsh output script\n */\nScript.prototype.isWitnessScriptHashOut = function() {\n  var buf = this.toBuffer();\n  return (buf.length === 34 && buf[0] === Opcode.OP_0 && buf[1] === 32);\n};\n\n/**\n * @returns {boolean} if this is a p2wpkh output script\n */\nScript.prototype.isWitnessPublicKeyHashOut = function() {\n  var buf = this.toBuffer();\n  return (buf.length === 22 && buf[0] === Opcode.OP_0 && buf[1] === 20);\n};\n\n/**\n * @returns {boolean} if this is a p2tr output script\n */\nScript.prototype.isTaproot = function() {\n  var buf = this.toBuffer();\n  return (buf.length === 34 && buf[0] === Opcode.OP_1 && buf[1] === 32);\n}\n\n/**\n * @param {Object=} values - The return values\n * @param {Number} values.version - Set with the witness version\n * @param {Buffer} values.program - Set with the witness program\n * @returns {boolean} if this is a p2wpkh output script\n */\nScript.prototype.isWitnessProgram = function(values) {\n  if (!values) {\n    values = {};\n  }\n  var buf = this.toBuffer();\n  if (buf.length < 4 || buf.length > 42) {\n    return false;\n  }\n  if (buf[0] !== Opcode.OP_0 && !(buf[0] >= Opcode.OP_1 && buf[0] <= Opcode.OP_16)) {\n    return false;\n  }\n\n  if (buf.length === buf[1] + 2) {\n    values.version = Opcode.decodeOpN(buf[0]);\n    values.program = buf.slice(2, buf.length);\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a p2sh input script\n * Note that these are frequently indistinguishable from pubkeyhashin\n */\nScript.prototype.isScriptHashIn = function() {\n  if (this.chunks.length <= 1) {\n    return false;\n  }\n  var redeemChunk = this.chunks[this.chunks.length - 1];\n  var redeemBuf = redeemChunk.buf;\n  if (!redeemBuf) {\n    return false;\n  }\n\n  var redeemScript;\n  try {\n    redeemScript = Script.fromBuffer(redeemBuf);\n  } catch (e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      return false;\n    }\n    throw e;\n  }\n  var type = redeemScript.classify();\n  return type !== Script.types.UNKNOWN;\n};\n\n/**\n * @returns {boolean} if this is a mutlsig output script\n */\nScript.prototype.isMultisigOut = function() {\n  return (this.chunks.length > 3 &&\n    Opcode.isSmallIntOp(this.chunks[0].opcodenum) &&\n    this.chunks.slice(1, this.chunks.length - 2).every(function(obj) {\n      return obj.buf && BufferUtil.isBuffer(obj.buf);\n    }) &&\n    Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) &&\n    this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG);\n};\n\n\n/**\n * @returns {boolean} if this is a multisig input script\n */\nScript.prototype.isMultisigIn = function() {\n  return this.chunks.length >= 2 &&\n    this.chunks[0].opcodenum === 0 &&\n    this.chunks.slice(1, this.chunks.length).every(function(obj) {\n      return obj.buf &&\n        BufferUtil.isBuffer(obj.buf) &&\n        Signature.isTxDER(obj.buf);\n    });\n};\n\n/**\n * @returns {boolean} true if this is a valid standard OP_RETURN output\n */\nScript.prototype.isDataOut = function() {\n  return this.chunks.length >= 1 &&\n    this.chunks[0].opcodenum === Opcode.OP_RETURN &&\n    (this.chunks.length === 1 ||\n      (this.chunks.length === 2 &&\n        this.chunks[1].buf &&\n        this.chunks[1].buf.length <= Script.OP_RETURN_STANDARD_SIZE &&\n        this.chunks[1].length === this.chunks.len));\n};\n\n/**\n * Retrieve the associated data for this script.\n * In the case of a pay to public key hash, P2SH, P2WSH, or P2WPKH, return the hash.\n * In the case of a standard OP_RETURN, return the data\n * @returns {Buffer}\n */\nScript.prototype.getData = function() {\n  if (this.isDataOut() || this.isScriptHashOut() || this.isWitnessScriptHashOut() || this.isWitnessPublicKeyHashOut() || this.isTaproot()) {\n    if (this.chunks[1] == null) {\n      return Buffer.alloc(0);\n    } else {\n      return Buffer.from(this.chunks[1].buf);\n    }\n  }\n  if (this.isPublicKeyHashOut()) {\n    return Buffer.from(this.chunks[2].buf);\n  }\n  throw new Error('Unrecognized script type to get data from');\n};\n\n/**\n * @returns {boolean} if the script is only composed of data pushing\n * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n */\nScript.prototype.isPushOnly = function() {\n  return this.chunks.every(function(chunk) {\n    return chunk.opcodenum <= Opcode.OP_16;\n  });\n};\n\n\nScript.types = {};\nScript.types.UNKNOWN = 'Unknown';\nScript.types.PUBKEY_OUT = 'Pay to public key';\nScript.types.PUBKEY_IN = 'Spend from public key';\nScript.types.PUBKEYHASH_OUT = 'Pay to public key hash';\nScript.types.PUBKEYHASH_IN = 'Spend from public key hash';\nScript.types.SCRIPTHASH_OUT = 'Pay to script hash';\nScript.types.SCRIPTHASH_IN = 'Spend from script hash';\nScript.types.MULTISIG_OUT = 'Pay to multisig';\nScript.types.MULTISIG_IN = 'Spend from multisig';\nScript.types.DATA_OUT = 'Data push';\n\nScript.OP_RETURN_STANDARD_SIZE = 80;\n\n// Tag for input annex. If there are at least two witness elements for a transaction input,\n// and the first byte of the last element is 0x50, this last element is called annex, and\n// has meanings independent of the script\nScript.ANNEX_TAG = 0x50;\n\n// Validation weight per passing signature (Tapscript only, see BIP 342).\nScript.VALIDATION_WEIGHT_PER_SIGOP_PASSED = 50;\n\n// How much weight budget is added to the witness size (Tapscript only, see BIP 342).\nScript.VALIDATION_WEIGHT_OFFSET = 50;\n\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classify = function() {\n  if (this._isInput) {\n    return this.classifyInput();\n  } else if (this._isOutput) {\n    return this.classifyOutput();\n  } else {\n    var outputType = this.classifyOutput();\n    return outputType != Script.types.UNKNOWN ? outputType : this.classifyInput();\n  }\n};\n\nScript.outputIdentifiers = {};\nScript.outputIdentifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;\nScript.outputIdentifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;\nScript.outputIdentifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;\nScript.outputIdentifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;\nScript.outputIdentifiers.DATA_OUT = Script.prototype.isDataOut;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyOutput = function() {\n  for (var type in Script.outputIdentifiers) {\n    if (Script.outputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\nScript.inputIdentifiers = {};\nScript.inputIdentifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;\nScript.inputIdentifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;\nScript.inputIdentifiers.MULTISIG_IN = Script.prototype.isMultisigIn;\nScript.inputIdentifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyInput = function() {\n  for (var type in Script.inputIdentifiers) {\n    if (Script.inputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\n\n/**\n * @returns {boolean} if script is one of the known types\n */\nScript.prototype.isStandard = function() {\n  // TODO: Add BIP62 compliance\n  return this.classify() !== Script.types.UNKNOWN;\n};\n\n\n// Script construction methods\n\n/**\n * Adds a script element at the start of the script.\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n */\nScript.prototype.prepend = function(obj) {\n  this._addByType(obj, true);\n  return this;\n};\n\n/**\n * Compares a script with another script\n */\nScript.prototype.equals = function(script) {\n  $.checkState(script instanceof Script, 'Must provide another script');\n  if (this.chunks.length !== script.chunks.length) {\n    return false;\n  }\n  var i;\n  for (i = 0; i < this.chunks.length; i++) {\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.isBuffer(script.chunks[i].buf)) {\n      return false;\n    }\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.equals(this.chunks[i].buf, script.chunks[i].buf)) {\n      return false;\n    } else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Adds a script element to the end of the script.\n *\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n *\n */\nScript.prototype.add = function(obj) {\n  this._addByType(obj, false);\n  return this;\n};\n\nScript.prototype._addByType = function(obj, prepend) {\n  if (typeof obj === 'string') {\n    this._addOpcode(obj, prepend);\n  } else if (typeof obj === 'number') {\n    this._addOpcode(obj, prepend);\n  } else if (obj instanceof Opcode) {\n    this._addOpcode(obj, prepend);\n  } else if (BufferUtil.isBuffer(obj)) {\n    this._addBuffer(obj, prepend);\n  } else if (obj instanceof Script) {\n    this.chunks = this.chunks.concat(obj.chunks);\n  } else if (typeof obj === 'object') {\n    this._insertAtPosition(obj, prepend);\n  } else {\n    throw new Error('Invalid script chunk');\n  }\n};\n\nScript.prototype._insertAtPosition = function(op, prepend) {\n  if (prepend) {\n    this.chunks.unshift(op);\n  } else {\n    this.chunks.push(op);\n  }\n};\n\nScript.prototype._addOpcode = function(opcode, prepend) {\n  var op;\n  if (typeof opcode === 'number') {\n    op = opcode;\n  } else if (opcode instanceof Opcode) {\n    op = opcode.toNumber();\n  } else {\n    op = Opcode(opcode).toNumber();\n  }\n  this._insertAtPosition({\n    opcodenum: op\n  }, prepend);\n  return this;\n};\n\nScript.prototype._addBuffer = function(buf, prepend) {\n  var opcodenum;\n  var len = buf.length;\n  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n    opcodenum = len;\n  } else if (len < Math.pow(2, 8)) {\n    opcodenum = Opcode.OP_PUSHDATA1;\n  } else if (len < Math.pow(2, 16)) {\n    opcodenum = Opcode.OP_PUSHDATA2;\n  } else if (len < Math.pow(2, 32)) {\n    opcodenum = Opcode.OP_PUSHDATA4;\n  } else {\n    throw new Error('You can\\'t push that much data');\n  }\n  this._insertAtPosition({\n    buf: buf,\n    len: len,\n    opcodenum: opcodenum\n  }, prepend);\n  return this;\n};\n\nScript.prototype.hasCodeseparators = function() {\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum === Opcode.OP_CODESEPARATOR) {\n      return true;\n    }\n  }\n  return false;\n};\n\nScript.prototype.removeCodeseparators = function() {\n  var chunks = [];\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {\n      chunks.push(this.chunks[i]);\n    }\n  }\n  this.chunks = chunks;\n  return this;\n};\n\n// high level script builder methods\n\n/**\n * @returns {Script} a new Multisig output script for given public keys,\n * requiring m of those public keys to spend\n * @param {PublicKey[]} publicKeys - list of all public keys controlling the output\n * @param {number} threshold - amount of required signatures to spend the output\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true, don't sort the given\n *                      public keys before creating the script\n */\nScript.buildMultisigOut = function(publicKeys, threshold, opts) {\n  $.checkArgument(threshold <= publicKeys.length,\n    'Number of required signatures must be less than or equal to the number of public keys');\n  opts = opts || {};\n  var script = new Script();\n  script.add(Opcode.smallInt(threshold));\n  publicKeys = publicKeys.map(PublicKey);\n  var sorted = publicKeys;\n  if (!opts.noSorting) {\n    sorted = _.sortBy(publicKeys, function(publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n  for (var i = 0; i < sorted.length; i++) {\n    var publicKey = sorted[i];\n    script.add(publicKey.toBuffer());\n  }\n  script.add(Opcode.smallInt(publicKeys.length));\n  script.add(Opcode.OP_CHECKMULTISIG);\n  return script;\n};\n\nScript.buildWitnessMultisigOutFromScript = function(script) {\n  if (script instanceof Script) {\n    var s = new Script();\n    s.add(Opcode.OP_0);\n    s.add(Hash.sha256(script.toBuffer()));\n    return s;\n  } else {\n    throw new TypeError('First argument is expected to be a p2sh script');\n  }\n};\n\n/**\n * A new Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(Array.isArray(pubkeys));\n  $.checkArgument(!isNaN(threshold));\n  $.checkArgument(Array.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  for (const signature of signatures) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  }\n  return s;\n};\n\n/**\n * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildP2SHMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(Array.isArray(pubkeys));\n  $.checkArgument(!isNaN(threshold));\n  $.checkArgument(Array.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  for (const signature of signatures) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  }\n  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key hash output for the given\n * address or public key\n * @param {(Address|PublicKey)} to - destination address or public key\n */\nScript.buildPublicKeyHashOut = function(to) {\n  $.checkArgument(to != null);\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || typeof to === 'string');\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (typeof to === 'string') {\n    to = new Address(to);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_DUP)\n    .add(Opcode.OP_HASH160)\n    .add(to.hashBuffer)\n    .add(Opcode.OP_EQUALVERIFY)\n    .add(Opcode.OP_CHECKSIG);\n  s._network = to.network;\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to witness v0 output for the given\n * address\n * @param {(Address|PublicKey)} to - destination address\n */\nScript.buildWitnessV0Out = function(to) {\n  $.checkArgument(to != null);\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || typeof to === 'string');\n  if (to instanceof PublicKey) {\n    to = to.toAddress(null, Address.PayToWitnessPublicKeyHash);\n  } else if (typeof to === 'string') {\n    to = new Address(to);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_0)\n    .add(to.hashBuffer);\n  s._network = to.network;\n  return s;\n};\n\n\n/**\n * Build Taproot script output\n * @param {PublicKey|Address} to recipient's pubKey or address\n * @param {Array|Object} scriptTree single leaf object OR array of leaves. leaf: { script: String, leafVersion: Integer }\n * @returns {Script}\n */\nScript.buildWitnessV1Out = function(to, scriptTree) {\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || typeof to === 'string');\n  $.checkArgument(!scriptTree || Array.isArray(scriptTree) || !!scriptTree.script);\n\n  if (typeof to === 'string') {\n    try {\n      to = PublicKey.fromTaproot(to);\n    } catch {\n      to = Address.fromString(to);\n    }\n  }\n  \n  function buildTree(tree) {\n    if (Array.isArray(tree)) {\n      const [left, leftH] = buildTree(tree[0]);\n      const [right, rightH] = buildTree(tree[1]);\n      const ret = [[[left[0], left[1]], rightH], [[right[0], right[1]], leftH]];\n      const hWriter = TaggedHash.TAPBRANCH;\n      if (leftH.compare(rightH) === 1) {\n        hWriter.write(rightH);\n        hWriter.write(leftH);\n      } else {\n        hWriter.write(leftH);\n        hWriter.write(rightH);\n      }\n      return [ret, hWriter.finalize()];\n    } else {\n      const { leafVersion, script } = tree;\n      const scriptBuf = new Script(script).toBuffer();\n      const leafWriter = TaggedHash.TAPLEAF;\n      leafWriter.writeUInt8(leafVersion);\n      leafWriter.writeUInt8(scriptBuf.length);\n      leafWriter.write(scriptBuf);\n      const h = leafWriter.finalize();\n      return [[Buffer.from([leafVersion]), scriptBuf], h];\n    }\n  }\n\n  let taggedHash = null;\n  if (scriptTree) { \n    const [_, h] = buildTree(scriptTree);\n    taggedHash = h;\n  }\n  \n  let tweakedPubKey;\n  if (to instanceof PublicKey) {\n    tweakedPubKey = to.createTapTweak(taggedHash).tweakedPubKey;\n  } else { // Address\n    tweakedPubKey = to.hashBuffer;\n  }\n  const s = new Script();\n  s.add(Opcode.OP_1);\n  s.add(tweakedPubKey);\n  return s;\n};\n\n\n/**\n * @returns {Script} a new pay to public key output for the given\n *  public key\n */\nScript.buildPublicKeyOut = function(pubkey) {\n  $.checkArgument(pubkey instanceof PublicKey);\n  var s = new Script();\n  s.add(pubkey.toBuffer())\n    .add(Opcode.OP_CHECKSIG);\n  return s;\n};\n\n/**\n * @returns {Script} a new OP_RETURN script with data\n * @param {(string|Buffer)} data - the data to embed in the output\n * @param {(string)} encoding - the type of encoding of the string\n */\nScript.buildDataOut = function(data, encoding) {\n  $.checkArgument(data == null || typeof data === 'string' || BufferUtil.isBuffer(data));\n  if (typeof data === 'string') {\n    data = Buffer.from(data, encoding);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_RETURN);\n  if (data != null) {\n    s.add(data);\n  }\n  return s;\n};\n\n/**\n * @param {Script|Address} script - the redeemScript for the new p2sh output.\n *    It can also be a p2sh address\n * @returns {Script} new pay to script hash script for given script\n */\nScript.buildScriptHashOut = function(script) {\n  $.checkArgument(script instanceof Script ||\n    (script instanceof Address && script.isPayToScriptHash()));\n  var s = new Script();\n  s.add(Opcode.OP_HASH160)\n    .add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer()))\n    .add(Opcode.OP_EQUAL);\n\n  s._network = script._network || script.network;\n  return s;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key output script.\n *\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyIn = function(signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(sigtype == null || !isNaN(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script();\n  script.add(BufferUtil.concat([\n    signature,\n    BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n  ]));\n  return script;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key hash\n * output script.\n *\n * @param {Buffer|string|PublicKey} publicKey\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyHashIn = function(publicKey, signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(sigtype == null || !isNaN(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script()\n    .add(BufferUtil.concat([\n      signature,\n      BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n    ]))\n    .add(new PublicKey(publicKey).toBuffer());\n  return script;\n};\n\n/**\n * @returns {Script} an empty script\n */\nScript.empty = function() {\n  return new Script();\n};\n\n/**\n * @returns {Script} a new pay to script hash script that pays to this script\n */\nScript.prototype.toScriptHashOut = function() {\n  return Script.buildScriptHashOut(this);\n};\n\n/**\n * @return {Script} an output script built from the address\n */\nScript.fromAddress = function(address) {\n  address = Address(address);\n  if (address.isPayToScriptHash()) {\n    return Script.buildScriptHashOut(address);\n  } else if (address.isPayToPublicKeyHash()) {\n    return Script.buildPublicKeyHashOut(address);\n  } else if (address.isPayToWitnessPublicKeyHash()) {\n    return Script.buildWitnessV0Out(address);\n  } else if (address.isPayToWitnessScriptHash()) {\n    return Script.buildWitnessV0Out(address);\n  } else if (address.isPayToTaproot()) {\n    return Script.buildWitnessV1Out(address);\n  }\n  throw new errors.Script.UnrecognizedAddress(address);\n};\n\n/**\n * Will return the associated address information object\n * @return {Address|boolean}\n */\nScript.prototype.getAddressInfo = function(opts) {\n  if (this._isInput) {\n    return this._getInputAddressInfo();\n  } else if (this._isOutput) {\n    return this._getOutputAddressInfo();\n  } else {\n    var info = this._getOutputAddressInfo();\n    if (!info) {\n      return this._getInputAddressInfo();\n    }\n    return info;\n  }\n};\n\n/**\n * Will return the associated output scriptPubKey address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getOutputAddressInfo = function() {\n  var info = {};\n  if (this.isScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToScriptHash;\n  } else if (this.isPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isWitnessScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToWitnessScriptHash;\n  } else if (this.isWitnessPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToWitnessPublicKeyHash;\n  } else if (this.isTaproot()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToTaproot;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * Will return the associated input scriptSig address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getInputAddressInfo = function() {\n  var info = {};\n  if (this.isPublicKeyHashIn()) {\n    // hash the publickey found in the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isScriptHashIn()) {\n    // hash the redeemscript found at the end of the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);\n    info.type = Address.PayToScriptHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * @param {Network=} network\n * @return {Address|boolean} the associated address for this script if possible, or false\n */\nScript.prototype.toAddress = function(network) {\n  var info = this.getAddressInfo();\n  if (!info) {\n    return false;\n  }\n  info.network = Networks.get(network) || this._network || Networks.defaultNetwork;\n  return new Address(info);\n};\n\n/**\n * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,\n * typically used with push data chunks.  Note that this will find and delete\n * not just the same data, but the same data with the same push data op as\n * produced by default. i.e., if a pushdata in a tx does not use the minimal\n * pushdata op, then when you try to remove the data it is pushing, it will not\n * be removed, because they do not use the same pushdata op.\n */\nScript.prototype.findAndDelete = function(script) {\n  var buf = script.toBuffer();\n  var hex = buf.toString('hex');\n  for (var i = 0; i < this.chunks.length; i++) {\n    var script2 = Script({\n      chunks: [this.chunks[i]]\n    });\n    var buf2 = script2.toBuffer();\n    var hex2 = buf2.toString('hex');\n    if (hex === hex2) {\n      this.chunks.splice(i, 1);\n    }\n  }\n  return this;\n};\n\n/**\n * Comes from bitcoind's script interpreter CheckMinimalPush function\n * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.\n */\nScript.prototype.checkMinimalPush = function(i) {\n  var chunk = this.chunks[i];\n  var buf = chunk.buf;\n  var opcodenum = chunk.opcodenum;\n  if (!buf) {\n    return true;\n  }\n  if (buf.length === 0) {\n    // Could have used OP_0.\n    return opcodenum === Opcode.OP_0;\n  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {\n    // Could have used OP_1 .. OP_16.\n    return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n  } else if (buf.length === 1 && buf[0] === 0x81) {\n    // Could have used OP_1NEGATE\n    return opcodenum === Opcode.OP_1NEGATE;\n  } else if (buf.length <= 75) {\n    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n    return opcodenum === buf.length;\n  } else if (buf.length <= 255) {\n    // Could have used OP_PUSHDATA.\n    return opcodenum === Opcode.OP_PUSHDATA1;\n  } else if (buf.length <= 65535) {\n    // Could have used OP_PUSHDATA2.\n    return opcodenum === Opcode.OP_PUSHDATA2;\n  }\n  return true;\n};\n\n\n/**\n * Comes from bitcoind's script GetSigOpCount(boolean) function\n * @param {boolean} use current (true) or pre-version-0.6 (false) logic\n * @returns {number} number of signature operations required by this script\n */\nScript.prototype.getSignatureOperationsCount = function(accurate) {\n  accurate = (accurate == null ? true : accurate);\n  var n = 0;\n  var lastOpcode = Opcode.OP_INVALIDOPCODE;\n  for (const chunk of this.chunks) {\n    var opcode = chunk.opcodenum;\n    if (opcode == Opcode.OP_CHECKSIG || opcode == Opcode.OP_CHECKSIGVERIFY) {\n      n++;\n    } else if (opcode == Opcode.OP_CHECKMULTISIG || opcode == Opcode.OP_CHECKMULTISIGVERIFY) {\n      if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) {\n        n += Opcode.decodeOpN(lastOpcode);\n      } else {\n        n += 20;\n      }\n    }\n    lastOpcode = opcode;\n  }\n  return n;\n};\n\nmodule.exports = Script;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/script/script.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/transaction.js\");\n\nmodule.exports.Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/index.js\");\nmodule.exports.Output = __webpack_require__(/*! ./output */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\");\nmodule.exports.UnspentOutput = __webpack_require__(/*! ./unspentoutput */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/unspentoutput.js\");\nmodule.exports.Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/signature.js\");\nmodule.exports.Sighash = __webpack_require__(/*! ./sighash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js\");\nmodule.exports.SighashWitness = __webpack_require__(/*! ./sighashwitness */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashwitness.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3RyYW5zYWN0aW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDRIQUF5Qzs7QUFFekMsNEhBQXlDO0FBQ3pDLHlIQUEyQztBQUMzQyw4SUFBeUQ7QUFDekQsa0lBQWlEO0FBQ2pELDRIQUE2QztBQUM3QyxpSkFBMkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvdHJhbnNhY3Rpb24vaW5kZXguanM/OGRmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNhY3Rpb24nKTtcblxubW9kdWxlLmV4cG9ydHMuSW5wdXQgPSByZXF1aXJlKCcuL2lucHV0Jyk7XG5tb2R1bGUuZXhwb3J0cy5PdXRwdXQgPSByZXF1aXJlKCcuL291dHB1dCcpO1xubW9kdWxlLmV4cG9ydHMuVW5zcGVudE91dHB1dCA9IHJlcXVpcmUoJy4vdW5zcGVudG91dHB1dCcpO1xubW9kdWxlLmV4cG9ydHMuU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcbm1vZHVsZS5leHBvcnRzLlNpZ2hhc2ggPSByZXF1aXJlKCcuL3NpZ2hhc2gnKTtcbm1vZHVsZS5leHBvcnRzLlNpZ2hhc2hXaXRuZXNzID0gcmVxdWlyZSgnLi9zaWdoYXNod2l0bmVzcycpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/input/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/input/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/input.js\");\n\nmodule.exports.PublicKey = __webpack_require__(/*! ./publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/publickey.js\");\nmodule.exports.PublicKeyHash = __webpack_require__(/*! ./publickeyhash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/publickeyhash.js\");\nmodule.exports.MultiSig = __webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/multisig.js\");\nmodule.exports.MultiSigScriptHash = __webpack_require__(/*! ./multisigscripthash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/multisigscripthash.js\");\nmodule.exports.Taproot = __webpack_require__(/*! ./taproot */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/taproot.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3RyYW5zYWN0aW9uL2lucHV0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHNIQUFtQzs7QUFFbkMsd0lBQWlEO0FBQ2pELG9KQUF5RDtBQUN6RCxxSUFBK0M7QUFDL0MsbUtBQW1FO0FBQ25FLGtJQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL2xpYi90cmFuc2FjdGlvbi9pbnB1dC9pbmRleC5qcz81NTAzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pbnB1dCcpO1xuXG5tb2R1bGUuZXhwb3J0cy5QdWJsaWNLZXkgPSByZXF1aXJlKCcuL3B1YmxpY2tleScpO1xubW9kdWxlLmV4cG9ydHMuUHVibGljS2V5SGFzaCA9IHJlcXVpcmUoJy4vcHVibGlja2V5aGFzaCcpO1xubW9kdWxlLmV4cG9ydHMuTXVsdGlTaWcgPSByZXF1aXJlKCcuL211bHRpc2lnJyk7XG5tb2R1bGUuZXhwb3J0cy5NdWx0aVNpZ1NjcmlwdEhhc2ggPSByZXF1aXJlKCcuL211bHRpc2lnc2NyaXB0aGFzaCcpO1xubW9kdWxlLmV4cG9ydHMuVGFwcm9vdCA9IHJlcXVpcmUoJy4vdGFwcm9vdCcpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/input/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/input/input.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/input/input.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ../../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nconst errors = __webpack_require__(/*! ../../errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar BufferWriter = __webpack_require__(/*! ../../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar BufferUtil = __webpack_require__(/*! ../../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar JSUtil = __webpack_require__(/*! ../../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar Script = __webpack_require__(/*! ../../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar Sighash = __webpack_require__(/*! ../sighash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js\");\nvar Output = __webpack_require__(/*! ../output */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\");\n\nvar MAXINT = 0xffffffff; // Math.pow(2, 32) - 1;\nvar DEFAULT_SEQNUMBER = MAXINT;\nvar DEFAULT_LOCKTIME_SEQNUMBER = MAXINT - 1;\nvar DEFAULT_RBF_SEQNUMBER = MAXINT - 2;\nconst SEQUENCE_LOCKTIME_DISABLE_FLAG =  Math.pow(2,31); // (1 << 31);\nconst SEQUENCE_LOCKTIME_TYPE_FLAG = Math.pow(2,22); // (1 << 22);\nconst SEQUENCE_LOCKTIME_MASK = 0xffff;\nconst SEQUENCE_LOCKTIME_GRANULARITY = 512; // 512 seconds\nconst SEQUENCE_BLOCKDIFF_LIMIT = Math.pow(2,16)-1; // 16 bits \n\n\nfunction Input(params) {\n  if (!(this instanceof Input)) {\n    return new Input(params);\n  }\n  if (params) {\n    return this._fromObject(params);\n  }\n}\n\nInput.MAXINT = MAXINT;\nInput.DEFAULT_SEQNUMBER = DEFAULT_SEQNUMBER;\nInput.DEFAULT_LOCKTIME_SEQNUMBER = DEFAULT_LOCKTIME_SEQNUMBER;\nInput.DEFAULT_RBF_SEQNUMBER = DEFAULT_RBF_SEQNUMBER;\nInput.SEQUENCE_LOCKTIME_TYPE_FLAG = SEQUENCE_LOCKTIME_TYPE_FLAG;\n\nObject.defineProperty(Input.prototype, 'script', {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    if (this.isNull()) {\n      return null;\n    }\n    if (!this._script) {\n      this._script = new Script(this._scriptBuffer);\n      this._script._isInput = true;\n    }\n    return this._script;\n  }\n});\n\nInput.fromObject = function(obj) {\n  $.checkArgument(_.isObject(obj));\n  var input = new Input();\n  return input._fromObject(obj);\n};\n\nInput.prototype._fromObject = function(params) {\n  var prevTxId;\n  if (typeof params.prevTxId === 'string' && JSUtil.isHexa(params.prevTxId)) {\n    prevTxId = Buffer.from(params.prevTxId, 'hex');\n  } else {\n    prevTxId = params.prevTxId;\n  }\n  this.witnesses = [];\n  this.output = params.output ?\n    (params.output instanceof Output ? params.output : new Output(params.output)) : undefined;\n  this.prevTxId = prevTxId || params.txidbuf;\n  this.outputIndex = params.outputIndex == null ? params.txoutnum : params.outputIndex;\n  this.sequenceNumber = params.sequenceNumber == null ?\n    (params.seqnum == null ? DEFAULT_SEQNUMBER : params.seqnum) : params.sequenceNumber;\n  // null script is allowed in setScript()\n  if (params.script === undefined && params.scriptBuffer === undefined) {\n    throw new errors.Transaction.Input.MissingScript();\n  }\n  this.setScript(params.scriptBuffer || params.script);\n  return this;\n};\n\nInput.prototype.toObject = Input.prototype.toJSON = function toObject() {\n  var obj = {\n    prevTxId: this.prevTxId.toString('hex'),\n    outputIndex: this.outputIndex,\n    sequenceNumber: this.sequenceNumber,\n    script: this._scriptBuffer.toString('hex'),\n  };\n  // add human readable form if input contains valid script\n  if (this.script) {\n    obj.scriptString = this.script.toString();\n  }\n  if (this.output) {\n    obj.output = this.output.toObject();\n  }\n  return obj;\n};\n\nInput.fromBufferReader = function(br) {\n  var input = new Input();\n  input.prevTxId = br.readReverse(32);\n  input.outputIndex = br.readUInt32LE();\n  input._scriptBuffer = br.readVarLengthBuffer();\n  input.sequenceNumber = br.readUInt32LE();\n  // TODO: return different classes according to which input it is\n  // e.g: CoinbaseInput, PublicKeyHashInput, MultiSigScriptHashInput, etc.\n  return input;\n};\n\nInput.prototype.toBufferWriter = function(writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n  writer.writeReverse(this.prevTxId);\n  writer.writeUInt32LE(this.outputIndex);\n  var script = this._scriptBuffer;\n  writer.writeVarintNum(script.length);\n  writer.write(script);\n  writer.writeUInt32LE(this.sequenceNumber);\n  return writer;\n};\n\nInput.prototype.setScript = function(script) {\n  this._script = null;\n  if (script instanceof Script) {\n    this._script = script;\n    this._script._isInput = true;\n    this._scriptBuffer = script.toBuffer();\n  } else if (JSUtil.isHexa(script)) {\n    // hex string script\n    this._scriptBuffer = Buffer.from(script, 'hex');\n  } else if (_.isString(script)) {\n    // human readable string script\n    this._script = new Script(script);\n    this._script._isInput = true;\n    this._scriptBuffer = this._script.toBuffer();\n  } else if (BufferUtil.isBuffer(script)) {\n    // buffer script\n    this._scriptBuffer = Buffer.from(script);\n  } else {\n    throw new TypeError('Invalid argument type: script');\n  }\n  return this;\n};\n\n/**\n * Retrieve signatures for the provided PrivateKey.\n *\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key to use when signing\n * @param {number} inputIndex - the index of this input in the provided transaction\n * @param {number} sigType - defaults to Signature.SIGHASH_ALL\n * @param {Buffer} addressHash - if provided, don't calculate the hash of the\n *     public key associated with the private key provided\n * @abstract\n */\nInput.prototype.getSignatures = function() {\n  throw new errors.AbstractMethodInvoked(\n    'Trying to sign unsupported output type (only P2PKH and P2SH multisig inputs are supported)' +\n    ' for input: ' + JSON.stringify(this)\n  );\n};\n\nInput.prototype.getSatoshisBuffer = function() {\n  $.checkState(this.output instanceof Output);\n  $.checkState(this.output._satoshisBN);\n  return new BufferWriter().writeUInt64LEBN(this.output._satoshisBN).toBuffer();\n};\n\n\nInput.prototype.isFullySigned = function() {\n  throw new errors.AbstractMethodInvoked('Input#isFullySigned');\n};\n\nInput.prototype.isFinal = function() {\n  return this.sequenceNumber !== Input.MAXINT;\n};\n\nInput.prototype.addSignature = function() {\n  throw new errors.AbstractMethodInvoked('Input#addSignature');\n};\n\nInput.prototype.clearSignatures = function() {\n  throw new errors.AbstractMethodInvoked('Input#clearSignatures');\n};\n\nInput.prototype.hasWitnesses = function() {\n  if (this.witnesses && this.witnesses.length > 0) {\n    return true;\n  }\n  return false;\n};\n\nInput.prototype.getWitnesses = function() {\n  return this.witnesses;\n};\n\nInput.prototype.setWitnesses = function(witnesses) {\n  this.witnesses = witnesses;\n};\n\nInput.prototype.isValidSignature = function(transaction, signature, signingMethod) {\n  signingMethod = signingMethod || 'ecdsa'; // unused. Keeping for consistency with other libs\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n    transaction,\n    signature.signature,\n    signature.publicKey,\n    signature.inputIndex,\n    this.output.script\n  );\n};\n\n/**\n * @returns true if this is a coinbase input (represents no input)\n */\nInput.prototype.isNull = function() {\n  return this.prevTxId.toString('hex') === '0000000000000000000000000000000000000000000000000000000000000000' &&\n    this.outputIndex === 0xffffffff;\n};\n\nInput.prototype._estimateSize = function() {\n  return this.toBufferWriter().toBuffer().length;\n};\n\nInput.prototype._getBaseSize = function() {\n  return 32 + 4 + 4; // outpoint (32 + 4) + sequence (4)\n};\n\n\n/**\n * Sets sequence number so that transaction is not valid until the desired seconds\n *  since the transaction is mined\n *\n * @param {Number} time in seconds\n * @return {Transaction} this\n */\nInput.prototype.lockForSeconds = function(seconds) {\n  $.checkArgument(_.isNumber(seconds));\n  if (seconds < 0 ||  seconds >= SEQUENCE_LOCKTIME_GRANULARITY * SEQUENCE_LOCKTIME_MASK) {\n    throw new errors.Transaction.Input.LockTimeRange();\n  }\n  seconds = parseInt(Math.floor(seconds / SEQUENCE_LOCKTIME_GRANULARITY));\n\n  // SEQUENCE_LOCKTIME_DISABLE_FLAG = 1 \n  this.sequenceNumber = seconds | SEQUENCE_LOCKTIME_TYPE_FLAG ;\n  return this;\n};\n\n/**\n * Sets sequence number so that transaction is not valid until the desired block height differnece since the tx is mined\n *\n * @param {Number} height\n * @return {Transaction} this\n */\nInput.prototype.lockUntilBlockHeight = function(heightDiff) {\n  $.checkArgument(_.isNumber(heightDiff));\n  if (heightDiff < 0 || heightDiff >= SEQUENCE_BLOCKDIFF_LIMIT) {\n    throw new errors.Transaction.Input.BlockHeightOutOfRange();\n  }\n  // SEQUENCE_LOCKTIME_TYPE_FLAG = 0\n  // SEQUENCE_LOCKTIME_DISABLE_FLAG = 0\n  this.sequenceNumber = heightDiff ;\n  return this;\n};\n\n\n/**\n *  Returns a semantic version of the input's sequence nLockTime.\n *  @return {Number|Date}\n *  If sequence lock is disabled  it returns null,\n *  if is set to block height lock, returns a block height (number)\n *  else it returns a Date object.\n */\nInput.prototype.getLockTime = function() {\n  if (this.sequenceNumber & SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n    return null;\n  }\n\n  if (this.sequenceNumber & SEQUENCE_LOCKTIME_TYPE_FLAG) {\n    var seconds = SEQUENCE_LOCKTIME_GRANULARITY * (this.sequenceNumber & SEQUENCE_LOCKTIME_MASK);\n    return seconds;\n  } else {\n    var blockHeight = this.sequenceNumber & SEQUENCE_LOCKTIME_MASK;\n    return blockHeight;\n  }\n};\n\n\n\n\nmodule.exports = Input;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/input/input.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/input/multisig.js":
/*!********************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/input/multisig.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/bitcore-lib/node_modules/inherits/inherits.js\");\nvar Transaction = __webpack_require__(/*! ../transaction */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/transaction.js\");\nvar Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/input.js\");\nvar Output = __webpack_require__(/*! ../output */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\");\nvar $ = __webpack_require__(/*! ../../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nvar Script = __webpack_require__(/*! ../../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar Signature = __webpack_require__(/*! ../../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar Sighash = __webpack_require__(/*! ../sighash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js\");\nvar PublicKey = __webpack_require__(/*! ../../publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\nvar BufferUtil = __webpack_require__(/*! ../../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar TransactionSignature = __webpack_require__(/*! ../signature */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/signature.js\");\n\n/**\n * @constructor\n */\nfunction MultiSigInput(input, pubkeys, threshold, signatures, opts) {\n  opts = opts || {};\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  if (opts.noSorting) {\n    this.publicKeys = pubkeys\n  } else  {\n    this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });\n  }\n  $.checkState(Script.buildMultisigOut(this.publicKeys, threshold).equals(this.output.script),\n    'Provided public keys don\\'t match to the provided output script');\n  this.publicKeyIndex = {};\n  _.each(this.publicKeys, function(publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n  this.threshold = threshold;\n  // Empty array of signatures\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\ninherits(MultiSigInput, Input);\n\nMultiSigInput.prototype.toObject = function() {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function(publicKey) { return publicKey.toString(); });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigInput.prototype._deserializeSignatures = function(signatures) {\n  return _.map(signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigInput.prototype._serializeSignatures = function() {\n  return _.map(this.signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return signature.toObject();\n  });\n};\n\n/**\n * Get signatures for this input\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key with which to sign the transaction\n * @param {number} index - the index of the input in the transaction input vector\n * @param {number} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL\n * @param {Buffer} hashData - unused for this input type\n * @param {String} signingMethod DEPRECATED - method used to sign - 'ecdsa' or 'schnorr'\n * @param {Buffer} merkleRoot - unused for this input type\n * @return {Array<TransactionSignature>}\n */\nMultiSigInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData, signingMethod, merkleRoot) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  signingMethod = signingMethod || 'ecdsa'; // unused. Keeping for consistency with other libs\n\n  const results = [];\n  for (const publicKey of this.publicKeys || []) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: this.prevTxId,\n        outputIndex: this.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, this.output.script),\n        sigtype: sigtype\n      }));\n    }\n  }\n\n  return results;\n};\n\nMultiSigInput.prototype.addSignature = function(transaction, signature, signingMethod) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()], \"Signature Undefined\"),\n    'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod), \"Invalid Signature\");\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this._updateScript();\n  return this;\n};\n\nMultiSigInput.prototype._updateScript = function() {\n  this.setScript(Script.buildMultisigIn(\n    this.publicKeys,\n    this.threshold,\n    this._createSignatures()\n  ));\n  return this;\n};\n\nMultiSigInput.prototype._createSignatures = function() {\n  return _.map(\n    _.filter(this.signatures, function(signature) { return !_.isUndefined(signature); }),\n    // Future signature types may need refactor of toDER\n    function(signature) {\n      return BufferUtil.concat([\n        signature.signature.toDER(),\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\n      ]);\n    }\n  );\n};\n\nMultiSigInput.prototype.clearSignatures = function() {\n  this.signatures = new Array(this.publicKeys.length);\n  this._updateScript();\n};\n\nMultiSigInput.prototype.isFullySigned = function() {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigInput.prototype.countMissingSignatures = function() {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigInput.prototype.countSignatures = function() {\n  return _.reduce(this.signatures, function(sum, signature) {\n    return sum + (!!signature);\n  }, 0);\n};\n\nMultiSigInput.prototype.publicKeysWithoutSignature = function() {\n  var self = this;\n  return _.filter(this.publicKeys, function(publicKey) {\n    return !(self.signatures[self.publicKeyIndex[publicKey.toString()]]);\n  });\n};\n\nMultiSigInput.prototype.isValidSignature = function(transaction, signature, signingMethod) {\n  signingMethod = signingMethod || 'ecdsa'; // unused. Keeping for consistency with other libs\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n    transaction,\n    signature.signature,\n    signature.publicKey,\n    signature.inputIndex,\n    this.output.script\n  );\n};\n\n/**\n *\n * @param {Buffer[]} signatures\n * @param {PublicKey[]} publicKeys\n * @param {Transaction} transaction\n * @param {Integer} inputIndex\n * @param {Input} input\n * @param {String} signingMethod DEPRECATED - method used to sign - 'ecdsa' or 'schnorr' (future signing method)\n * @returns {TransactionSignature[]}\n */\nMultiSigInput.normalizeSignatures = function(transaction, input, inputIndex, signatures, publicKeys, signingMethod) {\n  signingMethod = signingMethod || 'ecdsa'; // unused. Keeping for consistency with other libs\n\n  return publicKeys.map(function (pubKey) {\n    var signatureMatch = null;\n    signatures = signatures.filter(function (signatureBuffer) {\n      if (signatureMatch) {\n        return true;\n      }\n\n      var signature = new TransactionSignature({\n        signature: Signature.fromTxFormat(signatureBuffer),\n        publicKey: pubKey,\n        prevTxId: input.prevTxId,\n        outputIndex: input.outputIndex,\n        inputIndex: inputIndex,\n        sigtype: Signature.SIGHASH_ALL\n      });\n\n      signature.signature.nhashtype = signature.sigtype;\n      var isMatch = Sighash.verify(\n          transaction,\n          signature.signature,\n          signature.publicKey,\n          signature.inputIndex,\n          input.output.script\n      );\n\n      if (isMatch) {\n        signatureMatch = signature;\n        return false;\n      }\n\n      return true;\n    });\n\n    return signatureMatch ? signatureMatch : null;\n  });\n};\n\nMultiSigInput.OPCODES_SIZE = 1; // 0\nMultiSigInput.SIGNATURE_SIZE = 73; // size (1) + DER (<=72)\n\nMultiSigInput.prototype._estimateSize = function() {\n  return this._getBaseSize() + MultiSigInput.OPCODES_SIZE +\n    this.threshold * MultiSigInput.SIGNATURE_SIZE;\n};\n\nmodule.exports = MultiSigInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/input/multisig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/input/multisigscripthash.js":
/*!******************************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/input/multisigscripthash.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* jshint maxparams:5 */\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/bitcore-lib/node_modules/inherits/inherits.js\");\nvar Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/input.js\");\nvar Output = __webpack_require__(/*! ../output */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\");\nvar $ = __webpack_require__(/*! ../../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nvar Address = __webpack_require__(/*! ../../address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\nvar Script = __webpack_require__(/*! ../../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar Signature = __webpack_require__(/*! ../../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar Sighash = __webpack_require__(/*! ../sighash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js\");\nvar SighashWitness = __webpack_require__(/*! ../sighashwitness */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashwitness.js\");\nvar BufferWriter = __webpack_require__(/*! ../../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar BufferUtil = __webpack_require__(/*! ../../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar TransactionSignature = __webpack_require__(/*! ../signature */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/signature.js\");\n\n/**\n * @constructor\n */\nfunction MultiSigScriptHashInput(input, pubkeys, threshold, signatures, opts) {\n  /* jshint maxstatements:20 */\n  opts = opts || {};\n  Input.apply(this, arguments);\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  if (opts.noSorting) {\n    this.publicKeys = pubkeys;\n  } else  {\n    this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });\n  }\n  this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold, opts);\n  var nested = Script.buildWitnessMultisigOutFromScript(this.redeemScript);\n  if (nested.equals(this.output.script)) {\n    this.nestedWitness = false;\n    this.type = Address.PayToWitnessScriptHash;\n  } else if (Script.buildScriptHashOut(nested).equals(this.output.script)) {\n    this.nestedWitness = true;\n    this.type = Address.PayToScriptHash;\n  } else if (Script.buildScriptHashOut(this.redeemScript).equals(this.output.script)) {\n    this.nestedWitness = false;\n    this.type = Address.PayToScriptHash;\n  } else {\n    throw new Error('Provided public keys don\\'t hash to the provided output');\n  }\n\n  if (this.nestedWitness) {\n    var scriptSig = new Script();\n    scriptSig.add(nested.toBuffer());\n    this.setScript(scriptSig);\n  }\n\n  this.publicKeyIndex = {};\n  for (let index = 0; index < this.publicKeys.length; index++) {\n    const publicKey = this.publicKeys[index];\n    this.publicKeyIndex[publicKey.toString()] = index;\n  }\n  this.threshold = threshold;\n  // Empty array of signatures\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\ninherits(MultiSigScriptHashInput, Input);\n\nMultiSigScriptHashInput.prototype.toObject = function() {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = this.publicKeys.map(function(publicKey) { return publicKey.toString(); });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigScriptHashInput.prototype._deserializeSignatures = function(signatures) {\n  return signatures.map(function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigScriptHashInput.prototype._serializeSignatures = function() {\n  return this.signatures.map(function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return signature.toObject();\n  });\n};\n\nMultiSigScriptHashInput.prototype.getScriptCode = function() {\n  var writer = new BufferWriter();\n  if (!this.redeemScript.hasCodeseparators()) {\n    var redeemScriptBuffer = this.redeemScript.toBuffer();\n    writer.writeVarintNum(redeemScriptBuffer.length);\n    writer.write(redeemScriptBuffer);\n  } else {\n    throw new Error('@TODO');\n  }\n  return writer.toBuffer();\n};\n\nMultiSigScriptHashInput.prototype.getSighash = function(transaction, privateKey, index, sigtype) {\n  var hash;\n  if (this.nestedWitness || this.type === Address.PayToWitnessScriptHash) {\n    var scriptCode = this.getScriptCode();\n    var satoshisBuffer = this.getSatoshisBuffer();\n    hash = SighashWitness.sighash(transaction, sigtype, index, scriptCode, satoshisBuffer);\n  } else  {\n    hash = Sighash.sighash(transaction, sigtype, index, this.redeemScript);\n  }\n  return hash;\n};\n\n/**\n * Get signatures for this input\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key with which to sign the transaction\n * @param {number} index - the index of the input in the transaction input vector\n * @param {number} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL\n * @param {Buffer} hashData - unused for this input type\n * @param {String} signingMethod DEPRECATED - method used to sign - 'ecdsa' or 'schnorr'\n * @param {Buffer} merkleRoot - unused for this input type\n * @return {Array<TransactionSignature>}\n */\nMultiSigScriptHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData, signingMethod, merkleRoot) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  signingMethod = signingMethod || 'ecdsa'; // unused. Keeping for consistency with other libs\n\n  const results = [];\n  for (const publicKey of this.publicKeys) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      var signature;\n      if (this.nestedWitness || this.type === Address.PayToWitnessScriptHash) {\n        var scriptCode = this.getScriptCode();\n        var satoshisBuffer = this.getSatoshisBuffer();\n        signature = SighashWitness.sign(transaction, privateKey, sigtype, index, scriptCode, satoshisBuffer);\n      } else  {\n        signature = Sighash.sign(transaction, privateKey, sigtype, index, this.redeemScript);\n      }\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: this.prevTxId,\n        outputIndex: this.outputIndex,\n        inputIndex: index,\n        signature: signature,\n        sigtype: sigtype\n      }));\n    }\n  }\n  return results;\n};\n\nMultiSigScriptHashInput.prototype.addSignature = function(transaction, signature, signingMethod) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(this.publicKeyIndex[signature.publicKey.toString()] != null,\n                  'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod), 'Invalid Signature!');\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this._updateScript();\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._updateScript = function() {\n  if (this.nestedWitness || this.type === Address.PayToWitnessScriptHash) {\n    var stack = [\n      Buffer.alloc(0),\n    ];\n    var signatures = this._createSignatures();\n    for (var i = 0; i < signatures.length; i++) {\n      stack.push(signatures[i]);\n    }\n    stack.push(this.redeemScript.toBuffer());\n    this.setWitnesses(stack);\n  } else {\n    var scriptSig = Script.buildP2SHMultisigIn(\n      this.publicKeys,\n      this.threshold,\n      this._createSignatures(),\n      { cachedMultisig: this.redeemScript }\n    );\n    this.setScript(scriptSig);\n  }\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._createSignatures = function() {\n  return this.signatures\n    .filter(function(signature) { return signature != null; })\n    .map(function(signature) {\n      return BufferUtil.concat([\n        signature.signature.toDER(),\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\n      ]);\n    });\n};\n\nMultiSigScriptHashInput.prototype.clearSignatures = function() {\n  this.signatures = new Array(this.publicKeys.length);\n  this._updateScript();\n};\n\nMultiSigScriptHashInput.prototype.isFullySigned = function() {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigScriptHashInput.prototype.countMissingSignatures = function() {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigScriptHashInput.prototype.countSignatures = function() {\n  return this.signatures.reduce(function(sum, signature) {\n    return sum + (!!signature);\n  }, 0);\n};\n\nMultiSigScriptHashInput.prototype.publicKeysWithoutSignature = function() {\n  return this.publicKeys.filter((publicKey) => {\n    return !(this.signatures[this.publicKeyIndex[publicKey.toString()]]);\n  });\n};\n\nMultiSigScriptHashInput.prototype.isValidSignature = function(transaction, signature, signingMethod) {\n  signingMethod = signingMethod || 'ecdsa'; // unused. Keeping for consistency with other libs\n  if (this.nestedWitness || this.type === Address.PayToWitnessScriptHash) {\n    signature.signature.nhashtype = signature.sigtype;\n    var scriptCode = this.getScriptCode();\n    var satoshisBuffer = this.getSatoshisBuffer();\n    return SighashWitness.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      scriptCode,\n      satoshisBuffer\n    );\n  } else {\n    // FIXME: Refactor signature so this is not necessary\n    signature.signature.nhashtype = signature.sigtype;\n    return Sighash.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      this.redeemScript\n    );\n  }\n};\n\nMultiSigScriptHashInput.MAX_OPCODES_SIZE = 8; // serialized size (<=3) + 0 .. OP_PUSHDATAx N .. M OP_CHECKMULTISIG\nMultiSigScriptHashInput.MAX_SIGNATURE_SIZE = 74; // size (1) + DER (<=72) + sighash (1)\nMultiSigScriptHashInput.MAX_PUBKEY_SIZE = 34; // size (1) + DER (<=33)\nMultiSigScriptHashInput.REDEEM_SCRIPT_SIZE = 34; // OP_0 (1) + scriptHash (1 + 32)\n\nMultiSigScriptHashInput.prototype._estimateSize = function() {\n  let result = this._getBaseSize();\n  const WITNESS_DISCOUNT = 4;\n  const witnessSize = MultiSigScriptHashInput.MAX_OPCODES_SIZE +\n    this.threshold * MultiSigScriptHashInput.MAX_SIGNATURE_SIZE +\n    this.publicKeys.length * MultiSigScriptHashInput.MAX_PUBKEY_SIZE;\n  if (this.type === Address.PayToWitnessScriptHash) {\n    result += witnessSize / WITNESS_DISCOUNT;\n  } else if (this.nestedWitness) {\n    result += witnessSize / WITNESS_DISCOUNT + MultiSigScriptHashInput.REDEEM_SCRIPT_SIZE;\n  } else {\n    result += witnessSize;\n  }\n  return result;\n};\n\nmodule.exports = MultiSigScriptHashInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/input/multisigscripthash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/input/publickey.js":
/*!*********************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/input/publickey.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/bitcore-lib/node_modules/inherits/inherits.js\");\n\nvar $ = __webpack_require__(/*! ../../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar BufferUtil = __webpack_require__(/*! ../../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\n\nvar Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/input.js\");\nvar Output = __webpack_require__(/*! ../output */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\");\nvar Sighash = __webpack_require__(/*! ../sighash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js\");\nvar Script = __webpack_require__(/*! ../../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar Signature = __webpack_require__(/*! ../../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar TransactionSignature = __webpack_require__(/*! ../signature */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/signature.js\");\n\n/**\n * Represents a special kind of input of PayToPublicKey kind.\n * @constructor\n */\nfunction PublicKeyInput() {\n  Input.apply(this, arguments);\n}\ninherits(PublicKeyInput, Input);\n\n/**\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key with which to sign the transaction\n * @param {number} index - the index of the input in the transaction input vector\n * @param {number} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL\n * @param {Buffer} hashData - unused for this input type \n * @param {String} signingMethod DEPRECATED - method used to sign input - 'ecdsa' or 'schnorr'\n * @return {Array} of objects that can be\n */\nPublicKeyInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData, signingMethod) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  signingMethod = signingMethod || 'ecdsa'; // unused. Keeping for consistency with other libs\n  var publicKey = privateKey.toPublicKey();\n  if (publicKey.toString() === this.output.script.getPublicKey().toString('hex')) {\n    return [new TransactionSignature({\n      publicKey: publicKey,\n      prevTxId: this.prevTxId,\n      outputIndex: this.outputIndex,\n      inputIndex: index,\n      signature: Sighash.sign(transaction, privateKey, sigtype, index, this.output.script),\n      sigtype: sigtype\n    })];\n  }\n  return [];\n};\n\n/**\n * Add the provided signature\n *\n * @param {Object} signature\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {number=} signature.sigtype\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr' (future signing method)\n * @return {PublicKeyInput} this, for chaining\n */\nPublicKeyInput.prototype.addSignature = function(transaction, signature, signingMethod) {\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod), 'Signature is invalid');\n  this.setScript(Script.buildPublicKeyIn(\n    signature.signature.toDER(),\n    signature.sigtype\n  ));\n  return this;\n};\n\n/**\n * Clear the input's signature\n * @return {PublicKeyHashInput} this, for chaining\n */\nPublicKeyInput.prototype.clearSignatures = function() {\n  this.setScript(Script.empty());\n  return this;\n};\n\n/**\n * Query whether the input is signed\n * @return {boolean}\n */\nPublicKeyInput.prototype.isFullySigned = function() {\n  return this.script.isPublicKeyIn();\n};\n\nPublicKeyInput.SCRIPT_MAX_SIZE = 73; // sigsize (1 + 72)\n\nPublicKeyInput.prototype._estimateSize = function() {\n  return this._getBaseSize() + PublicKeyInput.SCRIPT_MAX_SIZE;\n};\n\nmodule.exports = PublicKeyInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3RyYW5zYWN0aW9uL2lucHV0L3B1YmxpY2tleS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsb0ZBQVU7O0FBRWpDLFFBQVEsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDMUMsaUJBQWlCLG1CQUFPLENBQUMsOEVBQW1COztBQUU1QyxZQUFZLG1CQUFPLENBQUMsZ0ZBQVM7QUFDN0IsYUFBYSxtQkFBTyxDQUFDLDZFQUFXO0FBQ2hDLGNBQWMsbUJBQU8sQ0FBQywrRUFBWTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsMEVBQWM7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsd0ZBQXdCO0FBQ2hELDJCQUEyQixtQkFBTyxDQUFDLG1GQUFjOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsWUFBWTtBQUN2QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQixZQUFZLGdCQUFnQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL2xpYi90cmFuc2FjdGlvbi9pbnB1dC9wdWJsaWNrZXkuanM/NjczOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciAkID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9wcmVjb25kaXRpb25zJyk7XG52YXIgQnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvYnVmZmVyJyk7XG5cbnZhciBJbnB1dCA9IHJlcXVpcmUoJy4vaW5wdXQnKTtcbnZhciBPdXRwdXQgPSByZXF1aXJlKCcuLi9vdXRwdXQnKTtcbnZhciBTaWdoYXNoID0gcmVxdWlyZSgnLi4vc2lnaGFzaCcpO1xudmFyIFNjcmlwdCA9IHJlcXVpcmUoJy4uLy4uL3NjcmlwdCcpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4uLy4uL2NyeXB0by9zaWduYXR1cmUnKTtcbnZhciBUcmFuc2FjdGlvblNpZ25hdHVyZSA9IHJlcXVpcmUoJy4uL3NpZ25hdHVyZScpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzcGVjaWFsIGtpbmQgb2YgaW5wdXQgb2YgUGF5VG9QdWJsaWNLZXkga2luZC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQdWJsaWNLZXlJbnB1dCgpIHtcbiAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmluaGVyaXRzKFB1YmxpY0tleUlucHV0LCBJbnB1dCk7XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb24gLSB0aGUgdHJhbnNhY3Rpb24gdG8gYmUgc2lnbmVkXG4gKiBAcGFyYW0ge1ByaXZhdGVLZXl9IHByaXZhdGVLZXkgLSB0aGUgcHJpdmF0ZSBrZXkgd2l0aCB3aGljaCB0byBzaWduIHRoZSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gdGhlIGluZGV4IG9mIHRoZSBpbnB1dCBpbiB0aGUgdHJhbnNhY3Rpb24gaW5wdXQgdmVjdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gc2lndHlwZSAtIHRoZSB0eXBlIG9mIHNpZ25hdHVyZSwgZGVmYXVsdHMgdG8gU2lnbmF0dXJlLlNJR0hBU0hfQUxMXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaGFzaERhdGEgLSB1bnVzZWQgZm9yIHRoaXMgaW5wdXQgdHlwZSBcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaWduaW5nTWV0aG9kIERFUFJFQ0FURUQgLSBtZXRob2QgdXNlZCB0byBzaWduIGlucHV0IC0gJ2VjZHNhJyBvciAnc2Nobm9ycidcbiAqIEByZXR1cm4ge0FycmF5fSBvZiBvYmplY3RzIHRoYXQgY2FuIGJlXG4gKi9cblB1YmxpY0tleUlucHV0LnByb3RvdHlwZS5nZXRTaWduYXR1cmVzID0gZnVuY3Rpb24odHJhbnNhY3Rpb24sIHByaXZhdGVLZXksIGluZGV4LCBzaWd0eXBlLCBoYXNoRGF0YSwgc2lnbmluZ01ldGhvZCkge1xuICAkLmNoZWNrU3RhdGUodGhpcy5vdXRwdXQgaW5zdGFuY2VvZiBPdXRwdXQpO1xuICBzaWd0eXBlID0gc2lndHlwZSB8fCBTaWduYXR1cmUuU0lHSEFTSF9BTEw7XG4gIHNpZ25pbmdNZXRob2QgPSBzaWduaW5nTWV0aG9kIHx8ICdlY2RzYSc7IC8vIHVudXNlZC4gS2VlcGluZyBmb3IgY29uc2lzdGVuY3kgd2l0aCBvdGhlciBsaWJzXG4gIHZhciBwdWJsaWNLZXkgPSBwcml2YXRlS2V5LnRvUHVibGljS2V5KCk7XG4gIGlmIChwdWJsaWNLZXkudG9TdHJpbmcoKSA9PT0gdGhpcy5vdXRwdXQuc2NyaXB0LmdldFB1YmxpY0tleSgpLnRvU3RyaW5nKCdoZXgnKSkge1xuICAgIHJldHVybiBbbmV3IFRyYW5zYWN0aW9uU2lnbmF0dXJlKHtcbiAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LFxuICAgICAgcHJldlR4SWQ6IHRoaXMucHJldlR4SWQsXG4gICAgICBvdXRwdXRJbmRleDogdGhpcy5vdXRwdXRJbmRleCxcbiAgICAgIGlucHV0SW5kZXg6IGluZGV4LFxuICAgICAgc2lnbmF0dXJlOiBTaWdoYXNoLnNpZ24odHJhbnNhY3Rpb24sIHByaXZhdGVLZXksIHNpZ3R5cGUsIGluZGV4LCB0aGlzLm91dHB1dC5zY3JpcHQpLFxuICAgICAgc2lndHlwZTogc2lndHlwZVxuICAgIH0pXTtcbiAgfVxuICByZXR1cm4gW107XG59O1xuXG4vKipcbiAqIEFkZCB0aGUgcHJvdmlkZWQgc2lnbmF0dXJlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNpZ25hdHVyZVxuICogQHBhcmFtIHtQdWJsaWNLZXl9IHNpZ25hdHVyZS5wdWJsaWNLZXlcbiAqIEBwYXJhbSB7U2lnbmF0dXJlfSBzaWduYXR1cmUuc2lnbmF0dXJlXG4gKiBAcGFyYW0ge251bWJlcj19IHNpZ25hdHVyZS5zaWd0eXBlXG4gKiBAcGFyYW0ge1N0cmluZ30gc2lnbmluZ01ldGhvZCAtIG1ldGhvZCB1c2VkIHRvIHNpZ24gLSAnZWNkc2EnIG9yICdzY2hub3JyJyAoZnV0dXJlIHNpZ25pbmcgbWV0aG9kKVxuICogQHJldHVybiB7UHVibGljS2V5SW5wdXR9IHRoaXMsIGZvciBjaGFpbmluZ1xuICovXG5QdWJsaWNLZXlJbnB1dC5wcm90b3R5cGUuYWRkU2lnbmF0dXJlID0gZnVuY3Rpb24odHJhbnNhY3Rpb24sIHNpZ25hdHVyZSwgc2lnbmluZ01ldGhvZCkge1xuICAkLmNoZWNrU3RhdGUodGhpcy5pc1ZhbGlkU2lnbmF0dXJlKHRyYW5zYWN0aW9uLCBzaWduYXR1cmUsIHNpZ25pbmdNZXRob2QpLCAnU2lnbmF0dXJlIGlzIGludmFsaWQnKTtcbiAgdGhpcy5zZXRTY3JpcHQoU2NyaXB0LmJ1aWxkUHVibGljS2V5SW4oXG4gICAgc2lnbmF0dXJlLnNpZ25hdHVyZS50b0RFUigpLFxuICAgIHNpZ25hdHVyZS5zaWd0eXBlXG4gICkpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xlYXIgdGhlIGlucHV0J3Mgc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtQdWJsaWNLZXlIYXNoSW5wdXR9IHRoaXMsIGZvciBjaGFpbmluZ1xuICovXG5QdWJsaWNLZXlJbnB1dC5wcm90b3R5cGUuY2xlYXJTaWduYXR1cmVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2V0U2NyaXB0KFNjcmlwdC5lbXB0eSgpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFF1ZXJ5IHdoZXRoZXIgdGhlIGlucHV0IGlzIHNpZ25lZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuUHVibGljS2V5SW5wdXQucHJvdG90eXBlLmlzRnVsbHlTaWduZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2NyaXB0LmlzUHVibGljS2V5SW4oKTtcbn07XG5cblB1YmxpY0tleUlucHV0LlNDUklQVF9NQVhfU0laRSA9IDczOyAvLyBzaWdzaXplICgxICsgNzIpXG5cblB1YmxpY0tleUlucHV0LnByb3RvdHlwZS5fZXN0aW1hdGVTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9nZXRCYXNlU2l6ZSgpICsgUHVibGljS2V5SW5wdXQuU0NSSVBUX01BWF9TSVpFO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQdWJsaWNLZXlJbnB1dDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/input/publickey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/input/publickeyhash.js":
/*!*************************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/input/publickeyhash.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/bitcore-lib/node_modules/inherits/inherits.js\");\n\nvar $ = __webpack_require__(/*! ../../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar BufferUtil = __webpack_require__(/*! ../../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\n\nvar Address = __webpack_require__(/*! ../../address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\nvar Hash = __webpack_require__(/*! ../../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/input.js\");\nvar Output = __webpack_require__(/*! ../output */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\");\nvar Sighash = __webpack_require__(/*! ../sighash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js\");\nvar SighashWitness = __webpack_require__(/*! ../sighashwitness */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashwitness.js\");\nvar BufferWriter = __webpack_require__(/*! ../../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar BufferUtil = __webpack_require__(/*! ../../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar Script = __webpack_require__(/*! ../../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar Signature = __webpack_require__(/*! ../../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar TransactionSignature = __webpack_require__(/*! ../signature */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/signature.js\");\n\n/**\n * Represents a special kind of input of PayToPublicKeyHash kind.\n * @constructor\n */\nfunction PublicKeyHashInput() {\n  Input.apply(this, arguments);\n}\ninherits(PublicKeyHashInput, Input);\n\nPublicKeyHashInput.prototype.getRedeemScript = function(publicKey) {\n  if (!this.redeemScript) {\n    var redeemScript = Script.buildWitnessV0Out(publicKey);\n    if (Script.buildScriptHashOut(redeemScript).equals(this.output.script)) {\n      var scriptSig = new Script();\n      scriptSig.add(redeemScript.toBuffer());\n      this.setScript(scriptSig);\n      this.redeemScript = redeemScript;\n    }\n  }\n  return this.redeemScript;\n};\n\nPublicKeyHashInput.prototype.getScriptCode = function(publicKey) {\n  var writer = new BufferWriter();\n  var script;\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(publicKey);\n  } else {\n    script = this.output.script;\n  }\n  var scriptBuffer = Script.buildPublicKeyHashOut(script.toAddress()).toBuffer();\n  writer.writeVarintNum(scriptBuffer.length);\n  writer.write(scriptBuffer);\n  return writer.toBuffer();\n};\n\nPublicKeyHashInput.prototype.getSighash = function(transaction, privateKey, index, sigtype) {\n  var scriptCode = this.getScriptCode(privateKey);\n  var satoshisBuffer = this.getSatoshisBuffer();\n  return SighashWitness.sighash(transaction, sigtype, index, scriptCode, satoshisBuffer);\n};\n\n/**\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key with which to sign the transaction\n * @param {number} index - the index of the input in the transaction input vector\n * @param {number} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL\n * @param {Buffer} hashData - the precalculated hash of the public key associated with the privateKey provided\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr'\n * @param {Buffer} merkleRoot - unused for this input type\n * @return {Array<TransactionSignature>}\n */\nPublicKeyHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData, signingMethod, merkleRoot) {\n  $.checkState(this.output instanceof Output);\n  hashData = hashData || Hash.sha256ripemd160(privateKey.publicKey.toBuffer());\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  signingMethod = signingMethod || 'ecdsa'; // unused. Keeping for consistency with other libs\n\n  var script;\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(privateKey.publicKey);\n  } else {\n    script = this.output.script;\n  }\n\n  if (script && BufferUtil.equals(hashData, script.getPublicKeyHash())) {\n    var signature;\n    if (script.isWitnessPublicKeyHashOut()) {\n      var satoshisBuffer = this.getSatoshisBuffer();\n      var scriptCode = this.getScriptCode(privateKey.publicKey);\n      signature = SighashWitness.sign(transaction, privateKey, sigtype, index, scriptCode, satoshisBuffer);\n    } else {\n      signature = Sighash.sign(transaction, privateKey, sigtype, index, this.output.script);\n    }\n\n    return [new TransactionSignature({\n      publicKey: privateKey.publicKey,\n      prevTxId: this.prevTxId,\n      outputIndex: this.outputIndex,\n      inputIndex: index,\n      signature: signature,\n      sigtype: sigtype\n    })];\n  }\n  return [];\n};\n/* jshint maxparams: 3 */\n\n/**\n * Add the provided signature\n *\n * @param {Transaction} transaction\n * @param {Object} signature\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {number=} signature.sigtype\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr' (future signing method)\n * @return {PublicKeyHashInput} this, for chaining\n */\nPublicKeyHashInput.prototype.addSignature = function(transaction, signature, signingMethod) {\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod), 'Signature is invalid');\n\n  if (this.output.script.isWitnessPublicKeyHashOut() || this.output.script.isScriptHashOut()) {\n    this.setWitnesses([\n      BufferUtil.concat([\n        signature.signature.toDER(),\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\n      ]),\n      signature.publicKey.toBuffer()\n    ]);\n  } else {\n    this.setScript(Script.buildPublicKeyHashIn(\n      signature.publicKey,\n      signature.signature.toDER(),\n      signature.sigtype\n    ));\n  }\n  return this;\n};\n\n/**\n * Clear the input's signature\n * @return {PublicKeyHashInput} this, for chaining\n */\nPublicKeyHashInput.prototype.clearSignatures = function() {\n  this.setScript(Script.empty());\n  this.setWitnesses([]);\n  return this;\n};\n\n/**\n * Query whether the input is signed\n * @return {boolean}\n */\nPublicKeyHashInput.prototype.isFullySigned = function() {\n  return this.script.isPublicKeyHashIn() || this.hasWitnesses();\n};\n\nPublicKeyHashInput.prototype.isValidSignature = function(transaction, signature, signingMethod) {\n  signingMethod = signingMethod || 'ecdsa'; // unused. Keeping for consistency with other libs\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  if (this.output.script.isWitnessPublicKeyHashOut() || this.output.script.isScriptHashOut()) {\n    var scriptCode = this.getScriptCode();\n    var satoshisBuffer = this.getSatoshisBuffer();\n    return SighashWitness.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      scriptCode,\n      satoshisBuffer\n    );\n  } else {\n    return Sighash.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      this.output.script\n    );\n  }\n};\n\n\nPublicKeyHashInput.SCRIPT_MAX_SIZE = 73 + 34; // sigsize (1 + 72) + pubkey (1 + 33)\nPublicKeyHashInput.REDEEM_SCRIPT_SIZE = 1 + 22; // len (1) OP_0 (1) pubkeyhash (1 + 20)\n\nPublicKeyHashInput.prototype._estimateSize = function() {\n  let result = this._getBaseSize();\n  result += 1; // script size\n  const WITNESS_DISCOUNT = 4;\n  const witnessSize = PublicKeyHashInput.SCRIPT_MAX_SIZE / WITNESS_DISCOUNT;\n  if (this.output.script.isWitnessPublicKeyHashOut()) {\n    result += witnessSize;\n  } else if (this.output.script.isScriptHashOut()) {\n    result += witnessSize + PublicKeyHashInput.REDEEM_SCRIPT_SIZE;\n  } else {\n    result += PublicKeyHashInput.SCRIPT_MAX_SIZE;\n  }\n  return result;\n};\n\nmodule.exports = PublicKeyHashInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/input/publickeyhash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/input/taproot.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/input/taproot.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/bitcore-lib/node_modules/inherits/inherits.js\");\nconst $ = __webpack_require__(/*! ../../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nconst PubKeyHashInput = __webpack_require__(/*! ./publickeyhash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/publickeyhash.js\");\nconst SighashSchnorr = __webpack_require__(/*! ../sighashschnorr */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashschnorr.js\");\nconst Signature = __webpack_require__(/*! ../../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nconst TransactionSignature = __webpack_require__(/*! ../signature */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/signature.js\");\nconst Output = __webpack_require__(/*! ../output */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\");\nconst PrivateKey = __webpack_require__(/*! ../../privatekey */ \"(ssr)/./node_modules/bitcore-lib/lib/privatekey.js\");\n\nfunction TaprootInput() {\n  PubKeyHashInput.apply(this, arguments);\n}\ninherits(TaprootInput, PubKeyHashInput);\n\n/**\n * Get signatures for this input\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key with which to sign the transaction\n * @param {number} index - the index of the input in the transaction input vector\n * @param {number} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL\n * @param {Buffer} hashData - unused for this input type\n * @param {String} signingMethod - always schnorr for taproot\n * @param {Buffer} merkleRoot - the merkle root of the taproot tree\n * @return {Array<TransactionSignature>}\n */\nTaprootInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData, signingMethod, merkleRoot) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_DEFAULT;\n  \n  const inputIndex = transaction.inputs.indexOf(this);\n  const tweakedPk = privateKey.createTapTweak(merkleRoot).tweakedPrivKey;\n  const signature = SighashSchnorr.sign(\n    transaction,\n    tweakedPk,\n    sigtype,\n    inputIndex,\n    Signature.Version.TAPROOT,\n    null\n  );\n  if (!signature) {\n    return [];\n  }\n  const txSig = new TransactionSignature({\n    publicKey: privateKey.publicKey,\n    prevTxId: this.prevTxId,\n    outputIndex: this.outputIndex,\n    inputIndex,\n    signature: Signature.fromSchnorr(signature),\n    sigtype: sigtype\n  });\n  return this.isValidSignature(transaction, txSig) ? [txSig] : [];\n};\n\n\nTaprootInput.prototype.isValidSignature = function(transaction, signature) {\n  $.checkState(transaction.inputs.indexOf(this) >= 0, 'Signature has no matching input');\n  $.checkState(this.output instanceof Output, 'output is not instance of Output');\n  \n  if (!this.output.script.isTaproot()) {\n    return false;\n  }\n\n  return SighashSchnorr.verify(\n    transaction,\n    signature.signature,\n    this.output.script.chunks[1].buf,\n    Signature.Version.TAPROOT,\n    transaction.inputs.indexOf(this),\n    null\n  );\n};\n\n/**\n * Query whether the input is signed\n * @return {boolean}\n */\nTaprootInput.prototype.isFullySigned = function() {\n  return this.output.script.isTaproot() && this.hasWitnesses();\n};\n\n/**\n * Add the provided signature\n *\n * @param {Transaction} transaction\n * @param {Object} signature\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {number} signature.sigtype\n * @return {TaprootInput} this, for chaining\n */\nTaprootInput.prototype.addSignature = function(transaction, signature) {\n  if (this.isValidSignature(transaction, signature)) {\n    this.setWitnesses([\n      signature.signature.toBuffer(),\n    ]);\n  }\n  // else... do nothing?\n  // When tx.sign(keys) is called, the given keys are used to try to sign all\n  // inputs. Invalid sigs may be created, in which case we should not add them here.\n  // The flow is kind of weird since this fn name is saying to add the signature.\n  // Maybe the validation check should be upstream to keep the code lexically obedient?\n\n  return this;\n};\n\n\n// TODO verify that this is the correct MAX size.\nTaprootInput.SCRIPT_MAX_SIZE = 66; // numwitnesses (1) + sigsize (1 + 64)\n\nTaprootInput.prototype._estimateSize = function() {\n  let result = this._getBaseSize();\n  result += 1; // script size\n  const WITNESS_DISCOUNT = 4;\n  const witnessSize = TaprootInput.SCRIPT_MAX_SIZE / WITNESS_DISCOUNT;\n  result += witnessSize;\n  return result;\n};\n\n\nmodule.exports = TaprootInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3RyYW5zYWN0aW9uL2lucHV0L3RhcHJvb3QuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsb0ZBQVU7QUFDbkMsVUFBVSxtQkFBTyxDQUFDLDRGQUEwQjtBQUM1Qyx3QkFBd0IsbUJBQU8sQ0FBQyxnR0FBaUI7QUFDakQsdUJBQXVCLG1CQUFPLENBQUMsNkZBQW1CO0FBQ2xELGtCQUFrQixtQkFBTyxDQUFDLHdGQUF3QjtBQUNsRCw2QkFBNkIsbUJBQU8sQ0FBQyxtRkFBYztBQUNuRCxlQUFlLG1CQUFPLENBQUMsNkVBQVc7QUFDbEMsbUJBQW1CLG1CQUFPLENBQUMsNEVBQWtCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsWUFBWTtBQUN2QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxRQUFRO0FBQ25CLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQSxtQ0FBbUM7O0FBRW5DO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvdHJhbnNhY3Rpb24vaW5wdXQvdGFwcm9vdC5qcz82M2M3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbmNvbnN0ICQgPSByZXF1aXJlKCcuLi8uLi91dGlsL3ByZWNvbmRpdGlvbnMnKTtcbmNvbnN0IFB1YktleUhhc2hJbnB1dCA9IHJlcXVpcmUoJy4vcHVibGlja2V5aGFzaCcpO1xuY29uc3QgU2lnaGFzaFNjaG5vcnIgPSByZXF1aXJlKCcuLi9zaWdoYXNoc2Nobm9ycicpO1xuY29uc3QgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi4vLi4vY3J5cHRvL3NpZ25hdHVyZScpO1xuY29uc3QgVHJhbnNhY3Rpb25TaWduYXR1cmUgPSByZXF1aXJlKCcuLi9zaWduYXR1cmUnKTtcbmNvbnN0IE91dHB1dCA9IHJlcXVpcmUoJy4uL291dHB1dCcpO1xuY29uc3QgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uLy4uL3ByaXZhdGVrZXknKTtcblxuZnVuY3Rpb24gVGFwcm9vdElucHV0KCkge1xuICBQdWJLZXlIYXNoSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmluaGVyaXRzKFRhcHJvb3RJbnB1dCwgUHViS2V5SGFzaElucHV0KTtcblxuLyoqXG4gKiBHZXQgc2lnbmF0dXJlcyBmb3IgdGhpcyBpbnB1dFxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb24gLSB0aGUgdHJhbnNhY3Rpb24gdG8gYmUgc2lnbmVkXG4gKiBAcGFyYW0ge1ByaXZhdGVLZXl9IHByaXZhdGVLZXkgLSB0aGUgcHJpdmF0ZSBrZXkgd2l0aCB3aGljaCB0byBzaWduIHRoZSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gdGhlIGluZGV4IG9mIHRoZSBpbnB1dCBpbiB0aGUgdHJhbnNhY3Rpb24gaW5wdXQgdmVjdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gc2lndHlwZSAtIHRoZSB0eXBlIG9mIHNpZ25hdHVyZSwgZGVmYXVsdHMgdG8gU2lnbmF0dXJlLlNJR0hBU0hfQUxMXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaGFzaERhdGEgLSB1bnVzZWQgZm9yIHRoaXMgaW5wdXQgdHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IHNpZ25pbmdNZXRob2QgLSBhbHdheXMgc2Nobm9yciBmb3IgdGFwcm9vdFxuICogQHBhcmFtIHtCdWZmZXJ9IG1lcmtsZVJvb3QgLSB0aGUgbWVya2xlIHJvb3Qgb2YgdGhlIHRhcHJvb3QgdHJlZVxuICogQHJldHVybiB7QXJyYXk8VHJhbnNhY3Rpb25TaWduYXR1cmU+fVxuICovXG5UYXByb290SW5wdXQucHJvdG90eXBlLmdldFNpZ25hdHVyZXMgPSBmdW5jdGlvbih0cmFuc2FjdGlvbiwgcHJpdmF0ZUtleSwgaW5kZXgsIHNpZ3R5cGUsIGhhc2hEYXRhLCBzaWduaW5nTWV0aG9kLCBtZXJrbGVSb290KSB7XG4gICQuY2hlY2tTdGF0ZSh0aGlzLm91dHB1dCBpbnN0YW5jZW9mIE91dHB1dCk7XG4gIHNpZ3R5cGUgPSBzaWd0eXBlIHx8IFNpZ25hdHVyZS5TSUdIQVNIX0RFRkFVTFQ7XG4gIFxuICBjb25zdCBpbnB1dEluZGV4ID0gdHJhbnNhY3Rpb24uaW5wdXRzLmluZGV4T2YodGhpcyk7XG4gIGNvbnN0IHR3ZWFrZWRQayA9IHByaXZhdGVLZXkuY3JlYXRlVGFwVHdlYWsobWVya2xlUm9vdCkudHdlYWtlZFByaXZLZXk7XG4gIGNvbnN0IHNpZ25hdHVyZSA9IFNpZ2hhc2hTY2hub3JyLnNpZ24oXG4gICAgdHJhbnNhY3Rpb24sXG4gICAgdHdlYWtlZFBrLFxuICAgIHNpZ3R5cGUsXG4gICAgaW5wdXRJbmRleCxcbiAgICBTaWduYXR1cmUuVmVyc2lvbi5UQVBST09ULFxuICAgIG51bGxcbiAgKTtcbiAgaWYgKCFzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgdHhTaWcgPSBuZXcgVHJhbnNhY3Rpb25TaWduYXR1cmUoe1xuICAgIHB1YmxpY0tleTogcHJpdmF0ZUtleS5wdWJsaWNLZXksXG4gICAgcHJldlR4SWQ6IHRoaXMucHJldlR4SWQsXG4gICAgb3V0cHV0SW5kZXg6IHRoaXMub3V0cHV0SW5kZXgsXG4gICAgaW5wdXRJbmRleCxcbiAgICBzaWduYXR1cmU6IFNpZ25hdHVyZS5mcm9tU2Nobm9ycihzaWduYXR1cmUpLFxuICAgIHNpZ3R5cGU6IHNpZ3R5cGVcbiAgfSk7XG4gIHJldHVybiB0aGlzLmlzVmFsaWRTaWduYXR1cmUodHJhbnNhY3Rpb24sIHR4U2lnKSA/IFt0eFNpZ10gOiBbXTtcbn07XG5cblxuVGFwcm9vdElucHV0LnByb3RvdHlwZS5pc1ZhbGlkU2lnbmF0dXJlID0gZnVuY3Rpb24odHJhbnNhY3Rpb24sIHNpZ25hdHVyZSkge1xuICAkLmNoZWNrU3RhdGUodHJhbnNhY3Rpb24uaW5wdXRzLmluZGV4T2YodGhpcykgPj0gMCwgJ1NpZ25hdHVyZSBoYXMgbm8gbWF0Y2hpbmcgaW5wdXQnKTtcbiAgJC5jaGVja1N0YXRlKHRoaXMub3V0cHV0IGluc3RhbmNlb2YgT3V0cHV0LCAnb3V0cHV0IGlzIG5vdCBpbnN0YW5jZSBvZiBPdXRwdXQnKTtcbiAgXG4gIGlmICghdGhpcy5vdXRwdXQuc2NyaXB0LmlzVGFwcm9vdCgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIFNpZ2hhc2hTY2hub3JyLnZlcmlmeShcbiAgICB0cmFuc2FjdGlvbixcbiAgICBzaWduYXR1cmUuc2lnbmF0dXJlLFxuICAgIHRoaXMub3V0cHV0LnNjcmlwdC5jaHVua3NbMV0uYnVmLFxuICAgIFNpZ25hdHVyZS5WZXJzaW9uLlRBUFJPT1QsXG4gICAgdHJhbnNhY3Rpb24uaW5wdXRzLmluZGV4T2YodGhpcyksXG4gICAgbnVsbFxuICApO1xufTtcblxuLyoqXG4gKiBRdWVyeSB3aGV0aGVyIHRoZSBpbnB1dCBpcyBzaWduZWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblRhcHJvb3RJbnB1dC5wcm90b3R5cGUuaXNGdWxseVNpZ25lZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vdXRwdXQuc2NyaXB0LmlzVGFwcm9vdCgpICYmIHRoaXMuaGFzV2l0bmVzc2VzKCk7XG59O1xuXG4vKipcbiAqIEFkZCB0aGUgcHJvdmlkZWQgc2lnbmF0dXJlXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBzaWduYXR1cmVcbiAqIEBwYXJhbSB7UHVibGljS2V5fSBzaWduYXR1cmUucHVibGljS2V5XG4gKiBAcGFyYW0ge1NpZ25hdHVyZX0gc2lnbmF0dXJlLnNpZ25hdHVyZVxuICogQHBhcmFtIHtudW1iZXJ9IHNpZ25hdHVyZS5zaWd0eXBlXG4gKiBAcmV0dXJuIHtUYXByb290SW5wdXR9IHRoaXMsIGZvciBjaGFpbmluZ1xuICovXG5UYXByb290SW5wdXQucHJvdG90eXBlLmFkZFNpZ25hdHVyZSA9IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBzaWduYXR1cmUpIHtcbiAgaWYgKHRoaXMuaXNWYWxpZFNpZ25hdHVyZSh0cmFuc2FjdGlvbiwgc2lnbmF0dXJlKSkge1xuICAgIHRoaXMuc2V0V2l0bmVzc2VzKFtcbiAgICAgIHNpZ25hdHVyZS5zaWduYXR1cmUudG9CdWZmZXIoKSxcbiAgICBdKTtcbiAgfVxuICAvLyBlbHNlLi4uIGRvIG5vdGhpbmc/XG4gIC8vIFdoZW4gdHguc2lnbihrZXlzKSBpcyBjYWxsZWQsIHRoZSBnaXZlbiBrZXlzIGFyZSB1c2VkIHRvIHRyeSB0byBzaWduIGFsbFxuICAvLyBpbnB1dHMuIEludmFsaWQgc2lncyBtYXkgYmUgY3JlYXRlZCwgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgbm90IGFkZCB0aGVtIGhlcmUuXG4gIC8vIFRoZSBmbG93IGlzIGtpbmQgb2Ygd2VpcmQgc2luY2UgdGhpcyBmbiBuYW1lIGlzIHNheWluZyB0byBhZGQgdGhlIHNpZ25hdHVyZS5cbiAgLy8gTWF5YmUgdGhlIHZhbGlkYXRpb24gY2hlY2sgc2hvdWxkIGJlIHVwc3RyZWFtIHRvIGtlZXAgdGhlIGNvZGUgbGV4aWNhbGx5IG9iZWRpZW50P1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vLyBUT0RPIHZlcmlmeSB0aGF0IHRoaXMgaXMgdGhlIGNvcnJlY3QgTUFYIHNpemUuXG5UYXByb290SW5wdXQuU0NSSVBUX01BWF9TSVpFID0gNjY7IC8vIG51bXdpdG5lc3NlcyAoMSkgKyBzaWdzaXplICgxICsgNjQpXG5cblRhcHJvb3RJbnB1dC5wcm90b3R5cGUuX2VzdGltYXRlU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmVzdWx0ID0gdGhpcy5fZ2V0QmFzZVNpemUoKTtcbiAgcmVzdWx0ICs9IDE7IC8vIHNjcmlwdCBzaXplXG4gIGNvbnN0IFdJVE5FU1NfRElTQ09VTlQgPSA0O1xuICBjb25zdCB3aXRuZXNzU2l6ZSA9IFRhcHJvb3RJbnB1dC5TQ1JJUFRfTUFYX1NJWkUgLyBXSVRORVNTX0RJU0NPVU5UO1xuICByZXN1bHQgKz0gd2l0bmVzc1NpemU7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVGFwcm9vdElucHV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/input/taproot.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js":
/*!************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/output.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar BN = __webpack_require__(/*! ../crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar bufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar JSUtil = __webpack_require__(/*! ../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar Script = __webpack_require__(/*! ../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nconst Interpreter = __webpack_require__(/*! ../script/interpreter */ \"(ssr)/./node_modules/bitcore-lib/lib/script/interpreter.js\");\nconst TaggedHash = __webpack_require__(/*! ../crypto/taggedhash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js\");\n\nvar MAX_SAFE_INTEGER = 0x1fffffffffffff;\n\nfunction Output(args) {\n  if (!(this instanceof Output)) {\n    return new Output(args);\n  }\n  if (_.isObject(args)) {\n    this.satoshis = args.satoshis;\n    if (bufferUtil.isBuffer(args.script)) {\n      this.setScriptFromBuffer(args.script);\n    } else {\n      var script;\n      if (_.isString(args.script) && JSUtil.isHexa(args.script)) {\n        script = Buffer.from(args.script, 'hex');\n      } else {\n        script = args.script;\n      }\n      this.setScript(script);\n    }\n\n    if (args.type === 'taproot') {\n      this.branch = [];\n      Object.defineProperty(this, 'isValid', {\n        configurable: false,\n        enumerable: false,\n        get: function() {\n          this._isValid || this._branch.length === 0;\n        },\n        set: function(isValid) {\n          this._isValid = isValid;\n        }\n      });\n      Object.defineProperty(this, 'isComplete', {\n        configurable: false,\n        enumerable: false,\n        get: function() {\n          return this.isValid && (this._branch.length === 0 || (this._branch.length === 1 && !!this._branch[0]));\n        }\n      });\n    }\n  } else {\n    throw new TypeError('Unrecognized argument for Output');\n  }\n}\n\nObject.defineProperty(Output.prototype, 'script', {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    if (this._script) {\n      return this._script;\n    } else {\n      this.setScriptFromBuffer(this._scriptBuffer);\n      return this._script;\n    }\n\n  }\n});\n\nObject.defineProperty(Output.prototype, 'satoshis', {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return this._satoshis;\n  },\n  set: function(num) {\n    if (num instanceof BN) {\n      this._satoshisBN = num;\n      this._satoshis = num.toNumber();\n    } else if (_.isString(num)) {\n      this._satoshis = parseInt(num);\n      this._satoshisBN = BN.fromNumber(this._satoshis);\n    } else {\n      $.checkArgument(\n        JSUtil.isNaturalNumber(num),\n        'Output satoshis is not a natural number'\n      );\n      this._satoshisBN = BN.fromNumber(num);\n      this._satoshis = num;\n    }\n    $.checkState(\n      JSUtil.isNaturalNumber(this._satoshis),\n      'Output satoshis is not a natural number'\n    );\n  }\n});\n\nOutput.prototype.invalidSatoshis = function() {\n  if (this._satoshis > MAX_SAFE_INTEGER) {\n    return 'transaction txout satoshis greater than max safe integer';\n  }\n  if (this._satoshis !== this._satoshisBN.toNumber()) {\n    return 'transaction txout satoshis has corrupted value';\n  }\n  if (this._satoshis < 0) {\n    return 'transaction txout negative';\n  }\n  return false;\n};\n\nOutput.prototype.toObject = Output.prototype.toJSON = function toObject() {\n  var obj = {\n    satoshis: this.satoshis\n  };\n  obj.script = this._scriptBuffer.toString('hex');\n  return obj;\n};\n\nOutput.fromObject = function(data) {\n  return new Output(data);\n};\n\nOutput.prototype.setScriptFromBuffer = function(buffer) {\n  this._scriptBuffer = buffer;\n  try {\n    this._script = Script.fromBuffer(this._scriptBuffer);\n    this._script._isOutput = true;\n  } catch(e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      this._script = null;\n    } else {\n      throw e;\n    }\n  }\n};\n\nOutput.prototype.setScript = function(script) {\n  if (script instanceof Script) {\n    this._scriptBuffer = script.toBuffer();\n    this._script = script;\n    this._script._isOutput = true;\n  } else if (_.isString(script)) {\n    this._script = Script.fromString(script);\n    this._scriptBuffer = this._script.toBuffer();\n    this._script._isOutput = true;\n  } else if (bufferUtil.isBuffer(script)) {\n    this.setScriptFromBuffer(script);\n  } else {\n    throw new TypeError('Invalid argument type: script');\n  }\n  return this;\n};\n\nOutput.prototype.inspect = function() {\n  var scriptStr;\n  if (this.script) {\n    scriptStr = this.script.inspect();\n  } else {\n    scriptStr = this._scriptBuffer.toString('hex');\n  }\n  return '<Output (' + this.satoshis + ' sats) ' + scriptStr + '>';\n};\n\nOutput.fromBufferReader = function(br) {\n  var obj = {};\n  obj.satoshis = br.readUInt64LEBN();\n  var size = br.readVarintNum();\n  if (size !== 0) {\n    obj.script = br.read(size);\n  } else {\n    obj.script = Buffer.from([]);\n  }\n  return new Output(obj);\n};\n\nOutput.prototype.toBufferWriter = function(writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n  writer.writeUInt64LEBN(this._satoshisBN);\n  var script = this._scriptBuffer;\n  writer.writeVarintNum(script.length);\n  writer.write(script);\n  return writer;\n};\n\nOutput.prototype.calculateSize = function() {\n  let result = 8; // satoshis\n  result += BufferWriter.varintBufNum(this._scriptBuffer.length).length;\n  result += this._scriptBuffer.length;\n  return result;\n};\n\n/**\n * Taproot only\n * Add a new script at a certain depth in the tree. Add() operations must be called\n *  in depth-first traversal order of binary tree. If track is true, it will be included in\n *  the GetSpendData() output.\n * @param {Number} depth Tree depth at which to insert the node (depth is 0-based)\n * @param {Script} script \n * @param {Number} leafVersion \n * @param {Boolean} track If true, the leaf will be included in GetSpendData() output\n */\nOutput.prototype.add = function(depth, script, leafVersion, track = true) {\n  $.checkArgument((leafVersion & ~Interpreter.TAPROOT_LEAF_MASK) === 0, 'invalid leafVersion');\n  if (!this.isValid) {\n    return;\n  }\n\n  const node = {\n    hash: TaggedHash.TAPLEAF.writeUInt8(leafVersion).write(script.toBuffer()).finalize(),\n    leaves: []\n  };\n  if (track) {\n    const leafInfo = {\n      script,\n      leafVersion,\n      merkleBranch: []\n    };\n    node.leaves.push(leafInfo);\n  }\n  this._insertNode(node, depth);\n  return this;\n};\n\n\nOutput.prototype._insertNode = function(node, depth) {\n  $.checkArgument(depth >= 0 && depth <= Interpreter.TAPROOT_CONTROL_MAX_NODE_COUNT, 'invalid depth');\n  /* We cannot insert a leaf at a lower depth while a deeper branch is unfinished. Doing\n   * so would mean the Add() invocations do not correspond to a DFS traversal of a\n   * binary tree. */\n  if (depth + 1 < this._branch.length) {\n    this.isValid = false;\n    return;\n  }\n  /* As long as an entry in the branch exists at the specified depth, combine it and propagate up.\n   * The 'node' variable is overwritten here with the newly combined node. */\n  while (this.isValid && this._branch.length > depth && this._branch[depth]) {\n    node = this._combineNodes(node, this._branch[depth]);\n    this._branch = this._branch.slice(0, this._branch.length - 2);\n    if (depth == 0) {\n      this.isValid = false; /* Can't propagate further up than the root */\n    }\n    depth--;\n  }\n  if (this.isValid) {\n    /* Make sure the branch is big enough to place the new node. */\n    if (this._branch.length <= depth) {\n      this._branch = this._branch.slice(0, depth + 1);\n    }\n    $.checkState(!this._nodes[depth]);\n    m_branch[depth] = node;\n  }\n};\n\nOutput.prototype._combineNodes = function(a, b) {\n  const ret = {\n    hash: null,\n    leaves: []\n  };\n  /* Iterate over all tracked leaves in a, add b's hash to their Merkle branch, and move them to ret. */\n  for (let leaf of a.leaves) {\n    leaf.merkleBranch.push(b.hash);\n    ret.leaves.push(leaf);\n  }\n  /* Iterate over all tracked leaves in b, add a's hash to their Merkle branch, and move them to ret. */\n  for (let leaf of b.leaves) {\n    leaf.merkleBranch.push(a.hash);\n    ret.leaves.push(leaf);\n  }\n  /* Lexicographically sort a and b's hash, and compute parent hash. */\n  if (a.hash.compare(b.hash) === -1) {\n    ret.hash = TaggedHash.TAPBRANCH.write(a.hash).write(b.hash).finalize();\n  } else {\n    ret.hash = TaggedHash.TAPBRANCH.write(b.hash).write(a.hash).finalize();\n  }\n  return ret;\n};\n\n\n/**\n * Finalize the construction. Can only be called when IsComplete() is true.\n *  internal_key.IsFullyValid() must be true.\n * @param {PublicKey} pubKey \n */\nOutput.prototype.finalize = function(pubKey) {\n  $.checkState(this.isComplete === true, 'finalize can only be called when isComplete is true');\n  const ret = pubKey.createTapTweak(this._branch.length === 0 ? null : this._branch[0].hash);\n\n};\n\nmodule.exports = Output;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js":
/*!*************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/sighash.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Signature = __webpack_require__(/*! ../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar Script = __webpack_require__(/*! ../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar Output = __webpack_require__(/*! ./output */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\");\nvar BufferReader = __webpack_require__(/*! ../encoding/bufferreader */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\");\nvar BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar BN = __webpack_require__(/*! ../crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\nvar Hash = __webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar ECDSA = __webpack_require__(/*! ../crypto/ecdsa */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/ecdsa.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\nvar SIGHASH_SINGLE_BUG = '0000000000000000000000000000000000000000000000000000000000000001';\nvar BITS_64_ON = 'ffffffffffffffff';\n\n/**\n * Returns a buffer of length 32 bytes with the hash that needs to be signed\n * for OP_CHECKSIG.\n *\n * @name Signing.sighash\n * @param {Transaction} transaction the transaction to sign\n * @param {number} sighashType the type of the hash\n * @param {number} inputNumber the input index for the signature\n * @param {Script} subscript the script that will be signed\n */\nvar sighash = function sighash(transaction, sighashType, inputNumber, subscript) {\n  var Transaction = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/transaction.js\");\n  var Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/index.js\");\n\n  // Convert a string to a number\n  inputNumber = parseInt(inputNumber);\n\n  var i;\n  // Copy transaction\n  var txcopy = Transaction.shallowCopy(transaction);\n\n  // Copy script\n  subscript = new Script(subscript);\n  subscript.removeCodeseparators();\n\n  for (i = 0; i < txcopy.inputs.length; i++) {\n    // Blank signatures for other inputs\n    txcopy.inputs[i] = new Input(txcopy.inputs[i]).setScript(Script.empty());\n  }\n\n  txcopy.inputs[inputNumber] = new Input(txcopy.inputs[inputNumber]).setScript(subscript);\n\n  if ((sighashType & 31) === Signature.SIGHASH_NONE ||\n    (sighashType & 31) === Signature.SIGHASH_SINGLE) {\n\n    // clear all sequenceNumbers\n    for (i = 0; i < txcopy.inputs.length; i++) {\n      if (i !== inputNumber) {\n        txcopy.inputs[i].sequenceNumber = 0;\n      }\n    }\n  }\n\n  if ((sighashType & 31) === Signature.SIGHASH_NONE) {\n    txcopy.outputs = [];\n\n  } else if ((sighashType & 31) === Signature.SIGHASH_SINGLE) {\n    // The SIGHASH_SINGLE bug.\n    // https://bitcointalk.org/index.php?topic=260595.0\n    if (inputNumber >= txcopy.outputs.length) {\n      return Buffer.from(SIGHASH_SINGLE_BUG, 'hex');\n    }\n\n    txcopy.outputs.length = inputNumber + 1;\n\n    for (i = 0; i < inputNumber; i++) {\n      txcopy.outputs[i] = new Output({\n        satoshis: BN.fromBuffer(Buffer.from(BITS_64_ON, 'hex')),\n        script: Script.empty()\n      });\n    }\n  }\n\n  if (sighashType & Signature.SIGHASH_ANYONECANPAY) {\n    txcopy.inputs = [txcopy.inputs[inputNumber]];\n  }\n\n  var buf = new BufferWriter()\n    .write(txcopy.toBuffer())\n    .writeInt32LE(sighashType)\n    .toBuffer();\n  var ret = Hash.sha256sha256(buf);\n  ret = new BufferReader(ret).readReverse();\n  return ret;\n};\n\n/**\n * Create a signature\n *\n * @name Signing.sign\n * @param {Transaction} transaction\n * @param {PrivateKey} privateKey\n * @param {number} sighash\n * @param {number} inputIndex\n * @param {Script} subscript\n * @return {Signature}\n */\nfunction sign(transaction, privateKey, sighashType, inputIndex, subscript) {\n  let hashbuf = sighash(transaction, sighashType, inputIndex, subscript);\n  return ECDSA.sign(hashbuf, privateKey, 'little').set({ nhashtype: sighashType })\n};\n\n/**\n * Verify a signature\n *\n * @name Signing.verify\n * @param {Transaction} transaction\n * @param {Signature} signature\n * @param {PublicKey} publicKey\n * @param {number} inputIndex\n * @param {Script} subscript\n * @return {boolean}\n */\nfunction verify(transaction, signature, publicKey, inputIndex, subscript) {\n  $.checkArgument(!_.isUndefined(transaction), \"Transaction Undefined\");\n  $.checkArgument(!_.isUndefined(signature) && !_.isUndefined(signature.nhashtype), \"Signature Undefined\");\n\n  let hashbuf = sighash(transaction, signature.nhashtype, inputIndex, subscript);\n  return ECDSA.verify(hashbuf, signature, publicKey, 'little');\n};\n\n/**\n * @namespace Signing\n */\nmodule.exports = {\n  sighash: sighash,\n  sign: sign,\n  verify: verify\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3RyYW5zYWN0aW9uL3NpZ2hhc2guanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMscUZBQXFCO0FBQzdDLGFBQWEsbUJBQU8sQ0FBQyx1RUFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsNEVBQVU7QUFDL0IsbUJBQW1CLG1CQUFPLENBQUMsK0ZBQTBCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLCtGQUEwQjtBQUNyRCxTQUFTLG1CQUFPLENBQUMsdUVBQWM7QUFDL0IsV0FBVyxtQkFBTyxDQUFDLDJFQUFnQjtBQUNuQyxZQUFZLG1CQUFPLENBQUMsNkVBQWlCO0FBQ3JDLFFBQVEsbUJBQU8sQ0FBQyx5RkFBdUI7QUFDdkMsUUFBUSxtQkFBTyxDQUFDLHFEQUFROztBQUV4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLHNGQUFlO0FBQzNDLGNBQWMsbUJBQU8sQ0FBQyxnRkFBUzs7QUFFL0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGNBQWMsMEJBQTBCO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLFlBQVk7QUFDdkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCx3QkFBd0I7QUFDakY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsV0FBVztBQUN0QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL2xpYi90cmFuc2FjdGlvbi9zaWdoYXNoLmpzPzM4NTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi4vY3J5cHRvL3NpZ25hdHVyZScpO1xudmFyIFNjcmlwdCA9IHJlcXVpcmUoJy4uL3NjcmlwdCcpO1xudmFyIE91dHB1dCA9IHJlcXVpcmUoJy4vb3V0cHV0Jyk7XG52YXIgQnVmZmVyUmVhZGVyID0gcmVxdWlyZSgnLi4vZW5jb2RpbmcvYnVmZmVycmVhZGVyJyk7XG52YXIgQnVmZmVyV3JpdGVyID0gcmVxdWlyZSgnLi4vZW5jb2RpbmcvYnVmZmVyd3JpdGVyJyk7XG52YXIgQk4gPSByZXF1aXJlKCcuLi9jcnlwdG8vYm4nKTtcbnZhciBIYXNoID0gcmVxdWlyZSgnLi4vY3J5cHRvL2hhc2gnKTtcbnZhciBFQ0RTQSA9IHJlcXVpcmUoJy4uL2NyeXB0by9lY2RzYScpO1xudmFyICQgPSByZXF1aXJlKCcuLi91dGlsL3ByZWNvbmRpdGlvbnMnKTtcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbnZhciBTSUdIQVNIX1NJTkdMRV9CVUcgPSAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMSc7XG52YXIgQklUU182NF9PTiA9ICdmZmZmZmZmZmZmZmZmZmZmJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgYnVmZmVyIG9mIGxlbmd0aCAzMiBieXRlcyB3aXRoIHRoZSBoYXNoIHRoYXQgbmVlZHMgdG8gYmUgc2lnbmVkXG4gKiBmb3IgT1BfQ0hFQ0tTSUcuXG4gKlxuICogQG5hbWUgU2lnbmluZy5zaWdoYXNoXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvbiB0aGUgdHJhbnNhY3Rpb24gdG8gc2lnblxuICogQHBhcmFtIHtudW1iZXJ9IHNpZ2hhc2hUeXBlIHRoZSB0eXBlIG9mIHRoZSBoYXNoXG4gKiBAcGFyYW0ge251bWJlcn0gaW5wdXROdW1iZXIgdGhlIGlucHV0IGluZGV4IGZvciB0aGUgc2lnbmF0dXJlXG4gKiBAcGFyYW0ge1NjcmlwdH0gc3Vic2NyaXB0IHRoZSBzY3JpcHQgdGhhdCB3aWxsIGJlIHNpZ25lZFxuICovXG52YXIgc2lnaGFzaCA9IGZ1bmN0aW9uIHNpZ2hhc2godHJhbnNhY3Rpb24sIHNpZ2hhc2hUeXBlLCBpbnB1dE51bWJlciwgc3Vic2NyaXB0KSB7XG4gIHZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vdHJhbnNhY3Rpb24nKTtcbiAgdmFyIElucHV0ID0gcmVxdWlyZSgnLi9pbnB1dCcpO1xuXG4gIC8vIENvbnZlcnQgYSBzdHJpbmcgdG8gYSBudW1iZXJcbiAgaW5wdXROdW1iZXIgPSBwYXJzZUludChpbnB1dE51bWJlcik7XG5cbiAgdmFyIGk7XG4gIC8vIENvcHkgdHJhbnNhY3Rpb25cbiAgdmFyIHR4Y29weSA9IFRyYW5zYWN0aW9uLnNoYWxsb3dDb3B5KHRyYW5zYWN0aW9uKTtcblxuICAvLyBDb3B5IHNjcmlwdFxuICBzdWJzY3JpcHQgPSBuZXcgU2NyaXB0KHN1YnNjcmlwdCk7XG4gIHN1YnNjcmlwdC5yZW1vdmVDb2Rlc2VwYXJhdG9ycygpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0eGNvcHkuaW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gQmxhbmsgc2lnbmF0dXJlcyBmb3Igb3RoZXIgaW5wdXRzXG4gICAgdHhjb3B5LmlucHV0c1tpXSA9IG5ldyBJbnB1dCh0eGNvcHkuaW5wdXRzW2ldKS5zZXRTY3JpcHQoU2NyaXB0LmVtcHR5KCkpO1xuICB9XG5cbiAgdHhjb3B5LmlucHV0c1tpbnB1dE51bWJlcl0gPSBuZXcgSW5wdXQodHhjb3B5LmlucHV0c1tpbnB1dE51bWJlcl0pLnNldFNjcmlwdChzdWJzY3JpcHQpO1xuXG4gIGlmICgoc2lnaGFzaFR5cGUgJiAzMSkgPT09IFNpZ25hdHVyZS5TSUdIQVNIX05PTkUgfHxcbiAgICAoc2lnaGFzaFR5cGUgJiAzMSkgPT09IFNpZ25hdHVyZS5TSUdIQVNIX1NJTkdMRSkge1xuXG4gICAgLy8gY2xlYXIgYWxsIHNlcXVlbmNlTnVtYmVyc1xuICAgIGZvciAoaSA9IDA7IGkgPCB0eGNvcHkuaW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaSAhPT0gaW5wdXROdW1iZXIpIHtcbiAgICAgICAgdHhjb3B5LmlucHV0c1tpXS5zZXF1ZW5jZU51bWJlciA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzaWdoYXNoVHlwZSAmIDMxKSA9PT0gU2lnbmF0dXJlLlNJR0hBU0hfTk9ORSkge1xuICAgIHR4Y29weS5vdXRwdXRzID0gW107XG5cbiAgfSBlbHNlIGlmICgoc2lnaGFzaFR5cGUgJiAzMSkgPT09IFNpZ25hdHVyZS5TSUdIQVNIX1NJTkdMRSkge1xuICAgIC8vIFRoZSBTSUdIQVNIX1NJTkdMRSBidWcuXG4gICAgLy8gaHR0cHM6Ly9iaXRjb2ludGFsay5vcmcvaW5kZXgucGhwP3RvcGljPTI2MDU5NS4wXG4gICAgaWYgKGlucHV0TnVtYmVyID49IHR4Y29weS5vdXRwdXRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFNJR0hBU0hfU0lOR0xFX0JVRywgJ2hleCcpO1xuICAgIH1cblxuICAgIHR4Y29weS5vdXRwdXRzLmxlbmd0aCA9IGlucHV0TnVtYmVyICsgMTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dE51bWJlcjsgaSsrKSB7XG4gICAgICB0eGNvcHkub3V0cHV0c1tpXSA9IG5ldyBPdXRwdXQoe1xuICAgICAgICBzYXRvc2hpczogQk4uZnJvbUJ1ZmZlcihCdWZmZXIuZnJvbShCSVRTXzY0X09OLCAnaGV4JykpLFxuICAgICAgICBzY3JpcHQ6IFNjcmlwdC5lbXB0eSgpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc2lnaGFzaFR5cGUgJiBTaWduYXR1cmUuU0lHSEFTSF9BTllPTkVDQU5QQVkpIHtcbiAgICB0eGNvcHkuaW5wdXRzID0gW3R4Y29weS5pbnB1dHNbaW5wdXROdW1iZXJdXTtcbiAgfVxuXG4gIHZhciBidWYgPSBuZXcgQnVmZmVyV3JpdGVyKClcbiAgICAud3JpdGUodHhjb3B5LnRvQnVmZmVyKCkpXG4gICAgLndyaXRlSW50MzJMRShzaWdoYXNoVHlwZSlcbiAgICAudG9CdWZmZXIoKTtcbiAgdmFyIHJldCA9IEhhc2guc2hhMjU2c2hhMjU2KGJ1Zik7XG4gIHJldCA9IG5ldyBCdWZmZXJSZWFkZXIocmV0KS5yZWFkUmV2ZXJzZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBzaWduYXR1cmVcbiAqXG4gKiBAbmFtZSBTaWduaW5nLnNpZ25cbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge1ByaXZhdGVLZXl9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaWdoYXNoXG4gKiBAcGFyYW0ge251bWJlcn0gaW5wdXRJbmRleFxuICogQHBhcmFtIHtTY3JpcHR9IHN1YnNjcmlwdFxuICogQHJldHVybiB7U2lnbmF0dXJlfVxuICovXG5mdW5jdGlvbiBzaWduKHRyYW5zYWN0aW9uLCBwcml2YXRlS2V5LCBzaWdoYXNoVHlwZSwgaW5wdXRJbmRleCwgc3Vic2NyaXB0KSB7XG4gIGxldCBoYXNoYnVmID0gc2lnaGFzaCh0cmFuc2FjdGlvbiwgc2lnaGFzaFR5cGUsIGlucHV0SW5kZXgsIHN1YnNjcmlwdCk7XG4gIHJldHVybiBFQ0RTQS5zaWduKGhhc2hidWYsIHByaXZhdGVLZXksICdsaXR0bGUnKS5zZXQoeyBuaGFzaHR5cGU6IHNpZ2hhc2hUeXBlIH0pXG59O1xuXG4vKipcbiAqIFZlcmlmeSBhIHNpZ25hdHVyZVxuICpcbiAqIEBuYW1lIFNpZ25pbmcudmVyaWZ5XG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtTaWduYXR1cmV9IHNpZ25hdHVyZVxuICogQHBhcmFtIHtQdWJsaWNLZXl9IHB1YmxpY0tleVxuICogQHBhcmFtIHtudW1iZXJ9IGlucHV0SW5kZXhcbiAqIEBwYXJhbSB7U2NyaXB0fSBzdWJzY3JpcHRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHZlcmlmeSh0cmFuc2FjdGlvbiwgc2lnbmF0dXJlLCBwdWJsaWNLZXksIGlucHV0SW5kZXgsIHN1YnNjcmlwdCkge1xuICAkLmNoZWNrQXJndW1lbnQoIV8uaXNVbmRlZmluZWQodHJhbnNhY3Rpb24pLCBcIlRyYW5zYWN0aW9uIFVuZGVmaW5lZFwiKTtcbiAgJC5jaGVja0FyZ3VtZW50KCFfLmlzVW5kZWZpbmVkKHNpZ25hdHVyZSkgJiYgIV8uaXNVbmRlZmluZWQoc2lnbmF0dXJlLm5oYXNodHlwZSksIFwiU2lnbmF0dXJlIFVuZGVmaW5lZFwiKTtcblxuICBsZXQgaGFzaGJ1ZiA9IHNpZ2hhc2godHJhbnNhY3Rpb24sIHNpZ25hdHVyZS5uaGFzaHR5cGUsIGlucHV0SW5kZXgsIHN1YnNjcmlwdCk7XG4gIHJldHVybiBFQ0RTQS52ZXJpZnkoaGFzaGJ1Ziwgc2lnbmF0dXJlLCBwdWJsaWNLZXksICdsaXR0bGUnKTtcbn07XG5cbi8qKlxuICogQG5hbWVzcGFjZSBTaWduaW5nXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaWdoYXNoOiBzaWdoYXNoLFxuICBzaWduOiBzaWduLFxuICB2ZXJpZnk6IHZlcmlmeVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashschnorr.js":
/*!********************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/sighashschnorr.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* jshint maxparams:5 */\n\nconst Signature = __webpack_require__(/*! ../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nconst BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nconst Hash = __webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nconst Schnorr = __webpack_require__(/*! ../crypto/schnorr */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/schnorr.js\");\nconst $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nconst TaggedHash = __webpack_require__(/*! ../crypto/taggedhash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/taggedhash.js\");\nconst PrivateKey = __webpack_require__(/*! ../privatekey */ \"(ssr)/./node_modules/bitcore-lib/lib/privatekey.js\");\n\n/**\n * Returns a buffer of length 32 bytes with the hash that needs to be signed\n * for witness v1 programs as defined by:\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n *\n * @name Signing.sighash\n * @param {Transaction} transaction the transaction to sign\n * @param {Number} sighashType the type of the hash\n * @param {Number} inputNumber the input index for the signature\n * @param {Number} sigversion Taproot or Tapscript version number\n * @param {Object} execdata Object with directives and data for creating the signature hash\n */\nfunction _signatureHash(transaction, sighashType, inputNumber, sigversion, execdata) {\n  let extFlag, keyVersion;\n\n  switch (sigversion) {\n    case Signature.Version.TAPROOT:\n      extFlag = 0;\n      // keyVersion is not used and left uninitialized.\n      break;\n    case Signature.Version.TAPSCRIPT:\n      extFlag = 1;\n      // keyVersion must be 0 for now, representing the current version of\n      // 32-byte public keys in the tapscript signature opcode execution.\n      // An upgradable public key version (with a size not 32-byte) may\n      // request a different keyVersion with a new sigversion.\n      keyVersion = 0;\n      break;\n    default:\n      return false;\n  }\n  $.checkArgument(inputNumber < transaction.inputs.length, 'inputNumber is greater than number of inputs');\n\n  const ss = TaggedHash.TAPSIGHASH;\n\n  // Epoch\n  ss.writeUInt8(0);\n\n  // Hash type\n  const outputType = (sighashType == Signature.SIGHASH_DEFAULT) ? Signature.SIGHASH_ALL : (sighashType & Signature.SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n  const inputType = sighashType & Signature.SIGHASH_INPUT_MASK;\n  if (!(sighashType <= 0x03 || (sighashType >= 0x81 && sighashType <= 0x83))) { // Check valid sighashtype (Signature.SIGHASH_*)\n    return false;\n  }\n  ss.writeUInt8(sighashType);\n\n  // Transaction level data\n  ss.writeInt32LE(transaction.version);\n  ss.writeUInt32LE(transaction.nLockTime);\n  if (inputType !== Signature.SIGHASH_ANYONECANPAY) {\n    const prevoutsBW = new BufferWriter();\n    const spentAmountsBW = new BufferWriter();\n    const spentScriptsBW = new BufferWriter();\n    const sequencesBW = new BufferWriter();\n\n    for(let vin of transaction.inputs) {\n      prevoutsBW.writeReverse(vin.prevTxId);\n      prevoutsBW.writeInt32LE(vin.outputIndex);\n\n      spentAmountsBW.writeUInt64LEBN(vin.output._satoshisBN);\n\n      const scriptBuf = vin.output.script.toBuffer();\n      spentScriptsBW.writeUInt8(scriptBuf.length);\n      spentScriptsBW.write(scriptBuf);\n\n      sequencesBW.writeUInt32LE(vin.sequenceNumber);\n    }\n\n    // ss << cache.m_prevouts_single_hash;\n    const prevoutsSingleHash = Hash.sha256(prevoutsBW.toBuffer());\n    ss.write(prevoutsSingleHash);\n\n    // ss << cache.m_spent_amounts_single_hash;\n    const spentAmountsSingleHash = Hash.sha256(spentAmountsBW.toBuffer());\n    ss.write(spentAmountsSingleHash);\n\n    // ss << cache.m_spent_scripts_single_hash;\n    const spentScriptsSingleHash = Hash.sha256(spentScriptsBW.toBuffer());\n    ss.write(spentScriptsSingleHash);\n\n    // ss << cache.m_sequences_single_hash;\n    const sequencesSingleHash = Hash.sha256(sequencesBW.toBuffer());\n    ss.write(sequencesSingleHash);\n  }\n  if (outputType === Signature.SIGHASH_ALL) {\n    const outputsBW = new BufferWriter();\n    for (let vout of transaction.outputs) {\n      outputsBW.write(vout.toBufferWriter().toBuffer());\n    }\n    // ss << cache.m_outputs_single_hash;\n    const outputsSingleHash = Hash.sha256(outputsBW.toBuffer());\n    ss.write(outputsSingleHash);\n  }\n\n  // Data about the input/prevout being spent\n  $.checkArgument(execdata.annexInit, 'missing or invalid annexInit');\n  const spendType = (extFlag << 1) + (execdata.annexPresent ? 1 : 0); // The low bit indicates whether an annex is present.\n  ss.writeUInt8(spendType);\n  if (inputType === Signature.SIGHASH_ANYONECANPAY) {\n    // ss << tx_to.vin[in_pos].prevout;\n    const buf = new BufferWriter();\n    buf.writeReverse(transaction.inputs[inputNumber].prevTxId);\n    buf.writeInt32LE(transaction.inputs[inputNumber].outputIndex);\n    ss.write(buf.toBuffer());\n    // ss << cache.m_spent_outputs[inputNumber];\n    ss.write(transaction.inputs[inputNumber].output.toBufferWriter().toBuffer());\n    ss.writeUInt32LE(transaction.inputs[inputNumber].sequenceNumber);\n  } else {\n    ss.writeUInt32LE(inputNumber);\n  }\n  if (execdata.annexPresent) {\n    ss.write(execdata.annexHash);\n  }\n\n  // Data about the output (if only one).\n  if (outputType === Signature.SIGHASH_SINGLE) {\n    if (inputNumber >= transaction.outputs.length) {\n      return false;\n    }\n    const bw = new BufferWriter();\n    bw.writeUInt64LEBN(transaction.outputs[inputNumber]._satoshisBN);\n    const buf = transaction.outputs[inputNumber].script.toBuffer();\n    bw.writeVarintNum(buf.length);\n    bw.write(buf);\n    ss.write(Hash.sha256(bw.toBuffer()));\n  }\n\n  // Additional data for BIP 342 signatures\n  if (sigversion == Signature.Version.TAPSCRIPT) {\n    $.checkArgument(execdata.tapleafHashInit, 'missing or invalid tapleafHashInit');\n    ss.write(execdata.tapleafHash);\n    ss.writeUInt8(keyVersion);\n    $.checkArgument(execdata.codeseparatorPosInit, 'missing or invalid codeseparatorPosInit');\n    ss.writeUInt32LE(execdata.codeseparatorPos);\n  }\n\n  // Return the SHA256 hash\n  return ss.finalize();\n};\n\n\nfunction _getExecData(sigversion, leafHash) {\n  const execdata = { annexInit: true, annexPresent: false };\n  if (sigversion === Signature.Version.TAPSCRIPT) {\n    execdata.codeseparatorPosInit = true;\n    execdata.codeseparatorPos = 0xFFFFFFFF; // Only support non-OP_CODESEPARATOR BIP342 signing for now.\n    if (!leafHash) return false; // BIP342 signing needs leaf hash.\n    execdata.tapleafHashInit = true;\n    execdata.tapleafHash = leafHash;\n  }\n  return execdata;\n}\n\n\n/**\n * Create a Schnorr signature\n *\n * @name Signing.sign\n * @param {Transaction} transaction\n * @param {Buffer|BN|PrivateKey} privateKey\n * @param {number} sighash\n * @param {number} inputIndex\n * @param {number} sigversion\n * @param {Buffer} leafHash\n * @return {Signature}\n */\nfunction sign(transaction, privateKey, sighashType, inputIndex, sigversion, leafHash) {\n  $.checkArgument(sigversion === Signature.Version.TAPROOT || sigversion === Signature.Version.TAPSCRIPT, 'Invalid sigversion');\n  \n  const execdata = _getExecData(sigversion, leafHash);\n  const hashbuf = _signatureHash(transaction, sighashType, inputIndex, sigversion, execdata);\n  if (!hashbuf) {\n    return false;\n  }\n  const sig = Schnorr.sign(privateKey, hashbuf);\n  if (sighashType !== Signature.SIGHASH_DEFAULT) {\n    return Buffer.concat([sig, Buffer.from([sighashType])]); // 65 bytes\n  }\n  return sig; // 64 bytes\n};\n\n\n/**\n * Verify a Schnorr signature\n *\n * @name Signing.verify\n * @param {Transaction} transaction\n * @param {Signature} signature\n * @param {PublicKey} publicKey\n * @param {Number} inputIndex\n * @param {object|Buffer|null} execdata If given, can be full execdata object or just the leafHash buffer\n * @return {Boolean}\n */\nfunction verify(transaction, signature, publicKey, sigversion, inputIndex, execdata) {\n  $.checkArgument(transaction != null, 'Transaction Undefined');\n\n  if (!execdata || Buffer.isBuffer(execdata)) {\n    const leafHash = execdata;\n    execdata = _getExecData(sigversion, leafHash);\n  }\n\n  $.checkArgument(execdata.annexInit, 'invalid execdata');\n\n  const hashbuf = _signatureHash(transaction, signature.nhashtype, inputIndex, sigversion, execdata);\n  if (!hashbuf) {\n    return false;\n  }\n  const verified = Schnorr.verify(publicKey, hashbuf, signature);\n  return verified;\n};\n\n/**\n * @namespace Signing\n */\nmodule.exports = {\n  sign: sign,\n  verify: verify\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashschnorr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashwitness.js":
/*!********************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/sighashwitness.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* jshint maxparams:5 */\n\nvar Signature = __webpack_require__(/*! ../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar Script = __webpack_require__(/*! ../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar BufferReader = __webpack_require__(/*! ../encoding/bufferreader */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\");\nvar BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar Hash = __webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar ECDSA = __webpack_require__(/*! ../crypto/ecdsa */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/ecdsa.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\n/**\n * Returns a buffer of length 32 bytes with the hash that needs to be signed\n * for witness programs as defined by:\n * https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki\n *\n * @name Signing.sighash\n * @param {Transaction} transaction the transaction to sign\n * @param {number} sighashType the type of the hash\n * @param {number} inputNumber the input index for the signature\n * @param {Buffer} scriptCode\n * @param {Buffer} satoshisBuffer\n */\nvar sighash = function sighash(transaction, sighashType, inputNumber, scriptCode, satoshisBuffer) {\n  /* jshint maxstatements: 50 */\n\n  var hashPrevouts = Buffer.alloc(32);\n  var hashSequence = Buffer.alloc(32);\n  var hashOutputs = Buffer.alloc(32);\n\n  if (!(sighashType & Signature.SIGHASH_ANYONECANPAY)) {\n    var buffers = [];\n    for (var n = 0; n < transaction.inputs.length; n++) {\n      var input = transaction.inputs[n];\n      var prevTxIdBuffer = new BufferReader(input.prevTxId).readReverse();\n      buffers.push(prevTxIdBuffer);\n      var outputIndexBuffer = Buffer.alloc(4);\n      outputIndexBuffer.writeUInt32LE(input.outputIndex, 0);\n      buffers.push(outputIndexBuffer);\n    }\n    hashPrevouts = Hash.sha256sha256(Buffer.concat(buffers));\n  }\n\n  if (!(sighashType & Signature.SIGHASH_ANYONECANPAY) &&\n      (sighashType & 0x1f) !== Signature.SIGHASH_SINGLE && (sighashType & 0x1f) !== Signature.SIGHASH_NONE) {\n\n    var sequenceBuffers = [];\n    for (var m = 0; m < transaction.inputs.length; m++) {\n      var sequenceBuffer = Buffer.alloc(4);\n      sequenceBuffer.writeUInt32LE(transaction.inputs[m].sequenceNumber, 0);\n      sequenceBuffers.push(sequenceBuffer);\n    }\n    hashSequence = Hash.sha256sha256(Buffer.concat(sequenceBuffers));\n  }\n\n  var outputWriter = new BufferWriter();\n  if ((sighashType & 0x1f) !== Signature.SIGHASH_SINGLE && (sighashType & 0x1f) !== Signature.SIGHASH_NONE) {\n    for (var p = 0; p < transaction.outputs.length; p++) {\n      transaction.outputs[p].toBufferWriter(outputWriter);\n    }\n    hashOutputs = Hash.sha256sha256(outputWriter.toBuffer());\n  } else if ((sighashType & 0x1f) === Signature.SIGHASH_SINGLE && inputNumber < transaction.outputs.length) {\n    transaction.outputs[inputNumber].toBufferWriter(outputWriter);\n    hashOutputs = Hash.sha256sha256(outputWriter.toBuffer());\n  }\n\n  // Version\n  var writer = new BufferWriter();\n  writer.writeUInt32LE(transaction.version);\n\n  // Input prevouts/nSequence (none/all, depending on flags)\n  writer.write(hashPrevouts);\n  writer.write(hashSequence);\n\n  // The input being signed (replacing the scriptSig with scriptCode + amount)\n  // The prevout may already be contained in hashPrevout, and the nSequence\n  // may already be contain in hashSequence.\n  var outpointId = new BufferReader(transaction.inputs[inputNumber].prevTxId).readReverse();\n  writer.write(outpointId);\n  writer.writeUInt32LE(transaction.inputs[inputNumber].outputIndex);\n\n  writer.write(scriptCode);\n\n  writer.write(satoshisBuffer);\n\n  writer.writeUInt32LE(transaction.inputs[inputNumber].sequenceNumber);\n\n  // Outputs (none/one/all, depending on flags)\n  writer.write(hashOutputs);\n\n  // Locktime\n  writer.writeUInt32LE(transaction.nLockTime);\n\n  // Sighash type\n  writer.writeInt32LE(sighashType);\n\n  return Hash.sha256sha256(writer.toBuffer());\n\n};\n\n/**\n * Create a signature\n *\n * @name Signing.sign\n * @param {Transaction} transaction\n * @param {PrivateKey} privateKey\n * @param {number} sighash\n * @param {number} inputIndex\n * @param {Script} subscript\n * @return {Signature}\n */\nfunction sign(transaction, privateKey, sighashType, inputIndex, scriptCode, satoshisBuffer) {\n  let hashbuf = sighash(transaction, sighashType, inputIndex, scriptCode, satoshisBuffer);\n  return ECDSA.sign(hashbuf, privateKey).set({ nhashtype: sighashType });\n}\n\n/**\n * Verify a signature\n *\n * @name Signing.verify\n * @param {Transaction} transaction\n * @param {Signature} signature\n * @param {PublicKey} publicKey\n * @param {number} inputIndex\n * @param {Script} subscript\n * @return {boolean}\n */\nfunction verify(transaction, signature, publicKey, inputIndex, scriptCode, satoshisBuffer) {\n  $.checkArgument(!_.isUndefined(transaction), \"Transaction Undefined\");\n  $.checkArgument(!_.isUndefined(signature) && !_.isUndefined(signature.nhashtype), \"Signature Undefined\");\n\n  let hashbuf = sighash(transaction, signature.nhashtype, inputIndex, scriptCode, satoshisBuffer);\n  return ECDSA.verify(hashbuf, signature, publicKey);\n}\n\n/**\n * @namespace Signing\n */\nmodule.exports = {\n  sighash: sighash,\n  sign: sign,\n  verify: verify\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashwitness.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/signature.js":
/*!***************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/signature.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/bitcore-lib/node_modules/inherits/inherits.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar JSUtil = __webpack_require__(/*! ../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\n\nvar PublicKey = __webpack_require__(/*! ../publickey */ \"(ssr)/./node_modules/bitcore-lib/lib/publickey.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar Signature = __webpack_require__(/*! ../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\n\n/**\n * @desc\n * Wrapper around Signature with fields related to signing a transaction specifically\n *\n * @param {Object|string|TransactionSignature} arg\n * @constructor\n */\nfunction TransactionSignature(arg) {\n  if (!(this instanceof TransactionSignature)) {\n    return new TransactionSignature(arg);\n  }\n  if (arg instanceof TransactionSignature) {\n    return arg;\n  }\n  if (arg && typeof arg === 'object') {\n    return this._fromObject(arg);\n  }\n  throw new errors.InvalidArgument('TransactionSignatures must be instantiated from an object');\n}\ninherits(TransactionSignature, Signature);\n\nTransactionSignature.prototype._fromObject = function(arg) {\n  this._checkObjectArgs(arg);\n  this.publicKey = new PublicKey(arg.publicKey);\n  this.prevTxId = BufferUtil.isBuffer(arg.prevTxId) ? arg.prevTxId : Buffer.from(arg.prevTxId, 'hex');\n  this.outputIndex = arg.outputIndex;\n  this.inputIndex = arg.inputIndex;\n  this.signature = (arg.signature instanceof Signature) ? arg.signature :\n                     BufferUtil.isBuffer(arg.signature) ? Signature.fromBuffer(arg.signature) :\n                     Signature.fromString(arg.signature);\n  this.sigtype = arg.sigtype;\n  return this;\n};\n\nTransactionSignature.prototype._checkObjectArgs = function(arg) {\n  $.checkArgument(PublicKey(arg.publicKey), 'invalid publicKey');\n  $.checkArgument(arg.inputIndex != null, 'missing inputIndex');\n  $.checkArgument(arg.outputIndex != null, 'missing outputIndex');\n  $.checkState(!isNaN(arg.inputIndex), 'inputIndex must be a number');\n  $.checkState(!isNaN(arg.outputIndex), 'outputIndex must be a number');\n  $.checkArgument(arg.signature, 'missing signature');\n  $.checkArgument(arg.prevTxId, 'missing prevTxId');\n  $.checkState(arg.signature instanceof Signature ||\n               BufferUtil.isBuffer(arg.signature) ||\n               JSUtil.isHexa(arg.signature), 'signature must be a buffer or hexa value');\n  $.checkState(BufferUtil.isBuffer(arg.prevTxId) ||\n               JSUtil.isHexa(arg.prevTxId), 'prevTxId must be a buffer or hexa value');\n  $.checkArgument(arg.sigtype != null, 'missing sigtype');\n  $.checkState(!isNaN(arg.sigtype), 'sigtype must be a number');\n};\n\n/**\n * Serializes a transaction to a plain JS object\n * @return {Object}\n */\nTransactionSignature.prototype.toObject = TransactionSignature.prototype.toJSON = function toObject() {\n  return {\n    publicKey: this.publicKey.toString(),\n    prevTxId: this.prevTxId.toString('hex'),\n    outputIndex: this.outputIndex,\n    inputIndex: this.inputIndex,\n    signature: this.signature.toString(),\n    sigtype: this.sigtype\n  };\n};\n\n/**\n * Builds a TransactionSignature from an object\n * @param {Object} object\n * @return {TransactionSignature}\n */\nTransactionSignature.fromObject = function(object) {\n  $.checkArgument(object);\n  return new TransactionSignature(object);\n};\n\nmodule.exports = TransactionSignature;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3RyYW5zYWN0aW9uL3NpZ25hdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixRQUFRLG1CQUFPLENBQUMseUZBQXVCO0FBQ3ZDLGVBQWUsbUJBQU8sQ0FBQyxvRkFBVTtBQUNqQyxpQkFBaUIsbUJBQU8sQ0FBQywyRUFBZ0I7QUFDekMsYUFBYSxtQkFBTyxDQUFDLG1FQUFZOztBQUVqQyxnQkFBZ0IsbUJBQU8sQ0FBQyx1RUFBYztBQUN0QyxhQUFhLG1CQUFPLENBQUMsdUVBQVc7QUFDaEMsZ0JBQWdCLG1CQUFPLENBQUMscUZBQXFCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0NBQW9DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvdHJhbnNhY3Rpb24vc2lnbmF0dXJlLmpzPzYzYmUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJCA9IHJlcXVpcmUoJy4uL3V0aWwvcHJlY29uZGl0aW9ucycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbC9idWZmZXInKTtcbnZhciBKU1V0aWwgPSByZXF1aXJlKCcuLi91dGlsL2pzJyk7XG5cbnZhciBQdWJsaWNLZXkgPSByZXF1aXJlKCcuLi9wdWJsaWNrZXknKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuLi9lcnJvcnMnKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuLi9jcnlwdG8vc2lnbmF0dXJlJyk7XG5cbi8qKlxuICogQGRlc2NcbiAqIFdyYXBwZXIgYXJvdW5kIFNpZ25hdHVyZSB3aXRoIGZpZWxkcyByZWxhdGVkIHRvIHNpZ25pbmcgYSB0cmFuc2FjdGlvbiBzcGVjaWZpY2FsbHlcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxzdHJpbmd8VHJhbnNhY3Rpb25TaWduYXR1cmV9IGFyZ1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFRyYW5zYWN0aW9uU2lnbmF0dXJlKGFyZykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNhY3Rpb25TaWduYXR1cmUpKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvblNpZ25hdHVyZShhcmcpO1xuICB9XG4gIGlmIChhcmcgaW5zdGFuY2VvZiBUcmFuc2FjdGlvblNpZ25hdHVyZSkge1xuICAgIHJldHVybiBhcmc7XG4gIH1cbiAgaWYgKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB0aGlzLl9mcm9tT2JqZWN0KGFyZyk7XG4gIH1cbiAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnQoJ1RyYW5zYWN0aW9uU2lnbmF0dXJlcyBtdXN0IGJlIGluc3RhbnRpYXRlZCBmcm9tIGFuIG9iamVjdCcpO1xufVxuaW5oZXJpdHMoVHJhbnNhY3Rpb25TaWduYXR1cmUsIFNpZ25hdHVyZSk7XG5cblRyYW5zYWN0aW9uU2lnbmF0dXJlLnByb3RvdHlwZS5fZnJvbU9iamVjdCA9IGZ1bmN0aW9uKGFyZykge1xuICB0aGlzLl9jaGVja09iamVjdEFyZ3MoYXJnKTtcbiAgdGhpcy5wdWJsaWNLZXkgPSBuZXcgUHVibGljS2V5KGFyZy5wdWJsaWNLZXkpO1xuICB0aGlzLnByZXZUeElkID0gQnVmZmVyVXRpbC5pc0J1ZmZlcihhcmcucHJldlR4SWQpID8gYXJnLnByZXZUeElkIDogQnVmZmVyLmZyb20oYXJnLnByZXZUeElkLCAnaGV4Jyk7XG4gIHRoaXMub3V0cHV0SW5kZXggPSBhcmcub3V0cHV0SW5kZXg7XG4gIHRoaXMuaW5wdXRJbmRleCA9IGFyZy5pbnB1dEluZGV4O1xuICB0aGlzLnNpZ25hdHVyZSA9IChhcmcuc2lnbmF0dXJlIGluc3RhbmNlb2YgU2lnbmF0dXJlKSA/IGFyZy5zaWduYXR1cmUgOlxuICAgICAgICAgICAgICAgICAgICAgQnVmZmVyVXRpbC5pc0J1ZmZlcihhcmcuc2lnbmF0dXJlKSA/IFNpZ25hdHVyZS5mcm9tQnVmZmVyKGFyZy5zaWduYXR1cmUpIDpcbiAgICAgICAgICAgICAgICAgICAgIFNpZ25hdHVyZS5mcm9tU3RyaW5nKGFyZy5zaWduYXR1cmUpO1xuICB0aGlzLnNpZ3R5cGUgPSBhcmcuc2lndHlwZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5UcmFuc2FjdGlvblNpZ25hdHVyZS5wcm90b3R5cGUuX2NoZWNrT2JqZWN0QXJncyA9IGZ1bmN0aW9uKGFyZykge1xuICAkLmNoZWNrQXJndW1lbnQoUHVibGljS2V5KGFyZy5wdWJsaWNLZXkpLCAnaW52YWxpZCBwdWJsaWNLZXknKTtcbiAgJC5jaGVja0FyZ3VtZW50KGFyZy5pbnB1dEluZGV4ICE9IG51bGwsICdtaXNzaW5nIGlucHV0SW5kZXgnKTtcbiAgJC5jaGVja0FyZ3VtZW50KGFyZy5vdXRwdXRJbmRleCAhPSBudWxsLCAnbWlzc2luZyBvdXRwdXRJbmRleCcpO1xuICAkLmNoZWNrU3RhdGUoIWlzTmFOKGFyZy5pbnB1dEluZGV4KSwgJ2lucHV0SW5kZXggbXVzdCBiZSBhIG51bWJlcicpO1xuICAkLmNoZWNrU3RhdGUoIWlzTmFOKGFyZy5vdXRwdXRJbmRleCksICdvdXRwdXRJbmRleCBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICQuY2hlY2tBcmd1bWVudChhcmcuc2lnbmF0dXJlLCAnbWlzc2luZyBzaWduYXR1cmUnKTtcbiAgJC5jaGVja0FyZ3VtZW50KGFyZy5wcmV2VHhJZCwgJ21pc3NpbmcgcHJldlR4SWQnKTtcbiAgJC5jaGVja1N0YXRlKGFyZy5zaWduYXR1cmUgaW5zdGFuY2VvZiBTaWduYXR1cmUgfHxcbiAgICAgICAgICAgICAgIEJ1ZmZlclV0aWwuaXNCdWZmZXIoYXJnLnNpZ25hdHVyZSkgfHxcbiAgICAgICAgICAgICAgIEpTVXRpbC5pc0hleGEoYXJnLnNpZ25hdHVyZSksICdzaWduYXR1cmUgbXVzdCBiZSBhIGJ1ZmZlciBvciBoZXhhIHZhbHVlJyk7XG4gICQuY2hlY2tTdGF0ZShCdWZmZXJVdGlsLmlzQnVmZmVyKGFyZy5wcmV2VHhJZCkgfHxcbiAgICAgICAgICAgICAgIEpTVXRpbC5pc0hleGEoYXJnLnByZXZUeElkKSwgJ3ByZXZUeElkIG11c3QgYmUgYSBidWZmZXIgb3IgaGV4YSB2YWx1ZScpO1xuICAkLmNoZWNrQXJndW1lbnQoYXJnLnNpZ3R5cGUgIT0gbnVsbCwgJ21pc3Npbmcgc2lndHlwZScpO1xuICAkLmNoZWNrU3RhdGUoIWlzTmFOKGFyZy5zaWd0eXBlKSwgJ3NpZ3R5cGUgbXVzdCBiZSBhIG51bWJlcicpO1xufTtcblxuLyoqXG4gKiBTZXJpYWxpemVzIGEgdHJhbnNhY3Rpb24gdG8gYSBwbGFpbiBKUyBvYmplY3RcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuVHJhbnNhY3Rpb25TaWduYXR1cmUucHJvdG90eXBlLnRvT2JqZWN0ID0gVHJhbnNhY3Rpb25TaWduYXR1cmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHB1YmxpY0tleTogdGhpcy5wdWJsaWNLZXkudG9TdHJpbmcoKSxcbiAgICBwcmV2VHhJZDogdGhpcy5wcmV2VHhJZC50b1N0cmluZygnaGV4JyksXG4gICAgb3V0cHV0SW5kZXg6IHRoaXMub3V0cHV0SW5kZXgsXG4gICAgaW5wdXRJbmRleDogdGhpcy5pbnB1dEluZGV4LFxuICAgIHNpZ25hdHVyZTogdGhpcy5zaWduYXR1cmUudG9TdHJpbmcoKSxcbiAgICBzaWd0eXBlOiB0aGlzLnNpZ3R5cGVcbiAgfTtcbn07XG5cbi8qKlxuICogQnVpbGRzIGEgVHJhbnNhY3Rpb25TaWduYXR1cmUgZnJvbSBhbiBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge1RyYW5zYWN0aW9uU2lnbmF0dXJlfVxuICovXG5UcmFuc2FjdGlvblNpZ25hdHVyZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICQuY2hlY2tBcmd1bWVudChvYmplY3QpO1xuICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uU2lnbmF0dXJlKG9iamVjdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uU2lnbmF0dXJlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/transaction.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/transaction.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar compare = Buffer.compare || __webpack_require__(/*! buffer-compare */ \"(ssr)/./node_modules/buffer-compare/index.js\");\n\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar BufferUtil = __webpack_require__(/*! ../util/buffer */ \"(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\");\nvar JSUtil = __webpack_require__(/*! ../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar BufferReader = __webpack_require__(/*! ../encoding/bufferreader */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferreader.js\");\nvar BufferWriter = __webpack_require__(/*! ../encoding/bufferwriter */ \"(ssr)/./node_modules/bitcore-lib/lib/encoding/bufferwriter.js\");\nvar Hash = __webpack_require__(/*! ../crypto/hash */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/hash.js\");\nvar Signature = __webpack_require__(/*! ../crypto/signature */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/signature.js\");\nvar Sighash = __webpack_require__(/*! ./sighash */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighash.js\");\nvar SighashWitness = __webpack_require__(/*! ./sighashwitness */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashwitness.js\");\nconst SighashSchnorr = __webpack_require__(/*! ./sighashschnorr */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/sighashschnorr.js\");\n\nvar Address = __webpack_require__(/*! ../address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\nvar UnspentOutput = __webpack_require__(/*! ./unspentoutput */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/unspentoutput.js\");\nvar Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/input/index.js\");\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\nconst TaprootInput = Input.Taproot;\nvar Output = __webpack_require__(/*! ./output */ \"(ssr)/./node_modules/bitcore-lib/lib/transaction/output.js\");\nvar Script = __webpack_require__(/*! ../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar PrivateKey = __webpack_require__(/*! ../privatekey */ \"(ssr)/./node_modules/bitcore-lib/lib/privatekey.js\");\nvar BN = __webpack_require__(/*! ../crypto/bn */ \"(ssr)/./node_modules/bitcore-lib/lib/crypto/bn.js\");\n\n/**\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\n *\n * @param {*} serialized\n * @constructor\n */\nfunction Transaction(serialized, opts) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized, opts);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\nvar CURRENT_VERSION = 2;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000;\n\n// Minimum amount for an output for it not to be considered a dust output\nTransaction.DUST_AMOUNT = 546;\n\n// Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\nTransaction.FEE_SECURITY_MARGIN = 150;\n\n// max amount of satoshis in circulation\nTransaction.MAX_MONEY = 21000000 * 1e8;\n\n// nlocktime limit to be considered block height rather than a timestamp\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;\n\n// Max value for an unsigned 32 bit value\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295;\n\n// Value used for fee estimation (satoshis per kilobyte)\nTransaction.FEE_PER_KB = 100000;\n\n// Safe upper bound for change address script size in bytes\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n\n/* Constructors and Serialization */\n\n/**\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\n * it dropping any additional information that inputs and outputs may have hold\n *\n * @param {Transaction} transaction\n * @return {Transaction}\n */\nTransaction.shallowCopy = function(transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\n\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    this._hash = new BufferReader(this._getHash()).readReverse().toString('hex');\n    return this._hash;\n  }\n};\n\nvar witnessHashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return new BufferReader(this._getWitnessHash()).readReverse().toString('hex');\n  }\n};\n\nObject.defineProperty(Transaction.prototype, 'witnessHash', witnessHashProperty);\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\n\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\nioProperty.get = function() {\n  return this._getOutputAmount();\n};\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n\nObject.defineProperty(Transaction.prototype, 'size', {\n  configurable: false,\n  enumerable: false,\n  get: function() {\n    return this._calculateSize();\n  }\n});\n\nObject.defineProperty(Transaction.prototype, 'vsize', {\n  configurable: false,\n  enumerable: false,\n  get: function() {\n    return this._calculateVSize();\n  }\n});\n\nObject.defineProperty(Transaction.prototype, 'weight', {\n  configurable: false,\n  enumerable: false,\n  get: function() {\n    return this._calculateWeight();\n  }\n});\n\n/**\n * Retrieve the little endian hash of the transaction (used for serialization)\n * @return {Buffer}\n */\nTransaction.prototype._getHash = function() {\n  return Hash.sha256sha256(this.toBuffer(true));\n};\n\n/**\n * Retrieve the little endian hash of the transaction including witness data\n * @return {Buffer}\n */\nTransaction.prototype._getWitnessHash = function() {\n  return Hash.sha256sha256(this.toBuffer(false));\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\n *   it's expected to contain a set of flags to skip certain tests:\n * * `disableAll`: disable all checks\n * * `disableSmallFees`: disable checking for fees that are too small\n * * `disableLargeFees`: disable checking for fees that are too large\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\n * @return {string}\n */\nTransaction.prototype.serialize = function(unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\n\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {string}\n */\nTransaction.prototype.checkedSerialize = function(opts) {\n  var serializationError = this.getSerializationError(opts);\n  if (serializationError) {\n    serializationError.message += ' - For more information please see: ' +\n      'https://github.com/bitpay/bitcore/blob/master/packages/bitcore-lib/docs/transaction.md#serialization-checks';\n    throw serializationError;\n  }\n  return this.uncheckedSerialize();\n};\n\nTransaction.prototype.invalidSatoshis = function() {\n  var invalid = false;\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n  return invalid;\n};\n\n/**\n * Retrieve a possible error that could appear when trying to serialize and\n * broadcast this transaction.\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {bitcore.Error}\n */\nTransaction.prototype.getSerializationError = function(opts) {\n  opts = opts || {};\n\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n\n  var unspent = this._getUnspentValue();\n  var unspentError;\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n\n  return unspentError ||\n    this._hasDustOutputs(opts) ||\n    this._isMissingSignatures(opts);\n};\n\nTransaction.prototype._hasFeeError = function(opts, unspent) {\n\n  if (this._fee != null && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different(\n      'Unspent value is ' + unspent + ' but specified fee is ' + this._fee\n    );\n  }\n\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing(\n          'Fee is too large and no change address was provided'\n        );\n      }\n      return new errors.Transaction.FeeError.TooLarge(\n        'expected less than ' + maximumFee + ' but got ' + unspent\n      );\n    }\n  }\n\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall(\n        'expected more than ' + minimumFee + ' but got ' + unspent\n      );\n    }\n  }\n};\n\nTransaction.prototype._missingChange = function() {\n  return !this._changeScript;\n};\n\nTransaction.prototype._hasDustOutputs = function(opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n  var index, output;\n  for (index in this.outputs) {\n    output = this.outputs[index];\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\n\nTransaction.prototype._isMissingSignatures = function(opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\n\nTransaction.prototype.inspect = function() {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\n\nTransaction.prototype.toBuffer = function(noWitness) {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer, noWitness).toBuffer();\n};\n\nTransaction.prototype.hasWitnesses = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].hasWitnesses()) {\n      return true;\n    }\n  }\n  return false;\n};\n\nTransaction.prototype.toBufferWriter = function(writer, noWitness) {\n  writer.writeInt32LE(this.version);\n\n  const hasWitnesses = this.hasWitnesses();\n\n  if (hasWitnesses && !noWitness) {\n    writer.write(Buffer.from('0001', 'hex'));\n  }\n\n  writer.writeVarintNum(this.inputs ? this.inputs.length : 0);\n  for (const input of this.inputs || []) {\n    input.toBufferWriter(writer);\n  }\n\n  writer.writeVarintNum(this.outputs ? this.outputs.length : 0);\n  for (const output of this.outputs || []) {\n    output.toBufferWriter(writer);\n  }\n\n  if (hasWitnesses && !noWitness) {\n    for (const input of this.inputs) {\n      const witnesses = input.getWitnesses();\n      writer.writeVarintNum(witnesses.length);\n      for (let j = 0; j < witnesses.length; j++) {\n        writer.writeVarintNum(witnesses[j].length);\n        writer.write(witnesses[j]);\n      }\n    }\n  }\n\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\n\nTransaction.prototype.fromBuffer = function(buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\n\nTransaction.prototype.fromBufferReader = function(reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n\n  this.version = reader.readInt32LE();\n  var sizeTxIns = reader.readVarintNum();\n\n  // check for segwit\n  var hasWitnesses = false;\n  if (sizeTxIns === 0 && reader.buf[reader.pos] !== 0) {\n    reader.pos += 1;\n    hasWitnesses = true;\n    sizeTxIns = reader.readVarintNum();\n  }\n\n  for (var i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n\n  var sizeTxOuts = reader.readVarintNum();\n  for (var j = 0; j < sizeTxOuts; j++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n\n  if (hasWitnesses) {\n    for (var k = 0; k < sizeTxIns; k++) {\n      var itemCount = reader.readVarintNum();\n      var witnesses = [];\n      for (var l = 0; l < itemCount; l++) {\n        var size = reader.readVarintNum();\n        var item = reader.read(size);\n        witnesses.push(item);\n      }\n      this.inputs[k].setWitnesses(witnesses);\n    }\n  }\n\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\n\n\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function(input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function(output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n  if (this._changeIndex != null) {\n    obj.changeIndex = this._changeIndex;\n  }\n  if (this._fee != null) {\n    obj.fee = this._fee;\n  }\n  return obj;\n};\n\nTransaction.prototype.fromObject = function fromObject(arg, opts) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var transaction;\n  if (arg instanceof Transaction) {\n    transaction = arg.toObject();\n  } else {\n    transaction = arg;\n  }\n  for (const input of transaction.inputs || []) {\n    if (!input.output || !input.output.script) {\n      this.uncheckedAddInput(new Input(input));\n      continue;\n    }\n    var script = new Script(input.output.script);\n    var txin;\n    if ((script.isScriptHashOut() || script.isWitnessScriptHashOut()) && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(\n        input, input.publicKeys, input.threshold, input.signatures, opts\n      );\n    } else if (script.isPublicKeyHashOut() || script.isWitnessPublicKeyHashOut() || script.isScriptHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n    this.addInput(txin);\n  }\n  for (const output of transaction.outputs || []) {\n    this.addOutput(new Output(output));\n  }\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n  this._checkConsistency(arg);\n  return this;\n};\n\nTransaction.prototype._checkConsistency = function(arg) {\n  if (this._changeIndex != null) {\n    $.checkState(this._changeScript, 'Change script is expected.');\n    $.checkState(this.outputs[this._changeIndex], 'Change index points to undefined output.');\n    $.checkState(this.outputs[this._changeIndex].script.toString() ===\n      this._changeScript.toString(), 'Change output has an unexpected script.');\n  }\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash.');\n  }\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired date(a\n * timestamp in seconds since UNIX epoch is also accepted)\n *\n * @param {Date | Number} time\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilDate = function(time) {\n  $.checkArgument(time);\n  if (!isNaN(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = time;\n  return this;\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired block\n * height.\n *\n * @param {Number} height\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilBlockHeight = function(height) {\n  $.checkArgument(!isNaN(height));\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n\n  this.nLockTime = height;\n  return this;\n};\n\n/**\n *  Returns a semantic version of the transaction's nLockTime.\n *  @return {Number|Date}\n *  If nLockTime is 0, it returns null,\n *  if it is < 500000000, it returns a block height (number)\n *  else it returns a Date object.\n */\nTransaction.prototype.getLockTime = function() {\n  if (!this.nLockTime) {\n    return null;\n  }\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n  return new Date(1000 * this.nLockTime);\n};\n\nTransaction.prototype.fromString = function(string) {\n  this.fromBuffer(buffer.Buffer.from(string, 'hex'));\n};\n\nTransaction.prototype._newTransaction = function() {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n\n/* Transaction creation interface */\n\n/**\n * @typedef {Object} Transaction~fromObject\n * @property {string} prevTxId\n * @property {number} outputIndex\n * @property {(Buffer|string|Script)} script\n * @property {number} satoshis\n */\n\n/**\n * Add an input to this transaction. This is a high level interface\n * to add an input, for more control, use @{link Transaction#addInput}.\n *\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\n * and a slightly fancier format recognized by bitcore:\n *\n * ```\n * {\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\n *  outputIndex: 0,\n *  script: Script.empty(),\n *  satoshis: 1020000\n * }\n * ```\n * Where `address` can be either a string or a bitcore Address object. The\n * same is true for `script`, which can be a string or a bitcore Script.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @example\n * ```javascript\n * var transaction = new Transaction();\n *\n * // From a pay to public key hash output from bitcoind's listunspent\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\n *\n * // From a pay to public key hash output\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\n *\n * // From a multisig P2SH output\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\n *                  ['03000...', '02000...'], 2);\n * ```\n *\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\n * @param {Array=} pubkeys\n * @param {number=} threshold\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true and is multisig, don't\n *                      sort the given public keys before creating the script\n */\nTransaction.prototype.from = function(utxo, pubkeys, threshold, opts) {\n  if (Array.isArray(utxo)) {\n    for(const u of utxo) {\n      this.from(u, pubkeys, threshold, opts);\n    };\n    return this;\n  }\n  const exists = this.inputs.some(function(input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n  if (exists) {\n    return this;\n  }\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold, opts);\n  } else {\n    this._fromNonP2SH(utxo, opts);\n  }\n  return this;\n};\n\n/**\n * associateInputs - Update inputs with utxos, allowing you to specify value, and pubkey.\n * Populating these inputs allows for them to be signed with .sign(privKeys)\n *\n * @param {Array<Object>} utxos\n * @param {Array<string | PublicKey>} pubkeys\n * @param {number} threshold\n * @param {Object} opts\n * @returns {Array<number>}\n */\nTransaction.prototype.associateInputs = function(utxos, pubkeys, threshold, opts = {}) {\n  let indexes = [];\n  for(let utxo of utxos) {\n    const index = this.inputs.findIndex(i => i.prevTxId.toString('hex') === utxo.txId && i.outputIndex === utxo.outputIndex);\n    indexes.push(index);\n    if(index >= 0) {\n      const sequenceNumber = this.inputs[index].sequenceNumber; // preserve the set sequence number\n      this.inputs[index] = this._getInputFrom(utxo, pubkeys, threshold, opts);\n      this.inputs[index].sequenceNumber = sequenceNumber;\n    }\n  }\n  return indexes;\n}\n\n\nTransaction.prototype._selectInputType = function(utxo, pubkeys, threshold) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if(pubkeys && threshold) {\n    if (utxo.script.isMultisigOut()) {\n      clazz = MultiSigInput;\n    } else if (utxo.script.isScriptHashOut() || utxo.script.isWitnessScriptHashOut()) {\n      clazz = MultiSigScriptHashInput;\n    }\n  } else if (utxo.script.isPublicKeyHashOut() || utxo.script.isWitnessPublicKeyHashOut() || utxo.script.isScriptHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isTaproot()) {\n    clazz = TaprootInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n  return clazz;\n}\n\n\nTransaction.prototype._getInputFrom = function(utxo, pubkeys, threshold, opts = {}) {\n  utxo = new UnspentOutput(utxo);\n  const InputClass = this._selectInputType(utxo, pubkeys, threshold);\n  const input = {\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    sequenceNumber: opts.sequenceNumber,\n    script: Script.empty()\n  };\n  let args = pubkeys && threshold ? [pubkeys, threshold, false, opts] : []\n  return new InputClass(input, ...args);\n}\n\nTransaction.prototype._fromNonP2SH = function(utxo, opts) {\n  const input = this._getInputFrom(utxo, null, null, opts);\n  this.addInput(input);\n};\n\nTransaction.prototype._fromMultisigUtxo = function(utxo, pubkeys, threshold, opts) {\n  $.checkArgument(threshold <= pubkeys.length,\n    'Number of required signatures must be greater than the number of public keys');\n  const input = this._getInputFrom(utxo, pubkeys, threshold, opts);\n  this.addInput(input);\n};\n\n/**\n * Add an input to this transaction. The input must be an instance of the `Input` class.\n * It should have information about the Output that it's spending, but if it's not already\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\n *\n * @param {Input} input\n * @param {String|Script} outputScript\n * @param {number} satoshis\n * @return Transaction this, for chaining\n */\nTransaction.prototype.addInput = function(input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n  if (!input.output && (outputScript == null || satoshis == null)) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n  if (!input.output && outputScript && satoshis != null) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n  return this.uncheckedAddInput(input);\n};\n\n/**\n * Add an input to this transaction, without checking that the input has information about\n * the output that it's spending.\n *\n * @param {Input} input\n * @return Transaction this, for chaining\n */\nTransaction.prototype.uncheckedAddInput = function(input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Returns true if the transaction has enough info on all inputs to be correctly validated\n *\n * @return {boolean}\n */\nTransaction.prototype.hasAllUtxoInfo = function() {\n  return this.inputs.every(function(input) {\n    return !!input.output;\n  });\n};\n\n/**\n * Manually set the fee for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.fee = function(amount) {\n  $.checkArgument(!isNaN(amount), 'amount must be a number');\n  this._fee = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis per KB to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.feePerKb = function(amount) {\n  $.checkArgument(!isNaN(amount), 'amount must be a number');\n  this._feePerKb = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Manually set the fee per Byte for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n * fee per Byte will be ignored if fee per KB is set\n *\n * @param {number} amount satoshis per Byte to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.feePerByte = function (amount) {\n  $.checkArgument(!isNaN(amount), 'amount must be a number');\n  this._feePerByte = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/* Output management */\n\n/**\n * Set the change address for this transaction\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Address} address An address for change to be sent to.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.change = function(address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * @return {Output} change output, if it exists\n */\nTransaction.prototype.getChangeOutput = function() {\n  if (this._changeIndex != null) {\n    return this.outputs[this._changeIndex];\n  }\n  return null;\n};\n\n/**\n * @typedef {Object} Transaction~toObject\n * @property {(string|Address)} address\n * @property {number} satoshis\n */\n\n/**\n * Add an output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {(string|Address|Array.<Transaction~toObject>)} address\n * @param {number} amount in satoshis\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.to = function(address, amount) {\n  if (Array.isArray(address)) {\n    for (const to of address) {\n      this.to(to.address, to.satoshis);\n    }\n    return this;\n  }\n\n  $.checkArgument(\n    JSUtil.isNaturalNumber(amount),\n    'Amount is expected to be a positive integer'\n  );\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n\n/**\n * Add an OP_RETURN output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\n *    In case of a string, the UTF-8 representation will be stored\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addData = function(value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n\n\n/**\n * Add an output to the transaction.\n *\n * @param {Output} output the output to add.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addOutput = function(output) {\n  $.checkArgumentType(output, Output, 'output');\n  this._addOutput(output);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * Remove all outputs from the transaction.\n *\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.clearOutputs = function() {\n  this.outputs = [];\n  this._clearSignatures();\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n\nTransaction.prototype._addOutput = function(output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n\n\n/**\n * Calculates or gets the total output amount in satoshis\n *\n * @return {Number} the transaction total output amount\n */\nTransaction.prototype._getOutputAmount = function() {\n  if (this._outputAmount == null) {\n    var self = this;\n    this._outputAmount = 0;\n    for (const output of this.outputs || []) {\n      self._outputAmount += output.satoshis;\n    }\n  }\n  return this._outputAmount;\n};\n\n\n/**\n * Calculates or gets the total input amount in satoshis\n *\n * @return {Number} the transaction total input amount\n */\nTransaction.prototype._getInputAmount = function() {\n  if (this._inputAmount == null) {\n    this._inputAmount = _.sumBy(this.inputs, function(input) {\n      if (input.output == null) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n      return input.output.satoshis;\n    });\n  }\n  return this._inputAmount;\n};\n\nTransaction.prototype._updateChangeOutput = function(noClearSigs) {\n  if (!this._changeScript) {\n    return;\n  }\n  if (!noClearSigs) {\n    this._clearSignatures();\n  }\n  if (this._changeIndex != null) {\n    this._removeOutput(this._changeIndex);\n  }\n  var available = this._getUnspentValue();\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n  if (changeAmount > Transaction.DUST_AMOUNT) {\n    this._changeIndex = this.outputs.length;\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\n * Calculates the fee of the transaction.\n *\n * If there's a fixed fee set, return that.\n *\n * If there is no change output set, the fee is the\n * total value of the outputs minus inputs. Note that\n * a serialized transaction only specifies the value\n * of its outputs. (The value of inputs are recorded\n * in the previous transaction outputs being spent.)\n * This method therefore raises a \"MissingPreviousOutput\"\n * error when called on a serialized transaction.\n *\n * If there's no fee set and no change address,\n * estimate the fee based on size.\n *\n * @return {Number} fee of this transaction in satoshis\n */\nTransaction.prototype.getFee = function() {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n  if (this._fee != null) {\n    return this._fee;\n  }\n  // if no change output is set, fees should equal all the unspent amount\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n  return this._estimateFee();\n};\n\n/**\n * Estimates fee from serialized transaction size in bytes.\n */\nTransaction.prototype._estimateFee = function () {\n  const estimatedSize = this._estimateSize();\n  const available = this._getUnspentValue();\n  const feeRate = this._feePerByte || (this._feePerKb || Transaction.FEE_PER_KB) / 1000;\n  function getFee(size) {\n    return size * feeRate;\n  }\n  const fee = Math.ceil(getFee(estimatedSize));\n  const feeWithChange = Math.ceil(getFee(estimatedSize) + getFee(this._estimateSizeOfChangeOutput()));\n  if (!this._changeScript || available <= feeWithChange) {\n    return fee;\n  }\n  return feeWithChange;\n};\n\nTransaction.prototype._estimateSizeOfChangeOutput = function () {\n  if (!this._changeScript) {\n    return 0;\n  }\n  const scriptLen = this._changeScript.toBuffer().length;\n  // 8 bytes for satoshis + script size + actual script size\n  return 8 + BufferWriter.varintBufNum(scriptLen).length + scriptLen;\n};\n\nTransaction.prototype._getUnspentValue = function() {\n  return this._getInputAmount() - this._getOutputAmount();\n};\n\nTransaction.prototype._clearSignatures = function() {\n  for (const input of this.inputs || []) {\n    input.clearSignatures();\n  }\n};\n\n/**\n * Estimate the tx size before input signatures are added.\n */\nTransaction.prototype._estimateSize = function() {\n  let result = 4; // version\n\n  if (this.hasWitnesses()) {\n    result += .5;\n  }\n\n  result += BufferWriter.varintBufNum(this.inputs.length).length;\n  for (const input of this.inputs || []) {\n    result += input._estimateSize();\n  }\n\n  result += BufferWriter.varintBufNum(this.outputs.length).length;\n  for (const output of this.outputs || []) {\n    result += output.calculateSize();\n  }\n\n  result += 4; // nLockTime\n  return Math.ceil(result);\n};\n\nTransaction.prototype._calculateSize = function() {\n  return this.toBuffer().length;\n};\n\nTransaction.prototype._calculateVSize = function(noRound) {\n  const vsize = this._calculateWeight() / 4;\n  return noRound ? vsize : Math.ceil(vsize);\n};\n\nTransaction.prototype._calculateWeight = function() {\n  return (this.toBuffer(true).length * 3) + this.toBuffer(false).length;\n};\n\nTransaction.prototype._removeOutput = function(index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\n\nTransaction.prototype.removeOutput = function(index) {\n  this._removeOutput(index);\n  this._updateChangeOutput();\n};\n\n/**\n * Sort a transaction's inputs and outputs according to BIP69\n *\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\n * @return {Transaction} this\n */\nTransaction.prototype.sort = function() {\n  this.sortInputs(function(inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    let i = 0;\n    copy.forEach((x) => { x.i = i++});\n    copy.sort(function(first, second) {\n     return compare(first.prevTxId, second.prevTxId)\n        || first.outputIndex - second.outputIndex\n        || first.i - second.i;  // to ensure stable sort\n    });\n    return copy;\n  });\n  this.sortOutputs(function(outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    let i = 0;\n    copy.forEach((x) => { x.i = i++});\n    copy.sort(function(first, second) {\n      return first.satoshis - second.satoshis\n        || compare(first.script.toBuffer(), second.script.toBuffer())\n        || first.i - second.i;  // to ensure stable sort\n    });\n    return copy;\n  });\n  return this;\n};\n\n/**\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\n *\n * @return {Transaction} this\n */\nTransaction.prototype.shuffleOutputs = function() {\n  return this.sortOutputs(_.shuffle);\n};\n\n/**\n * Sort this transaction's outputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order. The argument function MUST NOT modify the order\n * of the original array\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortOutputs = function(sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n\n/**\n * Sort this transaction's inputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order.\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortInputs = function(sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n  this._clearSignatures();\n  return this;\n};\n\nTransaction.prototype._newOutputOrder = function(newOutputs) {\n  var isInvalidSorting = (this.outputs.length !== newOutputs.length ||\n                          _.difference(this.outputs, newOutputs).length !== 0);\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n\n  if (this._changeIndex != null) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = newOutputs.indexOf(changeOutput);\n  }\n\n  this.outputs = newOutputs;\n  return this;\n};\n\nTransaction.prototype.removeInput = function(txId, outputIndex) {\n  var index;\n  if (!outputIndex && !isNaN(txId)) {\n    index = txId;\n  } else {\n    index = this.inputs.findIndex(function(input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n};\n\n/* Signature handling */\n\n/**\n * Sign the transaction using one or more private keys.\n *\n * It tries to sign each input, verifying that the signature will be valid\n * (matches a public key).\n *\n * @param {Array|String|PrivateKey} privateKey\n * @param {number} sigtype\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr'\n * @param {Buffer|String} merkleRoot - merkle root for taproot signing\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.sign = function(privateKey, sigtype, signingMethod, merkleRoot) {\n  $.checkState(this.hasAllUtxoInfo(), 'Not all utxo information is available to sign the transaction.');\n  if (Array.isArray(privateKey)) {\n    for (const pk of privateKey) {\n      this.sign(pk, sigtype, signingMethod, merkleRoot);\n    }\n    return this;\n  }\n  for (const signature of this.getSignatures(privateKey, sigtype, signingMethod, merkleRoot)) {\n    this.applySignature(signature, signingMethod);\n  }\n  return this;\n};\n\nTransaction.prototype.getSignatures = function(privKey, sigtype, signingMethod, merkleRoot) {\n  if (typeof merkleRoot === 'string') {\n    merkleRoot = Buffer.from(merkleRoot, 'hex');\n  }\n  privKey = new PrivateKey(privKey);\n  const results = [];\n  const hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n  for (let i = 0; i < this.inputs.length; i++) {\n    const input = this.inputs[i];\n    for (const signature of input.getSignatures(this, privKey, i, sigtype, hashData, signingMethod, merkleRoot)) {\n      results.push(signature);\n    }\n  }\n  return results;\n};\n\n/**\n * Add a signature to the transaction\n *\n * @param {Object} signature\n * @param {number} signature.inputIndex\n * @param {number} signature.sigtype\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {String} signingMethod - 'ecdsa' to sign transaction\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.applySignature = function(signature, signingMethod) {\n  this.inputs[signature.inputIndex].addSignature(this, signature, signingMethod);\n  return this;\n};\n\nTransaction.prototype.isFullySigned = function() {\n  for (const input of this.inputs || []) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature(\n        'Unrecognized script kind, or not enough information to execute script.' +\n        'This usually happens when creating a transaction from a serialized transaction'\n      );\n    }\n  }\n  return this.inputs.every(function(input) {\n    return input.isFullySigned();\n  });\n};\n\nTransaction.prototype.isValidSignature = function(signature, signingMethod) {\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature(\n      'Unrecognized script kind, or not enough information to execute script.' +\n      'This usually happens when creating a transaction from a serialized transaction'\n    );\n  }\n  return this.inputs[signature.inputIndex].isValidSignature(this, signature, signingMethod);\n};\n\n\n/**\n * Verify ECDSA signature\n * @param {Signature} sig \n * @param {PublicKey} pubkey \n * @param {Number} nin \n * @param {Script} subscript \n * @param {Number} satoshis \n * @returns {Boolean}\n */\nTransaction.prototype.checkEcdsaSignature = function(sig, pubkey, nin, subscript, satoshis) {\n  var subscriptBuffer = subscript.toBuffer();\n  var scriptCodeWriter = new BufferWriter();\n  scriptCodeWriter.writeVarintNum(subscriptBuffer.length);\n  scriptCodeWriter.write(subscriptBuffer);\n\n  var satoshisBuffer;\n  if (satoshis) {\n    $.checkState(JSUtil.isNaturalNumber(satoshis), 'satoshis needs to be a natural number');\n    satoshisBuffer = new BufferWriter().writeUInt64LEBN(new BN(satoshis)).toBuffer();\n  } else {\n    satoshisBuffer = this.inputs[nin].getSatoshisBuffer();\n  }\n  var verified = SighashWitness.verify(\n    this,\n    sig,\n    pubkey,\n    nin,\n    scriptCodeWriter.toBuffer(),\n    satoshisBuffer\n  );\n  return verified;\n};\n\n\n/**\n * Verify Schnorr signature\n * @param {Signature|Buffer} sig \n * @param {PublicKey|Buffer} pubkey \n * @param {Number} nin \n * @param {Number} sigversion \n * @param {Object} execdata \n * @returns {Boolean}\n */\nTransaction.prototype.checkSchnorrSignature = function(sig, pubkey, nin, sigversion, execdata) {\n  if ($.isType(pubkey, 'PublicKey')) {\n    pubkey = pubkey.point.x.toBuffer();\n  }\n  $.checkArgument(pubkey && pubkey.length === 32, 'Schnorr signatures have 32-byte public keys. The caller is responsible for enforcing this.');\n\n  if (Buffer.isBuffer(sig)) {\n    if (sig.length !== 64 && sig.length !== 65) {\n      return false;\n    }\n    sig = Signature.fromSchnorr(sig);\n  }\n  // Note that in Tapscript evaluation, empty signatures are treated specially (invalid signature that does not\n  // abort script execution). This is implemented in Interpreter.evalChecksigTapscript, which won't invoke\n  // CheckSchnorrSignature in that case. In other contexts, they are invalid like every other signature with\n  // size different from 64 or 65.\n  $.checkArgument(sig.isSchnorr, 'Signature must be schnorr');\n\n  if (!SighashSchnorr.verify(this, sig, pubkey, sigversion, nin, execdata)) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * This is here largely for legacy reasons. However, if the sig type\n * is already known (via sigversion), then it would be better to call\n * checkEcdsaSignature or checkSchnorrSignature directly.\n * @param {Signature|Buffer} sig Signature to verify\n * @param {PublicKey|Buffer} pubkey Public key used to verify sig\n * @param {Number} nin Tx input index to verify signature against\n * @param {Script} subscript ECDSA only\n * @param {Number} sigversion See Signature.Version for valid versions (default: 0 or Signature.Version.BASE)\n * @param {Number} satoshis ECDSA only\n * @param {Object} execdata Schnorr only\n * @returns {Boolean} whether the signature is valid for this transaction input\n */\nTransaction.prototype.verifySignature = function(sig, pubkey, nin, subscript, sigversion, satoshis, execdata) {\n  if (sigversion == null) {\n    sigversion = Signature.Version.BASE;\n  }\n\n  switch(sigversion) {\n    case Signature.Version.WITNESS_V0:\n      return this.checkEcdsaSignature(sig, pubkey, nin, subscript, satoshis);\n    case Signature.Version.TAPROOT:\n    case Signature.Version.TAPSCRIPT:\n      return this.checkSchnorrSignature(sig, pubkey, nin, sigversion, execdata);\n    case Signature.Version.BASE:\n    default:\n      return Sighash.verify(this, sig, pubkey, nin, subscript);\n  }\n};\n\n/**\n * Check that a transaction passes basic sanity tests. If not, return a string\n * describing the error. This function contains the same logic as\n * CheckTransaction in bitcoin core.\n */\nTransaction.prototype.verify = function() {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  }\n\n  // Check for negative or overflow output values\n  var valueoutbn = new BN(0);\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  }\n\n  // Size limits\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  }\n\n  // Check for duplicate inputs\n  var txinmap = {};\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n    if (txinmap[inputid] != null) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n    txinmap[inputid] = true;\n  }\n\n  var isCoinbase = this.isCoinbase();\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Analogous to bitcoind's IsCoinBase function in transaction.h\n */\nTransaction.prototype.isCoinbase = function() {\n  return (this.inputs.length === 1 && this.inputs[0].isNull());\n};\n\n/**\n * Determines if this transaction can be replaced in the mempool with another\n * transaction that provides a sufficiently higher fee (RBF).\n */\nTransaction.prototype.isRBF = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber < Input.MAXINT - 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Enable this transaction to be replaced in the mempool (RBF) if a transaction\n * includes a sufficiently higher fee. It will set the sequenceNumber to\n * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not\n * already enable RBF.\n */\nTransaction.prototype.enableRBF = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber >= Input.MAXINT - 1) {\n      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;\n    }\n  }\n  return this;\n};\n\nTransaction.prototype.setVersion = function(version) {\n  $.checkArgument(\n    JSUtil.isNaturalNumber(version) && version <= CURRENT_VERSION,\n    'Wrong version number');\n  this.version = version;\n  return this;\n};\n\n\n\nmodule.exports = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/transaction/unspentoutput.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/transaction/unspentoutput.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar $ = __webpack_require__(/*! ../util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\nvar JSUtil = __webpack_require__(/*! ../util/js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\n\nvar Script = __webpack_require__(/*! ../script */ \"(ssr)/./node_modules/bitcore-lib/lib/script/index.js\");\nvar Address = __webpack_require__(/*! ../address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\nvar Unit = __webpack_require__(/*! ../unit */ \"(ssr)/./node_modules/bitcore-lib/lib/unit.js\");\n\n/**\n * Represents an unspent output information: its script, associated amount and address,\n * transaction id and output index.\n *\n * @constructor\n * @param {object} data\n * @param {string} data.txid the previous transaction id\n * @param {string=} data.txId alias for `txid`\n * @param {number} data.vout the index in the transaction\n * @param {number=} data.outputIndex alias for `vout`\n * @param {string|Script} data.scriptPubKey the script that must be resolved to release the funds\n * @param {string|Script=} data.script alias for `scriptPubKey`\n * @param {number} data.amount amount of bitcoins associated\n * @param {number=} data.satoshis alias for `amount`, but expressed in satoshis (1 BTC = 1e8 satoshis)\n * @param {string|Address=} data.address the associated address to the script, if provided\n */\nfunction UnspentOutput(data) {\n  /* jshint maxcomplexity: 20 */\n  /* jshint maxstatements: 20 */\n  if (!(this instanceof UnspentOutput)) {\n    return new UnspentOutput(data);\n  }\n  $.checkArgument(_.isObject(data), 'Must provide an object from where to extract data');\n  var address = data.address ? new Address(data.address) : undefined;\n  var txId = data.txid ? data.txid : data.txId;\n  if (!txId || !JSUtil.isHexaString(txId) || txId.length > 64) {\n    // TODO: Use the errors library\n    throw new Error('Invalid TXID in object', data);\n  }\n  var outputIndex = _.isUndefined(data.vout) ? data.outputIndex : data.vout;\n  if (!_.isNumber(outputIndex)) {\n    throw new Error('Invalid outputIndex, received ' + outputIndex);\n  }\n  $.checkArgument(!_.isUndefined(data.scriptPubKey) || !_.isUndefined(data.script),\n                  'Must provide the scriptPubKey for that output!');\n  var script = new Script(data.scriptPubKey || data.script);\n  $.checkArgument(!_.isUndefined(data.amount) || !_.isUndefined(data.satoshis),\n                      'Must provide an amount for the output');\n  var amount = !_.isUndefined(data.amount) ? new Unit.fromBTC(data.amount).toSatoshis() : data.satoshis;\n  $.checkArgument(_.isNumber(amount), 'Amount must be a number');\n  JSUtil.defineImmutable(this, {\n    address: address,\n    txId: txId,\n    outputIndex: outputIndex,\n    script: script,\n    satoshis: amount\n  });\n}\n\n/**\n * Provide an informative output when displaying this object in the console\n * @returns string\n */\nUnspentOutput.prototype.inspect = function() {\n  return '<UnspentOutput: ' + this.txId + ':' + this.outputIndex +\n         ', satoshis: ' + this.satoshis + ', address: ' + this.address + '>';\n};\n\n/**\n * String representation: just \"txid:index\"\n * @returns string\n */\nUnspentOutput.prototype.toString = function() {\n  return this.txId + ':' + this.outputIndex;\n};\n\n/**\n * Deserialize an UnspentOutput from an object\n * @param {object|string} data\n * @return UnspentOutput\n */\nUnspentOutput.fromObject = function(data) {\n  return new UnspentOutput(data);\n};\n\n/**\n * Returns a plain object (no prototype or methods) with the associated info for this output\n * @return {object}\n */\nUnspentOutput.prototype.toObject = UnspentOutput.prototype.toJSON = function toObject() {\n  return {\n    address: this.address ? this.address.toString() : undefined,\n    txid: this.txId,\n    vout: this.outputIndex,\n    scriptPubKey: this.script.toBuffer().toString('hex'),\n    amount: Unit.fromSatoshis(this.satoshis).toBTC()\n  };\n};\n\nmodule.exports = UnspentOutput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3RyYW5zYWN0aW9uL3Vuc3BlbnRvdXRwdXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsUUFBUSxtQkFBTyxDQUFDLHFEQUFRO0FBQ3hCLFFBQVEsbUJBQU8sQ0FBQyx5RkFBdUI7QUFDdkMsYUFBYSxtQkFBTyxDQUFDLG1FQUFZOztBQUVqQyxhQUFhLG1CQUFPLENBQUMsdUVBQVc7QUFDaEMsY0FBYyxtQkFBTyxDQUFDLG1FQUFZO0FBQ2xDLFdBQVcsbUJBQU8sQ0FBQyw2REFBUzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxpQkFBaUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL2xpYi90cmFuc2FjdGlvbi91bnNwZW50b3V0cHV0LmpzPzlhOWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyICQgPSByZXF1aXJlKCcuLi91dGlsL3ByZWNvbmRpdGlvbnMnKTtcbnZhciBKU1V0aWwgPSByZXF1aXJlKCcuLi91dGlsL2pzJyk7XG5cbnZhciBTY3JpcHQgPSByZXF1aXJlKCcuLi9zY3JpcHQnKTtcbnZhciBBZGRyZXNzID0gcmVxdWlyZSgnLi4vYWRkcmVzcycpO1xudmFyIFVuaXQgPSByZXF1aXJlKCcuLi91bml0Jyk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiB1bnNwZW50IG91dHB1dCBpbmZvcm1hdGlvbjogaXRzIHNjcmlwdCwgYXNzb2NpYXRlZCBhbW91bnQgYW5kIGFkZHJlc3MsXG4gKiB0cmFuc2FjdGlvbiBpZCBhbmQgb3V0cHV0IGluZGV4LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLnR4aWQgdGhlIHByZXZpb3VzIHRyYW5zYWN0aW9uIGlkXG4gKiBAcGFyYW0ge3N0cmluZz19IGRhdGEudHhJZCBhbGlhcyBmb3IgYHR4aWRgXG4gKiBAcGFyYW0ge251bWJlcn0gZGF0YS52b3V0IHRoZSBpbmRleCBpbiB0aGUgdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyPX0gZGF0YS5vdXRwdXRJbmRleCBhbGlhcyBmb3IgYHZvdXRgXG4gKiBAcGFyYW0ge3N0cmluZ3xTY3JpcHR9IGRhdGEuc2NyaXB0UHViS2V5IHRoZSBzY3JpcHQgdGhhdCBtdXN0IGJlIHJlc29sdmVkIHRvIHJlbGVhc2UgdGhlIGZ1bmRzXG4gKiBAcGFyYW0ge3N0cmluZ3xTY3JpcHQ9fSBkYXRhLnNjcmlwdCBhbGlhcyBmb3IgYHNjcmlwdFB1YktleWBcbiAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhLmFtb3VudCBhbW91bnQgb2YgYml0Y29pbnMgYXNzb2NpYXRlZFxuICogQHBhcmFtIHtudW1iZXI9fSBkYXRhLnNhdG9zaGlzIGFsaWFzIGZvciBgYW1vdW50YCwgYnV0IGV4cHJlc3NlZCBpbiBzYXRvc2hpcyAoMSBCVEMgPSAxZTggc2F0b3NoaXMpXG4gKiBAcGFyYW0ge3N0cmluZ3xBZGRyZXNzPX0gZGF0YS5hZGRyZXNzIHRoZSBhc3NvY2lhdGVkIGFkZHJlc3MgdG8gdGhlIHNjcmlwdCwgaWYgcHJvdmlkZWRcbiAqL1xuZnVuY3Rpb24gVW5zcGVudE91dHB1dChkYXRhKSB7XG4gIC8qIGpzaGludCBtYXhjb21wbGV4aXR5OiAyMCAqL1xuICAvKiBqc2hpbnQgbWF4c3RhdGVtZW50czogMjAgKi9cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVuc3BlbnRPdXRwdXQpKSB7XG4gICAgcmV0dXJuIG5ldyBVbnNwZW50T3V0cHV0KGRhdGEpO1xuICB9XG4gICQuY2hlY2tBcmd1bWVudChfLmlzT2JqZWN0KGRhdGEpLCAnTXVzdCBwcm92aWRlIGFuIG9iamVjdCBmcm9tIHdoZXJlIHRvIGV4dHJhY3QgZGF0YScpO1xuICB2YXIgYWRkcmVzcyA9IGRhdGEuYWRkcmVzcyA/IG5ldyBBZGRyZXNzKGRhdGEuYWRkcmVzcykgOiB1bmRlZmluZWQ7XG4gIHZhciB0eElkID0gZGF0YS50eGlkID8gZGF0YS50eGlkIDogZGF0YS50eElkO1xuICBpZiAoIXR4SWQgfHwgIUpTVXRpbC5pc0hleGFTdHJpbmcodHhJZCkgfHwgdHhJZC5sZW5ndGggPiA2NCkge1xuICAgIC8vIFRPRE86IFVzZSB0aGUgZXJyb3JzIGxpYnJhcnlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgVFhJRCBpbiBvYmplY3QnLCBkYXRhKTtcbiAgfVxuICB2YXIgb3V0cHV0SW5kZXggPSBfLmlzVW5kZWZpbmVkKGRhdGEudm91dCkgPyBkYXRhLm91dHB1dEluZGV4IDogZGF0YS52b3V0O1xuICBpZiAoIV8uaXNOdW1iZXIob3V0cHV0SW5kZXgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG91dHB1dEluZGV4LCByZWNlaXZlZCAnICsgb3V0cHV0SW5kZXgpO1xuICB9XG4gICQuY2hlY2tBcmd1bWVudCghXy5pc1VuZGVmaW5lZChkYXRhLnNjcmlwdFB1YktleSkgfHwgIV8uaXNVbmRlZmluZWQoZGF0YS5zY3JpcHQpLFxuICAgICAgICAgICAgICAgICAgJ011c3QgcHJvdmlkZSB0aGUgc2NyaXB0UHViS2V5IGZvciB0aGF0IG91dHB1dCEnKTtcbiAgdmFyIHNjcmlwdCA9IG5ldyBTY3JpcHQoZGF0YS5zY3JpcHRQdWJLZXkgfHwgZGF0YS5zY3JpcHQpO1xuICAkLmNoZWNrQXJndW1lbnQoIV8uaXNVbmRlZmluZWQoZGF0YS5hbW91bnQpIHx8ICFfLmlzVW5kZWZpbmVkKGRhdGEuc2F0b3NoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICdNdXN0IHByb3ZpZGUgYW4gYW1vdW50IGZvciB0aGUgb3V0cHV0Jyk7XG4gIHZhciBhbW91bnQgPSAhXy5pc1VuZGVmaW5lZChkYXRhLmFtb3VudCkgPyBuZXcgVW5pdC5mcm9tQlRDKGRhdGEuYW1vdW50KS50b1NhdG9zaGlzKCkgOiBkYXRhLnNhdG9zaGlzO1xuICAkLmNoZWNrQXJndW1lbnQoXy5pc051bWJlcihhbW91bnQpLCAnQW1vdW50IG11c3QgYmUgYSBudW1iZXInKTtcbiAgSlNVdGlsLmRlZmluZUltbXV0YWJsZSh0aGlzLCB7XG4gICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICB0eElkOiB0eElkLFxuICAgIG91dHB1dEluZGV4OiBvdXRwdXRJbmRleCxcbiAgICBzY3JpcHQ6IHNjcmlwdCxcbiAgICBzYXRvc2hpczogYW1vdW50XG4gIH0pO1xufVxuXG4vKipcbiAqIFByb3ZpZGUgYW4gaW5mb3JtYXRpdmUgb3V0cHV0IHdoZW4gZGlzcGxheWluZyB0aGlzIG9iamVjdCBpbiB0aGUgY29uc29sZVxuICogQHJldHVybnMgc3RyaW5nXG4gKi9cblVuc3BlbnRPdXRwdXQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICc8VW5zcGVudE91dHB1dDogJyArIHRoaXMudHhJZCArICc6JyArIHRoaXMub3V0cHV0SW5kZXggK1xuICAgICAgICAgJywgc2F0b3NoaXM6ICcgKyB0aGlzLnNhdG9zaGlzICsgJywgYWRkcmVzczogJyArIHRoaXMuYWRkcmVzcyArICc+Jztcbn07XG5cbi8qKlxuICogU3RyaW5nIHJlcHJlc2VudGF0aW9uOiBqdXN0IFwidHhpZDppbmRleFwiXG4gKiBAcmV0dXJucyBzdHJpbmdcbiAqL1xuVW5zcGVudE91dHB1dC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudHhJZCArICc6JyArIHRoaXMub3V0cHV0SW5kZXg7XG59O1xuXG4vKipcbiAqIERlc2VyaWFsaXplIGFuIFVuc3BlbnRPdXRwdXQgZnJvbSBhbiBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ30gZGF0YVxuICogQHJldHVybiBVbnNwZW50T3V0cHV0XG4gKi9cblVuc3BlbnRPdXRwdXQuZnJvbU9iamVjdCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBVbnNwZW50T3V0cHV0KGRhdGEpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcGxhaW4gb2JqZWN0IChubyBwcm90b3R5cGUgb3IgbWV0aG9kcykgd2l0aCB0aGUgYXNzb2NpYXRlZCBpbmZvIGZvciB0aGlzIG91dHB1dFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5VbnNwZW50T3V0cHV0LnByb3RvdHlwZS50b09iamVjdCA9IFVuc3BlbnRPdXRwdXQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcyA/IHRoaXMuYWRkcmVzcy50b1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgIHR4aWQ6IHRoaXMudHhJZCxcbiAgICB2b3V0OiB0aGlzLm91dHB1dEluZGV4LFxuICAgIHNjcmlwdFB1YktleTogdGhpcy5zY3JpcHQudG9CdWZmZXIoKS50b1N0cmluZygnaGV4JyksXG4gICAgYW1vdW50OiBVbml0LmZyb21TYXRvc2hpcyh0aGlzLnNhdG9zaGlzKS50b0JUQygpXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVuc3BlbnRPdXRwdXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/transaction/unspentoutput.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/unit.js":
/*!**********************************************!*\
  !*** ./node_modules/bitcore-lib/lib/unit.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar $ = __webpack_require__(/*! ./util/preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nvar UNITS = {\n  'BTC'      : [1e8, 8],\n  'mBTC'     : [1e5, 5],\n  'uBTC'     : [1e2, 2],\n  'bits'     : [1e2, 2],\n  'satoshis' : [1, 0]\n};\n\n/**\n * Utility for handling and converting bitcoins units. The supported units are\n * BTC, mBTC, bits (also named uBTC) and satoshis. A unit instance can be created with an\n * amount and a unit code, or alternatively using static methods like {fromBTC}.\n * It also allows to be created from a fiat amount and the exchange rate, or\n * alternatively using the {fromFiat} static method.\n * You can consult for different representation of a unit instance using it's\n * {to} method, the fixed unit methods like {toSatoshis} or alternatively using\n * the unit accessors. It also can be converted to a fiat amount by providing the\n * corresponding BTC/fiat exchange rate.\n *\n * @example\n * ```javascript\n * var sats = Unit.fromBTC(1.3).toSatoshis();\n * var mili = Unit.fromBits(1.3).to(Unit.mBTC);\n * var bits = Unit.fromFiat(1.3, 350).bits;\n * var btc = new Unit(1.3, Unit.bits).BTC;\n * ```\n *\n * @param {Number} amount - The amount to be represented\n * @param {String|Number} code - The unit of the amount or the exchange rate\n * @returns {Unit} A new instance of an Unit\n * @constructor\n */\nfunction Unit(amount, code) {\n  if (!(this instanceof Unit)) {\n    return new Unit(amount, code);\n  }\n\n  // convert fiat to BTC\n  if (_.isNumber(code)) {\n    if (code <= 0) {\n      throw new errors.Unit.InvalidRate(code);\n    }\n    amount = amount / code;\n    code = Unit.BTC;\n  }\n\n  this._value = this._from(amount, code);\n\n  var self = this;\n  var defineAccesor = function(key) {\n    Object.defineProperty(self, key, {\n      get: function() { return self.to(key); },\n      enumerable: true,\n    });\n  };\n\n  Object.keys(UNITS).forEach(defineAccesor);\n}\n\nObject.keys(UNITS).forEach(function(key) {\n  Unit[key] = key;\n});\n\n/**\n * Returns a Unit instance created from JSON string or object\n *\n * @param {String|Object} json - JSON with keys: amount and code\n * @returns {Unit} A Unit instance\n */\nUnit.fromObject = function fromObject(data){\n  $.checkArgument(_.isObject(data), 'Argument is expected to be an object');\n  return new Unit(data.amount, data.code);\n};\n\n/**\n * Returns a Unit instance created from an amount in BTC\n *\n * @param {Number} amount - The amount in BTC\n * @returns {Unit} A Unit instance\n */\nUnit.fromBTC = function(amount) {\n  return new Unit(amount, Unit.BTC);\n};\n\n/**\n * Returns a Unit instance created from an amount in mBTC\n *\n * @param {Number} amount - The amount in mBTC\n * @returns {Unit} A Unit instance\n */\nUnit.fromMillis = Unit.fromMilis = function(amount) {\n  return new Unit(amount, Unit.mBTC);\n};\n\n/**\n * Returns a Unit instance created from an amount in bits\n *\n * @param {Number} amount - The amount in bits\n * @returns {Unit} A Unit instance\n */\nUnit.fromMicros = Unit.fromBits = function(amount) {\n  return new Unit(amount, Unit.bits);\n};\n\n/**\n * Returns a Unit instance created from an amount in satoshis\n *\n * @param {Number} amount - The amount in satoshis\n * @returns {Unit} A Unit instance\n */\nUnit.fromSatoshis = function(amount) {\n  return new Unit(amount, Unit.satoshis);\n};\n\n/**\n * Returns a Unit instance created from a fiat amount and exchange rate.\n *\n * @param {Number} amount - The amount in fiat\n * @param {Number} rate - The exchange rate BTC/fiat\n * @returns {Unit} A Unit instance\n */\nUnit.fromFiat = function(amount, rate) {\n  return new Unit(amount, rate);\n};\n\nUnit.prototype._from = function(amount, code) {\n  if (!UNITS[code]) {\n    throw new errors.Unit.UnknownCode(code);\n  }\n  return parseInt((amount * UNITS[code][0]).toFixed());\n};\n\n/**\n * Returns the value represented in the specified unit\n *\n * @param {String|Number} code - The unit code or exchange rate\n * @returns {Number} The converted value\n */\nUnit.prototype.to = function(code) {\n  if (_.isNumber(code)) {\n    if (code <= 0) {\n      throw new errors.Unit.InvalidRate(code);\n    }\n    return parseFloat((this.BTC * code).toFixed(2));\n  }\n\n  if (!UNITS[code]) {\n    throw new errors.Unit.UnknownCode(code);\n  }\n\n  var value = this._value / UNITS[code][0];\n  return parseFloat(value.toFixed(UNITS[code][1]));\n};\n\n/**\n * Returns the value represented in BTC\n *\n * @returns {Number} The value converted to BTC\n */\nUnit.prototype.toBTC = function() {\n  return this.to(Unit.BTC);\n};\n\n/**\n * Returns the value represented in mBTC\n *\n * @returns {Number} The value converted to mBTC\n */\nUnit.prototype.toMillis = Unit.prototype.toMilis = function() {\n  return this.to(Unit.mBTC);\n};\n\n/**\n * Returns the value represented in bits\n *\n * @returns {Number} The value converted to bits\n */\nUnit.prototype.toMicros = Unit.prototype.toBits = function() {\n  return this.to(Unit.bits);\n};\n\n/**\n * Returns the value represented in satoshis\n *\n * @returns {Number} The value converted to satoshis\n */\nUnit.prototype.toSatoshis = function() {\n  return this.to(Unit.satoshis);\n};\n\n/**\n * Returns the value represented in fiat\n *\n * @param {string} rate - The exchange rate between BTC/currency\n * @returns {Number} The value converted to satoshis\n */\nUnit.prototype.atRate = function(rate) {\n  return this.to(rate);\n};\n\n/**\n * Returns a the string representation of the value in satoshis\n *\n * @returns {string} the value in satoshis\n */\nUnit.prototype.toString = function() {\n  return this.satoshis + ' satoshis';\n};\n\n/**\n * Returns a plain object representation of the Unit\n *\n * @returns {Object} An object with the keys: amount and code\n */\nUnit.prototype.toObject = Unit.prototype.toJSON = function toObject() {\n  return {\n    amount: this.BTC,\n    code: Unit.BTC\n  };\n};\n\n/**\n * Returns a string formatted for the console\n *\n * @returns {string} the value in satoshis\n */\nUnit.prototype.inspect = function() {\n  return '<Unit: ' + this.toString() + '>';\n};\n\nmodule.exports = Unit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/unit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/uri.js":
/*!*********************************************!*\
  !*** ./node_modules/bitcore-lib/lib/uri.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\nvar URL = __webpack_require__(/*! url */ \"url\");\n\nvar Address = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/bitcore-lib/lib/address.js\");\nvar Unit = __webpack_require__(/*! ./unit */ \"(ssr)/./node_modules/bitcore-lib/lib/unit.js\");\n\n/**\n * Bitcore URI\n *\n * Instantiate an URI from a bitcoin URI String or an Object. An URI instance\n * can be created with a bitcoin uri string or an object. All instances of\n * URI are valid, the static method isValid allows checking before instantiation.\n *\n * All standard parameters can be found as members of the class, the address\n * is represented using an {Address} instance and the amount is represented in\n * satoshis. Any other non-standard parameters can be found under the extra member.\n *\n * @example\n * ```javascript\n *\n * var uri = new URI('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu?amount=1.2');\n * console.log(uri.address, uri.amount);\n * ```\n *\n * @param {string|Object} data - A bitcoin URI string or an Object\n * @param {Array.<string>=} knownParams - Required non-standard params\n * @throws {TypeError} Invalid bitcoin address\n * @throws {TypeError} Invalid amount\n * @throws {Error} Unknown required argument\n * @returns {URI} A new valid and frozen instance of URI\n * @constructor\n */\nvar URI = function(data, knownParams) {\n  if (!(this instanceof URI)) {\n    return new URI(data, knownParams);\n  }\n\n  this.extras = {};\n  this.knownParams = knownParams || [];\n  this.address = this.network = this.amount = this.message = null;\n\n  if (typeof(data) === 'string') {\n    var params = URI.parse(data);\n    if (params.amount) {\n      params.amount = this._parseAmount(params.amount);\n    }\n    this._fromObject(params);\n  } else if (typeof(data) === 'object') {\n    this._fromObject(data);\n  } else {\n    throw new TypeError('Unrecognized data format.');\n  }\n};\n\n/**\n * Instantiate a URI from a String\n *\n * @param {string} str - JSON string or object of the URI\n * @returns {URI} A new instance of a URI\n */\nURI.fromString = function fromString(str) {\n  if (typeof(str) !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  return new URI(str);\n};\n\n/**\n * Instantiate a URI from an Object\n *\n * @param {Object} data - object of the URI\n * @returns {URI} A new instance of a URI\n */\nURI.fromObject = function fromObject(json) {\n  return new URI(json);\n};\n\n/**\n * Check if an bitcoin URI string is valid\n *\n * @example\n * ```javascript\n *\n * var valid = URI.isValid('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu');\n * // true\n * ```\n *\n * @param {string|Object} data - A bitcoin URI string or an Object\n * @param {Array.<string>=} knownParams - Required non-standard params\n * @returns {boolean} Result of uri validation\n */\nURI.isValid = function(arg, knownParams) {\n  try {\n    new URI(arg, knownParams);\n  } catch (err) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Convert a bitcoin URI string into a simple object.\n *\n * @param {string} uri - A bitcoin URI string\n * @throws {TypeError} Invalid bitcoin URI\n * @returns {Object} An object with the parsed params\n */\nURI.parse = function(uri) {\n  var info = URL.parse(uri, true);\n\n  if (info.protocol !== 'bitcoin:') {\n    throw new TypeError('Invalid bitcoin URI');\n  }\n\n  // workaround to host insensitiveness\n  var group = /[^:]*:\\/?\\/?([^?]*)/.exec(uri);\n  info.query.address = group && group[1] || undefined;\n\n  return info.query;\n};\n\nURI.Members = ['address', 'amount', 'message', 'label', 'r'];\n\n/**\n * Internal function to load the URI instance with an object.\n *\n * @param {Object} obj - Object with the information\n * @throws {TypeError} Invalid bitcoin address\n * @throws {TypeError} Invalid amount\n * @throws {Error} Unknown required argument\n */\nURI.prototype._fromObject = function(obj) {\n  /* jshint maxcomplexity: 10 */\n\n  if (!Address.isValid(obj.address)) {\n    throw new TypeError('Invalid bitcoin address');\n  }\n\n  this.address = new Address(obj.address);\n  this.network = this.address.network;\n  this.amount = obj.amount;\n\n  for (var key in obj) {\n    if (key === 'address' || key === 'amount') {\n      continue;\n    }\n\n    if (/^req-/.exec(key) && this.knownParams.indexOf(key) === -1) {\n      throw Error('Unknown required argument ' + key);\n    }\n\n    var destination = URI.Members.indexOf(key) > -1 ? this : this.extras;\n    destination[key] = obj[key];\n  }\n};\n\n/**\n * Internal function to transform a BTC string amount into satoshis\n *\n * @param {string} amount - Amount BTC string\n * @throws {TypeError} Invalid amount\n * @returns {Object} Amount represented in satoshis\n */\nURI.prototype._parseAmount = function(amount) {\n  amount = Number(amount);\n  if (isNaN(amount)) {\n    throw new TypeError('Invalid amount');\n  }\n  return Unit.fromBTC(amount).toSatoshis();\n};\n\nURI.prototype.toObject = URI.prototype.toJSON = function toObject() {\n  var json = {};\n  for (var i = 0; i < URI.Members.length; i++) {\n    var m = URI.Members[i];\n    if (this.hasOwnProperty(m) && typeof(this[m]) !== 'undefined') {\n      json[m] = this[m].toString();\n    }\n  }\n  _.extend(json, this.extras);\n  return json;\n};\n\n/**\n * Will return a the string representation of the URI\n *\n * @returns {string} Bitcoin URI string\n */\nURI.prototype.toString = function() {\n  var query = {};\n  if (this.amount) {\n    query.amount = Unit.fromSatoshis(this.amount).toBTC();\n  }\n  if (this.message) {\n    query.message = this.message;\n  }\n  if (this.label) {\n    query.label = this.label;\n  }\n  if (this.r) {\n    query.r = this.r;\n  }\n  _.extend(query, this.extras);\n\n  return URL.format({\n    protocol: 'bitcoin:',\n    host: this.address,\n    query: query\n  });\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Bitcoin URI\n */\nURI.prototype.inspect = function() {\n  return '<URI: ' + this.toString() + '>';\n};\n\nmodule.exports = URI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/uri.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js":
/*!*****************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/util/buffer.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar assert = __webpack_require__(/*! assert */ \"assert\");\n\nvar js = __webpack_require__(/*! ./js */ \"(ssr)/./node_modules/bitcore-lib/lib/util/js.js\");\nvar $ = __webpack_require__(/*! ./preconditions */ \"(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\");\n\nfunction equals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  var length = a.length;\n  for (var i = 0; i < length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = {\n  /**\n   * Fill a buffer with a value.\n   *\n   * @param {Buffer} buffer\n   * @param {number} value\n   * @return {Buffer}\n   */\n  fill: function fill(buffer, value) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    $.checkArgumentType(value, 'number', 'value');\n    var length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] = value;\n    }\n    return buffer;\n  },\n\n  /**\n   * Return a copy of a buffer\n   *\n   * @param {Buffer} original\n   * @return {Buffer}\n   */\n  copy: function(original) {\n    var buffer = Buffer.alloc(original.length);\n    original.copy(buffer);\n    return buffer;\n  },\n\n  /**\n   * Returns true if the given argument is an instance of a buffer. Tests for\n   * both node's Buffer and Uint8Array\n   *\n   * @param {*} arg\n   * @return {boolean}\n   */\n  isBuffer: function isBuffer(arg) {\n    return buffer.Buffer.isBuffer(arg) || arg instanceof Uint8Array;\n  },\n\n  /**\n   * Returns a zero-filled byte array\n   *\n   * @param {number} bytes\n   * @return {Buffer}\n   */\n  emptyBuffer: function emptyBuffer(bytes) {\n    $.checkArgumentType(bytes, 'number', 'bytes');\n    var result = Buffer.alloc(bytes);\n    for (var i = 0; i < bytes; i++) {\n      result.write('\\0', i);\n    }\n    return result;\n  },\n\n  /**\n   * Concatenates a buffer\n   *\n   * Shortcut for <tt>buffer.Buffer.concat</tt>\n   */\n  concat: buffer.Buffer.concat,\n\n  equals: equals,\n  equal: equals,\n\n  /**\n   * Transforms a number from 0 to 255 into a Buffer of size 1 with that value\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsSingleByteBuffer: function integerAsSingleByteBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    return Buffer.from([integer & 0xff]);\n  },\n\n  /**\n   * Transform a 4-byte integer into a Buffer of length 4.\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsBuffer: function integerAsBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    var bytes = [];\n    bytes.push((integer >> 24) & 0xff);\n    bytes.push((integer >> 16) & 0xff);\n    bytes.push((integer >> 8) & 0xff);\n    bytes.push(integer & 0xff);\n    return Buffer.from(bytes);\n  },\n\n  /**\n   * Transform the first 4 values of a Buffer into a number, in little endian encoding\n   *\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0] << 24 | buffer[1] << 16 | buffer[2] << 8 | buffer[3];\n  },\n\n  /**\n   * Transforms the first byte of an array into a number ranging from -128 to 127\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromSingleByteBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0];\n  },\n\n  /**\n   * Transforms a buffer into a string with a number in hexa representation\n   *\n   * Shorthand for <tt>buffer.toString('hex')</tt>\n   *\n   * @param {Buffer} buffer\n   * @return {string}\n   */\n  bufferToHex: function bufferToHex(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer.toString('hex');\n  },\n\n  /**\n   * Reverse a buffer\n   * @param {Buffer} param\n   * @return {Buffer}\n   */\n  reverse: function reverse(param) {\n    return (Buffer.from(param)).reverse();\n  },\n};\n\nmodule.exports.NULL_HASH = module.exports.fill(Buffer.alloc(32), 0);\nmodule.exports.EMPTY_BUFFER = Buffer.alloc(0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3V0aWwvYnVmZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGFBQWEsbUJBQU8sQ0FBQyxzQkFBUTtBQUM3QixhQUFhLG1CQUFPLENBQUMsc0JBQVE7O0FBRTdCLFNBQVMsbUJBQU8sQ0FBQyw2REFBTTtBQUN2QixRQUFRLG1CQUFPLENBQUMsbUZBQWlCOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsR0FBRztBQUNoQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFdBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsd0JBQXdCO0FBQ3hCLDJCQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL2xpYi91dGlsL2J1ZmZlci5qcz9hNTZjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIganMgPSByZXF1aXJlKCcuL2pzJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4vcHJlY29uZGl0aW9ucycpO1xuXG5mdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsZW5ndGggPSBhLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIEZpbGwgYSBidWZmZXIgd2l0aCBhIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAqL1xuICBmaWxsOiBmdW5jdGlvbiBmaWxsKGJ1ZmZlciwgdmFsdWUpIHtcbiAgICAkLmNoZWNrQXJndW1lbnRUeXBlKGJ1ZmZlciwgJ0J1ZmZlcicsICdidWZmZXInKTtcbiAgICAkLmNoZWNrQXJndW1lbnRUeXBlKHZhbHVlLCAnbnVtYmVyJywgJ3ZhbHVlJyk7XG4gICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnVmZmVyW2ldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybiBhIGNvcHkgb2YgYSBidWZmZXJcbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IG9yaWdpbmFsXG4gICAqIEByZXR1cm4ge0J1ZmZlcn1cbiAgICovXG4gIGNvcHk6IGZ1bmN0aW9uKG9yaWdpbmFsKSB7XG4gICAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhvcmlnaW5hbC5sZW5ndGgpO1xuICAgIG9yaWdpbmFsLmNvcHkoYnVmZmVyKTtcbiAgICByZXR1cm4gYnVmZmVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIGEgYnVmZmVyLiBUZXN0cyBmb3JcbiAgICogYm90aCBub2RlJ3MgQnVmZmVyIGFuZCBVaW50OEFycmF5XG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gYXJnXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0J1ZmZlcjogZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5CdWZmZXIuaXNCdWZmZXIoYXJnKSB8fCBhcmcgaW5zdGFuY2VvZiBVaW50OEFycmF5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgemVyby1maWxsZWQgYnl0ZSBhcnJheVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gYnl0ZXNcbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgZW1wdHlCdWZmZXI6IGZ1bmN0aW9uIGVtcHR5QnVmZmVyKGJ5dGVzKSB7XG4gICAgJC5jaGVja0FyZ3VtZW50VHlwZShieXRlcywgJ251bWJlcicsICdieXRlcycpO1xuICAgIHZhciByZXN1bHQgPSBCdWZmZXIuYWxsb2MoYnl0ZXMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykge1xuICAgICAgcmVzdWx0LndyaXRlKCdcXDAnLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICAvKipcbiAgICogQ29uY2F0ZW5hdGVzIGEgYnVmZmVyXG4gICAqXG4gICAqIFNob3J0Y3V0IGZvciA8dHQ+YnVmZmVyLkJ1ZmZlci5jb25jYXQ8L3R0PlxuICAgKi9cbiAgY29uY2F0OiBidWZmZXIuQnVmZmVyLmNvbmNhdCxcblxuICBlcXVhbHM6IGVxdWFscyxcbiAgZXF1YWw6IGVxdWFscyxcblxuICAvKipcbiAgICogVHJhbnNmb3JtcyBhIG51bWJlciBmcm9tIDAgdG8gMjU1IGludG8gYSBCdWZmZXIgb2Ygc2l6ZSAxIHdpdGggdGhhdCB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZWdlclxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAqL1xuICBpbnRlZ2VyQXNTaW5nbGVCeXRlQnVmZmVyOiBmdW5jdGlvbiBpbnRlZ2VyQXNTaW5nbGVCeXRlQnVmZmVyKGludGVnZXIpIHtcbiAgICAkLmNoZWNrQXJndW1lbnRUeXBlKGludGVnZXIsICdudW1iZXInLCAnaW50ZWdlcicpO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShbaW50ZWdlciAmIDB4ZmZdKTtcbiAgfSxcblxuICAvKipcbiAgICogVHJhbnNmb3JtIGEgNC1ieXRlIGludGVnZXIgaW50byBhIEJ1ZmZlciBvZiBsZW5ndGggNC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVnZXJcbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgaW50ZWdlckFzQnVmZmVyOiBmdW5jdGlvbiBpbnRlZ2VyQXNCdWZmZXIoaW50ZWdlcikge1xuICAgICQuY2hlY2tBcmd1bWVudFR5cGUoaW50ZWdlciwgJ251bWJlcicsICdpbnRlZ2VyJyk7XG4gICAgdmFyIGJ5dGVzID0gW107XG4gICAgYnl0ZXMucHVzaCgoaW50ZWdlciA+PiAyNCkgJiAweGZmKTtcbiAgICBieXRlcy5wdXNoKChpbnRlZ2VyID4+IDE2KSAmIDB4ZmYpO1xuICAgIGJ5dGVzLnB1c2goKGludGVnZXIgPj4gOCkgJiAweGZmKTtcbiAgICBieXRlcy5wdXNoKGludGVnZXIgJiAweGZmKTtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIGZpcnN0IDQgdmFsdWVzIG9mIGEgQnVmZmVyIGludG8gYSBudW1iZXIsIGluIGxpdHRsZSBlbmRpYW4gZW5jb2RpbmdcbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBpbnRlZ2VyRnJvbUJ1ZmZlcjogZnVuY3Rpb24gaW50ZWdlckZyb21CdWZmZXIoYnVmZmVyKSB7XG4gICAgJC5jaGVja0FyZ3VtZW50VHlwZShidWZmZXIsICdCdWZmZXInLCAnYnVmZmVyJyk7XG4gICAgcmV0dXJuIGJ1ZmZlclswXSA8PCAyNCB8IGJ1ZmZlclsxXSA8PCAxNiB8IGJ1ZmZlclsyXSA8PCA4IHwgYnVmZmVyWzNdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoZSBmaXJzdCBieXRlIG9mIGFuIGFycmF5IGludG8gYSBudW1iZXIgcmFuZ2luZyBmcm9tIC0xMjggdG8gMTI3XG4gICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXJcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgaW50ZWdlckZyb21TaW5nbGVCeXRlQnVmZmVyOiBmdW5jdGlvbiBpbnRlZ2VyRnJvbUJ1ZmZlcihidWZmZXIpIHtcbiAgICAkLmNoZWNrQXJndW1lbnRUeXBlKGJ1ZmZlciwgJ0J1ZmZlcicsICdidWZmZXInKTtcbiAgICByZXR1cm4gYnVmZmVyWzBdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGEgYnVmZmVyIGludG8gYSBzdHJpbmcgd2l0aCBhIG51bWJlciBpbiBoZXhhIHJlcHJlc2VudGF0aW9uXG4gICAqXG4gICAqIFNob3J0aGFuZCBmb3IgPHR0PmJ1ZmZlci50b1N0cmluZygnaGV4Jyk8L3R0PlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGJ1ZmZlclRvSGV4OiBmdW5jdGlvbiBidWZmZXJUb0hleChidWZmZXIpIHtcbiAgICAkLmNoZWNrQXJndW1lbnRUeXBlKGJ1ZmZlciwgJ0J1ZmZlcicsICdidWZmZXInKTtcbiAgICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCdoZXgnKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV2ZXJzZSBhIGJ1ZmZlclxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gcGFyYW1cbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZShwYXJhbSkge1xuICAgIHJldHVybiAoQnVmZmVyLmZyb20ocGFyYW0pKS5yZXZlcnNlKCk7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cy5OVUxMX0hBU0ggPSBtb2R1bGUuZXhwb3J0cy5maWxsKEJ1ZmZlci5hbGxvYygzMiksIDApO1xubW9kdWxlLmV4cG9ydHMuRU1QVFlfQlVGRkVSID0gQnVmZmVyLmFsbG9jKDApO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/util/buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/util/js.js":
/*!*************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/util/js.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\n/**\n * Determines whether a string contains only hexadecimal values\n *\n * @name JSUtil.isHexa\n * @param {string} value\n * @return {boolean} true if the string is the hexa representation of a number\n */\nvar isHexa = function isHexa(value) {\n  if (!_.isString(value)) {\n    return false;\n  }\n  return /^[0-9a-fA-F]+$/.test(value);\n};\n\n/**\n * @namespace JSUtil\n */\nmodule.exports = {\n  /**\n   * Test if an argument is a valid JSON object. If it is, returns a truthy\n   * value (the json object decoded), so no double JSON.parse call is necessary\n   *\n   * @param {string} arg\n   * @return {Object|boolean} false if the argument is not a JSON string.\n   */\n  isValidJSON: function isValidJSON(arg) {\n    var parsed;\n    if (!_.isString(arg)) {\n      return false;\n    }\n    try {\n      parsed = JSON.parse(arg);\n    } catch (e) {\n      return false;\n    }\n    if (typeof(parsed) === 'object') {\n      return true;\n    }\n    return false;\n  },\n  isHexa: isHexa,\n  isHexaString: isHexa,\n\n  /**\n   * Clone an array\n   */\n  cloneArray: function(array) {\n    return [].concat(array);\n  },\n\n  /**\n   * Define immutable properties on a target object\n   *\n   * @param {Object} target - An object to be extended\n   * @param {Object} values - An object of properties\n   * @return {Object} The target object\n   */\n  defineImmutable: function defineImmutable(target, values) {\n    Object.keys(values).forEach(function(key){\n      Object.defineProperty(target, key, {\n        configurable: false,\n        enumerable: true,\n        value: values[key]\n      });\n    });\n    return target;\n  },\n  /**\n   * Checks that a value is a natural number, a positive integer or zero.\n   *\n   * @param {*} value\n   * @return {Boolean}\n   */\n  isNaturalNumber: function isNaturalNumber(value) {\n    return typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value &&\n      value >= 0;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3V0aWwvanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsUUFBUSxtQkFBTyxDQUFDLHFEQUFROztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLGdCQUFnQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLEdBQUc7QUFDaEIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9iaXRjb3JlLWxpYi9saWIvdXRpbC9qcy5qcz9hMDEwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgY29udGFpbnMgb25seSBoZXhhZGVjaW1hbCB2YWx1ZXNcbiAqXG4gKiBAbmFtZSBKU1V0aWwuaXNIZXhhXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHN0cmluZyBpcyB0aGUgaGV4YSByZXByZXNlbnRhdGlvbiBvZiBhIG51bWJlclxuICovXG52YXIgaXNIZXhhID0gZnVuY3Rpb24gaXNIZXhhKHZhbHVlKSB7XG4gIGlmICghXy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIC9eWzAtOWEtZkEtRl0rJC8udGVzdCh2YWx1ZSk7XG59O1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgSlNVdGlsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvKipcbiAgICogVGVzdCBpZiBhbiBhcmd1bWVudCBpcyBhIHZhbGlkIEpTT04gb2JqZWN0LiBJZiBpdCBpcywgcmV0dXJucyBhIHRydXRoeVxuICAgKiB2YWx1ZSAodGhlIGpzb24gb2JqZWN0IGRlY29kZWQpLCBzbyBubyBkb3VibGUgSlNPTi5wYXJzZSBjYWxsIGlzIG5lY2Vzc2FyeVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXJnXG4gICAqIEByZXR1cm4ge09iamVjdHxib29sZWFufSBmYWxzZSBpZiB0aGUgYXJndW1lbnQgaXMgbm90IGEgSlNPTiBzdHJpbmcuXG4gICAqL1xuICBpc1ZhbGlkSlNPTjogZnVuY3Rpb24gaXNWYWxpZEpTT04oYXJnKSB7XG4gICAgdmFyIHBhcnNlZDtcbiAgICBpZiAoIV8uaXNTdHJpbmcoYXJnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcGFyc2VkID0gSlNPTi5wYXJzZShhcmcpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZihwYXJzZWQpID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgaXNIZXhhOiBpc0hleGEsXG4gIGlzSGV4YVN0cmluZzogaXNIZXhhLFxuXG4gIC8qKlxuICAgKiBDbG9uZSBhbiBhcnJheVxuICAgKi9cbiAgY2xvbmVBcnJheTogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KGFycmF5KTtcbiAgfSxcblxuICAvKipcbiAgICogRGVmaW5lIGltbXV0YWJsZSBwcm9wZXJ0aWVzIG9uIGEgdGFyZ2V0IG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IC0gQW4gb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB0YXJnZXQgb2JqZWN0XG4gICAqL1xuICBkZWZpbmVJbW11dGFibGU6IGZ1bmN0aW9uIGRlZmluZUltbXV0YWJsZSh0YXJnZXQsIHZhbHVlcykge1xuICAgIE9iamVjdC5rZXlzKHZhbHVlcykuZm9yRWFjaChmdW5jdGlvbihrZXkpe1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZXNba2V5XVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSxcbiAgLyoqXG4gICAqIENoZWNrcyB0aGF0IGEgdmFsdWUgaXMgYSBuYXR1cmFsIG51bWJlciwgYSBwb3NpdGl2ZSBpbnRlZ2VyIG9yIHplcm8uXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzTmF0dXJhbE51bWJlcjogZnVuY3Rpb24gaXNOYXR1cmFsTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiZcbiAgICAgIGlzRmluaXRlKHZhbHVlKSAmJlxuICAgICAgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlICYmXG4gICAgICB2YWx1ZSA+PSAwO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/util/js.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js":
/*!************************************************************!*\
  !*** ./node_modules/bitcore-lib/lib/util/preconditions.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/bitcore-lib/lib/errors/index.js\");\nvar _ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n\nmodule.exports = {\n  checkState: function(condition, message) {\n    if (!condition) {\n      throw new errors.InvalidState(message);\n    }\n  },\n  checkArgument: function(condition, argumentName, message, docsPath) {\n    if (!condition) {\n      throw new errors.InvalidArgument(argumentName, message, docsPath);\n    }\n  },\n  checkArgumentType: function(argument, type, argumentName) {\n    argumentName = argumentName || '(unknown name)';\n    if (_.isString(type)) {\n      if (type === 'Buffer') {\n        var buffer = __webpack_require__(/*! buffer */ \"buffer\"); // './buffer' fails on cordova & RN\n        if (!buffer.Buffer.isBuffer(argument)) {\n          throw new errors.InvalidArgumentType(argument, type, argumentName);\n        }\n      } else if (typeof argument !== type && (argument && argument.constructor && argument.constructor.name !== type)) {\n        // Note that the constructor check is more reliable than the `instanceof` check below.\n        throw new errors.InvalidArgumentType(argument, type, argumentName);\n      }\n    } else {\n      if (!(argument instanceof type)) {\n        throw new errors.InvalidArgumentType(argument, type.name, argumentName);\n      }\n    }\n  },\n  isType: function(argument, type, argumentName) {\n    try {\n      this.checkArgumentType(argument, type, argumentName);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3V0aWwvcHJlY29uZGl0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMsdUVBQVc7QUFDaEMsUUFBUSxtQkFBTyxDQUFDLHFEQUFROztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsc0JBQVEsR0FBRztBQUN4QztBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbGliL3V0aWwvcHJlY29uZGl0aW9ucy5qcz83NTg5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrU3RhdGU6IGZ1bmN0aW9uKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRTdGF0ZShtZXNzYWdlKTtcbiAgICB9XG4gIH0sXG4gIGNoZWNrQXJndW1lbnQ6IGZ1bmN0aW9uKGNvbmRpdGlvbiwgYXJndW1lbnROYW1lLCBtZXNzYWdlLCBkb2NzUGF0aCkge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudChhcmd1bWVudE5hbWUsIG1lc3NhZ2UsIGRvY3NQYXRoKTtcbiAgICB9XG4gIH0sXG4gIGNoZWNrQXJndW1lbnRUeXBlOiBmdW5jdGlvbihhcmd1bWVudCwgdHlwZSwgYXJndW1lbnROYW1lKSB7XG4gICAgYXJndW1lbnROYW1lID0gYXJndW1lbnROYW1lIHx8ICcodW5rbm93biBuYW1lKSc7XG4gICAgaWYgKF8uaXNTdHJpbmcodHlwZSkpIHtcbiAgICAgIGlmICh0eXBlID09PSAnQnVmZmVyJykge1xuICAgICAgICB2YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJyk7IC8vICcuL2J1ZmZlcicgZmFpbHMgb24gY29yZG92YSAmIFJOXG4gICAgICAgIGlmICghYnVmZmVyLkJ1ZmZlci5pc0J1ZmZlcihhcmd1bWVudCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudFR5cGUoYXJndW1lbnQsIHR5cGUsIGFyZ3VtZW50TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ICE9PSB0eXBlICYmIChhcmd1bWVudCAmJiBhcmd1bWVudC5jb25zdHJ1Y3RvciAmJiBhcmd1bWVudC5jb25zdHJ1Y3Rvci5uYW1lICE9PSB0eXBlKSkge1xuICAgICAgICAvLyBOb3RlIHRoYXQgdGhlIGNvbnN0cnVjdG9yIGNoZWNrIGlzIG1vcmUgcmVsaWFibGUgdGhhbiB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrIGJlbG93LlxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudFR5cGUoYXJndW1lbnQsIHR5cGUsIGFyZ3VtZW50TmFtZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKGFyZ3VtZW50IGluc3RhbmNlb2YgdHlwZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRUeXBlKGFyZ3VtZW50LCB0eXBlLm5hbWUsIGFyZ3VtZW50TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpc1R5cGU6IGZ1bmN0aW9uKGFyZ3VtZW50LCB0eXBlLCBhcmd1bWVudE5hbWUpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5jaGVja0FyZ3VtZW50VHlwZShhcmd1bWVudCwgdHlwZSwgYXJndW1lbnROYW1lKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/lib/util/preconditions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/node_modules/bn.js/lib/bn.js":
/*!***************************************************************!*\
  !*** ./node_modules/bitcore-lib/node_modules/bn.js/lib/bn.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})( false || module, this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/node_modules/bn.js/lib/bn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/node_modules/bs58/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/bitcore-lib/node_modules/bs58/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var basex = __webpack_require__(/*! base-x */ \"(ssr)/./node_modules/bitcore-lib/node_modules/bs58/node_modules/base-x/src/index.js\")\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxtQkFBTyxDQUFDLG1HQUFRO0FBQzVCOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanM/MDU5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZXggPSByZXF1aXJlKCdiYXNlLXgnKVxudmFyIEFMUEhBQkVUID0gJzEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXonXG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZXgoQUxQSEFCRVQpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/node_modules/bs58/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/node_modules/bs58/node_modules/base-x/src/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/bitcore-lib/node_modules/bs58/node_modules/base-x/src/index.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer)\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbm9kZV9tb2R1bGVzL2JzNTgvbm9kZV9tb2R1bGVzL2Jhc2UteC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDRGQUE2QjtBQUMzQztBQUNBLGdDQUFnQztBQUNoQztBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkM7QUFDQTtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkM7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRTtBQUNqRSxxQ0FBcUM7QUFDckMsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsNkNBQTZDO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZLFNBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLCtCQUErQiw2Q0FBNkM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL25vZGVfbW9kdWxlcy9iczU4L25vZGVfbW9kdWxlcy9iYXNlLXgvc3JjL2luZGV4LmpzPzY2OGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG4vLyBiYXNlLXggZW5jb2RpbmcgLyBkZWNvZGluZ1xuLy8gQ29weXJpZ2h0IChjKSAyMDE4IGJhc2UteCBjb250cmlidXRvcnNcbi8vIENvcHlyaWdodCAoYykgMjAxNC0yMDE4IFRoZSBCaXRjb2luIENvcmUgZGV2ZWxvcGVycyAoYmFzZTU4LmNwcClcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgc29mdHdhcmUgbGljZW5zZSwgc2VlIHRoZSBhY2NvbXBhbnlpbmdcbi8vIGZpbGUgTElDRU5TRSBvciBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocC5cbi8vIEB0cy1pZ25vcmVcbnZhciBfQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbmZ1bmN0aW9uIGJhc2UgKEFMUEhBQkVUKSB7XG4gIGlmIChBTFBIQUJFVC5sZW5ndGggPj0gMjU1KSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscGhhYmV0IHRvbyBsb25nJykgfVxuICB2YXIgQkFTRV9NQVAgPSBuZXcgVWludDhBcnJheSgyNTYpXG4gIGZvciAodmFyIGogPSAwOyBqIDwgQkFTRV9NQVAubGVuZ3RoOyBqKyspIHtcbiAgICBCQVNFX01BUFtqXSA9IDI1NVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQUxQSEFCRVQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgeCA9IEFMUEhBQkVULmNoYXJBdChpKVxuICAgIHZhciB4YyA9IHguY2hhckNvZGVBdCgwKVxuICAgIGlmIChCQVNFX01BUFt4Y10gIT09IDI1NSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKHggKyAnIGlzIGFtYmlndW91cycpIH1cbiAgICBCQVNFX01BUFt4Y10gPSBpXG4gIH1cbiAgdmFyIEJBU0UgPSBBTFBIQUJFVC5sZW5ndGhcbiAgdmFyIExFQURFUiA9IEFMUEhBQkVULmNoYXJBdCgwKVxuICB2YXIgRkFDVE9SID0gTWF0aC5sb2coQkFTRSkgLyBNYXRoLmxvZygyNTYpIC8vIGxvZyhCQVNFKSAvIGxvZygyNTYpLCByb3VuZGVkIHVwXG4gIHZhciBpRkFDVE9SID0gTWF0aC5sb2coMjU2KSAvIE1hdGgubG9nKEJBU0UpIC8vIGxvZygyNTYpIC8gbG9nKEJBU0UpLCByb3VuZGVkIHVwXG4gIGZ1bmN0aW9uIGVuY29kZSAoc291cmNlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSB8fCBzb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7IHNvdXJjZSA9IF9CdWZmZXIuZnJvbShzb3VyY2UpIH1cbiAgICBpZiAoIV9CdWZmZXIuaXNCdWZmZXIoc291cmNlKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBCdWZmZXInKSB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHsgcmV0dXJuICcnIH1cbiAgICAgICAgLy8gU2tpcCAmIGNvdW50IGxlYWRpbmcgemVyb2VzLlxuICAgIHZhciB6ZXJvZXMgPSAwXG4gICAgdmFyIGxlbmd0aCA9IDBcbiAgICB2YXIgcGJlZ2luID0gMFxuICAgIHZhciBwZW5kID0gc291cmNlLmxlbmd0aFxuICAgIHdoaWxlIChwYmVnaW4gIT09IHBlbmQgJiYgc291cmNlW3BiZWdpbl0gPT09IDApIHtcbiAgICAgIHBiZWdpbisrXG4gICAgICB6ZXJvZXMrK1xuICAgIH1cbiAgICAgICAgLy8gQWxsb2NhdGUgZW5vdWdoIHNwYWNlIGluIGJpZy1lbmRpYW4gYmFzZTU4IHJlcHJlc2VudGF0aW9uLlxuICAgIHZhciBzaXplID0gKChwZW5kIC0gcGJlZ2luKSAqIGlGQUNUT1IgKyAxKSA+Pj4gMFxuICAgIHZhciBiNTggPSBuZXcgVWludDhBcnJheShzaXplKVxuICAgICAgICAvLyBQcm9jZXNzIHRoZSBieXRlcy5cbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kKSB7XG4gICAgICB2YXIgY2FycnkgPSBzb3VyY2VbcGJlZ2luXVxuICAgICAgICAgICAgLy8gQXBwbHkgXCJiNTggPSBiNTggKiAyNTYgKyBjaFwiLlxuICAgICAgdmFyIGkgPSAwXG4gICAgICBmb3IgKHZhciBpdDEgPSBzaXplIC0gMTsgKGNhcnJ5ICE9PSAwIHx8IGkgPCBsZW5ndGgpICYmIChpdDEgIT09IC0xKTsgaXQxLS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSAoMjU2ICogYjU4W2l0MV0pID4+PiAwXG4gICAgICAgIGI1OFtpdDFdID0gKGNhcnJ5ICUgQkFTRSkgPj4+IDBcbiAgICAgICAgY2FycnkgPSAoY2FycnkgLyBCQVNFKSA+Pj4gMFxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7IHRocm93IG5ldyBFcnJvcignTm9uLXplcm8gY2FycnknKSB9XG4gICAgICBsZW5ndGggPSBpXG4gICAgICBwYmVnaW4rK1xuICAgIH1cbiAgICAgICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lcyBpbiBiYXNlNTggcmVzdWx0LlxuICAgIHZhciBpdDIgPSBzaXplIC0gbGVuZ3RoXG4gICAgd2hpbGUgKGl0MiAhPT0gc2l6ZSAmJiBiNThbaXQyXSA9PT0gMCkge1xuICAgICAgaXQyKytcbiAgICB9XG4gICAgICAgIC8vIFRyYW5zbGF0ZSB0aGUgcmVzdWx0IGludG8gYSBzdHJpbmcuXG4gICAgdmFyIHN0ciA9IExFQURFUi5yZXBlYXQoemVyb2VzKVxuICAgIGZvciAoOyBpdDIgPCBzaXplOyArK2l0MikgeyBzdHIgKz0gQUxQSEFCRVQuY2hhckF0KGI1OFtpdDJdKSB9XG4gICAgcmV0dXJuIHN0clxuICB9XG4gIGZ1bmN0aW9uIGRlY29kZVVuc2FmZSAoc291cmNlKSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdzdHJpbmcnKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFN0cmluZycpIH1cbiAgICBpZiAoc291cmNlLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gX0J1ZmZlci5hbGxvYygwKSB9XG4gICAgdmFyIHBzeiA9IDBcbiAgICAgICAgLy8gU2tpcCBhbmQgY291bnQgbGVhZGluZyAnMSdzLlxuICAgIHZhciB6ZXJvZXMgPSAwXG4gICAgdmFyIGxlbmd0aCA9IDBcbiAgICB3aGlsZSAoc291cmNlW3Bzel0gPT09IExFQURFUikge1xuICAgICAgemVyb2VzKytcbiAgICAgIHBzeisrXG4gICAgfVxuICAgICAgICAvLyBBbGxvY2F0ZSBlbm91Z2ggc3BhY2UgaW4gYmlnLWVuZGlhbiBiYXNlMjU2IHJlcHJlc2VudGF0aW9uLlxuICAgIHZhciBzaXplID0gKCgoc291cmNlLmxlbmd0aCAtIHBzeikgKiBGQUNUT1IpICsgMSkgPj4+IDAgLy8gbG9nKDU4KSAvIGxvZygyNTYpLCByb3VuZGVkIHVwLlxuICAgIHZhciBiMjU2ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgICAgLy8gUHJvY2VzcyB0aGUgY2hhcmFjdGVycy5cbiAgICB3aGlsZSAocHN6IDwgc291cmNlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gRGVjb2RlIGNoYXJhY3RlclxuICAgICAgdmFyIGNhcnJ5ID0gQkFTRV9NQVBbc291cmNlLmNoYXJDb2RlQXQocHN6KV1cbiAgICAgICAgICAgIC8vIEludmFsaWQgY2hhcmFjdGVyXG4gICAgICBpZiAoY2FycnkgPT09IDI1NSkgeyByZXR1cm4gfVxuICAgICAgdmFyIGkgPSAwXG4gICAgICBmb3IgKHZhciBpdDMgPSBzaXplIC0gMTsgKGNhcnJ5ICE9PSAwIHx8IGkgPCBsZW5ndGgpICYmIChpdDMgIT09IC0xKTsgaXQzLS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSAoQkFTRSAqIGIyNTZbaXQzXSkgPj4+IDBcbiAgICAgICAgYjI1NltpdDNdID0gKGNhcnJ5ICUgMjU2KSA+Pj4gMFxuICAgICAgICBjYXJyeSA9IChjYXJyeSAvIDI1NikgPj4+IDBcbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vbi16ZXJvIGNhcnJ5JykgfVxuICAgICAgbGVuZ3RoID0gaVxuICAgICAgcHN6KytcbiAgICB9XG4gICAgICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXMgaW4gYjI1Ni5cbiAgICB2YXIgaXQ0ID0gc2l6ZSAtIGxlbmd0aFxuICAgIHdoaWxlIChpdDQgIT09IHNpemUgJiYgYjI1NltpdDRdID09PSAwKSB7XG4gICAgICBpdDQrK1xuICAgIH1cbiAgICB2YXIgdmNoID0gX0J1ZmZlci5hbGxvY1Vuc2FmZSh6ZXJvZXMgKyAoc2l6ZSAtIGl0NCkpXG4gICAgdmNoLmZpbGwoMHgwMCwgMCwgemVyb2VzKVxuICAgIHZhciBqID0gemVyb2VzXG4gICAgd2hpbGUgKGl0NCAhPT0gc2l6ZSkge1xuICAgICAgdmNoW2orK10gPSBiMjU2W2l0NCsrXVxuICAgIH1cbiAgICByZXR1cm4gdmNoXG4gIH1cbiAgZnVuY3Rpb24gZGVjb2RlIChzdHJpbmcpIHtcbiAgICB2YXIgYnVmZmVyID0gZGVjb2RlVW5zYWZlKHN0cmluZylcbiAgICBpZiAoYnVmZmVyKSB7IHJldHVybiBidWZmZXIgfVxuICAgIHRocm93IG5ldyBFcnJvcignTm9uLWJhc2UnICsgQkFTRSArICcgY2hhcmFjdGVyJylcbiAgfVxuICByZXR1cm4ge1xuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGRlY29kZVVuc2FmZTogZGVjb2RlVW5zYWZlLFxuICAgIGRlY29kZTogZGVjb2RlXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gYmFzZVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/node_modules/bs58/node_modules/base-x/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/node_modules/inherits/inherits.js":
/*!********************************************************************!*\
  !*** ./node_modules/bitcore-lib/node_modules/inherits/inherits.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! util */ \"util\").inherits\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYml0Y29yZS1saWIvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlFQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2JpdGNvcmUtbGliL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0cy5qcz8zNjM2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bitcore-lib/node_modules/inherits/inherits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bitcore-lib/package.json":
/*!***********************************************!*\
  !*** ./node_modules/bitcore-lib/package.json ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"bitcore-lib","version":"10.3.0","description":"A pure and powerful JavaScript Bitcoin library.","author":"BitPay <dev@bitpay.com>","main":"index.js","scripts":{"test":"gulp test","test:ci":"npm run test","coverage":"gulp coverage","build":"gulp","pub":"npm run build && npm publish"},"keywords":["bitcoin","transaction","address","p2p","ecies","cryptocurrency","blockchain","payment","bip21","bip32","bip37","bip69","bip70","multisig"],"repository":{"type":"git","url":"https://github.com/bitpay/bitcore/tree/master/packages/bitcore-lib"},"browser":{"request":"browser-request"},"dependencies":{"bech32":"=2.0.0","bn.js":"=4.11.8","bs58":"^4.0.1","buffer-compare":"=1.1.1","elliptic":"^6.5.3","inherits":"=2.0.1","lodash":"^4.17.20"},"devDependencies":{"bitcore-build":"^10.0.21","brfs":"^2.0.1","chai":"^4.2.0","gulp":"^4.0.0","sinon":"^7.1.1"},"license":"MIT","gitHead":"eafcf339de16d7b29642597c65670388825c306c"}');

/***/ })

};
;