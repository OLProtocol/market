"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./api/ordx.ts":
/*!*********************!*\
  !*** ./api/ordx.ts ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkNsNames: function() { return /* binding */ checkNsNames; },\n/* harmony export */   getNsName: function() { return /* binding */ getNsName; },\n/* harmony export */   ordx: function() { return /* binding */ ordx; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _mempool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mempool */ \"(app-pages-browser)/./api/mempool.ts\");\n/**\n * @author hugh\n * @email ygz14835187@163.com\n * @create date 2024-06-23 18:04:10\n * @modify date 2024-06-23 18:04:10\n * @desc [description]\n */ \n\n// axios.defaults.headers.common['Authorization'] = process.env.NEXT_PUBLIC_ORDX_API_AUTHORIZATION;\nconst generateUrl = (url, network)=>{\n    url = \"\".concat(\"https://apiprd.sat20.org\").concat(network === \"testnet\" ? \"/testnet4\" : \"/mainnet\", \"/\").concat(url);\n    console.log(\"hostname\", location.hostname);\n    if (location.hostname.indexOf(\"test\") > -1) {\n        url = url.replace(\"apiprd\", \"apidev\");\n    } else if (location.hostname.indexOf(\"dev\") > -1) {\n        url = url.replace(\"apiprd\", \"apidev\");\n    }\n    return url;\n};\nconst responseParse = async (response)=>{\n    const { code, msg, data } = (response === null || response === void 0 ? void 0 : response.data) || {};\n    if (code === 0) {\n        return response === null || response === void 0 ? void 0 : response.data;\n    } else {\n        console.log(\"error: \" + msg);\n    }\n};\nconst getOrdxStatusList = async (params)=>{\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"tick/status?start=\".concat(params.start, \"&limit=\").concat(params.limit), params.network));\n    return data;\n};\nconst fetchChainFeeRate = async (network)=>{\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"extension/default/fee-summary\", network));\n    return data;\n};\nconst health = async (param)=>{\n    let { network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"health\", network));\n    return data;\n};\nconst getOrdxInfo = async (param)=>{\n    let { tick, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"tick/info/\".concat(tick), network), {\n        timeout: 10000\n    });\n    return data;\n};\nconst getTickDeploy = async (param)=>{\n    let { tick, address, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"deploy/\".concat(tick, \"/\").concat(address), network), {\n        timeout: 10000\n    });\n    return data;\n};\nconst exoticUtxo = async (param)=>{\n    let { utxo, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"exotic/utxo/\".concat(utxo), network), {\n        timeout: 10000\n    });\n    return data;\n};\nconst getNsListByAddress = async (param)=>{\n    let { address, network, limit = 100 } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"ns/address/\".concat(address, \"?start=0&limit=\").concat(limit), network), {\n        timeout: 10000\n    });\n    return data;\n};\nconst getNsListStatus = async (param)=>{\n    let { network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"ns/status?start=0&limit=1\", network), {\n        timeout: 10000\n    });\n    return data;\n};\nconst getOrdxSummary = async (param)=>{\n    let { address, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"address/summary/\".concat(address), network));\n    return data;\n};\nconst getBestHeight = async (param)=>{\n    let { network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"bestheight\", network));\n    return data;\n};\nconst getHeightInfo = async (param)=>{\n    let { height, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"height/\".concat(height), network));\n    return data;\n};\nconst getOrdxTickHolders = async (param)=>{\n    let { tick, network, start, limit } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"tick/holders/\".concat(tick, \"?start=\").concat(start, \"&limit=\").concat(limit), network));\n    return data;\n};\nconst getOrdxAddressHistory = async (param)=>{\n    let { address, ticker, network, start, limit } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"address/history/\".concat(address, \"/\").concat(ticker, \"?start=\").concat(start, \"&limit=\").concat(limit), network));\n    return data;\n};\nconst getOrdxNsUxtos = async (param)=>{\n    let { address, sub, network, start, limit } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"ns/address/\".concat(address, \"/\").concat(sub), network));\n    return data;\n};\nconst getOrdxAddressHolders = async (param)=>{\n    let { address, ticker, network, start, limit } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"address/utxolist/\".concat(address, \"/\").concat(ticker, \"?start=\").concat(start, \"&limit=\").concat(limit), network));\n    return data;\n};\nconst getOrdxTickHistory = async (param)=>{\n    let { start, limit, ticker, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"tick/history/\".concat(ticker, \"?start=\").concat(start, \"&limit=\").concat(limit), network));\n    return data;\n};\nconst getUtxoByValue = async (param)=>{\n    let { address, value = 600, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"utxo/address/\".concat(address, \"/\").concat(value), network));\n    return data;\n};\n// server端无此接口\nconst savePaidOrder = async (param)=>{\n    let { key, content, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(generateUrl(\"v1/indexer/tx/putkv/\".concat(key), network), {\n        key,\n        content: JSON.stringify(content)\n    });\n    return data;\n};\nconst getInscriptiontInfo = async (param)=>{\n    let { inscriptionId, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"mint/details/\".concat(inscriptionId), network));\n    return data;\n};\nconst getAllUtxos = async (param)=>{\n    let { address, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"allutxos/address/\".concat(address), network));\n    return data;\n};\nconst getTickerPermission = async (param)=>{\n    let { address, ticker, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"mint/permission/\".concat(ticker, \"/\").concat(address), network));\n    return data;\n};\nconst getAppVersion = async ()=>{\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(\"/version.txt\");\n    return data;\n};\nconst getTxStatus = async (param)=>{\n    let { txid, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(\"https://blockstream.info/\".concat(network === \"testnet\" ? \"testnet/\" : \"\", \"api/tx/\").concat(txid));\n    return data;\n};\nconst getTxHex = async (param)=>{\n    let { txid, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"btc/rawtx/\".concat(txid), network));\n    return data;\n};\nconst getSats = async (param)=>{\n    let { address, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"exotic/address/\".concat(address), network));\n    return data;\n};\nconst getSplittedSats = async (param)=>{\n    let { ticker, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(// generateUrl(`v1/indexer/ordx/${ticker}/splittedInscriptions`, network),\n    generateUrl(\"splittedInscriptions/\".concat(ticker), network));\n    return data;\n};\nconst getAssetByUtxo = async (param)=>{\n    let { utxo, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"utxo/abbrassets/\".concat(utxo), network));\n    return data;\n};\nconst getSeedByUtxo = async (param)=>{\n    let { utxo, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"utxo/seed/\".concat(utxo), network));\n    return data;\n};\nconst getUtxoByType = async (param)=>{\n    let { address, type, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"exotic/address/\".concat(address, \"/\").concat(type), network));\n    return data;\n};\nconst getSatsByAddress = async (param)=>{\n    let { address, sats, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(generateUrl(\"sat/FindSatsInAddress\", network), {\n        address: address,\n        sats: sats\n    });\n    return data;\n};\nconst getSatsByUtxo = async (param)=>{\n    let { utxo, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"exotic/utxo/\".concat(utxo), network));\n    return data;\n};\nconst getSatTypes = async (param)=>{\n    let { network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"info/satributes\", network));\n    return data;\n};\nconst getUtxo = async (param)=>{\n    let { utxo, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"utxo/assets/\".concat(utxo), network));\n    return data;\n};\nconst getOrdinalsAssets = async (param)=>{\n    let { address, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(\"https://\".concat(network === \"testnet\" ? \"testnet4\" : \"mainnet\", \"-ordinals.sat20.org/address/\").concat(address), {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n        }\n    });\n    return data;\n};\nconst pushTx = async (param)=>{\n    let { hex, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(generateUrl(\"btc/tx\", network), {\n        SignedTxHex: hex\n    });\n    if (data.code === 0) {\n        return data.data;\n    } else {\n        throw new Error(data.msg);\n    }\n};\nconst getNsName = async (param)=>{\n    let { name, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(generateUrl(\"ns/name/\".concat(name), network));\n    return data;\n};\nconst checkNsNames = async (param)=>{\n    let { names, network } = param;\n    const { data } = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(generateUrl(\"ns/check\", network), {\n        Names: names\n    });\n    return data;\n};\nasync function pollGetTxStatus(txid, network) {\n    let delay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2000, retryCount = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 30;\n    try {\n        const result = await _mempool__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTxHex(txid, network);\n        if (result) {\n            console.log(\"getTxStatus succeeded, stopping poll.\");\n            console.log(result);\n            return result;\n        } else if (retryCount > 0) {\n            console.log(\"getTxStatus returned no result, retrying...\");\n            return new Promise((resolve)=>{\n                setTimeout(()=>resolve(pollGetTxStatus(txid, network, delay, retryCount - 1)), delay);\n            });\n        } else {\n            throw new Error(\"Maximum retry attempts exceeded\");\n        }\n    } catch (error) {\n        if (retryCount > 0) {\n            console.error(\"getTxStatus failed, retrying...\");\n            return new Promise((resolve)=>{\n                setTimeout(()=>resolve(pollGetTxStatus(txid, network, delay, retryCount - 1)), delay);\n            });\n        } else {\n            throw new Error(\"Maximum retry attempts exceeded\");\n        }\n    }\n}\nconst ordx = {\n    getOrdxStatusList,\n    health,\n    getOrdxInfo,\n    getOrdxSummary,\n    getOrdxTickHolders,\n    getOrdxAddressHistory,\n    getOrdxAddressHolders,\n    getOrdxTickHistory,\n    getUtxoByValue,\n    savePaidOrder,\n    getInscriptiontInfo,\n    getAppVersion,\n    getTxStatus,\n    getSats,\n    getSplittedSats,\n    getAssetByUtxo,\n    getSeedByUtxo,\n    getUtxoByType,\n    getSatsByAddress,\n    getSatsByUtxo,\n    getSatTypes,\n    getUtxo,\n    pollGetTxStatus,\n    exoticUtxo,\n    getHeightInfo,\n    getNsListByAddress,\n    getNsName,\n    checkNsNames,\n    getBestHeight,\n    getTickerPermission,\n    pushTx,\n    getTickDeploy,\n    fetchChainFeeRate,\n    getTxHex,\n    getNsListStatus,\n    getAllUtxos,\n    getOrdinalsAssets\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./api/ordx.ts\n"));

/***/ })

});